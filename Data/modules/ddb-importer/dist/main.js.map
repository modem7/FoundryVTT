{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,MAAM,wCAAwC;AAC9C,MAAM,uCAAuC;AAC7C,MAAM,uCAAuC;AAC7C,MAAM,qCAAqC;AAC3C,MAAM,sCAAsC;AAC5C,MAAM,2CAA2C;AACjD;AACA;AACA,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,6BAA6B;AACnC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,4BAA4B;AAClC;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B,QAAQ,8BAA8B;AACtC,QAAQ,oBAAoB;AAC5B,QAAQ,6BAA6B;AACrC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,2BAA2B;AACnC,QAAQ,6BAA6B;AACrC,QAAQ,wBAAwB;AAChC,QAAQ,0BAA0B;AAClC,QAAQ,uBAAuB;AAC/B,QAAQ,uBAAuB;AAC/B;AACA;AACA,QAAQ,sBAAsB;AAC9B,QAAQ,uBAAuB;AAC/B,QAAQ,wBAAwB;AAChC,QAAQ,qBAAqB;AAC7B,QAAQ,qBAAqB;AAC7B,QAAQ,uBAAuB;AAC/B;AACA,GAAG;AACH;AACA,MAAM,oBAAoB;AAC1B,MAAM,8BAA8B;AACpC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,oBAAoB;AAC1B,MAAM,6BAA6B;AACnC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,oCAAoC;AAC1C,MAAM,+BAA+B;AACrC,MAAM,mBAAmB;AACzB,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,yBAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,MAAM,mHAAmH;AACzH,MAAM,mHAAmH;AACzH,MAAM,sHAAsH;AAC5H,MAAM,uGAAuG;AAC7G,MAAM,qHAAqH;AAC3H,MAAM,qHAAqH;AAC3H,MAAM,qHAAqH;AAC3H,MAAM,qHAAqH;AAC3H,MAAM,qHAAqH;AAC3H,MAAM,qHAAqH;AAC3H,MAAM,4HAA4H;AAClI,MAAM,sHAAsH;AAC5H,MAAM,qIAAqI;AAC3I,MAAM,yHAAyH;AAC/H,MAAM,yHAAyH;AAC/H,MAAM,0HAA0H;AAChI,MAAM,uHAAuH;AAC7H,MAAM,8GAA8G;AACpH,MAAM,6HAA6H;AACnI,MAAM,oHAAoH;AAC1H,MAAM,gIAAgI;AACtI,MAAM,mGAAmG;AACzG,MAAM,kGAAkG;AACxG;AACA;AACA;AACA,QAAQ,uCAAuC;AAC/C,QAAQ,wCAAwC;AAChD,QAAQ,2CAA2C;AACnD,QAAQ,2CAA2C;AACnD,QAAQ,qCAAqC;AAC7C,QAAQ,uCAAuC;AAC/C;AACA;AACA,QAAQ,qFAAqF;AAC7F,QAAQ,gGAAgG;AACxG,QAAQ,6EAA6E;AACrF,QAAQ,mFAAmF;AAC3F,QAAQ,oFAAoF;AAC5F,QAAQ,+EAA+E;AACvF,QAAQ,gFAAgF;AACxF,QAAQ,0FAA0F;AAClG,QAAQ,2FAA2F;AACnG,QAAQ,kFAAkF;AAC1F,QAAQ,6EAA6E;AACrF,QAAQ,sFAAsF;AAC9F,QAAQ,wFAAwF;AAChG,QAAQ,sFAAsF;AAC9F,QAAQ,kFAAkF;AAC1F,QAAQ,+FAA+F;AACvG,QAAQ,+EAA+E;AACvF,QAAQ,kFAAkF;AAC1F;AACA;AACA;AACA;AACA,QAAQ,yBAAyB;AACjC,QAAQ,2BAA2B;AACnC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC;AACA;AACA,QAAQ,yCAAyC;AACjD,QAAQ,0CAA0C;AAClD,QAAQ,0CAA0C;AAClD,QAAQ,4CAA4C;AACpD,QAAQ,0CAA0C;AAClD,QAAQ,6CAA6C;AACrD,QAAQ,yCAAyC;AACjD,QAAQ,0CAA0C;AAClD,QAAQ,0CAA0C;AAClD;AACA;AACA,QAAQ,oCAAoC;AAC5C,QAAQ,mCAAmC;AAC3C,QAAQ,qCAAqC;AAC7C,QAAQ,mCAAmC;AAC3C,QAAQ,oCAAoC;AAC5C,QAAQ,yCAAyC;AACjD;AACA;AACA,QAAQ,2BAA2B;AACnC,QAAQ,2BAA2B;AACnC,QAAQ,4BAA4B;AACpC;AACA;AACA,QAAQ,wCAAwC;AAChD,QAAQ,4CAA4C;AACpD,QAAQ,0CAA0C;AAClD,QAAQ,sCAAsC;AAC9C,QAAQ,yCAAyC;AACjD;AACA;AACA,QAAQ,iCAAiC;AACzC,QAAQ,uCAAuC;AAC/C,QAAQ,mCAAmC;AAC3C,QAAQ,+BAA+B;AACvC,QAAQ,+BAA+B;AACvC,QAAQ,uCAAuC;AAC/C,QAAQ,oCAAoC;AAC5C,QAAQ,qCAAqC;AAC7C,QAAQ,mCAAmC;AAC3C,QAAQ,qCAAqC;AAC7C,QAAQ,iCAAiC;AACzC,QAAQ,+BAA+B;AACvC,QAAQ,6BAA6B;AACrC,QAAQ,mCAAmC;AAC3C,QAAQ,iCAAiC;AACzC,QAAQ,+BAA+B;AACvC,QAAQ,qCAAqC;AAC7C,QAAQ,+BAA+B;AACvC,QAAQ,qCAAqC;AAC7C,QAAQ,2BAA2B;AACnC,QAAQ,yCAAyC;AACjD,QAAQ,iCAAiC;AACzC,QAAQ,iCAAiC;AACzC,QAAQ,sCAAsC;AAC9C,QAAQ,sCAAsC;AAC9C,QAAQ,2CAA2C;AACnD;AACA;AACA,QAAQ,qCAAqC;AAC7C,QAAQ,qCAAqC;AAC7C,QAAQ,uCAAuC;AAC/C,QAAQ,qCAAqC;AAC7C,QAAQ,uCAAuC;AAC/C,QAAQ,yCAAyC;AACjD,QAAQ,iCAAiC;AACzC;AACA;AACA,QAAQ,+EAA+E;AACvF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,2EAA2E;AACnF,QAAQ,uEAAuE;AAC/E,QAAQ,qEAAqE;AAC7E,QAAQ,iEAAiE;AACzE,QAAQ,uEAAuE;AAC/E,QAAQ,iEAAiE;AACzE,QAAQ,0EAA0E;AAClF,QAAQ,kEAAkE;AAC1E,QAAQ,wEAAwE;AAChF,QAAQ,qJAAqJ;AAC7J,QAAQ,yKAAyK;AACjL,QAAQ,2KAA2K;AACnL,WAAW,+JAA+J;AAC1K,QAAQ,8EAA8E;AACtF,QAAQ,wEAAwE;AAChF,QAAQ,wEAAwE;AAChF,QAAQ,0EAA0E;AAClF,QAAQ,sEAAsE;AAC9E,QAAQ,oEAAoE;AAC5E,QAAQ,gEAAgE;AACxE,QAAQ,sEAAsE;AAC9E,QAAQ,gEAAgE;AACxE,QAAQ,wEAAwE;AAChF,QAAQ,gEAAgE;AACxE,QAAQ,sEAAsE;AAC9E,QAAQ,mJAAmJ;AAC3J,QAAQ,uKAAuK;AAC/K,QAAQ,yKAAyK;AACjL,WAAW,6JAA6J;AACxK,QAAQ,mFAAmF;AAC3F,QAAQ,6EAA6E;AACrF,QAAQ,6EAA6E;AACrF,QAAQ,+EAA+E;AACvF,QAAQ,2EAA2E;AACnF,QAAQ,yEAAyE;AACjF,QAAQ,qEAAqE;AAC7E,QAAQ,2EAA2E;AACnF,QAAQ,qEAAqE;AAC7E,QAAQ,6EAA6E;AACrF,QAAQ,qEAAqE;AAC7E,QAAQ,2EAA2E;;AAEnF,QAAQ,oEAAoE;AAC5E,QAAQ,kEAAkE;AAC1E,QAAQ,uEAAuE;AAC/E,QAAQ,6DAA6D;AACrE,QAAQ,oEAAoE;AAC5E,QAAQ,mFAAmF;;AAE3F,QAAQ,qEAAqE;AAC7E,QAAQ,qEAAqE;AAC7E,QAAQ,uEAAuE;AAC/E,QAAQ,2EAA2E;AACnF,QAAQ,2EAA2E;AACnF,QAAQ,uEAAuE;AAC/E,QAAQ,iFAAiF;AACzF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,0EAA0E;AAClF,QAAQ,wEAAwE;AAChF,QAAQ,kEAAkE;AAC1E,QAAQ,4EAA4E;AACpF,QAAQ,sEAAsE;AAC9E,QAAQ,8EAA8E;AACtF;AACA,QAAQ,iGAAiG;AACzG;AACA;AACA;AACA,QAAQ,gEAAgE;AACxE,QAAQ,4DAA4D;AACpE,QAAQ,kDAAkD;AAC1D,QAAQ,uDAAuD;AAC/D,QAAQ,wDAAwD;AAChE,QAAQ,sDAAsD;AAC9D,QAAQ,6DAA6D;AACrE,QAAQ,6DAA6D;AACrE,QAAQ,4DAA4D;AACpE,QAAQ,0DAA0D;AAClE,QAAQ,2DAA2D;AACnE,QAAQ,uDAAuD;AAC/D,QAAQ,sDAAsD;AAC9D,QAAQ,8DAA8D;;AAEtE;AACA,QAAQ,qFAAqF;AAC7F,QAAQ,6EAA6E;AACrF,QAAQ,4EAA4E;AACpF,QAAQ,gFAAgF;AACxF,QAAQ,0EAA0E;AAClF,QAAQ,+EAA+E;AACvF,QAAQ,6EAA6E;AACrF,QAAQ,6EAA6E;AACrF,QAAQ,kFAAkF;AAC1F,QAAQ,0EAA0E;AAClF,QAAQ,kFAAkF;AAC1F,QAAQ,4EAA4E;AACpF,QAAQ,2EAA2E;AACnF,QAAQ,qFAAqF;AAC7F,QAAQ,0EAA0E;AAClF,QAAQ,8EAA8E;AACtF,QAAQ,2EAA2E;AACnF,QAAQ,gFAAgF;AACxF,QAAQ,4EAA4E;AACpF,QAAQ,+EAA+E;AACvF,QAAQ,iFAAiF;AACzF,QAAQ,8EAA8E;AACtF,QAAQ,4EAA4E;AACpF,QAAQ,2EAA2E;AACnF,QAAQ,kFAAkF;AAC1F,QAAQ,2EAA2E;AACnF,QAAQ,6EAA6E;AACrF,QAAQ,+EAA+E;AACvF,QAAQ,iFAAiF;AACzF,QAAQ,8EAA8E;AACtF,QAAQ,+EAA+E;AACvF,QAAQ,gFAAgF;AACxF,QAAQ,2EAA2E;AACnF,QAAQ,8EAA8E;AACtF,QAAQ,sFAAsF;AAC9F,QAAQ,8EAA8E;AACtF,QAAQ,0EAA0E;AAClF,QAAQ,+EAA+E;AACvF,QAAQ,2EAA2E;AACnF,QAAQ,6EAA6E;AACrF,QAAQ,6EAA6E;AACrF,QAAQ,wFAAwF;AAChG,QAAQ,+EAA+E;AACvF,QAAQ,qFAAqF;AAC7F,QAAQ,uFAAuF;AAC/F,QAAQ,8EAA8E;AACtF,QAAQ,mFAAmF;AAC3F,QAAQ,uFAAuF;AAC/F,QAAQ,kFAAkF;AAC1F,QAAQ,6FAA6F;AACrG,QAAQ,sGAAsG;AAC9G,QAAQ,gFAAgF;;AAExF;AACA,QAAQ,6HAA6H;AACrI,QAAQ,mIAAmI;AAC3I,QAAQ,yHAAyH;AACjI,QAAQ,sHAAsH;AAC9H,QAAQ,iIAAiI;AACzI,QAAQ,yHAAyH;AACjI,QAAQ,qIAAqI;AAC7I,QAAQ,qHAAqH;AAC7H,QAAQ,qHAAqH;AAC7H,QAAQ,uHAAuH;AAC/H,QAAQ,qHAAqH;AAC7H,QAAQ,mHAAmH;AAC3H,QAAQ,uHAAuH;AAC/H,QAAQ,uHAAuH;AAC/H,QAAQ,+HAA+H;AACvI,QAAQ,2GAA2G;AACnH,QAAQ,mHAAmH;AAC3H,QAAQ,mHAAmH;AAC3H,QAAQ,wHAAwH;AAChI,QAAQ,oGAAoG;AAC5G,QAAQ,oGAAoG;AAC5G,QAAQ,qGAAqG;AAC7G,QAAQ,sGAAsG;AAC9G,QAAQ,wHAAwH;AAChI,QAAQ,iHAAiH;AACzH,QAAQ,gHAAgH;AACxH,QAAQ,wHAAwH;AAChI,QAAQ,kHAAkH;AAC1H,QAAQ,6GAA6G;AACrH,QAAQ,iHAAiH;AACzH,QAAQ,gHAAgH;AACxH,QAAQ,gHAAgH;AACxH,QAAQ,gHAAgH;AACxH,QAAQ,gHAAgH;AACxH,QAAQ,iHAAiH;AACzH,QAAQ,6GAA6G;AACrH,QAAQ,gHAAgH;AACxH,QAAQ,8GAA8G;AACtH,QAAQ,+GAA+G;AACvH,QAAQ,8GAA8G;AACtH,QAAQ,gHAAgH;AACxH,QAAQ,+GAA+G;AACvH,QAAQ,+GAA+G;AACvH,QAAQ,+GAA+G;AACvH,QAAQ,yHAAyH;AACjI,QAAQ,mHAAmH;AAC3H,QAAQ,+HAA+H;AACvI,QAAQ,qHAAqH;AAC7H,QAAQ,4GAA4G;AACpH,QAAQ,0GAA0G;AAClH,QAAQ,8GAA8G;AACtH;AACA;AACA,QAAQ,gCAAgC;AACxC,QAAQ,gCAAgC;AACxC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,QAAQ,0BAA0B;AAClC,aAAa,0BAA0B;AACvC,QAAQ,4BAA4B;AACpC,QAAQ,6BAA6B;AACrC;AACA,GAAG;AACH;AACA,MAAM,4HAA4H;AAClI,MAAM,8HAA8H;AACpI,MAAM,0HAA0H;AAChI,MAAM,wHAAwH;AAC9H,MAAM,8HAA8H;AACpI,MAAM,4HAA4H;AAClI,MAAM,0HAA0H;AAChI,MAAM,8HAA8H;AACpI,MAAM,2IAA2I;AACjJ;AACA;AACA,MAAM,2IAA2I;AACjJ,MAAM,mHAAmH;AACzH,MAAM,2HAA2H;AACjI,MAAM,iIAAiI;AACvI,MAAM,uHAAuH;AAC7H,MAAM,mIAAmI;AACzI,MAAM,qIAAqI;AAC3I,MAAM,+HAA+H;AACrI,MAAM,uHAAuH;AAC7H,MAAM,qHAAqH;AAC3H,MAAM,uHAAuH;AAC7H,MAAM,6HAA6H;AACnI;AACA,MAAM,yHAAyH;AAC/H;AACA;AACA;AACA,QAAQ,4CAA4C;AACpD,QAAQ,8CAA8C;AACtD,QAAQ,4CAA4C;AACpD,QAAQ,wCAAwC;AAChD,QAAQ,uCAAuC;AAC/C,QAAQ,gDAAgD;AACxD,QAAQ,iDAAiD;AACzD,QAAQ,+CAA+C;AACvD,QAAQ,6CAA6C;AACrD;AACA,GAAG;AACH;AACA;AACA,QAAQ,2BAA2B;AACnC,QAAQ,2BAA2B;AACnC,QAAQ,8BAA8B;AACtC;AACA;AACA,QAAQ,gCAAgC;AACxC,QAAQ,iCAAiC;AACzC,QAAQ,iCAAiC;AACzC,QAAQ,gCAAgC;AACxC;AACA;AACA,QAAQ,kCAAkC;AAC1C,QAAQ,6CAA6C;AACrD,QAAQ,+BAA+B;AACvC,QAAQ,6BAA6B;AACrC,QAAQ,6BAA6B;AACrC,QAAQ,+BAA+B;AACvC,QAAQ,6BAA6B;AACrC,QAAQ,6BAA6B;AACrC,QAAQ,8BAA8B;AACtC,QAAQ,+BAA+B;AACvC,QAAQ,8BAA8B;AACtC,QAAQ,kCAAkC;AAC1C,QAAQ,iCAAiC;AACzC,QAAQ,iCAAiC;AACzC,QAAQ,6BAA6B;AACrC,QAAQ,kCAAkC;AAC1C,QAAQ,+BAA+B;AACvC,QAAQ,gCAAgC;AACxC;AACA,GAAG;AACH;AACA;AACA,QAAQ,sBAAsB;AAC9B,QAAQ,wBAAwB;AAChC,QAAQ,wBAAwB;AAChC,QAAQ,uBAAuB;AAC/B,QAAQ,0BAA0B;AAClC,QAAQ,wBAAwB;AAChC,QAAQ,wBAAwB;AAChC,QAAQ,sBAAsB;AAC9B,QAAQ,yBAAyB;AACjC;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,QAAQ,oCAAoC;AAC5C,QAAQ,oCAAoC;AAC5C;AACA;AACA,QAAQ,4BAA4B;AACpC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,qBAAqB;AAC7B,QAAQ,qBAAqB;AAC7B,QAAQ,qBAAqB;AAC7B,QAAQ,0BAA0B;AAClC,QAAQ,wBAAwB;AAChC,QAAQ,wBAAwB;AAChC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,uBAAuB;AAC/B,QAAQ,sBAAsB;AAC9B;AACA;AACA,QAAQ,sBAAsB;AAC9B,QAAQ,kBAAkB;AAC1B,QAAQ,kBAAkB;AAC1B,QAAQ,sBAAsB;AAC9B;AACA;AACA,GAAG;AACH;AACA;AACA,QAAQ,2IAA2I;AACnJ,QAAQ,6IAA6I;AACrJ,QAAQ,2IAA2I;AACnJ,QAAQ,6IAA6I;AACrJ,QAAQ,yIAAyI;AACjJ,QAAQ,uIAAuI;AAC/I,QAAQ,2IAA2I;AACnJ,QAAQ,iJAAiJ;AACzJ;AACA;AACA,QAAQ,uCAAuC;AAC/C,QAAQ,4CAA4C;AACpD,QAAQ,6BAA6B;AACrC,QAAQ,kCAAkC;AAC1C,QAAQ,qCAAqC;AAC7C,QAAQ,gDAAgD;AACxD,QAAQ,+BAA+B;AACvC,QAAQ,8BAA8B;AACtC,QAAQ,iCAAiC;AACzC,QAAQ,+BAA+B;AACvC,QAAQ,gCAAgC;AACxC,QAAQ,+BAA+B;AACvC,QAAQ,+BAA+B;AACvC,QAAQ,iCAAiC;AACzC,QAAQ,gCAAgC;AACxC,QAAQ,+BAA+B;AACvC,QAAQ,6BAA6B;AACrC;AACA;AACA,QAAQ,sCAAsC;AAC9C,QAAQ,2CAA2C;AACnD,QAAQ,+BAA+B;AACvC,QAAQ,qCAAqC;AAC7C,QAAQ,gDAAgD;AACxD,QAAQ,mCAAmC;AAC3C,QAAQ,kCAAkC;AAC1C,QAAQ,kCAAkC;AAC1C,QAAQ,iCAAiC;AACzC,QAAQ,oCAAoC;AAC5C,QAAQ,iCAAiC;AACzC,QAAQ,gCAAgC;AACxC,QAAQ,mCAAmC;AAC3C,QAAQ,gCAAgC;AACxC,QAAQ,mCAAmC;AAC3C,QAAQ,+BAA+B;AACvC;AACA;AACA,QAAQ,qDAAqD;AAC7D,QAAQ,qDAAqD;AAC7D,QAAQ,qDAAqD;AAC7D,QAAQ,yDAAyD;AACjE,QAAQ,yDAAyD;AACjE,QAAQ,sDAAsD;AAC9D,QAAQ,oDAAoD;AAC5D,QAAQ,gDAAgD;AACxD,QAAQ,sDAAsD;AAC9D;AACA,GAAG;AACH;AACA;AACA,QAAQ,iFAAiF,mCAAmC;AAC5H,QAAQ,0EAA0E,mCAAmC;AACrH,QAAQ,yEAAyE,mCAAmC;AACpH,QAAQ,6EAA6E,aAAa;AAClG,QAAQ,uEAAuE,aAAa;AAC5F,QAAQ,4EAA4E,aAAa;AACjG,QAAQ,0EAA0E,wBAAwB;AAC1G,QAAQ,0EAA0E,aAAa;AAC/F,QAAQ,+EAA+E,wBAAwB;AAC/G,QAAQ,yEAAyE;AACjF,QAAQ,+EAA+E,aAAa;AACpG,QAAQ,yEAAyE,aAAa;AAC9F,QAAQ,wEAAwE,wBAAwB;AACxG,QAAQ,iFAAiF,mCAAmC;AAC5H,QAAQ,uEAAuE,wBAAwB;AACvG,QAAQ,2EAA2E,wBAAwB;AAC3G,QAAQ,wEAAwE,aAAa;AAC7F,QAAQ,6EAA6E,aAAa;AAClG,QAAQ,2EAA2E;AACnF,QAAQ,4EAA4E,wBAAwB;AAC5G,QAAQ,8EAA8E,wBAAwB;AAC9G,QAAQ,2EAA2E,mCAAmC;AACtH,QAAQ,yEAAyE,wBAAwB;AACzG,QAAQ,wEAAwE,wBAAwB;AACxG,QAAQ,iFAAiF;AACzF,QAAQ,wEAAwE,mCAAmC;AACnH,QAAQ,0EAA0E,aAAa;AAC/F,QAAQ,4EAA4E,wBAAwB;AAC5G,QAAQ,8EAA8E,wBAAwB;AAC9G,QAAQ,2EAA2E,wBAAwB;AAC3G,QAAQ,8EAA8E;AACtF,QAAQ,6EAA6E,aAAa;AAClG,QAAQ,wEAAwE,wBAAwB;AACxG,QAAQ,2EAA2E,wBAAwB;AAC3G,QAAQ,kFAAkF,8CAA8C;AACxI,QAAQ,2EAA2E,mCAAmC;AACtH,QAAQ,uEAAuE,wBAAwB;AACvG,QAAQ,4EAA4E,aAAa;AACjG,QAAQ,wEAAwE,aAAa;AAC7F,QAAQ,0EAA0E,mCAAmC;AACrH,QAAQ,0EAA0E,mCAAmC;AACrH,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,8EAA8E;AACtF;AACA;AACA,QAAQ,oBAAoB;AAC5B,QAAQ,8BAA8B;AACtC,QAAQ,0BAA0B;AAClC,QAAQ,0BAA0B;AAClC,QAAQ,oBAAoB;AAC5B,QAAQ,6BAA6B;AACrC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,0BAA0B;AAClC,QAAQ,0BAA0B;AAClC,QAAQ,oCAAoC;AAC5C,QAAQ,+BAA+B;AACvC;AACA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;AC1qBkB;AACV;AACQ;AACyC;;AAEnF;AACA,KAAK,uCAAuC;AAC5C;AACA,KAAK,+CAA+C;AACpD;AACA,KAAK,iDAAiD;;AAEtD;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;;AAEA;AACA,WAAW,mCAAmC;AAC9C,mBAAmB,kFAAkF;AACrG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,iHAAmC;AAC3D;AACA;AACA,UAAU;AACV;AACA;AACA,iCAAiC,cAAc;AAC/C,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC,UAAU;AACV,iDAAiD,WAAW,SAAS,SAAS,IAAI,WAAW,SAAS,SAAS;AAC/G;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;;AAEA,IAAI,uEAAY,eAAe,SAAS,aAAa,KAAK,IAAI,aAAa;AAC3E;AACA,MAAM,4EAAqB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,yBAAyB,kGAAyB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,mEAAY;AAC9B,0BAA0B,uEAAY,eAAe,SAAS,YAAY,KAAK;;AAE/E;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;;AAEA;AACA,WAAW,mCAAmC;AAC9C,mBAAmB,kFAAkF;AACrG;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C,EAAE,uEAAY,wCAAwC,kBAAkB,aAAa,aAAa;;AAElG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACO;AACP;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;;AAEA;AACA,4BAA4B,iBAAiB;AAC7C,EAAE,uEAAY,wCAAwC,iBAAiB;;AAEvE,eAAe,qEAAc,qBAAqB,iBAAiB;;AAEnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtUA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,WAAW,GAAG;AACd;AACO;;AAEP;AACA;;;;;;;ACfoC;AACQ;AACV;AACQ;AACwB;AACD;AACD;AACX;AACrD,YAAY,wBAAwB;;AAEpC;AACA;AACA;AACA;AACA,IAAI,yCAAyC;AAC7C,IAAI,0CAA0C;AAC9C,IAAI,wCAAwC;AAC5C,IAAI,6CAA6C;;AAEjD,IAAI,wCAAwC;AAC5C,IAAI,yCAAyC;AAC7C,IAAI,4CAA4C;AAChD,IAAI,sCAAsC;AAC1C,IAAI,4CAA4C;AAChD,IAAI,wCAAwC;;AAE5C;AACA,IAAI,sCAAsC;AAC1C,IAAI,2CAA2C;AAC/C,IAAI,kCAAkC;AACtC,IAAI,qCAAqC;AACzC,IAAI,qCAAqC;AACzC,IAAI,mCAAmC;AACvC,IAAI,mCAAmC;AACvC,IAAI,wCAAwC;AAC5C,IAAI,yCAAyC;AAC7C,IAAI,oCAAoC;AACxC,IAAI,kCAAkC;AACtC,IAAI,sCAAsC;AAC1C,IAAI,uCAAuC;AAC3C,IAAI,sCAAsC;AAC1C,IAAI,oCAAoC;AACxC,IAAI,2CAA2C;AAC/C,IAAI,mCAAmC;AACvC,IAAI,oCAAoC;AACxC;AACA,OAAO,0CAA0C;;AAEjD;AACA,IAAI,0CAA0C;;AAE9C,IAAI,mDAAmD;AACvD,IAAI,oDAAoD;AACxD,IAAI,uDAAuD;AAC3D,IAAI,iDAAiD;AACrD,IAAI,uDAAuD;AAC3D,IAAI,mDAAmD;;AAEvD,IAAI,kDAAkD;AACtD,IAAI,mDAAmD;AACvD,IAAI,sDAAsD;AAC1D,IAAI,gDAAgD;AACpD,IAAI,sDAAsD;AAC1D,IAAI,kDAAkD;;AAEtD;AACA,IAAI,0CAA0C;AAC9C,IAAI,yCAAyC;AAC7C,IAAI,0CAA0C;AAC9C,IAAI,gDAAgD;AACpD,IAAI,iDAAiD;AACrD,IAAI,+BAA+B;AACnC;;AAEA;AACA,IAAI,yCAAyC;AAC7C,IAAI,yCAAyC;AAC7C,IAAI,iDAAiD;AACrD,IAAI,iDAAiD;AACrD,IAAI,gDAAgD;AACpD;;AAEA;AACA,IAAI,gDAAgD;AACpD,IAAI,sCAAsC;AAC1C;;AAEA;AACA;AACA,IAAI,yCAAyC;AAC7C,IAAI,sCAAsC;AAC1C,IAAI,yCAAyC;AAC7C,IAAI,sCAAsC;AAC1C,IAAI,0CAA0C;AAC9C,IAAI,uCAAuC;AAC3C,IAAI,wCAAwC;AAC5C,IAAI,qCAAqC;AACzC;;AAEA;AACA;AACA,IAAI,8CAA8C;AAClD,IAAI,+CAA+C;AACnD,IAAI,+CAA+C;AACnD,IAAI,6CAA6C;AACjD;;AAEA;AACA,IAAI,iCAAiC;AACrC,IAAI,yCAAyC;AAC7C,IAAI,0CAA0C;AAC9C,IAAI,0CAA0C;AAC9C,IAAI,wCAAwC;AAC5C;;AAEA;;AAEA;AACA,IAAI,8CAA8C;AAClD;;AAEA;;AAEA;AACA,IAAI,0CAA0C;AAC9C,IAAI,2CAA2C;AAC/C,IAAI,8CAA8C;AAClD,IAAI,wCAAwC;AAC5C,IAAI,8CAA8C;AAClD,IAAI,0CAA0C;AAC9C;;AAEA;AACA;AACA,IAAI,oCAAoC;AACxC;;AAEA;AACA;AACA,IAAI,iCAAiC;AACrC;;AAEA;AACA;AACA,IAAI,mCAAmC;AACvC,IAAI,iCAAiC;AACrC,IAAI,sCAAsC;AAC1C;;AAEA;AACA,IAAI,iDAAiD;AACrD,IAAI,uCAAuC;AAC3C,IAAI,+CAA+C;AACnD,IAAI,kDAAkD;AACtD;;AAEA;AACA,IAAI,+CAA+C;AACnD,IAAI,mDAAmD;AACvD,IAAI,6CAA6C;AACjD;;AAEO;AACP;;AAEA;AACA;AACA,4FAA4F,KAAK;AACjG,4FAA4F,KAAK;AACjG,yFAAyF,KAAK;AAC9F,iGAAiG,KAAK;AACtG,6FAA6F,KAAK;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;;AAEO;AACP;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,oBAAoB;AACpB;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEO,wCAAwC;AAC/C;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA,IAAI,iCAAY,kBAAkB,YAAY;AAC9C;AACA;AACA;AACA;AACA,2FAA2F,MAAM;AACjG;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iCAAY,iDAAiD,YAAY,KAAK,MAAM;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,2EAAmC;AACvD,+CAA+C,QAAQ,wBAAwB,QAAQ;AACvF;;AAEA;;AAEA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,uBAAuB,wDAAyB;;AAEhD;AACA,IAAI,iCAAY,eAAe,iBAAiB,EAAE,cAAc,MAAM,KAAK;AAC3E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,iCAAY,yBAAyB,iBAAiB,EAAE,cAAc,MAAM,KAAK;AACvF,MAAM;AACN,MAAM,iCAAY,8BAA8B,iBAAiB,EAAE,cAAc,MAAM,KAAK;AAC5F;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,QAAQ;AACjD,IAAI,iCAAY,gBAAgB,MAAM,YAAY,KAAK;AACvD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,wDAAyB;;AAEpD;AACA,IAAI,iCAAY,eAAe,MAAM,YAAY,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wCAAwC,QAAQ;AAChD,IAAI,iCAAY,gBAAgB,MAAM,YAAY,KAAK;AACvD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAyB;AACzC;AACA,IAAI,iCAAY,eAAe,MAAM,YAAY,KAAK;AACtD,yCAAyC,MAAM,EAAE,qBAAqB;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,IAAI,iCAAY,eAAe,MAAM,YAAY,KAAK;AACtD,wCAAwC,MAAM;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,2BAAY;AACvC;;AAEA;AACA,IAAI,iCAAY,wBAAwB,MAAM,MAAM,KAAK;AACzD;AACA,GAAG;AACH;AACA,IAAI,iCAAY,wBAAwB,kBAAkB,MAAM,KAAK;AACrE;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAyB;AAC9C;AACA;AACA;AACA;AACA,eAAe,oDAAqB,yCAAyC,YAAY;AACzF,QAAQ;AACR,eAAe,oDAAqB,oCAAoC,YAAY;AACpF;AACA,KAAK;AACL;AACA,IAAI,iCAAY,gCAAgC,KAAK;AACrD,yCAAyC,uBAAuB;AAChE;AACA;AACA,sBAAsB,wDAAyB;AAC/C;AACA;AACA;AACA;AACA,eAAe,oDAAqB,yCAAyC,YAAY;AACzF,QAAQ;AACR,eAAe,oDAAqB,oCAAoC,YAAY;AACpF;AACA,KAAK;AACL;AACA,IAAI,iCAAY,iCAAiC,KAAK;AACtD,yCAAyC,wBAAwB;AACjE;AACA,gBAAgB,wDAAyB;AACzC;AACA;AACA;AACA;AACA,eAAe,oDAAqB,yCAAyC,YAAY;AACzF,QAAQ;AACR,eAAe,oDAAqB,oCAAoC,YAAY;AACpF;AACA,KAAK;AACL;AACA,IAAI,iCAAY,8BAA8B,KAAK;AACnD,yCAAyC,kBAAkB;AAC3D,yCAAyC,kBAAkB;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,+FACX;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDACK;AACpB;AACA;AACA,oBAAoB,2FAA2C;AAC/D;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,GAAG;;AAEH;AACA,4BAA4B,wDAAyB;AACrD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,SAAS,iBAAiB,KAAK;AAChE,sBAAsB,2EAAmC;AACzD;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,cAAc,WAAW,aAAa,IAAI,KAAK,IAAI,KAAK,eAAe,cAAc,WAAW,YAAY;AACpJ,8EAA8E,cAAc;AAC5F,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,SAAS,eAAe,KAAK;AAC9D,sBAAsB,2EAAmC;AACzD,6EAA6E,QAAQ;AACrF,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,wDAAyB;;AAE3C;AACA;AACA,IAAI,iCAAY,eAAe,SAAS,6BAA6B,KAAK;AAC1E,oBAAoB,2EAAmC;AACvD,gFAAgF,KAAK,GAAG,QAAQ;AAChG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,2EAAmC;AACvD,4DAA4D,KAAK;AACjE,+EAA+E,KAAK;AACpF,gFAAgF,KAAK;AACrF,gEAAgE,KAAK,qCAAqC,cAAc;AACxH,iEAAiE,KAAK,sCAAsC,cAAc;AAC1H;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,OAAO,WAAW,KAAK;AACxD,yFAAyF,MAAM;AAC/F;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,OAAO,YAAY,KAAK;AACzD,sFAAsF,MAAM;AAC5F;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,wDAAyB;AACzC;AACA,IAAI,iCAAY,qCAAqC,KAAK;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,SAAS,gBAAgB,KAAK;AAC/D;AACA,wBAAwB,qEAAgC;AACxD;AACA;AACA,iFAAiF,UAAU;AAC3F,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,iCAAY,eAAe,SAAS,kBAAkB,KAAK;AAC/D;AACA;AACA,kBAAkB,qEAAgC;AAClD;AACA;AACA;AACA,6CAA6C,WAAW,oCAAoC,UAAU;AACtG,MAAM;AACN,kFAAkF,UAAU;AAC5F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,mFAAmF;;AAEnF;AACA;;AAEA;AACA;AACA,2BAA2B,2BAAY;AACvC,EAAE,2EAAmC;AACrC;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf,KAAK;;AAEL,2BAA2B,2BAAY;;AAEvC;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,sCAAsC,KAAK;AAC3D;AACA,GAAG;AACH;AACA,IAAI,iCAAY,wCAAwC,KAAK;AAC7D;AACA,GAAG;AACH;AACA,IAAI,iCAAY,uCAAuC,KAAK;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA,EAAE,wDAAyB;AAC3B,gBAAgB,kEAA8B;AAC9C;AACA,MAAM,iCAAY,wCAAwC,MAAM,YAAY,oBAAoB;AAChG,wCAAwC,aAAa,aAAa,kCAAkC;AACpG,MAAM;AACN,MAAM,iCAAY,wCAAwC,MAAM;AAChE,wCAAwC,aAAa;AACrD;AACA,GAAG;;AAEH,2BAA2B,wDAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yCAAyC,QAAQ;AACjD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,iCAAY,eAAe,eAAe,kBAAkB,KAAK;AACrE,+DAA+D,WAAW;AAC1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAyB;;AAE7C;AACA;AACA,IAAI,iCAAY,eAAe,eAAe,QAAQ,YAAY,MAAM,KAAK;AAC7E,8DAA8D,WAAW,SAAS,WAAW;AAC7F;AACA;AACA;AACA,+DAA+D,WAAW;AAC1E,SAAS;AACT,gEAAgE,WAAW;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,2EAAmC;AACrC;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAyB;AAC7C;AACA,IAAI,iCAAY,uCAAuC,KAAK;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAyB;AAChD;AACA,IAAI,iCAAY,gCAAgC,KAAK;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAyB;AAC7C;AACA,IAAI,iCAAY,sDAAsD,KAAK;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,2EAAmC;AAC1C;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA;AACA,SAAS,kBAAkB;;AAE3B;;AAEA;AACA,EAAE,iCAAY,2BAA2B,iBAAiB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA,4BAA4B,oDAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA,oBAAoB,qDAAyB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,IAAI,MAAM,SAAS,iBAAiB;AACpD;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AC54CkC;AACY;AACR;;AAE/B;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;;AAEA,4CAA4C,iFAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;;AAEO;AACP;AACA,EAAE,uEAAY,sBAAsB,MAAM,EAAE,SAAS;AACrD;AACA;AACA,YAAY,yFAAqB,uCAAuC,KAAK;;AAE7E;AACA;AACA,sBAAsB,yFAAqB,uCAAuC,KAAK;AACvF,wCAAwC,eAAe;AACvD;AACA,IAAI;AACJ,mHAAmH,KAAK,MAAM,SAAS,YAAY;AACnJ,IAAI;AACJ;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,iBAAiB;AACjB,cAAc;AACd;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,6BAA6B,kCAAkC;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uFAAuF;AACnH;AACA;AACA;AACA;;AAEO;AACP,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK,IAAI,SAAS;AACxE,MAAM,qEAAW,0BAA0B,KAAK,IAAI,SAAS;AAC7D,+CAA+C,KAAK,IAAI,SAAS;AACjE;;AAEA;AACA,gCAAgC,SAAS,MAAM,EAAE,SAAS,6DAA6D;AACvH;AACA,uCAAuC,KAAK,GAAG,aAAa;AAC5D,IAAI,uEAAY,WAAW,KAAK,IAAI,UAAU;AAC9C;;AAEA,EAAE,uEAAY,aAAa,KAAK,IAAI,UAAU;AAC9C;AACA;;;;;;;;;;;;;;;;;;;;ACzNuB;;AAEhB;AACP,eAAe,kCAAc,cAAc,cAAc;AACzD,sBAAsB,0CAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;ACnC+C;AAC0C;;AAElF;AACP,eAAe,kCAAc,cAAc,eAAe;AAC1D;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;;AAEA;AACA;;;ACd+C;AAC0C;;AAElF;AACP,eAAe,kCAAc,cAAc,cAAc;AACzD,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB,KAAK,cAAc;AAC5D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACxBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;ACX+C;AAC0C;;AAElF;AACP,eAAe,kCAAc;AAC7B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB,KAAK,cAAc;AAC5D;AACA;AACA;AACA;;AAEA;AACA;;;ACRsB;AACgC;AACtD;AAC6D;AACc;AACF;AAChB;AACI;;;AAGtD;AACP,OAAO,0CAAiB;AACxB;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;;AAEA,SAAS,mCAAe;AACxB;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,kCAAc,cAAc,eAAe;AAC9D,0BAA0B,qCAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAc,cAAc,eAAe;AAC9D,0BAA0B,yCAAqB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA,QAAQ,wCAAoB;AAC5B,QAAQ,wCAAoB;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;ACnJoD;AACgB;;AAE7D;AACP,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;;AAEpD,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;;AAEA;AACA;;;ACpB+C;AACqB;;AAE7D;AACP,wBAAwB,kCAAc,cAAc,cAAc;AAClE,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;;AAEpD;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA,GAAG;;AAEH;AACA;AACA;;;ACjB+C;;AAExC;AACP;AACA,uBAAuB,kCAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;ACnEoD;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD,0CAA0C,wCAAwC;AAClF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/C+C;AACqB;;AAE7D;AACP,eAAe,kCAAc;AAC7B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;;AAEpD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;;AClBoD;;AAE7C;AACP;AACA,eAAe,cAAc;;AAE7B;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;ACjCO;AACP;AACA;AACA;;;ACHoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;ACboD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClCoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;;AAE5B;AACA;AACA;;;ACpBoD;AACgB;;AAEpE;AACA;AACO;AACP,eAAe,cAAc,wBAAwB,cAAc;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AClDoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7CoD;AACO;;AAEpD;AACP;AACA;AACA;;AAEA,mBAAmB,cAAc;AACjC;;AAEA,0BAA0B,8CAA0B;AACpD;AACA;AACA;AACA;AACA,sBAAsB,eAAe,iEAAiE,mCAAmC,eAAe,mCAAmC;AAC3L;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,eAAe,qEAAqE,6BAA6B;AACvI;AACA;AACA;;AAEA;AACA;AACA;;;AC7B+C;AACqB;;AAE7D;AACP,eAAe,kCAAc;AAC7B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;;AAEA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;;;ACfoD;;AAE7C;AACP;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;;ACvCuE;AACrB;;AAE3C;AACP,eAAe,cAAc;;AAE7B,MAAM,iBAAiB;AACvB,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc,mCAAmC;AACjD;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;;AC9CoD;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;ACfoD;;AAE7C;AACP;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;;ACjC+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1BoD;AACO;;AAEpD;AACP,eAAe,cAAc;AAC7B;AACA,MAAM,6FAA6F;AACnG,MAAM,oGAAoG;AAC1G,IAAI,8CAA0B;AAC9B;;AAEA;AACA,4BAA4B;AAC5B,+BAA+B;AAC/B;;AAEA;AACA;AACA;;;;;AClBoD;AACO;AAC8B;AACpD;;AAErC;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY,0BAA0B,cAAc;;AAEtD;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAA0B;AACpD;AACA;AACA;AACA,0BAA0B,8CAA0B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gCAAa;AAC/C,mCAAmC,wCAAqB;AACxD,0BAA0B,sCAAmB,IAAI,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,8CAA8C;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,8CAA8C;AAC3F;AACA;AACA;AACA;;AAEA;AACA;;;;;;ACtUkF;;AAE3E;AACP,eAAe,yCAAe;AAC9B,sBAAsB,oDAA0B;AAChD;AACA;;AAEA;AACA;;;ACTO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;AChBoD;AACgB;;AAEpE;AACA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;AAGO;AACP,iBAAiB,cAAc;;AAE/B;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AC5DoD;AACgB;;AAE7D;AACP,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;;AAEpD,eAAe,cAAc;;AAE7B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AChC+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA,MAAM,uGAAuG;AAC7G;AACA;AACA;AACA;;;;ACToD;AACgB;;AAE7D;;AAEP;AACA,iBAAiB,cAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA,IAAI;AACJ,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA,OAAO;AACP;AACA;;AAEA,gCAAgC,gCAAa;AAC7C,iCAAiC,wCAAqB;AACtD;;AAEA;AACA;;AAEA;AACA;;;ACrEoD;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;;ACvEoD;;AAE7C;AACP,qBAAqB,cAAc,cAAc,eAAe;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,cAAc,cAAc,eAAe;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B;AAC5B;AACA,iCAAiC;;AAEjC;AACA;;;AC7CuE;AACrB;AACuC;;AAElF;;AAEP,mBAAmB,cAAc;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,UAAU,iBAAiB;AAC3B,gCAAgC,qCAAiB;AACjD,QAAQ;AACR,oCAAoC,gCAAa;AACjD,qCAAqC,wCAAqB;AAC1D,gCAAgC,sCAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5GoD;AACqC;AACvC;;AAE3C;AACP;AACA,eAAe,cAAc;;AAE7B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC,6BAA6B,8CAA8C;AAC3E,wBAAwB,qCAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjCoD;;AAE7C;AACP;AACA,eAAe,cAAc;;AAE7B;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;;AC/B+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA,MAAM,qGAAqG;AAC3G;AACA;AACA;AACA;;;;ACToD;;AAE7C;AACP,eAAe,cAAc,cAAc,eAAe;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;ACpDkE;AACd;;AAE7C;AACP;AACA;AACA;AACA;;AAEA,eAAe,cAAc,cAAc,cAAc;;AAEzD;AACA,kDAAkD,mCAAmC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,wBAAwB,sCAAmB;AAC3C,gEAAgE,YAAY;AAC5E;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,wBAAwB,sCAAmB;AAC3C,kEAAkE,YAAY;AAC9E;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,wBAAwB,sCAAmB;AAC3C,+DAA+D,YAAY;AAC3E;AACA,IAAI;AACJ,wBAAwB,sCAAmB;AAC3C,gEAAgE,YAAY;AAC5E;;AAEA;AACA;;;AC5DoD;AACgB;;AAEpE;AACA;AACO;AACP,eAAe,cAAc,wBAAwB,cAAc;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AClDoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,cAAc,cAAc,eAAe;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;;ACtCoD;AACO;;AAEpD;AACP;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D,qDAAqD,eAAe;AACpE;AACA,2BAA2B,8CAA0B;AACrD,2BAA2B,8CAA0B;AACrD;AACA;AACA;AACA;AACA,sBAAsB,eAAe,qEAAqE,6BAA6B;AACvI;AACA;AACA;;AAEA;;AAEA;AACA;;;;ACzBoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;;;ACvBoD;;AAE7C;;AAEP,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;;AAEA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D;AACA;;AAEA;;AAEA;;;AAGA;AACA;;;ACtBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;AACA;;;;ACdoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;;ACjBoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;ACfoD;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;ACtD+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA,MAAM,iHAAiH;AACvH;AACA;AACA;AACA;;;;;ACRoD;AACgB;;AAE7D;AACP,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;AACA;AACA;;;;ACtBoD;AACgB;;AAE7D;AACP,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA;AACA;;;;ACvBoD;AACgB;;AAE7D;AACP,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;AACA;AACA;;;;ACtBoD;AACgB;;AAE7D;AACP,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA;AACA;;;ACxB+C;AAC0C;;AAElF;AACP,eAAe,kCAAc;AAC7B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB,KAAK,cAAc;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;ACvCyF;AACrC;;AAE7C;AACP,eAAe,cAAc;AAC7B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;;AAEA;AACA;;;ACdoD;AACL;;AAE/C;AAC2E;AAClB;AACc;AAChB;AACQ;AACE;AACV;AACU;AACI;AACF;AACV;AACmB;AACvB;AACM;AACJ;AACI;AACU;AAChB;AACM;AACA;AACJ;AACM;AACY;AACO;AACjB;AACA;AACJ;AACd;AACoB;AACR;AACI;AACI;AACJ;AACA;AACd;AACY;AACJ;AACA;AACY;AACZ;AACgB;AACV;AACQ;AACU;AACxB;AACJ;AACgB;AACM;AACN;AACE;AACJ;;AAE1D;AACP;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,oBAAoB;AACpB;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACO;AACP;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mCAAe;AAC1B;AACA;AACA,iDAAiD,wCAAqB;AACtE;;;AAGA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;;AAEA,SAAS,mCAAe;AACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvXsD;;AAE/C;AACP,iBAAiB,eAAe,cAAc,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;ACvCsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;;ACfyF;AACnC;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA,6BAA6B;;AAE7B;AACA;;;AClBsD;;AAE/C;AACP,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,6BAA6B,eAAe;AAC5C;AACA,MAAM,iGAAiG;AACvG,MAAM,yFAAyF;AAC/F,MAAM,qFAAqF;AAC3F,MAAM;AACN;AACA;;AAEA;AACA;;;ACtBkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;;AAEzC;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;;AAEA;AACA;;;AClBsD;AACc;;AAE7D;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA;AACA;;;ACvBsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAmB;AACzC;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;;AAEA;;;AC/CsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,uGAAuG;AAC7G,MAAM;AACN;AACA;;AAEA;AACA;;;ACXsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACXsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM;AACN;AACA;;AAEA;AACA;;;AChBsG;AACL;;AAE1F;AACP,OAAO,kBAAkB;AACzB,iBAAiB,eAAe;AAChC,wBAAwB,0BAA0B;AAClD;;AAEA;AACA;;;AAGA,eAAe,eAAe;AAC9B,8BAA8B,gCAAa,CAAC,uDAAuB,EAAE,uDAAuB;AAC5F,+BAA+B,wCAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AChEsG;;AAE/F;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,wGAAwG;AAC9G,MAAM;AACN;AACA;;AAEA,MAAM,kBAAkB;AACxB,wBAAwB,0BAA0B;AAClD;;AAEA;AACA;;;ACfsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACjBsG;;AAE/F;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,kBAAkB;AACxB,wBAAwB,0BAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACpBoE;;AAE7D;AACP,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA;;;ACVoE;AACd;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;;AAEpD;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AC/BsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AChBkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRsD;AACtD,YAAY,4DAA4D;;AAEjE;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACvBoE;;AAE7D;AACP,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA;AACA;;;ACR0E;AACuB;;AAE1F;AACP;AACA,OAAO,kBAAkB;;AAEzB,8BAA8B,gCAAa,YAAY,qEAA8B;AACrF,+BAA+B,wCAAqB;;AAEpD,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,0CAA0C,6BAA6B,qJAAqJ,mCAAmC;AAC/R;AACA,KAAK;AACL;AACA,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;ACpDoE;;AAE7D;;AAEP,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA,6BAA6B;;AAE7B;AACA;;;ACVsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;;AAEA;AACA;;;ACPsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AChBsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;AClBkF;AACO;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA,sBAAsB,0BAA0B;AAChD,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACb0E;AACuB;;AAE1F;AACP;AACA,OAAO,kBAAkB;;AAEzB,8BAA8B,gCAAa,YAAY,qEAA8B;AACrF,+BAA+B,wCAAqB;;AAEpD,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAmB;AACzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;ACnDkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACdkD;AACwB;AACe;;AAElF;AACP,eAAe,eAAe;;AAE9B,MAAM,kBAAkB;AACxB,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC;AACA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;ACtBsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;;;ACb6F;AACJ;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,MAAM,kBAAkB;AACxB,wBAAwB,iBAAiB;AACzC,IAAI;AACJ,gCAAgC,gCAAa;AAC7C,iCAAiC,wCAAqB;AACtD,wBAAwB,sCAAmB;AAC3C;;AAEA;;AAEA;AACA;;;ACvBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,+GAA+G;AACrH,MAAM;AACN;AACA;;AAEA;AACA;;;ACXsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACXkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;;;ACfsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACX0E;AACe;;AAElF;AACP,OAAO,kBAAkB;;AAEzB,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACbsD;AACc;;AAE7D;AACP,eAAe,eAAe;;AAE9B,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;;;ACxBkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe,0CAA0C,6BAA6B;AAC1G;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;;ACnBsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA,sBAAsB,sCAAmB;AACzC;AACA;AACA;;AAEA;AACA;;;ACdsG;AACb;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,gCAAgC,gCAAa;AAC7C,iCAAiC,wCAAqB;AACtD,wBAAwB,sCAAmB;AAC3C;;AAEA,MAAM,kBAAkB;AACxB,wBAAwB,0BAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACzBkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G,MAAM;AACN;AACA;;AAEA;AACA;;;ACZsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC,6BAA6B;AAC7B;;AAEA;AACA;;;ACZsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;;;AChBkF;AACO;;AAElF;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACbsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,+GAA+G;AACrH,MAAM,+GAA+G;AACrH;AACA;AACA;AACA;;AAEA;AACA;;;ACbkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRsG;AACL;;AAE1F;;AAEP,OAAO,kBAAkB;AACzB,iBAAiB,eAAe;AAChC,wBAAwB,0BAA0B;AAClD;;AAEA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc,2DAA2D,6BAA6B,2CAA2C,2EAAiC,CAAC;AAClN;AACA,KAAK;AACL;;AAEA,8BAA8B,gCAAa,CAAC,2EAAiC,EAAE,2EAAiC;AAChH,+BAA+B,wCAAqB;AACpD;AACA,sBAAsB,sCAAmB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACrEoE;;AAE7D;AACP,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;;ACZsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;;;AC7BsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACtBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,qGAAqG;AAC3G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM;AACN;AACA;;AAEA;AACA;;;ACjBsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,sGAAsG;AAC5G,MAAM;AACN;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACfsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;AClBsD;AACc;;AAEpE;AACA;AACO;AACP,eAAe,eAAe;;AAE9B,8BAA8B,gCAAa;;AAE3C,0CAA0C,wCAAqB;AAC/D;AACA;;AAEA;;AAEA;AACA;;;ACjBkF;AACO;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA,IAAI,0BAA0B;AAC9B,IAAI,0BAA0B;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,8BAA8B,gCAAa;;AAE3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACxBkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,GAAG;AACH;;AAEA;AACA;;;ACdkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,GAAG;AACH;;AAEA;AACA;;;ACdyE;;AAElE;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,wBAAwB,iBAAiB;AACzC,wBAAwB,iBAAiB;AACzC,wBAAwB,iBAAiB;AACzC,6BAA6B,8CAA8C;AAC3E,wBAAwB,iBAAiB;AACzC;;AAEA;;AAEA;AACA;;;AC9BsD;AACc;;AAEpE;AACA;AACO;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA;AACA;;;ACnCkF;;AAE3E;AACP,qCAAqC,eAAe;AACpD,4CAA4C,0BAA0B;AACtE;;AAEA,2CAA2C,eAAe;AAC1D,kDAAkD,0BAA0B;AAC5E;;AAEA;AACA;;;ACZoE;;AAE7D;AACP,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;AACA,6BAA6B;AAC7B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChB0E;AACuB;;AAE1F;AACP;AACA,OAAO,kBAAkB;;AAEzB,8BAA8B,gCAAa,YAAY,qEAA8B;AACrF,+BAA+B,wCAAqB;;AAEpD,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,iCAAiC,6BAA6B,qJAAqJ,mCAAmC;AACtR;AACA,KAAK;AACL;AACA,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;;AChD0E;AACuB;;AAE1F;AACP;AACA,OAAO,kBAAkB;;AAEzB,8BAA8B,gCAAa,YAAY,qEAA8B;AACrF,+BAA+B,wCAAqB;;AAEpD,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,iCAAiC,6BAA6B,sJAAsJ,mCAAmC;AACvR;AACA,KAAK;AACL;AACA,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;;AChDkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;;AAEhD;;AAEA;AACA;;;ACTsD;AACmC;;AAElF;AACP,eAAe,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;AChC6F;;AAEtF;AACP,eAAe,eAAe;;AAE9B,MAAM,kBAAkB;AACxB,wBAAwB,iBAAiB;AACzC,wBAAwB,iBAAiB;AACzC,wBAAwB,iBAAiB;AACzC,wBAAwB,iBAAiB;AACzC,6BAA6B,2CAA2C;AACxE,wBAAwB,iBAAiB;AACzC;;AAEA;AACA;;AAEA;AACA;;;AClBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,wGAAwG;AAC9G,MAAM,uGAAuG;AAC7G,MAAM,0GAA0G;AAChH,MAAM,yGAAyG;AAC/G,MAAM;AACN;AACA;;AAEA;AACA;;;ACdsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACXkF;;AAE3E;AACP,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;;AAEA;AACA;;;ACRsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AChBsG;;AAE/F;AACP,eAAe,eAAe;;AAE9B,MAAM,kBAAkB;AACxB,wBAAwB,0BAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACZsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACXsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;ACjBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AChBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACdO;;AAEP;;AAEA;AACA;;;ACLsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACXsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,GAAG;AACH,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;ACjBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;;ACdsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;;AAEA;AACA;;;ACfsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;;ACtBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;;;ACvBsG;;AAE/F;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,MAAM,kBAAkB;AACxB,wBAAwB,0BAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACnBsG;;AAE/F;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,MAAM,kBAAkB;AACxB,wBAAwB,0BAA0B;AAClD;;AAEA;;AAEA;AACA;;;AClBsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;;;AChBsG;AAClC;;AAE7D;;AAEP,OAAO,kBAAkB;AACzB;AACA;;AAEA;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;;AAEpD,eAAe,eAAe;AAC9B,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AClDoE;;AAE7D;;AAEP,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA,6BAA6B;;AAE7B;AACA;;;ACVsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,qGAAqG;AAC3G,MAAM,4GAA4G;AAClH,MAAM;AACN;AACA;;AAEA;AACA;;;ACZsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACb0E;AACe;;AAElF;AACP;AACA,OAAO,kBAAkB;;AAEzB,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;;AAEpD,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;ACzC0E;AACe;;AAElF;AACP;AACA,OAAO,kBAAkB;;AAEzB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAmB;AACzC;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;;;AClD0E;AACN;;AAE7D;AACP,OAAO,kBAAkB;AACzB,eAAe,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;;;AChDsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;AACA;AACA;;AAEA,6BAA6B;AAC7B;;AAEA;AACA;;;AChBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACb0E;AACe;;AAElF;AACP;AACA,OAAO,kBAAkB;;AAEzB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAmB;AACzC;;AAEA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;ACtDkF;;AAE3E;AACP,6BAA6B,eAAe;AAC5C,oCAAoC,0BAA0B;AAC9D;;AAEA;AACA;;;ACRoE;AACd;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AChCoE;;AAE7D;AACP,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;AAC/D;;AAEA,6BAA6B;AAC7B;AACA;;;ACTsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;;ACfA;;;AAGsD;;AAE/C;;AAEP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;AC3BsD;AACmC;;AAElF;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,oGAAoG;AAC1G,MAAM,iGAAiG;AACvG,MAAM;AACN;AACA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;;AChBsG;AACL;;AAE1F;;AAEP,OAAO,kBAAkB;AACzB,8BAA8B,eAAe;AAC7C,qCAAqC,0BAA0B;AAC/D;AACA;AACA;;AAEA;AACA,8BAA8B,gCAAa,CAAC,2EAAiC,EAAE,2EAAiC;AAChH,+BAA+B,wCAAqB;;AAEpD,eAAe,eAAe;AAC9B,sBAAsB,sCAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;;ACvDsD;AACc;;AAE7D;AACP,eAAe,eAAe;;AAE9B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA;;AAEA;AACA;;;ACZsD;AACc;;AAE7D;AACP,eAAe,eAAe,cAAc,cAAc;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,0CAA0C,wCAAqB;;AAE/D;AACA;;;ACnDkC;AAMZ;AAC8B;;AAEpD;AACkE;AACV;AACZ;AACY;AACc;AACV;AACM;AACR;AACZ;AACY;AACJ;AACQ;AACI;AAClB;AACwB;AAC1B;AACgB;AACE;AACA;AACJ;AACF;AACI;AACN;AACE;AACN;AACwB;AACpB;AACA;AACQ;AACE;AACJ;AACR;AACI;AACE;AACF;AACM;AACI;AACF;AACE;AACF;AACF;AACI;AACd;AACF;AACM;AACZ;AACY;AACA;AACA;AACI;AAClB;AACY;AACV;AACI;AACkB;AACd;AACM;AACZ;AACY;AACR;AACR;AACwB;AACR;AACF;AACJ;AACM;AACQ;AACd;AACc;AACN;AACA;AACU;AACxB;AACY;AACJ;AACI;AACM;AACV;AACI;AACJ;AACF;AACgB;AACA;AACd;AACsB;AACA;AACN;AACd;AACA;AACU;AACV;AACR;AACc;AACN;AACN;AACJ;AACF;AACc;AACA;AACQ;AACN;AACM;AACZ;AACI;AACR;AACgB;AACR;AACF;AACQ;AACE;AACR;AAChB;AACY;AACM;;;AAGvD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,oBAAoB;AACpB;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEO;AACP,SAAS,8CAA8B;AACvC;;AAEO;AACP,SAAS,8CAA8B;AACvC;;AAEO;AACP,SAAS,qCAAqB;AAC9B;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACO;AACP;;AAEA;AACA;AACA;AACA,IAAI,+BAAW;AACf;AACA;AACA;AACA,kDAAkD,wCAAqB;AACvE;;AAEA;AACA,EAAE,iCAAY,sBAAsB,KAAK;AACzC;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAe;AAC9B,IAAI;AACJ;AACA,IAAI,iCAAY,+BAA+B,eAAe;AAC9D;AACA;AACA;;;;;;;;;;;;;;ACnrBkC;AACY;;AAE9C,wCAAwC,aAAa;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,uEAAY,6BAA6B,SAAS;AACpD,2BAA2B,yFAAqB;;AAEhD,oBAAoB,yFAAqB;AACzC;AACA,IAAI,qEAAW,wDAAwD,IAAI;AAC3E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,uEAAY,iCAAiC,KAAK;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,KAAK;AACpC;AACA,GAAG;;AAEH;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA,oDAAoD,WAAW,GAAG,UAAU;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,WAAW,GAAG,UAAU;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;;;;;;;;;;;;;;AC5MkC;AAC4B;AACxB;AACP;;AAE/B;;AAEA;AACA;AACA,MAAM,uDAAuD;AAC7D,MAAM,sDAAsD;AAC5D,MAAM,qDAAqD;AAC3D,MAAM,2DAA2D;AACjE,MAAM,0DAA0D;AAChE,MAAM,uDAAuD;AAC7D,MAAM,wDAAwD;AAC9D,MAAM,sDAAsD;AAC5D,MAAM,8DAA8D;AACpE,MAAM,4DAA4D;AAClE,MAAM,qDAAqD;AAC3D,MAAM,oDAAoD;AAC1D,MAAM,uDAAuD;AAC7D,MAAM,sDAAsD;AAC5D,MAAM,sDAAsD;AAC5D,MAAM,2DAA2D;AACjE,MAAM,0DAA0D;AAChE,MAAM,0DAA0D;AAChE,MAAM,4DAA4D;AAClE,MAAM,yDAAyD;AAC/D,MAAM,oDAAoD;AAC1D,MAAM,qDAAqD;AAC3D,MAAM,yDAAyD;AAC/D,MAAM,sDAAsD;AAC5D,MAAM,0DAA0D;AAChE,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,wDAAwD;AAC9D,MAAM,sDAAsD;AAC5D,MAAM,yDAAyD;AAC/D,MAAM,sDAAsD;AAC5D,MAAM,uDAAuD;AAC7D,MAAM,gEAAgE;AACtE,MAAM,iEAAiE;AACvE,MAAM,0DAA0D;AAChE,MAAM,2DAA2D;AACjE,MAAM,8DAA8D;AACpE,MAAM,+DAA+D;AACrE;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,QAAQ,uEAAY,8BAA8B,MAAM;AACxD,gEAAgE,MAAM;AACtE,yDAAyD,MAAM;AAC/D;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,IAAI,uEAAY,uBAAuB,iBAAiB,gBAAgB,KAAK;AAC7E;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,8BAA8B,iBAAiB,MAAM,MAAM;AAC7E,8DAA8D,gBAAgB;AAC9E;AACA,yDAAyD,gBAAgB;AACzE;AACA;AACA;AACA,GAAG;;AAEH,qDAAqD;AACrD;AACA,iDAAiD,KAAK;AACtD;;AAEA;AACA;AACA,mDAAmD,KAAK;AACxD;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,YAAY,oFAAsB;AAClC;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA,qEAAqE,4BAA4B;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM,uEAAY,mBAAmB,KAAK,cAAc,mBAAmB;AAC3E;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,qCAAqC,kBAAkB;AACzE;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,wBAAwB,cAAc,GAAG,eAAe;AACxD;AACA,GAAG;;AAEH;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA,8BAA8B,qDAAqD,IAAI;AACvF,YAAY,uEAAY,mCAAmC,IAAI,aAAa,iFAAkB,CAAC;AAC/F,oBAAoB,uEAAY,sCAAsC,OAAO,aAAa,iFAAkB,CAAC;AAC7G;AACA;AACA,MAAM,uEAAY,gBAAgB,GAAG,KAAK,0BAA0B;AACpE;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qEAAW,mBAAmB,MAAM;AAC1C;AACA,wDAAwD,YAAY,GAAG,KAAK;AAC5E;AACA,QAAQ,uEAAY,+BAA+B,GAAG,8CAA8C,KAAK;AACzG;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,WAAW,6FAAwB;AACnC,+BAA+B,iFAAkB;AACjD,KAAK;AACL,GAAG;;AAEH;AACA;AACA,MAAM,qEAAW;AACjB;AACA,sBAAsB,iFAAkB;;AAExC,0CAA0C,+FAAyB;AACnE,+BAA+B,yGAA8B;;AAE7D;AACA;;AAEA,MAAM,qEAAW,aAAa,MAAM,wBAAwB,WAAW,iBAAiB,gBAAgB;AACxG,iCAAiC,eAAe;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0FAAqB;;AAExC;AACA;AACA;;AAEA;AACA;;AAEA,oCAAoC,0FAAqB;AACzD;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,0FAAqB;AAClD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0FAAqB;AACvC;AACA;AACA,UAAU;AACV;AACA,kBAAkB,0FAAqB;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY,GAAG,iBAAiB;AACxE;AACA,UAAU;AACV;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,eAAe;AACf,cAAc;AACd;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,mBAAmB,0FAAqB;;AAExC;AACA;AACA;AACA,oCAAoC,0FAAqB;AACzD;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;;AAGA;;AAEA,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;ACzXU;AACR;AACiC;;AAEnE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW,EAAE,iCAAiC,EAAE,0BAA0B;AACrF;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,mDAAmD;AACnD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,gBAAgB,oBAAoB;AACpC;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU,GAAG,YAAY;AAChD;;AAEA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY;AAClB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE;AACA,oBAAoB,WAAW,EAAE,KAAK;AACtC,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC,mBAAmB,MAAM;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA,4CAA4C,gBAAgB;;AAE5D;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,wFAAwF,yFAA0B;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,MAAM,yFAA0B;AAChC;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yFAA0B;AAClC,QAAQ,yFAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA,sBAAsB,IAAI;AAC1B,sBAAsB,IAAI;AAC1B;AACA;AACA,gBAAgB,IAAI;AACpB,MAAM;AACN,4CAA4C,IAAI,uBAAuB,IAAI;AAC3E,gBAAgB,KAAK,EAAE,YAAY;AACnC;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iHAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,aAAa,IAAI;;AAEjB;AACA,GAAG;;AAEH;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6FAA6F,uBAAuB,GAAG,YAAY;AACnI;AACA;AACA,aAAa;AACb;AACA;AACA,2FAA2F,uBAAuB,GAAG,YAAY;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,YAAY,WAAW,eAAe,8BAA8B;AACtF;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,IAAI,uEAAY,sBAAsB,WAAW,cAAc,OAAO;;AAEtE;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY,UAAU,uBAAuB,YAAY,WAAW,cAAc,OAAO;AAC/F,MAAM;AACN,MAAM,uEAAY,wBAAwB,UAAU;AACpD;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA,gGAAgG,YAAY;AAC5G,MAAM;AACN,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN,MAAM,uEAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;ACvuBa;;AAEtC;;AAEA;AACA,6BAA6B,iFAAkB;AAC/C,GAAG;;AAEH;AACA,sBAAsB,iFAAkB,kBAAkB,6KAA6D;AACvH,sBAAsB,iFAAkB;AACxC,GAAG;;AAEH;AACA,iFAAiF,iFAAkB;AACnG,gBAAgB,mFAAmB;AACnC,GAAG;;AAEH;AACA,0DAA0D,iFAAkB;AAC5E,gBAAgB,uFAAqB;AACrC,GAAG;;AAEH;AACA,iFAAiF,iFAAkB;AACnG,WAAW,iFAAkB;AAC7B,GAAG;;;AAGH;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;AC/B0B;;AAEnC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;;;;;;;;;;;;;;;;;;;;ACzE+B;AACQ;AACL;AACmB;AACa;;AAElE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;;AAEO;AACP;AACA;AACA,UAAU,6GAAoC;AAC9C;AACA;;AAEO;AACP;AACA;AACA;AACA,mCAAmC,uFAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA,sDAAsD;AACtD;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;;AAE3B;AACA;AACA,qBAAqB,sGAA6B;AAClD,qEAAqE,iBAAiB,GAAG,EAAE,iBAAiB;AAC5G;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,EAAE,cAAc,EAAE;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8FAAuB;AACzD;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA,SAAS;AACT;AACA,+DAA+D,mBAAmB;AAClF;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;;AAEA;AACA,6DAA6D,GAAG,aAAa,2BAA2B;AACxG,0CAA0C,GAAG;AAC7C;AACA,+CAA+C,gFAAgB,MAAM;AACrE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,wGAA8B;AACtC;AACA,oDAAoD,kCAAkC;AACtF;AACA,mDAAmD,qBAAqB;AACxE,MAAM;AACN;AACA,wBAAwB,wGAA8B;AACtD;AACA,sDAAsD,wCAAwC;AAC9F;AACA,qDAAqD,2BAA2B;AAChF,QAAQ;AACR,QAAQ,uEAAY;AACpB,4EAA4E,wBAAwB,oBAAoB,oBAAoB;AAC5I;AACA;AACA,MAAM;AACN;AACA,QAAQ,uEAAY;AACpB;AACA,MAAM,uEAAY,sDAAsD,oBAAoB;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;;AAEA;AACA;AACA,2BAA2B,GAAG;AAC9B,aAAa,4BAA4B,IAAI,iCAAiC;AAC9E,6CAA6C,GAAG;AAChD;AACA,+CAA+C,gFAAgB,MAAM;AACrE,KAAK;AACL;;AAEA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;;AAEA;AACA,0DAA0D,GAAG;AAC7D,8CAA8C,GAAG;AACjD;AACA,+CAA+C,gFAAgB,MAAM;AACrE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY,oBAAoB,MAAM;AAC5C,MAAM,qEAAW,yDAAyD,GAAG,aAAa,uBAAuB;AACjH;AACA;;AAEA;AACA,6BAA6B,OAAO,GAAG,mBAAmB;AAC1D;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,IAAI;AACJ,YAAY,OAAO,gCAAgC,OAAO;AAC1D,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sBAAsB,MAAM,IAAI,mBAAmB;AACnD;AACA;AACA;AACA,sBAAsB,MAAM,IAAI,mBAAmB;AACnD;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA,MAAM,uEAAY,oBAAoB,MAAM;AAC5C,MAAM,qEAAW,yDAAyD,GAAG,aAAa,uBAAuB;AACjH;AACA;;AAEA;AACA,gBAAgB,OAAO,GAAG,oCAAoC;AAC9D;;AAEA;;AAEA;AACA;;AAEA;AACA,kCAAkC,sBAAsB;AACxD;;AAEA;AACA;AACA,mBAAmB,UAAU;AAC7B,IAAI,mCAAmC,UAAU,gCAAgC,UAAU;AAC3F,qBAAqB,UAAU;AAC/B;;AAEA;AACA;;AAEA;AACA,6DAA6D,KAAK;AAClE,mDAAmD,KAAK;AACxD;AACA;AACA,IAAI,qEAAW,8BAA8B,KAAK;AAClD;AACA;AACA,sBAAsB,8EAAe;AACrC,kIAAkI;AAClI;AACA,+DAA+D,KAAK;AACpE,0BAA0B,MAAM,GAAG,UAAU,EAAE,EAAE,KAAK;AACtD,IAAI,gCAAgC;AACpC,gDAAgD,kCAAkC;AAClF;AACA;AACA,iEAAiE,KAAK;AACtE,4BAA4B,MAAM,GAAG,eAAe,EAAE,EAAE,UAAU;AAClE;AACA;AACA,EAAE,qEAAW,iDAAiD,MAAM,MAAM,IAAI;AAC9E;AACA;;AAEA;AACA;AACA;AACA,IAAI,qEAAW,wBAAwB,MAAM;AAC7C;AACA;AACA,qBAAqB,8EAAe;;AAEpC;AACA;AACA,IAAI;AACJ;AACA;AACA,wCAAwC,eAAe,oBAAoB,kBAAkB,EAAE,EAAE,IAAI;AACrG;AACA,IAAI,gEAAgE;AACpE;AACA,0DAA0D,cAAc;AACxE,6CAA6C,kBAAkB;AAC/D,sCAAsC,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,IAAI;AAC/E,IAAI;AACJ,oIAAoI;AACpI,0HAA0H;AAC1H;AACA;AACA,8DAA8D,gBAAgB;AAC9E,iDAAiD,oBAAoB;AACrE,wCAAwC,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,IAAI;AACnF,MAAM;AACN,MAAM,qEAAW,6CAA6C,MAAM;AACpE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA,kBAAkB,GAAG,cAAc,iBAAiB,GAAG,UAAU,EAAE,EAAE,IAAI,EAAE,GAAG;AAC9E;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,qEAAW,yBAAyB,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,cAAc,OAAO,IAAI,GAAG;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iHAAiH,YAAY;AAC7H;AACA,oCAAoC,qCAAqC;AACzE;;AAEA;AACA;;AAEA;AACA;AACA,mDAAmD,aAAa;AAChE,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACe;AACf;;AAEA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,YAAY;AACpB;AACA,yDAAyD,KAAK;AAC9D,6FAA6F,+BAA+B,EAAE,KAAK;AACnI;AACA;AACA,wDAAwD,MAAM,IAAI,WAAW;AAC7E,GAAG;;AAEH,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE,sBAAsB;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;;AAEA,qFAAqF,cAAc;AACnG;AACA;AACA;AACA;AACA;AACA,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6CAA6C;AACzE,UAAU;AACV,8BAA8B,oBAAoB;AAClD;AACA;AACA,QAAQ;AACR,mEAAmE,EAAE,QAAQ;AAC7E,QAAQ,qEAAW,oDAAoD,EAAE,QAAQ;AACjF,QAAQ,qEAAW;AACnB;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;AClkBA;AACA;AACA;;AAEkC;;AAE3B;AACP,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,4EAA4E,wBAAwB,IAAI,eAAe;AACvH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,mBAAmB,GAAG,aAAa,IAAI,WAAW;AAC9D,YAAY,mBAAmB,IAAI,WAAW;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE,cAAc;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,kBAAkB;AACxC;AACA;AACA,+BAA+B,cAAc,GAAG,SAAS;AACzD;AACA;AACA,4EAA4E,cAAc,KAAK,2BAA2B;;AAE1H,UAAU;AACV;AACA,YAAY,uEAAY,iCAAiC,wBAAwB,KAAK,mBAAmB;AACzG,YAAY,uEAAY;AACxB,YAAY,uEAAY;AACxB;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;;;;;;;;;;;;;;;ACzKwD;AAC1B;AACI;AACD;AACN;;AAE/B;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA,aAAa,MAAM;AACnB,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,MAAM,uEAAY,0BAA0B,cAAc;AAC1D,kBAAkB,yFAAqB;AACvC,6BAA6B,2FAAsB;AACnD;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA,qGAAqG,OAAO,GAAG,YAAY;AAC3H;AACA;;AAEA;AACA,MAAM;AACN,MAAM,uEAAY,+BAA+B,cAAc;AAC/D;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,IAAI,uEAAY,iBAAiB,UAAU,KAAK,QAAQ;AACxD;;AAEA;;AAEA;AACA,MAAM,uEAAY,UAAU,SAAS;AACrC,MAAM;AACN,MAAM,uEAAY,mBAAmB,QAAQ;AAC7C;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH;AACA,IAAI,qEAAW,oBAAoB,UAAU;;AAE7C;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,4CAA4C,iFAAkB;;AAE9D;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,OAAO;;AAEP;AACA,GAAG;;AAEH;AACA,sCAAsC,iFAAkB;AACxD,8CAA8C,iBAAiB;AAC/D;AACA;AACA,oFAAoF,oBAAoB;AACxG;;AAEA,yBAAyB,uGAA4B;AACrD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,UAAU,uEAAY;AACtB;AACA,SAAS;AACT,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA,sCAAsC,iFAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,uFAAqB;AACjD,0CAA0C,iFAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY;AAClB,0GAA0G,IAAI;AAC9G;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,eAAe,OAAO,GAAG,SAAS;AAClC,MAAM;AACN;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA,qDAAqD,YAAY,GAAG,SAAS;AAC7E,QAAQ;AACR;AACA;AACA,8CAA8C,OAAO,GAAG,YAAY,GAAG,SAAS;AAChF;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,oBAAoB,yFAAqB;AACzC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,gDAAgD,OAAO,GAAG,YAAY,GAAG,SAAS;AAClF,UAAU;AACV;AACA,2BAA2B,WAAW,GAAG,qCAAqC,GAAG,YAAY,GAAG,SAAS;AACzG,UAAU;AACV,UAAU,uEAAY;AACtB;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,uBAAuB,4BAA4B,WAAW;AAC9D,mCAAmC,iFAAiF,IAAI;AACxH,6CAA6C,iFAAkB;AAC/D,6CAA6C,iFAAkB;AAC/D;AACA,oEAAoE,iFAAkB;AACtF,0EAA0E,iFAAkB;AAC5F,sCAAsC,iFAAkB;;AAExD;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,kGAAyB;AAC7D;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;AC5TwB;AACZ;AACD;;AAErC;;AAEA;AACA,QAAQ,+EAAiB,aAAa;AACtC,kCAAkC,iFAAkB;AACpD,uBAAuB,+EAAiB;AACxC,mBAAmB;;AAEnB;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,2FAAoB,iBAAiB,aAAa;AAC9D;AACA;AACA,+CAA+C,iFAAkB;AACjE;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;;AAEH;AACA,QAAQ,+EAAiB,aAAa;AACtC,uBAAuB,+EAAiB;AACxC,mBAAmB;;AAEnB;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,wCAAwC,+EAAiB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,sBAAsB,iFAAkB;AACxC,GAAG;;AAEH;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;ACjGK;AACI;AACD;;AAErC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP,sFAAsF,WAAW;AACjG;;AAEO;AACP;AACA,wCAAwC,iFAAkB;AAC1D;;AAEA,EAAE,uEAAY,kCAAkC,WAAW,cAAc,aAAa,eAAe,gBAAgB;AACrH;AACA,uDAAuD,WAAW;AAClE,IAAI;AACJ;AACA,IAAI;AACJ,+BAA+B,iFAAkB;AACjD;;AAEA;AACA;;AAEO;AACP,wCAAwC,iFAAkB;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA,EAAE,uEAAY,kCAAkC,WAAW,cAAc,aAAa,eAAe,gBAAgB;AACrH;AACA,8CAA8C,WAAW;AACzD,IAAI;AACJ;AACA,IAAI;AACJ,4BAA4B,iFAAkB;AAC9C;AACA;;AAEO;AACP;;AAEA;AACA,iDAAiD,WAAW;AAC5D;AACA;;AAEO;AACP;AACA,0BAA0B,iFAAkB;AAC5C,oBAAoB,iFAAkB;AACtC;;AAEO;AACP,oBAAoB,iFAAkB;AACtC,oBAAoB,iFAAkB;AACtC;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB,+EAAiB;AACtC,oCAAoC,iFAAkB;AACtD,iBAAiB;;AAEjB;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB;AACA,OAAO;AACP,GAAG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnGuD;AACH;AACF;AACwD;AACxE;AACI;AACQ;AACT;;AAErC;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA,IAAI,2FAAoB,oCAAoC,WAAW;AACvE,IAAI,uEAAY,oCAAoC,WAAW;AAC/D;AACA,IAAI;AACJ,IAAI,2FAAoB,sEAAsE,WAAW;AACzG,IAAI,uEAAY,sEAAsE,WAAW;AACjG;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM,UAAU,OAAO;AACxE;AACA;AACA;AACA;;AAEO;AACP,sCAAsC,iFAAkB;AACxD,sBAAsB,uGAA4B;AAClD,iBAAiB,gEAAS;AAC1B;AACA;AACA;;AAEA;;AAEA,gBAAgB,+EAAiB;AACjC;AACA,4BAA4B,MAAM;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;;AAE7B;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA,IAAI,qEAAW;AACf,IAAI,uEAAY;AAChB,gGAAgG,UAAU,gBAAgB,eAAe,SAAS,cAAc,SAAS,cAAc;AACvL,GAAG;;AAEH;AACA,IAAI,uEAAY;;AAEhB;;AAEA,sBAAsB,iFAAkB;AACxC,sBAAsB,iFAAkB;AACxC,sBAAsB,iFAAkB;;AAExC;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA,IAAI,uEAAY;AAChB;AACA,GAAG;AACH;;AAEA;AACA,yCAAyC,gEAAS;AAClD,qBAAqB,+EAAiB;AACtC,oCAAoC,iFAAkB;AACtD,iBAAiB;;AAEjB;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB;AACA,OAAO;AACP,GAAG;;AAEH;;AAEA;AACA,6BAA6B,iEAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,QAAQ,gEAAS;AACjB,0BAA0B,iFAAkB;AAC5C,sDAAsD,iFAAkB;AACxE;AACA,IAAI,wEAAiB;AACrB,IAAI;AACJ,IAAI,2EAAoB;AACxB;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,oBAAoB;AACpB,kCAAkC,iFAAkB;AACpD;AACA;AACA;AACA,0CAA0C,iFAAkB;AAC5D,wBAAwB,4GAAgC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA,yCAAyC,iFAAkB;AAC3D;AACA,8BAA8B,iFAAkB;AAChD,YAAY,oGAA4B;AACxC;;AAEA,0CAA0C,iFAAkB;;AAE5D;AACA,wBAAwB,iFAAkB;AAC1C,UAAU,uEAAU;AACpB;;AAEA;AACA;;AAEO;AACP;;AAEA,gCAAgC,iFAAkB;AAClD;AACA;AACA,IAAI;AACJ,wBAAwB,4GAAgC;AACxD;AACA;AACA,MAAM;AACN;AACA,wBAAwB,iFAAkB;AAC1C;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gEAAS;AAC5B,0CAA0C,gBAAgB,QAAQ,iEAAW;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,gEAAS;;AAEnB,+BAA+B,iEAAW;AAC1C;AACA;AACA,MAAM;AACN,4CAA4C,iFAAkB;;AAE9D;AACA,0BAA0B,iFAAkB;AAC5C,YAAY,uEAAU;AACtB;AACA;AACA;AACA;;;AAGA;AACA;AACA,EAAE,iGAA2B;AAC7B,CAAC;;AAEM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB,mBAAmB,gEAAS;AAC5B;AACA,+BAA+B,iEAAW;AAC1C,0CAA0C,iFAAkB;AAC5D,qCAAqC,iFAAkB;AACvD,kCAAkC,iFAAkB;AACpD;AACA,mCAAmC,iFAAkB;AACrD,0CAA0C,iFAAkB;AAC5D,0CAA0C,4GAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY,IAAI,eAAe,GAAG,oBAAoB,MAAM,YAAY;AACpH,SAAS;AACT,QAAQ;AACR,QAAQ,qEAAW;AACnB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,iEAAW;AAC5C;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;;AAGL;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,yCAAyC,iFAAkB;;AAE3D;AACA,8BAA8B,iFAAkB;AAChD,YAAY,oGAA4B;AACxC;;AAEA,4BAA4B,iFAAkB;AAC9C;;AAEA,0CAA0C,iFAAkB;;AAE5D;AACA;AACA;AACA;AACA,MAAM;AACN,wBAAwB,iFAAkB;AAC1C,UAAU,uEAAU;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B,IAAI,oBAAoB;AACrE;AACA;AACA;AACA,KAAK,IAAI;;AAET;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA,wBAAwB,6FAAwB;AAChD;AACA;AACA,iCAAiC,iFAAkB;AACnD,qEAAqE,iFAAkB;AACvF,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,wBAAwB,iFAAkB;AAC1C;AACA;AACA;;;AAGA;AACA,uCAAuC,iFAAkB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB,mCAAmC,iFAAkB;AACrD,kBAAkB,sGAA6B;AAC/C;;AAEA,uCAAuC,yJAAsD;AAC7F;AACA;AACA;AACA,kDAAkD,iFAAkB;AACpE,6CAA6C,iFAAkB,CAAC,yBAAyB,IAAI;AAC7F;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,gDAAgD,iFAAkB;AAClE,2CAA2C,iFAAkB,CAAC;AAC9D;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,iFAAkB;AACxD;AACA;AACA,8BAA8B,iFAAkB;AAChD;AACA,mCAAmC,iFAAkB;;AAErD;AACA,MAAM,qEAAW;AACjB;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB;AACpB,sCAAsC,iFAAkB;AACxD;;AAEA,8CAA8C,mIAA2C;AACzF;AACA;AACA,iCAAiC,iFAAkB;AACnD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;;AAEA;;AAEA,4BAA4B,iFAAkB;;AAE9C;;AAEA,kCAAkC,mIAA2C;AAC7E;AACA;AACA,8BAA8B,iFAAkB;AAChD;AACA;AACA;AACA,eAAe,uGAA4B;AAC3C;AACA,uBAAuB,+FAA0B,CAAC,qFAAqB;AACvE,OAAO;AACP;;AAEA;AACA;AACA;AACA,MAAM,uEAAY;AAClB;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA,MAAM,uEAAY;AAClB;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,iGAA2B;AAC7B,CAAC;;;;;;;;;;;;;ACvrBiC;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,MAAM,qEAAW,UAAU,YAAY;AACvC;AACA,uBAAuB,mBAAmB,IAAI,aAAa;AAC3D,iEAAiE,YAAY;AAC7E,OAAO;AACP;AACA;AACA;AACA,MAAM,qEAAW,UAAU,YAAY;AACvC,+BAA+B,YAAY;AAC3C;AACA,MAAM;AACN,MAAM,qEAAW,UAAU,YAAY;AACvC,MAAM,qEAAW;AACjB;AACA;AACA,GAAG;AACH,4BAA4B,qEAAW;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;AC3DkC;AACgD;;AAElF;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,+BAA+B,wGAA2B;AAC1D;AACA,+BAA+B,KAAK;AACpC,IAAI,qEAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpDA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,wBAAwB;AACxB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA,8BAA8B;AAC9B,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;;AAEA,kBAAkB,WAAW;AAC7B;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,8CAA8C,wBAAwB,EAAE,MAAM;AAC9E;AACA;AACA,0CAA0C,kBAAkB;AAC5D,SAAS,WAAW,MAAM,OAAO,EAAE,MAAM,GAAG,IAAI,EAAE,aAAa,EAAE,WAAW;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,mBAAmB,MAAM;;AAEzB;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,iCAAiC;AACjC;AACA;AACA;AACA,wDAAwD,oBAAoB;AAC5E;AACA,UAAU;AACV,kCAAkC,oBAAoB;AACtD;AACA,OAAO;AACP;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,EAAE,YAAY,EAAE,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,QAAQ;AACR;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE,KAAK;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,oBAAoB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;AC5ZrB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB,IAAI,cAAc,IAAI,WAAW;;AAEvE;AACA;AACA;AACA,yCAAyC;AACzC,UAAU;AACV,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,wCAAwC;AACxC,UAAU;AACV,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,wCAAwC;AACxC,UAAU;AACV,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,yCAAyC;AACzC,UAAU;AACV,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,wCAAwC;AACxC,UAAU;AACV,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,UAAU;AACV,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,UAAU;AACV,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;ACzIY;AACe;AACH;AACA;AACJ;AACJ;;AAEqC;AACF;;AAEzE;AAC6G;;AAE9F;;AAEf;AACA,IAAI,qEAAW,SAAS,wBAAwB;AAChD;;AAEA;AACA;AACA;AACA,4CAA4C,iFAAkB;AAC9D;AACA,0BAA0B,iFAAkB;AAC5C;AACA;AACA;AACA,0BAA0B,iFAAkB;AAC5C;AACA;AACA,0BAA0B,iFAAkB;AAC5C,yCAAyC,iFAAkB;AAC3D,4CAA4C,iFAAkB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA,iBAAiB,kDAAkD,IAAI;AACvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA,oCAAoC;AACpC;AACA;AACA,yBAAyB,oEAAS;AAClC,sCAAsC,iFAAkB;AACxD,uBAAuB,mFAAiB;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,iFAAkB;;AAE1D;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,YAAY,uEAAY;AACxB;AACA;AACA;AACA,YAAY,qFAAmB;AAC/B;AACA;AACA,SAAS;AACT;AACA,sCAAsC,kBAAkB;AACxD,UAAU,qEAAW,cAAc,kBAAkB;AACrD;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,qEAAW;AACf;AACA;AACA,QAAQ,uEAAY,wBAAwB,aAAa;AACzD,QAAQ,qEAAW,kBAAkB,aAAa;AAClD,+BAA+B,sEAAU,YAAY,6DAA6D;AAClH;AACA;AACA;AACA,QAAQ,2EAAc,kBAAkB,aAAa;AACrD;AACA,QAAQ;AACR,QAAQ,uEAAY,mBAAmB,aAAa;AACpD,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,2EAAc;;AAElB;AACA,gBAAgB,sBAAsB,mBAAmB,kCAAkC;AAC3F;AACA;AACA;AACA,IAAI,qEAAW,WAAW,sBAAsB,mBAAmB,kCAAkC;AACrG;AACA,MAAM,uEAAY;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,qEAAW;AACf,oDAAoD;AACpD,yCAAyC,iFAAkB;AAC3D,2CAA2C,iFAAkB;AAC7D,8CAA8C,iFAAkB;AAChE;AACA;AACA;;AAEA;AACA,IAAI,qEAAW;AACf;AACA,UAAU,6GAA+B;AACzC,UAAU,6GAA+B;AACzC,IAAI,qEAAW;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,wEAAkB,oBAAoB,iBAAiB;AAC5F;AACA;AACA,QAAQ,uEAAY;AACpB,QAAQ,uEAAY,YAAY,sBAAsB;AACtD,mCAAmC,uBAAuB;AAC1D,yBAAyB,iEAAW;AACpC;AACA;AACA,QAAQ,uEAAY;AACpB,6CAA6C,uBAAuB;AACpE,mBAAmB,sFAAyB;AAC5C;AACA;AACA;AACA;AACA,gCAAgC,iEAAW;;AAE3C;AACA,UAAU,4EAAe;;AAEzB,oDAAoD,iFAAkB;AACtE;AACA;AACA;AACA,YAAY,gGAA+B;AAC3C;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA;AACA,2BAA2B,eAAe,GAAG,aAAa,sCAAsC,aAAa;AAC7G,QAAQ;AACR,2BAA2B,eAAe,GAAG,aAAa,cAAc,cAAc;AACtF;AACA,MAAM,uEAAY,cAAc,cAAc;AAC9C;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA,kCAAkC,uBAAuB;AACzD,MAAM,uEAAY,cAAc,uBAAuB;AACvD,YAAY,gFAAmB;AAC/B;AACA;AACA,oDAAoD;;AAEpD,IAAI,2EAAc;AAClB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxQqC;AACuB;AACC;AACnB;AACS;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,iCAAY;;AAEd,wBAAwB,sBAAO;AAC/B;;AAEA;AACA,wCAAwC,aAAa,GAAG,SAAS;;AAEjE;AACA;AACA;AACA,IAAI,iCAAY,eAAe,aAAa;AAC5C;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oCAAoC,wCAAS;;AAE7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,EAAE,iCAAY;AACd;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY,IAAI,eAAe;AACrC;AACA,QAAQ,iCAAY,IAAI,uBAAuB;AAC/C;AACA;AACA;AACA,yBAAyB,mDAAmD;AAC5E;AACA,OAAO;AACP,KAAK;;AAEL,sCAAsC,sCAAW;AACjD,EAAE,oBAAoB,cAAc,8BAA8B;AAClE,EAAE,iCAAY;AACd,QAAQ,0CAAgB,aAAa,+BAA+B;;AAEpE,uCAAuC,kEAA6B;;AAEpE;AACA;AACA;AACA,MAAM,iCAAY,IAAI,eAAe;AACrC,0BAA0B,sBAAO;AACjC;AACA;AACA,KAAK;AACL;;AAEA,EAAE,iCAAY;;AAEd,6BAA6B,sCAAW;AACxC,EAAE,oBAAoB,cAAc,qBAAqB;;AAEzD,EAAE,iCAAY;;AAEd,QAAQ,0CAAgB,YAAY,qBAAqB;;AAEzD;AACA;;;;;;;;;;;;;ACrIA;AACyC;AACG;AACE;AACK;AACL;AACR;AACI;;AAE1C;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,kCAAa;AAClC,qBAAqB,yCAAiB;AACtC,oCAAoC,2CAAkB;AACtD,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,QAAQ;AAC9B;AACA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA;;AAEA;AACA;;;;;;;AChDA;AACyC;AACG;AACE;AACK;AACL;AACR;AACI;;AAE1C;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,kCAAa;AAClC,qBAAqB,yCAAiB;AACtC,oCAAoC,2CAAkB;AACtD,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,yBAAQ;AAC9B;AACA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA;AACA;;;;;;;;;;;;;;;AC9C+C;AACc;AACZ;AACZ;AACQ;AACD;AACgB;AACrB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEO,MAAM,gBAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAM,kBAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,8BAAa;AACxC,wCAAwC,iBAAiB;;AAEzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,gDAAqB;;AAE9C;AACA;;AAEO;AACP,EAAE,iCAAY,YAAY,YAAY;AACtC,0BAA0B,qEAAmC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB,GAAG,iBAAiB;AAClE;AACA,aAAa;AACb,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,gFAAgF,gBAAgB,GAAG,iBAAiB;AACpH;AACA;AACA,KAAK;;AAEL;AACA;;AAEO;AACP,EAAE,iCAAY,YAAY,YAAY;AACtC;AACA;;AAEA,0BAA0B,qEAAmC;;AAE7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,+BAA+B,gBAAgB,GAAG,iBAAiB,EAAE,EAAE,cAAc;AACrF,mBAAmB,aAAa;;AAEhC;AACA,wBAAwB,MAAM,IAAI,oBAAoB;AACtD;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP,EAAE,iCAAY;;AAEd;AACA;;AAEA,2BAA2B,kBAAW;AACtC,wCAAwC,cAAc,GAAG,WAAW;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sBAAsB;AAC1E,kCAAkC,WAAW,EAAE,cAAc;;AAE7D,oCAAoC,wCAAS;;AAE7C;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA,EAAE,iCAAY,YAAY,WAAW;AACrC;AACA;AACA,6BAA6B,4DAAyB;AACtD;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,8BAA8B,mDAAuB;AACrD;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,sBAAsB,mDAAuB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,2BAA2B,mDAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,UAAU;AACrD,2CAA2C,eAAe;;AAE1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;;AAE5C;AACA;AACA,6BAA6B,uEAAiC;AAC9D;AACA,QAAQ,2EAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,yBAAyB;AACpE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mEAA+B;AAClD,yBAAyB,mDAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,+CAA+C,qEAAgC;AAC/E;AACA,0BAA0B,qEAAgC;AAC1D;AACA,OAAO;AACP,yBAAyB,mDAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,2EAAmC;AAC3D;AACA,4BAA4B,2EAAmC;AAC/D;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4EAA4E,2BAA2B;AACvG;;AAEA;AACA;;;;;ACrWqC;AACwB;AAC6D;AAC7D;AACnB;AACkB;AAC5D,YAAY,qBAAqB;AACoD;;AAErF;AACA,qBAAqB,cAAc;AACnC,2CAA2C,kBAAkB;AAC7D,oCAAoC,wCAAS;AAC7C,iCAAiC,oCAAgB,aAAa,2BAA2B;AACzF,oCAAoC,sCAAkB;AACtD;AACA;;AAEO;AACP;AACA,EAAE,iCAAY;AACd;;AAEA;AACA;;AAEA;AACA,IAAI,iCAAY,IAAI,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,IAAI,cAAc;AACtC,aAAa,yBAAkB;AAC/B,gCAAgC,eAAe;AAC/C;AACA,yBAAyB,wDAAwD;AACjF;AACA,OAAO;AACP,GAAG;;AAEH,qCAAqC,sCAAW;AAChD,EAAE,oBAAoB,cAAc,6BAA6B;AACjE,EAAE,iCAAY,cAAc,6BAA6B;AACzD,QAAQ,0CAAgB,eAAe,gCAAgC;;AAEvE,qBAAqB,mEAAkC;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA,IAAI,iCAAY,IAAI,YAAY;AAChC;AACA;AACA,GAAG;;AAEH,EAAE,iCAAY;;AAEd,+BAA+B,sCAAW;AAC1C,EAAE,oBAAoB,cAAc,uBAAuB;;AAE3D,QAAQ,0CAAgB,cAAc,yBAAyB;;AAE/D;AACA;AACA;;;AC1EqC;AACwB;AACZ;AACW;AAC8D;AAC7D;AACnB;AACH;AACvC,YAAY,qBAAqB;;AAEjC;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,8BAA8B,mDAAuB;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,sBAAsB,mDAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,2BAA2B,mDAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD,6CAA6C,eAAe;AAC5D;AACA;;AAEA,iCAAiC,4DAAyB;AAC1D,4BAA4B,4DAAyB;AACrD;AACA,kBAAkB,eAAe,GAAG,WAAW;;AAE/C;AACA,2CAA2C,cAAc,SAAS,qBAAqB;;AAEvF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA,2CAA2C,kBAAkB;AAC7D,oCAAoC,wCAAS;AAC7C,0CAA0C,2BAA2B;AACrE;AACA;;AAEO;AACP,EAAE,iCAAY;AACd;;AAEA,0BAA0B,mEAAkC;AAC5D,4BAA4B,mEAAkC;AAC9D;AACA;AACA,+DAA+D,QAAQ;;AAEvE;AACA;AACA;;AAEA;AACA;AACA,IAAI,iCAAY,IAAI,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,IAAI,cAAc;AACtC,aAAa,yBAAkB;AAC/B,gCAAgC,eAAe;AAC/C;AACA,yBAAyB,wEAAwE;AACjG;AACA,OAAO;AACP,GAAG;;AAEH,qCAAqC,sCAAW;AAChD,EAAE,oBAAoB,cAAc,6BAA6B;AACjE,EAAE,iCAAY,cAAc,6BAA6B;AACzD,QAAQ,0CAAgB,eAAe,gCAAgC;;AAEvE,2DAA2D,QAAQ;AACnE;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH,EAAE,iCAAY;;AAEd;AACA;AACA;AACA;AACA,GAAG;;AAEH,EAAE,iCAAY;;AAEd,+BAA+B,sCAAW;AAC1C,EAAE,oBAAoB,cAAc,uBAAuB;;AAE3D,QAAQ,0CAAgB,iBAAiB,4BAA4B;;AAErE;AACA;AACA;;;AChKqC;;AAEoB;AACI;AACnB;;AAEnC;AACP,EAAE,iCAAY;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,iCAAY,IAAI,cAAc;AAClC,SAAS,yBAAkB;AAC3B,4BAA4B,eAAe;AAC3C;AACA,qBAAqB,uDAAuD;AAC5E;AACA,GAAG;;AAEH,qCAAqC,sCAAW;AAChD,EAAE,oBAAoB,cAAc,6BAA6B;AACjE,QAAQ,0CAAgB,eAAe,gCAAgC;;AAEvE;AACA;AACA;;;ACnCA;AACkD;AACT;AACe;AACD;AACT;AACK;AACL;AACR;AACI;;AAE1C;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,kCAAa;AAClC,qBAAqB,yCAAiB;AACtC,oCAAoC,2CAAkB;AACtD,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB,mCAAmC,UAAU;AAC1E;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,aAAa;AACnC;AACA;AACA,GAAG;AACH;;AAEA;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,kCAAa;AAClC,qBAAqB,yCAAiB;AACtC,oCAAoC,2CAAkB;AACtD,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB,mCAAmC,UAAU;AAC1E;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,eAAe;AACrC;AACA;AACA,GAAG;AACH;;AAEA;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,kCAAa;AAClC,qBAAqB,yCAAiB;AACtC,oCAAoC,2CAAkB;AACtD,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,UAAU;AAChC;AACA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;ACvJA;AACyC;AACP;AACY;AACA;AACR;AACI;;AAE1C;AACA,uBAAuB,6BAAS;AAChC,oCAAoC,2CAAkB;AACtD,qBAAqB,yCAAiB;AACtC,sCAAsC,2CAAkB;;AAExD;AACA;AACA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,oBAAoB,iBAAiB,aAAa;AAC5D;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,OAAO;AACP;AACA,QAAQ,oBAAoB,cAAc,kBAAkB;AAC5D,QAAQ,+BAAW,cAAc,kBAAkB;AACnD;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEO;AACP;AACA,EAAE,iCAAY;;AAEd,EAAE,oBAAoB;AACtB;AACA,sBAAsB,4BAA4B,WAAW;AAC7D,UAAU,mDAAuB;AACjC,GAAG;;AAEH,EAAE,oBAAoB;;AAEtB;AACA;;;;;;;;;;;;;;AC5DO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AClD+D;AAC1B;AACqB;AACR;AACD;AACJ;AACJ;;AAEzC;AACA,0DAA0D,6BAA6B;AACvF,2BAA2B,aAAa;;AAEzB;AACf;AACA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6BAAc;AAC5C;;AAEA;AACA;AACA,8DAA8D,SAAS;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,IAAI,IAAI,IAAI,MAAM;AACtC;AACA;AACA,8CAA8C,2CAAkB;AAChE;AACA;AACA;AACA,MAAM,iCAAY;AAClB,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,+BAAW;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;;AAGA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;;AAEA;AACA;AACA;AACA,UAAU,+BAAW,uBAAuB,KAAK;AACjD;AACA,UAAU;AACV,UAAU,+BAAW,yBAAyB,KAAK;AACnD;AACA;AACA,OAAO;;AAEP;AACA;AACA,8FAA8F,WAAW;AACzG;;AAEA;AACA,yCAAyC,kBAAkB;AAC3D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAM,iCAAY,IAAI,gBAAgB;AACtC;AACA,YAAY,sFAA8C;AAC1D;AACA;AACA,MAAM,iCAAY,IAAI,gBAAgB;AACtC;AACA,YAAY,sFAA8C;AAC1D;AACA;AACA,MAAM,iCAAY,IAAI,gBAAgB;AACtC;AACA,YAAY,sFAA8C;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,mBAAmB,OAAO,eAAe;AACzC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc,8DAAkC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,+BAAW,wCAAwC,IAAI;AACnE;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA,MAAM,+BAAW,6CAA6C,KAAK;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iCAAY,uBAAuB,eAAe;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,+BAAW;AAClE;AACA;AACA,mBAAmB,MAAM,GAAG,SAAS;AACrC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,+BAAW,aAAa,WAAW,IAAI,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAY,IAAI,YAAY,oBAAoB,cAAc;AACxE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA,gDAAgD,2CAAkB;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW;;AAEX;AACA,UAAU,+BAAW,gBAAgB,WAAW,gCAAgC,eAAe,KAAK,iBAAiB;AACrH;AACA;AACA,4BAA4B,6BAAY;AACxC;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,iEAAiE;AAC1G,qEAAqE,QAAQ,+BAA+B;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,UAAU,+BAAW,aAAa,YAAY,cAAc,WAAW,GAAG,WAAW;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA,UAAU,8DAAkC;AAC5C,MAAM,iCAAY,oBAAoB,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,MAAM,iCAAY,kCAAkC,WAAW;AAC/D,KAAK;;AAEL;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA,UAAU,8DAAkC;AAC5C,MAAM,iCAAY,qBAAqB,YAAY;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,QAAQ,+BAAW,aAAa,WAAW;AAC3C,QAAQ,iCAAY,IAAI,WAAW,gBAAgB,sBAAsB;AACzE;AACA;AACA,QAAQ;AACR;AACA,4GAA4G,cAAc;AAC1H,QAAQ,+BAAW,WAAW,YAAY;AAC1C,QAAQ,iCAAY;AACpB;AACA;AACA,MAAM,iCAAY,8BAA8B,WAAW;AAC3D,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,aAAa,QAAQ,gBAAgB;;AAEjE;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;;AAET;;AAEA,MAAM,iCAAY;;AAElB;AACA,mBAAmB;AACnB,kBAAkB;AAClB,kBAAkB;AAClB,uBAAuB;AACvB,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA,MAAM,iCAAY;;AAElB;AACA;AACA;AACA;;AAEA,MAAM,iCAAY;;AAElB,MAAM,iCAAY;AAClB;AACA,YAAY,8DAAkC;AAC9C,QAAQ,iCAAY,gCAAgC,WAAW;AAC/D;AACA,QAAQ,iCAAY,8BAA8B,WAAW;AAC7D,OAAO;;AAEP;AACA;AACA;AACA,UAAU,iCAAY,8BAA8B,WAAW;AAC/D;AACA;AACA;AACA,SAAS;AACT;;AAEA,MAAM,iCAAY;;AAElB,sDAAsD,4CAAuB;AAC7E,MAAM,iCAAY;;AAElB;AACA;;AAEA;AACA,QAAQ,+BAAW;AACnB,yEAAyE,YAAY,KAAK,mBAAmB;AAC7G;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;;AAEA,oEAAoE,YAAY,KAAK,mBAAmB;;AAExG;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,KAAK;AACrD;AACA,gBAAgB,kCAAkC;AAClD,qBAAqB,kDAAkD,GAAG,kCAAkC;AAC5G;;AAEA;AACA;AACA,qBAAqB,kDAAkD,GAAG,KAAK;AAC/E;AACA;;;;;;;;;;;;;ACvnBqC;AAC8B;AACP;AACb;AAC2B;AAChC;AACE;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA,SAAS,qBAAS;AAClB;AACA,iBAAiB,iCAAkB;AACnC;AACA,wCAAwC,mBAAmB;;AAE3D;AACA;AACA;AACA;;AAEA,yBAAyB,gDAAqB;AAC9C,oCAAoC,wCAAS;AAC7C,oCAAoC,8BAAa;;AAEjD;AACA;;;AAGA;AACA,eAAe,qBAAS;;AAExB;AACA;;;AAGO;AACP,EAAE,iCAAY;AACd;;AAEA;;AAEA;;AAEA;AACA,IAAI,iCAAY,IAAI,iBAAiB;AACrC;AACA;AACA,GAAG;;AAEH;;AAEA,mCAAmC,sCAAW;AAC9C,iCAAiC,sCAAW;;AAE5C,EAAE,oBAAoB,cAAc,yBAAyB;AAC7D,QAAQ,0CAAgB,kBAAkB,+BAA+B;;AAEzE;AACA;;;ACnFA;AACyC;AACqB;AAChB;AACK;AACL;AACR;AACI;;AAE1C;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,kCAAa;AAClC,qBAAqB,yCAAiB;AACtC,oCAAoC,2CAAkB;AACtD,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,cAAc;AACpC;AACA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA;AACA;;;;;;;;;AC9CA;AACkC;AACkB;AACZ;AACE;AACF;AACA;AACI;AACF;AACI;AACM;AACK;AACE;AACE;AACV;AACgB;AACb;AACS;AACc;AACzB;AACJ;AACF;AACR;AACiB;;AAExC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAmE;AACzF;AACA;;AAEA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,UAAU,yBAAU;AACpB,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,UAAU,6BAAc;AACxB,KAAK;AACL;AACA,UAAU,eAAe;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAqC;AAC7C,OAAO;;;AAGP;AACA;AACA,yCAAyC;AACzC;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,mBAAmB,6BAAS;AAC5B,mCAAmC,2CAAkB;AACrD,kBAAkB,4DAA6B;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,iCAAiC,gCAAiB,GAAG,iCAAiC;AACtF;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,mCAAe;AAC1C,iDAAiD,QAAQ;AACzD;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,4BAA4B,2CAAkB,8CAA8C,iCAAc;AAC1G,YAAY,6BAAW;AACvB;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,2BAAU;AACtB;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,UAAU;AACrC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,UAAU;AACrC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,gBAAgB;AAC3C,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,YAAY;AACvC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,WAAW;AACtC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,4CAAuB;AACnC;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,qCAAmB;AAC/B;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA,IAAI,+BAAW,cAAc,MAAM;AACnC,UAAU,uDAAyB;AACnC;AACA;AACA;;AAEA;AACA,IAAI,+BAAW;AACf,oBAAoB,kCAAW;AAC/B;AACA;AACA;AACA,MAAM;AACN,qEAAqE,4BAA4B;AACjG,kEAAkE,0BAA0B;AAC5F;AACA;AACA;AACA;;AAEA;AACA,IAAI,+BAAW;AACf,0BAA0B,4CAA0B;AACpD,kCAAkC,gBAAgB;AAClD;AACA;AACA;;AAEA,oBAAoB;AACpB,uBAAuB,oEAAkC;AACzD,UAAU,8CAAe;AACzB;AACA;AACA;;;;;;;;;;;;;;;;;;AC9ZA;AACkC;AACY;AACM;AACN;AACA;AACmB;AAC3B;;AAEtC;;AAEA;AACA,8EAA8E,uFAAkB;AAChG,sBAAsB,iFAAkB,8CAA8C,uFAAkB;AACxG,+EAA+E,uFAAkB;AACjG,sBAAsB,iFAAkB,+CAA+C,uFAAkB;AACzG;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;;AAExC;AACA,sDAAsD,KAAK;AAC3D,wBAAwB,iFAAkB,oCAAoC,KAAK;AACnF,sDAAsD,KAAK;AAC3D,wBAAwB,iFAAkB,oCAAoC,KAAK;AACnF,sDAAsD,KAAK;AAC3D,wBAAwB,iFAAkB,oCAAoC,KAAK;AACnF,sDAAsD,KAAK;AAC3D,wBAAwB,iFAAkB,oCAAoC,KAAK;AACnF,sDAAsD,KAAK;AAC3D,wBAAwB,iFAAkB,oCAAoC,KAAK;AACnF,KAAK;AACL,GAAG;;AAEH;AACA,WAAW,uFAAkB;AAC7B,GAAG;;AAEH;AACA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;;AAEA,wCAAwC,uFAAkB;AAC1D,mDAAmD,iFAAkB;AACrE;AACA,wBAAwB,iFAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,sJAAsJ,iDAAiD,6BAA6B,qDAAqD,mBAAmB,4DAA4D,cAAc,uDAAuD,YAAY,4CAA4C,0BAA0B,gEAAgE;AAC/jB,6EAA6E,iDAAiD,YAAY,qDAAqD,mBAAmB,4DAA4D,cAAc,uDAAuD,YAAY,4CAA4C,0BAA0B,gEAAgE,+CAA+C,yDAAyD,wBAAwB,iDAAiD,kBAAkB,wDAAwD,4BAA4B,4DAA4D;;AAExzB;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mFAAmF,iFAAkB;AACrG;AACA;AACA,OAAO;AACP;AACA;AACA,oFAAoF,iFAAkB;AACtG;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA,wCAAwC,iFAAkB;AAC1D,wBAAwB,uGAA4B;AACpD,mCAAmC,iFAAkB;AACrD,kBAAkB,sGAA6B;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,IAAI,uEAAY,6BAA6B,WAAW,KAAK,QAAQ;AACrE,sBAAsB,iFAAkB;;AAExC;AACA;AACA,wBAAwB,iFAAkB;AAC1C,MAAM;AACN;AACA,wBAAwB,iFAAkB;AAC1C;AACA,wBAAwB,iFAAkB;AAC1C;AACA,GAAG;;AAEH;AACA,qHAAqH,KAAK;AAC1H,2CAA2C,iFAAkB,2CAA2C,KAAK;;AAE7G;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH;AACA,mBAAmB,oEAAS;AAC5B,sCAAsC,iFAAkB;AACxD,mCAAmC,iFAAkB;AACrD,kBAAkB,sGAA6B;AAC/C,wCAAwC,uFAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA,kDAAkD,iFAAkB;AACpE;AACA;AACA;AACA;AACA,uEAAuE,iDAAiD,YAAY,qDAAqD,mBAAmB,4DAA4D,cAAc,uDAAuD,YAAY,4CAA4C,0BAA0B,gEAAgE,+CAA+C,yDAAyD,wBAAwB,iDAAiD,kBAAkB,wDAAwD,4BAA4B,4DAA4D;;AAElzB,mDAAmD,iFAAkB;AACrE;AACA,wBAAwB,iFAAkB;AAC1C;;AAEA,4CAA4C,iFAAkB;AAC9D;AACA,0BAA0B,iFAAkB;AAC5C;AACA;AACA,wBAAwB,uGAA4B;AACpD;AACA;AACA;AACA,4EAA4E,uBAAuB;;AAEnG;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,IAAI,uEAAY,6BAA6B,WAAW,KAAK,QAAQ;;AAErE,sBAAsB,iFAAkB;;AAExC;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;;;;ACxgCoB;AACL;AACC;AACD;AACY;AAChB;;AAE1C;AACA;AACA,iCAAiC,+GAAmC;AACpE,4BAA4B,qGAA8B;AAC1D;AACA,0DAA0D,wBAAwB;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sBAAsB;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,oBAAoB,oEAAS;AAC7B,wBAAwB,yEAAa;AACrC;;AAEA,mBAAmB,gBAAgB,GAAG,iBAAiB,EAAE,EAAE;;AAE3D;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,mFAAiB;AACxB,8BAA8B,qEAAc;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,wBAAwB,qGAA8B;AACtD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;;AAEA;;AAEO;AACP;AACA;AACA,EAAE,qFAAmB;AACrB;AACA;;;;;;;;;;;;;;;;;;;ACzR+D;AAC1B;AACY;AACS;AACK;AACtB;AACoB;AACtB;;AAExB;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,yBAAyB,cAAc;AACvC;AACA;AACA,6CAA6C,iFAAkB;AAC/D,2BAA2B,yFAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB;AAChB,gBAAgB;AAChB,qBAAqB;AACrB,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,eAAe,QAAQ;AACvB;AACA;AACA,sCAAsC,iFAAkB;AACxD;AACA;AACA;AACA;AACA;AACA,aAAa,2GAA8B,eAAe;AAC1D;AACA;AACA,0BAA0B,iFAAkB;AAC5C,0BAA0B,iFAAkB;AAC5C,iCAAiC,yFAAqB;AACtD;AACA,WAAW,6BAA6B,GAAG,WAAW;AACtD,WAAW,6BAA6B,GAAG,cAAc,GAAG,WAAW;AACvE;AACA,WAAW,eAAe,GAAG,WAAW;AACxC,WAAW,eAAe,GAAG,cAAc,GAAG,WAAW;AACzD,qCAAqC,WAAW,GAAG,SAAS,OAAO,cAAc,GAAG,WAAW,GAAG,SAAS;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,MAAM;AACnB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA,iCAAiC,yFAAqB;;AAEtD;AACA,UAAU,uEAAY,sBAAsB,iBAAiB;AAC7D,gBAAgB,mGAA0B,gCAAgC,iBAAiB;AAC3F,UAAU,6GAA+B;AACzC;AACA;;AAEA;AACA,UAAU,uEAAY,4BAA4B,KAAK;AACvD,iEAAiE,gBAAgB;AACjF,gBAAgB,gGAAgC,6CAA6C,iBAAiB;AAC9G;AACA,WAAW;AACX;AACA,UAAU;AACV,UAAU,uEAAY,0BAA0B,KAAK;AACrD;;AAEA,kBAAkB,WAAW;AAC7B;AACA,MAAM;AACN,MAAM,uEAAY,+BAA+B,MAAM,IAAI,YAAY;AACvE;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA,iCAAiC,yFAAqB;;AAEtD;AACA,UAAU,uEAAY,sBAAsB,iBAAiB;AAC7D,gBAAgB,mGAA0B,gCAAgC,iBAAiB;AAC3F,UAAU,6GAA+B;AACzC;AACA;;AAEA;AACA,UAAU,uEAAY,yBAAyB,KAAK;AACpD;AACA,gBAAgB,2FAAsB;AACtC;AACA,UAAU;AACV,UAAU,uEAAY,0BAA0B,KAAK;AACrD;;AAEA,kBAAkB,WAAW;AAC7B;AACA,MAAM;AACN,MAAM,uEAAY,+BAA+B,MAAM,IAAI,YAAY;AACvE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,mGAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kGAAiC;AACtD;AACA;;AAEA,mBAAmB;AACnB,SAAS;AACT;AACA,MAAM;AACN,MAAM,uEAAY;AAClB,MAAM,qEAAW;AACjB;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,iFAAkB;AACrD,qCAAqC,iFAAkB;AACvD,4CAA4C,iFAAkB;AAC9D;AACA;AACA;AACA;;AAEA;AACA,UAAU,oGAAkC;AAC5C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,0BAA0B,eAAe;AAC7D,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,sDAAsD,cAAc;AACpE;AACA;AACA,QAAQ,uEAAY,uBAAuB,eAAe;AAC1D;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA,YAAY,4HAA8C;AAC1D;AACA;AACA,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA,YAAY,4HAA8C;AAC1D;AACA;AACA,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA,YAAY,4HAA8C;AAC1D;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM,uEAAY,IAAI,qBAAqB;AAC3C,yEAAyE,oCAAoC;AAC7G;AACA;AACA,IAAI,uEAAY;AAChB;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,oGAAkC;AAC1C,MAAM,uEAAY,IAAI,qBAAqB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D,mBAAmB,2BAA2B;AAC9C,mBAAmB,OAAO,eAAe;AACzC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,MAAM,uEAAY,uBAAuB,KAAK,MAAM,KAAK;AACzD;AACA;AACA,QAAQ,uEAAY,UAAU,KAAK,YAAY,KAAK;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,6BAA6B,6GAAkC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,uEAAY,mCAAmC,UAAU,KAAK,kBAAkB;AAC5F;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,uEAAY,wCAAwC,UAAU,KAAK,8BAA8B;AAC7G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI,uEAAY,IAAI,YAAY,oBAAoB,cAAc;AAClE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAW,aAAa,WAAW,IAAI,qBAAqB;AAChE;AACA,UAAU,oGAAkC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA,YAAY;AACZ,4EAA4E,qCAAqC;AACjH;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA,oCAAoC,sBAAsB,IAAI,kBAAkB;AAChF;;AAEA;AACA;AACA,MAAM,qEAAW,aAAa,YAAY;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,oGAAkC;AAChD;AACA,YAAY,qEAAW;AACvB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,qEAAW,yCAAyC,SAAS;AACzE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA,MAAM,qEAAW,6CAA6C,KAAK;AACnE;AACA,IAAI,qEAAW;AACf;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,qGAA2B;AAClD,MAAM;AACN;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,QAAQ,uEAAY;AACpB;AACA,QAAQ,uEAAY;AACpB;AACA;;AAEA;;AAEA;AACA;AACA,sBAAsB,4FAA8B;AACpD;AACA;;AAEA;AACA;;AAEA,IAAI,qEAAW,yBAAyB,qBAAqB,KAAK,kBAAkB;;AAEpF;;AAEA,UAAU,oGAAkC;AAC5C;AACA;AACA;AACA,oBAAoB,gIAAgD;AACpE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA,gBAAgB,uEAAY;AAC5B;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,iFAAkB;AAC5C;AACA,0BAA0B,iFAAkB;AAC5C;AACA,0BAA0B,iFAAkB;;AAE5C;AACA;;AAEA;AACA,QAAQ,uEAAY,4BAA4B,2BAA2B;AAC3E;AACA;AACA,UAAU,uEAAY,wBAAwB,uBAAuB;AACrE,UAAU;AACV,UAAU,qEAAW;AACrB;;AAEA;AACA;AACA,4CAA4C,oBAAoB,aAAa,sBAAsB;AACnG,cAAc;AACd;AACA,0DAA0D,oBAAoB,aAAa,sBAAsB;AACjH;;AAEA;AACA;AACA,+BAA+B,oBAAoB;AACnD,cAAc;AACd;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA6C,+EAAuB;;AAEpE;AACA;;AAEA;;AAEA;;AAEA;AACA,QAAQ;AACR;AACA,+DAA+D,oBAAoB;AACnF,QAAQ,uEAAY,yBAAyB,oBAAoB;AACjE;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B,eAAe,gBAAgB;AAC/B;AACA;AACA,IAAI,uEAAY;AAChB,8BAA8B,6GAAkC;AAChE;AACA,UAAU,oGAAkC;AAC5C;AACA;AACA,QAAQ,qEAAW,oBAAoB,YAAY,cAAc,aAAa,OAAO,iCAAiC,qBAAqB,mBAAmB;AAC9J;AACA,4BAA4B;AAC5B,uGAAuG,4CAA4C;AACnJ,UAAU;AACV,UAAU,uEAAY;AACtB,UAAU,qEAAW,2BAA2B,YAAY,UAAU,oBAAoB;AAC1F,UAAU,uEAAY,oEAAoE,mBAAmB,KAAK,QAAQ,cAAc,cAAc,eAAe,GAAG,IAAI,cAAc,EAAE;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA,uCAAuC,0HAA6C;AACpF;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,8BAA8B,6GAAkC;AAChE,+BAA+B,gHAAwC;;AAEvE,IAAI,uEAAY;AAChB,UAAU,oGAAkC;AAC5C,MAAM,uEAAY,iBAAiB,gBAAgB;AACnD;;AAEA;AACA,QAAQ,uEAAY,oBAAoB,kBAAkB,cAAc,gBAAgB;AACxF,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU,qEAAW,oBAAoB,iBAAiB,cAAc,iBAAiB,OAAO,iCAAiC,qBAAqB,gBAAgB,cAAc,iCAAiC;AACrN;AACA,oCAAoC;AACpC,8BAA8B;AAC9B;AACA;AACA,YAAY;AACZ,YAAY,uEAAY;AACxB,YAAY,qEAAW,2BAA2B,iBAAiB,UAAU,gBAAgB;AAC7F,YAAY,uEAAY,oEAAoE,eAAe,KAAK,QAAQ,kBAAkB,cAAc,mBAAmB,GAAG,IAAI,cAAc,EAAE;AAClM;AACA,UAAU;AACV,UAAU,uEAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,gBAAgB;AAC/B;AACA;AACA,IAAI,uEAAY,+BAA+B,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA,IAAI,uEAAY,+BAA+B,YAAY;AAC3D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,2BAA2B;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,2BAA2B;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,oGAAkC;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,YAAY,oGAAkC;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,YAAY,oGAAkC;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,YAAY,oGAAkC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,2BAA2B,UAAU;AACzD;AACA;AACA,OAAO;AACP,MAAM;AACN,YAAY,oGAAkC;AAC9C;AACA,gCAAgC,gGAAgC;AAChE,mEAAmE;AACnE;AACA;AACA;AACA,YAAY,uEAAY,6BAA6B,UAAU;AAC/D,kBAAkB,oGAAkC;AACpD;AACA,0EAA0E,UAAU,IAAI,KAAK;AAC7F,aAAa;AACb;AACA,UAAU,uEAAY,2BAA2B,UAAU;AAC3D;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;;;AAGA;AACA,IAAI,uEAAY;AAChB;AACA,2BAA2B,oGAAkC,iDAAiD;AAC9G,4BAA4B,oGAAkC,mDAAmD;;AAEjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,gBAAgB,iDAAiD;AACjE,OAAO;AACP;;AAEA;AACA;;;AAGA;AACA;AACA,mBAAmB,6GAAkC;AACrD;;AAEA;AACA;AACA,QAAQ,uEAAY;AACpB;AACA;AACA,kEAAkE,+BAA+B;AACjG,4EAA4E,0BAA0B;AACtG,QAAQ;AACR;AACA;AACA;AACA;AACA,SAAS;AACT,4EAA4E,0BAA0B;;AAEtG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,MAAM;AACN,MAAM,uEAAY,+BAA+B,iBAAiB;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,4FAA8B;AACpD,IAAI,qEAAW,cAAc,qBAAqB,gBAAgB,kBAAkB;AACpF;;AAEA,UAAU,oGAAkC;AAC5C;AACA;;AAEA,mBAAmB,6GAAkC,GAAG,gDAAgD;AACxG;;AAEA;AACA,YAAY,oGAAkC;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAsD;AACzF;AACA;AACA,oCAAoC,sDAAsD;AAC1F;AACA;AACA,oCAAoC,sDAAsD;AAC1F;AACA;AACA,2CAA2C,sDAAsD;AACjG;AACA;AACA,oCAAoC,sDAAsD;AAC1F;AACA;AACA,wCAAwC,sDAAsD;AAC9F;AACA;AACA,uCAAuC,sDAAsD;AAC7F;AACA;AACA;;AAEA;AACA,kEAAkE,qCAAqC;;AAEvG;AACA,oDAAoD,sBAAsB,GAAG,mBAAmB,GAAG,kBAAkB;AACrH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,SAAS,oHAA0C;AACnD,YAAY,oGAAkC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,YAAY,oGAAkC;AAC9C;AACA;AACA,OAAO;;AAEP,YAAY,oGAAkC;AAC9C;AACA;AACA;AACA;AACA,OAAO;;AAEP,YAAY,oGAAkC;AAC9C;AACA;AACA,OAAO;;AAEP;AACA,wBAAwB;AACxB;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oHAA0C;AACvD;AACA,+BAA+B,sCAAsC;AACrE,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA,aAAa,oHAA0C;AACvD;AACA,6DAA6D,QAAQ;AACrE;AACA;AACA;AACA;AACA,aAAa,oHAA0C;AACvD;AACA,qEAAqE,WAAW;AAChF;AACA;AACA;AACA;AACA,aAAa,oHAA0C;AACvD;AACA,kEAAkE,aAAa;AAC/E;AACA;AACA;AACA;AACA,aAAa,oHAA0C;AACvD,yBAAyB,oBAAoB,GAAG,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa,oHAA0C;AACvD;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,sGAAmC;AAC1D;;AAEA,IAAI,qEAAW,aAAa,qBAAqB,IAAI,YAAY,GAAG,kBAAkB;;AAEtF;AACA;;AAEA,UAAU,oGAAkC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gIAAgD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA,6CAA6C,8BAA8B,IAAI;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA,2BAA2B,6BAA6B,GAAG,cAAc,GAAG,oBAAoB;AAChG;AACA;AACA;AACA,2BAA2B,6BAA6B,GAAG,cAAc,GAAG,4BAA4B;AACxG;AACA;;AAEA;AACA;;AAEA,cAAc,oGAAkC;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,qEAAW,6BAA6B,KAAK,IAAI,6BAA6B;;AAElF,uBAAuB,sGAAmC;AAC1D;;AAEA,IAAI,qEAAW,cAAc,qBAAqB,IAAI,YAAY,GAAG,kBAAkB;;AAEvF;;AAEA;AACA,UAAU,oGAAkC;AAC5C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAU,uEAAY;AACtB,oDAAoD,YAAY;AAChE;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV,UAAU,uEAAY;AACtB,oDAAoD,YAAY,aAAa,6BAA6B;AAC1G;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,eAAe,UAAU;AACzB;AACA;AACA;AACA;;AAEA;AACA,qEAAqE,UAAU;AAC/E,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uEAAuE,mBAAmB;AAC1F,0DAA0D,uBAAuB;AACjF;AACA;AACA,yBAAyB,oBAAoB;AAC7C,mBAAmB,uBAAuB,GAAG,gBAAgB,EAAE,SAAS,EAAE,SAAS;AACnF,gFAAgF,SAAS,GAAG,SAAS,EAAE,EAAE,kBAAkB;AAC3H,YAAY;AACZ,YAAY,qEAAW,mCAAmC,eAAe;AACzE;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,kFAAe;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB;AAChF;AACA,UAAU;AACV,UAAU,qEAAW,gCAAgC,eAAe;AACpE;AACA,QAAQ;AACR,QAAQ,qEAAW,gCAAgC,eAAe;AAClE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,qEAAqE,UAAU;AAC/E,mDAAmD,WAAW;;AAE9D;AACA;AACA;AACA;AACA,QAAQ,qEAAW,4BAA4B,gBAAgB;;AAE/D,+DAA+D,QAAQ,GAAG,aAAa;AACvF;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA,gDAAgD,KAAK;AACrD;AACA,gBAAgB,kCAAkC;AAClD;AACA,iBAAiB,kDAAkD,GAAG,kCAAkC;AACxG;AACA;;AAEA;AACA,4CAA4C,kDAAkD,GAAG,KAAK;AACtG;AACA;;;;;;;;;;;;;;;;;;;;ACj/CqC;AACwB;AACN;AACZ;AACF;AACQ;AACR;AACe;AACd;;AAE3B;;AAEf;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,UAAU;AACxB;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD,0BAA0B;AAClF;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,yBAAyB,KAAK,GAAG,UAAU;;AAE3C;AACA;AACA;AACA;AACA,MAAM;AACN,eAAe;AACf;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,uDAAuD;AACvD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA,4DAA4D,2CAA2C;AACvG;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAY,sBAAsB,KAAK;AACnD,YAAY,+FAA4B,cAAc,eAAe,UAAU,KAAK;AACpF,oBAAoB,8DAAU;AAC9B;AACA;AACA;AACA,6CAA6C,iFAAkB;AAC/D,4BAA4B,sGAA6B;AACzD;AACA,gBAAgB,uEAAY,sBAAsB,KAAK;AACvD,gBAAgB,+FAA4B,cAAc,eAAe,UAAU,KAAK;AACxF,2CAA2C,sEAAiB,GAAG,WAAW,mFAAoB,EAAE;AAChG;AACA,gBAAgB;AAChB,gBAAgB,qEAAW,6BAA6B,KAAK;AAC7D,kEAAkE,KAAK,uDAAuD,iBAAiB;AAC/I;AACA;AACA,cAAc;AACd;AACA,qGAAqG,iBAAiB;AACtH,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAY,sBAAsB,KAAK;AACnD,YAAY,+FAA4B;AACxC;AACA,oBAAoB,gEAAW;AAC/B;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,yBAAyB,6GAAkC;AAC3D;AACA;AACA;;AAEA,oDAAoD,gBAAgB;AACpE;AACA,KAAK;AACL;;AAEA;AACA;AACA,uBAAuB,MAAM;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM,uEAAY,IAAI,MAAM;AAC5B;AACA,MAAM,uEAAY,IAAI,MAAM;AAC5B;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,eAAe,gBAAgB;AAC/B;AACA,qDAAqD;AACrD,uBAAuB,6GAAkC;AACzD;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sFAAsF,gDAAgD;AACtI;AACA;AACA,qFAAqF,gDAAgD;AACrI;AACA;AACA;AACA;;AAEA,SAAS;AACT,MAAM,uEAAY,IAAI,MAAM;AAC5B;AACA,KAAK;AACL;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,yCAAyC,iFAAkB;AAC3D;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe,OAAO;AACtB;AACA;AACA;AACA,yFAAyF,OAAO;AAChG,KAAK;;AAEL;AACA;;;AAGA;;;;;;;;;;;;;;;;;AC5boC;AACF;AACQ;AACgB;;AAE1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,qEAAW,+BAA+B,WAAW;AAC3D;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAW,+BAA+B,YAAY,KAAK,kBAAkB;AACnF;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,SAAS;AACpE,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAW,qBAAqB,UAAU;AAChD;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,IAAI,2GAAgC;AACpC,yBAAyB,oFAAgB;AACzC,MAAM,qEAAW,qBAAqB,WAAW;AACjD;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAW,qBAAqB,WAAW;AACjD;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,0BAA0B,MAAM,cAAc,IAAI;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,+BAA+B,MAAM,cAAc,IAAI;AACtE;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,4BAA4B,MAAM,cAAc,IAAI;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,0BAA0B,MAAM,cAAc,IAAI;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,wCAAwC,WAAW;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,gCAAgC,WAAW;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,0BAA0B,WAAW;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,qEAAW,8BAA8B,WAAW;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+GAAmC;AAC9D;AACA,IAAI,uEAAY,6CAA6C,KAAK;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oFAAgB,CAAC,qGAA6B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA,2BAA2B,+GAAmC;AAC9D,IAAI,uEAAY,aAAa,eAAe,KAAK,SAAS;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAW,WAAW,MAAM,EAAE,eAAe,YAAY,YAAY;AACjF;AACA,YAAY;AACZ,YAAY,uEAAY,2BAA2B,WAAW,QAAQ,SAAS,QAAQ,KAAK;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;;AAEA;AACA,IAAI,qEAAW;AACf;AACA;AACA,KAAK;AACL;AACA;AACA,yBAAyB,+GAAmC;;AAE5D;AACA;AACA;;AAEA;;AAEA,EAAE,uEAAY;;AAEd,qBAAqB,qGAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,qBAAqB;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;ACpnBA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEkC;AACqB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,8EAAwB;AAC1B;AACA;AACA,IAAI;AACJ;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,uEAAY,cAAc,iBAAiB;AACrD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,uEAAY,uBAAuB,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;AACA;;;;;;;;;;;;;;;;AC1LqC;AACuB;AACb;AAC2B;AAChC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC,iBAAiB;AACzD,uCAAuC,aAAa;;AAEpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mEAAmE,0BAA0B;AAC7F;;AAEA,yBAAyB,0FAAqB;;AAE9C,oCAAoC,+EAAS;;AAE7C;AACA;;;AAGA;AACA;;AAEA;AACA;;;AAGO;AACP,EAAE,uEAAY;AACd;;AAEA;;AAEA;AACA,IAAI,uEAAY,IAAI,WAAW;AAC/B;AACA;AACA,GAAG;;AAEH,6BAA6B,iEAAW;AACxC,2BAA2B,iEAAW;;AAEtC,EAAE,mFAAoB,cAAc,mBAAmB;AACvD,QAAQ,qEAAgB,YAAY,mBAAmB;;AAEvD;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFoC;AACF;AACQ;AACJ;AACQ;AACY;AACjB;AACC;AACW;AACU;;AAE/D;AACA;AACA,kBAAkB,qGAA8B;AAChD;AACA,IAAI,uEAAY,2BAA2B,eAAe;AAC1D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,qIAA4C;AACnD;AACA,IAAI,uEAAY,YAAY,WAAW,MAAM,kBAAkB;AAC/D;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP,EAAE,yHAAsC;AACxC;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB,IAAI,aAAa;AAC5D;;AAEA;AACA;AACA;AACA,uBAAuB,mBAAmB,IAAI,YAAY;AAC1D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yDAAyD;AACzD,wDAAwD;AACxD,qBAAqB,MAAM,wBAAwB;AACnD;;AAEA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,aAAa,6GAAiC;AAC9C,aAAa,iHAAmC;AAChD;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW,iHAAmC;AAC9C,WAAW,iHAAmC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,mFAAoB,aAAa,WAAW;AAClD;AACA,wFAAwF,iBAAiB;AACzG,yFAAyF,iBAAiB;AAC1G;;AAEA,wDAAwD,8BAA8B;AACtF;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA,gEAAgE,8BAA8B;AAC9F;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ,YAAY,uEAAY,mBAAmB,UAAU,KAAK,WAAW;AACrE;AACA;;AAEA;AACA;AACA;AACA,QAAQ,uEAAY,SAAS,WAAW,oBAAoB,eAAe;AAC3E;AACA,MAAM,mFAAoB,aAAa,UAAU;AACjD,MAAM,uEAAY,YAAY,WAAW;AACzC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI,mFAAoB,WAAW,eAAe;AAClD,IAAI,uEAAY,WAAW,eAAe;AAC1C,UAAU,sFAAqB;AAC/B;AACA;;AAEO;AACP,EAAE,uEAAY,qCAAqC,MAAM,sBAAsB,oBAAoB;AACnG,2BAA2B,6GAAkC;AAC7D,yBAAyB,eAAe;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA,IAAI,mFAAoB,0BAA0B,mBAAmB,MAAM,MAAM;;AAEjF;AACA;AACA,MAAM,uEAAY,YAAY,sBAAsB,WAAW,MAAM;AACrE;;AAEA;AACA;AACA,IAAI,uEAAY,YAAY,sBAAsB,MAAM,MAAM;AAC9D,IAAI,mFAAoB;;AAExB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,uGAA6B;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA,MAAM,uEAAY,aAAa,UAAU;AACzC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,kCAAkC,iCAAiC;AACnE;AACA;AACA,SAAS;AACT;AACA;;AAEA,KAAK;AACL;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA,QAAQ,uEAAY,uBAAuB,WAAW,KAAK,kCAAkC;AAC7F;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA,EAAE,mFAAoB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,mFAAoB,gBAAgB,WAAW;AACzD,oCAAoC;AACpC,mCAAmC,6FAAuB;AAC1D,UAAU,uEAAY,gBAAgB,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,mCAAmC,6FAAuB;AAC1D;AACA;AACA;AACA;AACA;;AAEA,IAAI,mFAAoB;AACxB;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,EAAE,mFAAoB;AACtB,kBAAkB,mFAAoB;AACtC,8BAA8B;AAC9B,sBAAsB,6FAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,EAAE,mFAAoB;AACtB;AACA;;AAEA;AACA,EAAE,mFAAoB;AACtB,kBAAkB,yGAA+B;AACjD,8BAA8B;AAC9B,sBAAsB,6FAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,EAAE,mFAAoB;AACtB;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,EAAE,mFAAoB;AACtB,oBAAoB,mGAA4B;AAChD,8BAA8B;AAC9B,sBAAsB,6FAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,EAAE,mFAAoB;AACtB;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEO;AACP,mEAAmE,iHAAmC;;AAEtG;AACA;AACA;AACA,QAAQ,iHAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA,MAAM,uEAAY;AAClB,oBAAoB,0EAAgB;AACpC;;AAEA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,+GAAiC;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,kFAAe;AAC9B,OAAO;AACP;AACA;;AAEA;;AAEA,mCAAmC,kFAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qEAAW,aAAa,MAAM,EAAE,UAAU;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB,EAAE,WAAW,MAAM,KAAK;AAC9F,YAAY;AACZ,YAAY,qEAAW,aAAa,MAAM,EAAE,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uFAAuF;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,gBAAgB,+GAAmC;AACnD,qBAAqB,qGAA8B;;AAEnD;AACA;AACA,6DAA6D,uBAAuB;AACpF;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,6HAAwC;AAC9C;AACA,OAAO;;AAEP;AACA,KAAK;AACL,mDAAmD,uBAAuB;AAC1E;AACA;AACA,EAAE,uEAAY,eAAe,MAAM;;AAEnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,uEAAY,eAAe,MAAM;AACnC;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,+GAAmC;AACjE;AACA,qBAAqB,qGAA8B;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,yBAAyB,uGAA6B;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM;AACN,iCAAiC;AACjC;AACA;AACA,GAAG;AACH,yBAAyB,MAAM;;AAE/B;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,uEAAY,QAAQ,MAAM;;AAE5B;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP,EAAE,uEAAY;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA,GAAG;AACH;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEO;AACP;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,oCAAoC,gCAAgC;AACpF,kBAAkB,0EAAgB;AAClC;;AAEA;AACA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;;AAEA;AACA,WAAW,iEAAc;AACzB,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,uEAAY;;AAEd;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,8CAA8C,WAAW;AACzD,UAAU;AACV,8CAA8C,UAAU,qBAAqB,WAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA;AACA,oFAAoF,yBAAyB,GAAG,cAAc;AAC9H;AACA;AACA;AACA,UAAU;AACV,8CAA8C,WAAW;AACzD,UAAU;AACV,8CAA8C,UAAU,qBAAqB,eAAe;AAC5F;;;AAGA,OAAO;AACP;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;ACztCkC;AACwB;AACZ;AACoE;AACzE;AACK;AACR;AACF;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH,EAAE,uEAAY;AACd;AACA;;;AAGA;AACA,qBAAqB,6GAAkC;AACvD;AACA;;AAEA;AACA,2BAA2B,eAAe;;AAE1C;AACA;AACA,4BAA4B,iFAAkB;AAC9C;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,QAAQ,uEAAY;AACpB,gEAAgE,iBAAiB;AACjF,wEAAwE,iBAAiB;AACzF,6DAA6D,4DAA4D;AACzH;AACA,UAAU,uEAAY;AACtB;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM,uEAAY,uBAAuB,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA;AACA,YAAY,uEAAiB;AAC7B;AACA;AACA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;AACA;;AAEO;AACP,qBAAqB,6GAAkC;AACvD;AACA;AACA;AACA,2BAA2B,eAAe;;AAE1C;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,iFAAkB;AAC5C;AACA,MAAM,uEAAY;AAClB;AACA;AACA;;AAEA;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;;AAEA,8CAA8C,4BAA4B;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,iFAAkB;AAC3D;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,iFAAkB;AAC/D,6CAA6C,iFAAkB;AAC/D;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,yBAAyB,sGAAyB;AAClD,kBAAkB,sGAAyB;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,wBAAwB,6FAAuB;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,+CAA+C,6FAAuB;AACtE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,iFAAkB;AAC7D;AACA;AACA;AACA,4BAA4B,+GAAmC;AAC/D;AACA,qFAAqF,gBAAgB,gBAAgB,uBAAuB;AAC5I,IAAI,uEAAY,iCAAiC,mCAAmC;AACpF;;AAEA;AACA;;AAEA;AACA,iCAAiC,iFAAkB;;AAEnD;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA,+BAA+B,wEAAkB;AACjD;AACA,MAAM,uEAAY,IAAI,WAAW,KAAK,wCAAwC;AAC9E,eAAe;AACf,KAAK;AACL,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,yBAAyB,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACO;AACP,EAAE,uEAAY;AACd,4BAA4B,MAAM;AAClC,EAAE,uEAAY;AACd;;AAEA;AACA;AACA;AACA,oCAAoC,iFAAkB;AACtD;AACA,IAAI,mFAAoB,2BAA2B,UAAU;AAC7D;AACA,uBAAuB,qEAAkB;AACzC;;AAEA,EAAE,uEAAY;AACd;AACA,qBAAqB,iEAAW;AAChC;;AAEA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iBAAiB;AACvE;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA,EAAE,qEAAW,eAAe,MAAM,EAAE,eAAe;AACnD;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,QAAQ,uEAAY,2BAA2B,KAAK,IAAI,OAAO,EAAE,UAAU;AAC3E,QAAQ,uEAAY;AACpB;AACA,OAAO;AACP,GAAG;AACH;;AAEO;AACP;;AAEA,qCAAqC,iFAAkB;AACvD;AACA;AACA,iCAAiC,uEAAiB;AAClD,IAAI,mFAAoB;AACxB;;AAEA;AACA,MAAM,mFAAoB,eAAe,aAAa;AACtD;AACA,QAAQ,kEAAY;AACpB;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;;;;;;;;;;;ACpaA;AACyE;AAChC;AACL;AACU;AACA;AACK;AACjB;AACuC;AACnC;AACI;AACW;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,uBAAuB,sFAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,uBAAuB;AACvB,2BAA2B,yEAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,oEAAS;AAChC,qBAAqB,yEAAa;AAClC,qBAAqB,mFAAiB;AACtC,oCAAoC,iFAAkB;AACtD,iBAAiB;AACjB,sCAAsC,iFAAkB;AACxD,0CAA0C,iFAAkB;AAC5D;AACA,wBAAwB,iFAAkB;AAC1C;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,qFAAmB;AAC7B;AACA;AACA,UAAU,mFAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8BAA8B,iFAAkB;AAChD;AACA,UAAU,4BAA4B,iFAAkB;AACxD;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA,2BAA2B,qEAAgB,iBAAiB,oBAAoB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP,uCAAuC,iFAAkB;AACzD;AACA,4CAA4C,iFAAkB;;AAE9D;AACA,EAAE,qEAAW;AACb,QAAQ,6GAA+B;AACvC,EAAE,qEAAW;;AAEb,kDAAkD,iFAAkB;AACpE;AACA;AACA,IAAI,mFAAoB;AACxB,UAAU,gGAA+B;AACzC;;AAEA,EAAE,mFAAoB;;AAEtB;AACA;AACA;AACA;;AAEA,EAAE,mFAAoB;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB,iEAAW;AACpC;AACA;AACA;AACA,2BAA2B,iEAAW;;AAEtC;AACA,EAAE,mFAAoB,cAAc,YAAY;;AAEhD;AACA,YAAY,qEAAgB,gBAAgB,uBAAuB;AACnE,GAAG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;AC/MA;AACyC;AACI;;AAEtC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA,aAAa,gCAAU;AACvB,KAAK;;AAEL,aAAa,4BAAS;;AAEtB;AACA;;;;;;;;;;;;;;;;;AClCA;AACyE;AAChC;AACwB;AACnB;AACZ;AACY;AACK;AACsB;AACnC;AACI;;AAE1C;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,kCAAa;AAClC,qBAAqB,yCAAiB;AACtC,oCAAoC,2CAAkB;AACtD,iBAAiB;AACjB,sCAAsC,2CAAkB;AACxD,0CAA0C,2CAAkB;AAC5D;AACA,wBAAwB,2CAAkB;AAC1C;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,6CAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8BAA8B,2CAAkB;AAChD;AACA,UAAU,4BAA4B,2CAAkB;AACxD;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ,+BAAW;AACnB;AACA,OAAO;AACP,GAAG;AACH;;AAEO;AACP,uCAAuC,2CAAkB;AACzD,4CAA4C,2CAAkB;;AAE9D;AACA,QAAQ,mEAA+B;;AAEvC,kDAAkD,2CAAkB;AACpE;AACA;AACA,IAAI,6CAAoB;AACxB,UAAU,6DAA+B;AACzC,IAAI,6CAAoB;AACxB;;AAEA,EAAE,6CAAoB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,6CAAoB;;AAEtB;AACA;AACA;;AAEA,0BAA0B,SAAS;;AAEnC;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,IAAI,6CAAoB;AACxB,IAAI,iCAAY;AAChB;;AAEA;AACA,0BAA0B,sCAAW;AACrC;AACA;AACA;AACA,4BAA4B,sCAAW;;AAEvC;AACA,EAAE,6CAAoB,cAAc,YAAY;;AAEhD;AACA,YAAY,0CAAgB,aAAa,qBAAqB;AAC9D,GAAG;AACH;;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA,wBAAwB,qBAAM,gBAAgB,qBAAM,IAAI,qBAAM,sBAAsB,qBAAM;;AAE1F;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA,IAAI,mBAAc;;AAElB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,mBAAc;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA,kDAAkD,mBAAc;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC73BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyC;;AAEzC;AACA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,sCAAsC;AAClD;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,qCAAqC,sBAAsB;AAC3D,KAAK,IAAI;AACT;AACA;;AAEA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B,YAAY,qBAAqB;AACjC;AACO;AACP;AACA;AACA;AACA,GAAG;;AAEH,qBAAqB,IAAI;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B,YAAY,qBAAqB;AACjC;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACxGqE;AACjC;AACF;AACa;;AAE/C;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA,uBAAuB,oDAAqB,eAAe,iBAAiB;AAC5E,cAAc,aAAa,OAAO,YAAY,IAAI,UAAU,IAAI,IAAI;AACpE,IAAI;AACJ,uBAAuB,oDAAqB;AAC5C,cAAc,aAAa,OAAO,YAAY,aAAa,IAAI;AAC/D,IAAI;AACJ,uBAAuB,oDAAqB;AAC5C,sBAAsB,aAAa,OAAO,WAAW,IAAI,cAAc,EAAE,cAAc,EAAE,aAAa;AACtG;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,IAAI,+BAAW,iCAAiC,WAAW;AAC3D;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,iCAAY,kCAAkC,WAAW;AAC/D,oFAAoF,oBAAoB,GAAG,WAAW,EAAE,iBAAiB,YAAY;AACrJ,KAAK;AACL;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA,mBAAmB,wCAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D,MAAM,cAAc,KAAK;AACvF;AACA;;;AAGA;AACA;;AAEA;AACA,8CAA8C,SAAS;AACvD;AACA,IAAI,iCAAY,qBAAqB,SAAS;;AAE9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,+BAA+B,IAAI,MAAM,MAAM;AAC/C,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,GAAG;;AAEH;AACA;;AAEO;AACP,mBAAmB,wCAAe;AAClC;AACA;AACA,wBAAwB,wCAAe;AACvC;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA,wBAAwB,UAAU;AAClC,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAW,IAAI,UAAU;AAClD;;AAEA,IAAI,iCAAY,kCAAkC,WAAW;AAC7D,IAAI,iCAAY,YAAY,UAAU;AACtC,IAAI,iCAAY,eAAe,oBAAoB;AACnD,IAAI,iCAAY,UAAU,gBAAgB;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,iCAAY;AACpB,QAAQ,0CAAgB,aAAa,qBAAqB;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;;;;;;;;;;;;;;;;;;;AC7QkC;AACY;AACY;AACjB;AACY;AACJ;AACM;;AAEvD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,mFAAoB,aAAa,MAAM,GAAG,cAAc;AAC5D,IAAI,uEAAY,aAAa,MAAM,GAAG,cAAc;AACpD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,4EAAsB;;AAEhC;AACA,4DAA4D,iBAAiB;;AAE7E;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEO;AACP;AACA;AACA,iCAAiC,+GAAmC;AACpE,4BAA4B,qGAA8B;;AAE1D;AACA;AACA,qDAAqD,wBAAwB;AAC7E;AACA;AACA,IAAI,mFAAoB,aAAa,MAAM,GAAG,cAAc;AAC5D,IAAI,uEAAY,aAAa,cAAc;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,mFAAoB,UAAU,YAAY;AAClD,QAAQ,uEAAY,YAAY,YAAY,GAAG,IAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mFAAoB,sBAAsB,cAAc;AAC5D,IAAI,mFAAoB;;AAExB,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;AACA;;AAEO;AACP,mEAAmE,+GAAmC;AACtG,4BAA4B,qGAA8B;AAC1D;AACA,mDAAmD,QAAQ;;AAE3D;AACA,QAAQ,6GAA+B;;AAEvC;AACA;AACA;AACA,wBAAwB;AACxB,2BAA2B,wEAAW;AACtC,MAAM,qEAAW,cAAc,OAAO;AACtC;AACA,KAAK;;AAEL,yDAAyD,8BAA8B;AACvF,EAAE,uEAAY;AACd;AACA;;AAEO;AACP,6BAA6B,sEAAiB;AAC9C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IO;AACP;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB;AACnE;AACA;AACA,aAAa;AACb,oBAAoB;AACpB;AACA,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;;;;;AChB6C;;AAEtC;AACP;;AAEA;AACA;;AAEA,sBAAsB,6EAAoC;;AAE1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,4BAA4B,yDAA0B;AACtD;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;;ACvEO;AACP,IAAI,uCAAuC;AAC3C,IAAI,wCAAwC;AAC5C,IAAI,2CAA2C;AAC/C,IAAI,2CAA2C;AAC/C,IAAI,qCAAqC;AACzC,IAAI,uCAAuC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;;AAGO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;;ACrEqC;;AAErC;AACA,IAAI,wCAAwC;AAC5C,IAAI,uCAAuC;AAC3C,IAAI,uCAAuC;AAC3C,IAAI,qCAAqC;AACzC,IAAI,sCAAsC;AAC1C,IAAI,2CAA2C;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,+BAAW;AACf,aAAa;AACb;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;ACpCO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,2EAA2E;AACxF;;AAEA,gBAAgB,YAAY,EAAE,KAAK,EAAE,OAAO;AAC5C,KAAK;AACL;AACA;;AAEA;AACA;;;ACtBO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;AClCA;AAC0C;;AAEnC;AACP,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;ACjBwD;AACX;AACR;AACuB;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;;AAEA;AACA,qBAAqB,mFAAuC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iDAAsB;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,YAAY,mEAA+B;AAC3C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4BAA4B;AAC5B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;;;AAGA;AACA,uCAAuC,YAAY;AACnD,0CAA0C,mBAAmB;;AAE7D;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,yEAAkC;;AAEvD;;AAEA;AACA;AACA,QAAQ,2EAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;;AAErC;AACA;AACA;;AAEA,6DAA6D,wCAAS;;AAEtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY,EAAE,eAAe,EAAE,iBAAiB;AAClF;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,eAAe,kBAAkB;AACzF,aAAa;AACb,WAAW;AACX;AACA;AACA,kEAAkE;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA,MAAM,iCAAY;AAClB;AACA,KAAK;AACL,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;AC3SO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;ACjGqC;AACU;AACc;;AAET;AAC0B;AAChB;AAC1B;AACQ;AACY;AACJ;AACD;AACS;;AAE5D;AACA,2CAA2C;;AAE3C,EAAE,iCAAY,sBAAsB,OAAO;AAC3C,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,YAAY;;AAEzC;AACA,6BAA6B,mBAAmB;AAChD,6BAA6B,sBAAsB;;AAEnD;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA,uCAAuC,WAAW;;AAElD;AACA,2CAA2C,YAAY,SAAS,WAAW;AAC3E;AACA;AACA,2CAA2C,YAAY;AACvD;;AAEA;AACA,uCAAuC,WAAW;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;;AAEnC;AACA;;AAEA;AACA,kCAAkC,gDAAqB;AACvD,2CAA2C,wCAAS;;AAEpD;AACA;AACA;;AAEA;AACA,sEAAsE,gBAAgB;AACtF;AACA,oBAAoB,aAAa,YAAY,oBAAoB;AACjE,KAAK;AACL,sDAAsD,yBAAyB;;AAE/E;AACA;AACA;;AAEA;AACA,4BAA4B,sBAAsB;AAClD;;AAEA,IAAI;AACJ;AACA,oBAAoB,aAAa,YAAY,oBAAoB;AACjE,KAAK;AACL,uEAAuE,aAAa;AACpF;;AAEA,kBAAkB,qEAAmC;;AAErD;AACA;;;AAGO;;AAEP;AACA;;AAEA;AACA;AACA,MAAM,iCAAY,wBAAwB,aAAa;AACvD;AACA;AACA,MAAM;AACN,MAAM,iCAAY,mBAAmB,aAAa;AAClD,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACvKkC;AACY;AAC6B;AAClC;AACoE;AAC/D;AACK;AACU;AAC7D,YAAY,kCAAkC;AACR;AACI;;AAE1C;AACA;AACA,aAAa,sBAAsB;AACnC;AACO;AACP,uBAAuB,6BAAS;AAChC,oCAAoC,2CAAkB;AACtD,qBAAqB,yCAAiB;;AAEtC,qBAAqB,kCAAa;AAClC,iBAAiB;;AAEjB;AACA;AACA,IAAI;AACJ;AACA;AACA,4CAA4C,2CAAkB;AAC9D;AACA,0BAA0B,2CAAkB;AAC5C;AACA;AACA;AACA,wEAAwE,2CAAkB;AAC1F,4EAA4E,2CAAkB;AAC9F;AACA,wCAAwC,2CAAkB;AAC1D,2CAA2C,2CAAkB;AAC7D;;AAEA;AACA,SAAS,WAAW;AACpB,SAAS,WAAW;;AAEpB,sCAAsC,2CAAkB;;AAExD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,6CAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA,EAAE,6CAAoB,cAAc,gBAAgB;AACpD,EAAE,+BAAW,cAAc,gBAAgB;AAC3C,+BAA+B,aAAa;;AAE5C,EAAE,6CAAoB;AACtB,cAAc,8BAA8B,mBAAmB,0CAA0C;AACzG;AACA;AACA;AACA,EAAE,+BAAW,WAAW,8BAA8B,mBAAmB,0CAA0C;AACnH;AACA,IAAI,iCAAY;AAChB;AACA;AACA;;;AAGO;AACP,kDAAkD;AAClD,uCAAuC,2CAAkB;AACzD,yCAAyC,2CAAkB;AAC3D,4CAA4C,2CAAkB;AAC9D,uCAAuC,2CAAkB;;AAEzD;AACA,EAAE,+BAAW;AACb,EAAE,6CAAoB;AACtB,QAAQ,mEAA+B;AACvC,EAAE,+BAAW;AACb,EAAE,6CAAoB;AACtB;AACA;;AAEA;AACA,IAAI,6CAAoB;AACxB,mCAAmC,6CAAkB,oBAAoB,iBAAiB;AAC1F;AACA;AACA,MAAM,iCAAY;AAClB,MAAM,iCAAY,YAAY,sBAAsB;AACpD,MAAM,6CAAoB,aAAa,uBAAuB;AAC9D,uBAAuB,sCAAW;AAClC;AACA;AACA,MAAM,iCAAY;AAClB,MAAM,6CAAoB,uBAAuB,uBAAuB;AACxE,iBAAiB,mDAAyB;AAC1C;AACA;AACA,EAAE,6CAAoB;AACtB,EAAE,6CAAoB;AACtB,8BAA8B,sCAAW;;AAEzC,EAAE,6CAAoB;AACtB,QAAQ,yCAAe;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE,6CAAoB,qBAAqB,cAAc;AACzD;AACA;AACA,MAAM,6CAAoB,KAAK,eAAe,GAAG,aAAa,wCAAwC,aAAa;AACnH,MAAM;AACN,MAAM,6CAAoB,KAAK,eAAe,GAAG,aAAa,cAAc,aAAa;AACzF;AACA,IAAI,iCAAY,8BAA8B,cAAc;AAC5D;AACA,0BAA0B,gCAAM;AAChC;AACA;AACA;AACA,EAAE,iCAAY;AACd;AACA,IAAI,6CAAoB,cAAc,uBAAuB;AAC7D,IAAI,iCAAY,cAAc,uBAAuB;AACrD,UAAU,6CAAmB;AAC7B;AACA,EAAE,6CAAoB;AACtB,kDAAkD;;AAElD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5K6C;AACR;AACE;AACQ;AAC6C;AAC/B;;AAE7D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,kEAA8B;AACzD;AACA,mBAAmB,wCAAiB;AACpC;AACA,KAAK;AACL;AACA;AACA,mBAAmB,wCAAiB;AACpC;AACA,KAAK;AACL;AACA;AACA,mBAAmB,wCAAiB;AACpC;AACA,KAAK;;AAEL;AACA;AACA,kBAAkB,kEAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,6BAA6B,8EAAoC;AACjE,oDAAoD,8EAAoC;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,iBAAiB,GAAG,gBAAgB;AACjG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,yEAAkC;AACxC;;AAEA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;;AAEA;AACA,yBAAyB,gEAA6B;AACtD;;AAEA,kGAAkG,oBAAoB;;AAEtH;AACA,8DAA8D,WAAW;AACzE;AACA;AACA,oBAAoB,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW;AACvE;AACA;AACA,MAAM;AACN,2BAA2B,oDAAqB;AAChD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAA6B;AAC1D,uFAAuF,oBAAoB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,yEAAkC;AACvD;;AAEA,oBAAoB,gEAA6B;AACjD;AACA;AACA,IAAI;AACJ,wBAAwB,YAAY;AACpC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iCAAiC,4DAA2B;AAC5D,kFAAkF,oBAAoB;AACtG;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA,8DAA8D,WAAW;AACzE;AACA,WAAW,IAAI,EAAE,UAAU,EAAE,aAAa;AAC1C,QAAQ,oDAAqB,SAAS,aAAa;;AAEnD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,8DAA8D,WAAW;AACzE,yBAAyB,oDAAqB,0BAA0B,aAAa;AACrF;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iDAAsB;AAC5C;;AAEA;AACA,sBAAsB,2EAAmC;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,mFAAuC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,gBAAgB,2EAAmC;AACnD,gBAAgB,yEAAkC;AAClD,gDAAgD,YAAY;AAC5D;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,YAAY,mEAA+B;AAC3C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yEAAyE,2EAAmC;;AAE5G;AACA,MAAM,2EAAmC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2EAAmC;AAC/D;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,qBAAqB,2EAAmC;AACxD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,gCAAgC,gEAA6B;AAC7D,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,wCAAiB;AAC3B;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAiB;AACvC;AACA,OAAO;AACP,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,EAAE,iCAAY,oBAAoB,cAAc,KAAK,WAAW;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,kCAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,kCAAc;AAC5B;;AAEA,cAAc,wDAAyB;;AAEvC,IAAI;AACJ,IAAI,+BAAW;AACf,yCAAyC,YAAY,kCAAkC,YAAY;AACnG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA,mDAAmD,kEAA8B;AACjF;AACA;AACA;AACA,IAAI,0CAAqB;AACzB;AACA;AACA,wBAAwB,wDAAyB;AACjD;AACA;AACA,KAAK;AACL,EAAE,iCAAY;AACd;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,sGAAsG;;AAE1I;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA,mDAAmD,kEAA8B;AACjF;AACA;AACA;AACA,IAAI,0CAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAyB;AACnC,YAAY,wDAAyB,4EAA4E,wCAAiB;AAClI;AACA;AACA,MAAM,iCAAY,yBAAyB,YAAY;AACvD;AACA,cAAc,wCAAiB;AAC/B;AACA,2BAA2B,4CAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mCAAmC,kCAAc;AACjD;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,iCAAY;AACpB;AACA;;AAEA;AACA,gBAAgB,kCAAc;;AAE9B,gBAAgB,wDAAyB;;AAEzC;AACA,KAAK;;AAEL,EAAE,iCAAY;AACd;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,4BAA4B,mFAAuC;AACnE;AACA;AACA,4BAA4B,mFAAuC;AACnE;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH,EAAE,+BAAW;AACb,wBAAwB,mCAAe;AACvC;AACA;;;;;;;;;;;;;AC1vBA;AACuC;AACQ;;AAE/C;AAC2C;AACF;AACI;AAC+D;AACvE;;AAEtB;;AAEf;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,8BAAU;;AAE7B,IAAI,iCAAY;AAChB;;AAEA,wBAAwB,gEAA6B;;AAErD;;AAEA;AACA;AACA;AACA,kCAAkC,0CAAsB;AACxD,8BAA8B,wDAAuB;;AAErD,MAAM,iCAAY;;AAElB;AACA,UAAU,wEAAiC;AAC3C;AACA;AACA,kCAAkC,wCAAwC;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,gCAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU,+BAAW,oBAAoB,uBAAuB,oBAAoB,0BAA0B;AAC9G;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0EAAkC;AAC1D;;AAEA,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA;AACA,QAAQ,+BAAW,kBAAkB,sBAAsB;AAC3D;AACA;AACA,kBAAkB,kEAA8B;;AAEhD,0BAA0B,kEAA8B;;AAExD,MAAM,iCAAY;;AAElB,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D,QAAQ;AACR,8BAA8B,0CAAsB;AACpD;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA,8BAA8B,wDAAuB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gCAAU;AAC5C;AACA,QAAQ;AACR;AACA;AACA;AACA,kCAAkC,gCAAU;AAC5C;AACA,QAAQ;AACR;AACA,QAAQ,+BAAW,oBAAoB,uBAAuB,oBAAoB,eAAe;AACjG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;;AAErD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gCAAU;AAC9C;AACA;AACA;;AAEA;AACA,gCAAgC,gCAAU;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;;AAErD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,gCAAU;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gCAAU;AAC9C;AACA;AACA;;AAEA;AACA,gCAAgC,gCAAU;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,IAAI,mCAAS;;AAEb;AACA;AACA;;;;;;;;;;;;;;;;;ACra+C;AACC;AACsB;AACpC;AACoB;AACR;AACA;AACK;AACY;AACrB;AACJ;;;AAGvB;AACf,gBAAgB,8FAA8F,IAAI;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB,cAAc;AACd,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA,yGAAyG,iBAAiB;AAC1H;;;AAGA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;;AAEA,2BAA2B,8CAA8C,IAAI;AAC7E,yBAAyB,6BAAS;AAClC,uBAAuB,yCAAiB;AACxC;AACA,uBAAuB,kCAAa;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,YAAY,8CAAe;;AAE3B,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA,QAAQ;AACR;AACA,UAAU,2CAAmB,iCAAiC,iBAAiB;AAC/E;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uDAAuD;AACrG;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,iCAAc;AAC9G,MAAM,iCAAY,oCAAoC,0BAA0B;AAChF;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA,MAAM,iCAAY;AAClB;AACA,MAAM,iCAAY;AAClB,+BAA+B,6BAAU;AACzC,MAAM,iCAAY;AAClB;AACA,MAAM,iCAAY;AAClB,8BAA8B,qBAAqB;AACnD;AACA,MAAM,iCAAY;AAClB,+BAA+B,YAAU;AACzC,MAAM,iCAAY;AAClB;AACA,MAAM,iCAAY;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qDAAqD,2CAAkB;AACvE;AACA;;;AAGA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;;;;;;;;;;;;;;;;;AC1PA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gCAAgC,IAAI,+BAA+B;AACtH;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,uDAAuD,2CAA2C;AAClG;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;AC5E+C;;AAExC;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAc,UAAU,UAAU;AACrD;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;ACtB+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;AC3BiE;AAC1B;AACM;AACc;AACtB;AACgC;;AAErE;;AAEA,oBAAoB,6EAA6E;AACjG;AACA;AACA;AACA,6BAA6B,eAAe,GAAG,0CAAgB,QAAQ,sBAAsB,OAAO,cAAc,WAAW,cAAc,WAAW,UAAU,GAAG,eAAe,YAAY,cAAc,WAAW;AACvN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,+EAA+E;AACrK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+FACO;AACf;AACA;AACA;AACA;AACA,kCAAkC,8CAA0B;AAC5D;AACA,MAAM;AACN,kCAAkC,8CAA0B;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,yBAAU,sBAAsB,kBAAkB;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,WAAW,IAAI,cAAc;AAC3E,IAAI,iCAAY,2CAA2C,WAAW,IAAI,WAAW;AACrF;AACA,WAAW;AACX;;AAEO;AACP,EAAE,iCAAY;AACd;AACA,eAAe,wCAAwB,cAAc,cAAc;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B,yBAAU,0BAA0B,yCAAyC;AACvG;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,WAAW,GAAG,WAAW;AAClD;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iCAAiC,6EAA6E;AAC9G;;AAEA;AACA;;;AAGO,gCAAgC,gJAAgJ;AACvL,qDAAqD,cAAc;;AAEnE;;AAEA;AACA,mCAAmC,sFAAsF;AACzH;AACA;AACA,mCAAmC,oFAAoF;AACvH;;AAEA;;AAEA;AACA;AACA;;;;AC5N+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;AChB0D;AACX;AACK;;AAEe;AACM;AACI;AACA;;AAEtE,SAAS,wCAAwB;AACxC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,oBAAoB;AACpB;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,qEAAmC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB,GAAG,aAAa,QAAQ,SAAS;AAC/F;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wCAAqB;AACzE;;AAEA;;AAEA;AACA,aAAa,gBAAgB;;AAE7B;AACA;AACA;AACA,6DAA6D,uBAAuB;AACpF,qDAAqD,yBAAyB;AAC9E;AACA,4BAA4B,sBAAsB;AAClD;AACA;;AAEA,eAAe,mCAAe;AAC9B,GAAG;;AAEH;AACA;AACA;;;;;;;;;;;;;;;AC/HwD;AACJ;AAC2B;;AAE7C;AACwB;AACkB;AACtC;;AAEQ;AACA;AACJ;;AAE3B;;AAEf;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,kCAAkC;AAClC,mDAAmD,IAAI;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,0CAAiB,GAAG,kBAAkB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,yBAAyB,6BAAS;AAClC,sCAAsC,2CAAkB;AACxD,uBAAuB,yCAAiB;;AAExC;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,2CAAkB;;AAE1D;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,iCAAY;AACxB;AACA;AACA;AACA,YAAY,2CAAmB;AAC/B;AACA;AACA,SAAS;AACT;AACA,UAAU,+BAAW,wBAAwB,oBAAoB;AACjE;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA,MAAM,iCAAY,yBAAyB,UAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,+BAA+B,yBAAM;AACrC;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM,iCAAY,IAAI,kBAAkB,IAAI,iBAAiB;AAC7D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qEAAmC;AACxD,eAAe,YAAY;;AAE3B;AACA,uBAAuB,8BAA8B;AACrD;;AAEA,IAAI,iCAAY,cAAc,UAAU;AACxC;;AAEA;;AAEA;;;;;;;;;;;;;;ACtP6C;AACN;AACO;;AAE9C,yHAAwC;AACxC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,mHAAqC;AACrC;AACA;;AAEA,mHAAqC;AACrC;AACA;;AAEA,iHAAoC;AACpC;AACA;;AAEA,iHAAoC;AACpC;AACA;;AAEA,2HAAyC;AACzC;AACA,0EAA0E,iCAAiC;AAC3G,sEAAsE,+BAA+B;AACrG,0EAA0E,iCAAiC;AAC3G,wEAAwE,gCAAgC;AACxG,sEAAsE,+BAA+B;AACrG,sEAAsE,+BAA+B;AACrG,oEAAoE,8BAA8B;AAClG,0EAA0E,iCAAiC;AAC3G;AACA;;AAEA,6HAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2HAAyC;AACzC;AACA,oBAAoB,mHAAoC;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;;AAEA;;AAEA;AACA;;AAEA;AACA,iCAAiC,QAAQ;AACzC,4CAA4C,QAAQ;AACpD;;AAEA;AACA,gCAAgC,eAAe;AAC/C,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kCAAkC;AACrE;AACA,mCAAmC,yCAAyC;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,eAAe;AAChD;AACA;AACA;AACA;AACA,uBAAuB,kGAAuB;AAC9C;AACA;AACA;;AAEA;AACA,+HAA2C;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,yHAAwC;AACxC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2HAAyC;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+HAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClNA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B,qBAAqB,qCAAqC;AAC1D;AACA,eAAe;AACf,KAAK;AACL,aAAa;AACb,cAAc,mBAAmB;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,2CAA2C,qCAAqC;;AAEhF;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AC3DqC;AACQ;AACN;AACQ;AACc;AACC;AACI;AACd;;AAEpD;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA,sBAAsB,oDAAuB;;AAE7C;AACA,4CAA4C,iBAAiB;;AAE7D;AACA,2BAA2B,oDAAuB;AAClD;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B,kBAAkB,4DAAyB;AAC3C;AACA,eAAe;AACf,KAAK;AACL,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,oBAAoB,0BAA0B;AAC9C,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc,GAAG,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,iCAAY,YAAY,YAAY;AACtC,0BAA0B,qEAAmC;;AAE7D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB,GAAG,iBAAiB;AAClE;AACA,aAAa;AACb,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,gFAAgF,gBAAgB,GAAG,iBAAiB;AACpH;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA,wBAAwB,2DAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;AAGA;AACA,EAAE,iCAAY,YAAY,sBAAsB;AAChD;AACA;;AAEA,0BAA0B,qEAAmC;;AAE7D;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,gBAAgB,GAAG,iBAAiB,EAAE,EAAE,cAAc;AACrF,mBAAmB,aAAa;;AAEhC;AACA,wBAAwB,MAAM,IAAI,oBAAoB;AACtD;AACA;;AAEA,GAAG;;AAEH;AACA;;;AAGA;AACA;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA,oCAAoC,4DAAyB;AAC7D,+BAA+B,4DAAyB;;AAExD;;AAEA;AACA,6BAA6B,uEAAiC;AAC9D,gCAAgC,0CAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,sCAAsC,sCAAmB;;AAEzD;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,6BAA6B,mEAAkC;AAC/D;AACA,0CAA0C,2IAA2I;AACrL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,4CAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wEAAwE,+CAA+C;AACvH;;AAEA,8BAA8B,4DAAyB;AACvD;AACA;AACA,+BAA+B,kCAAkC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,6CAA6C;AAC1F;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAuB,GAAG,YAAY;AAC3H;AACA;AACA;AACA,0BAA0B,qEAAgC;AAC1D;AACA;AACA;AACA;AACA,QAAQ,qEAAgC;AACxC;AACA;AACA,QAAQ,qEAAgC;AACxC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iFAAsC;AAC1C,mBAAmB,wEAAiC;AACpD,mBAAmB,wDAAyB,yBAAyB,aAAa;AAClF;AACA,KAAK;;AAEL;;AAEA;AACA,+BAA+B,uEAAiC;AAChE,kCAAkC,0CAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC,sCAAmB;;AAExD;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACvd6C;AACR;AACK;AACmC;AACpB;;AAE1C;;AAEf,iCAAiC;AACjC,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B,6BAA6B;AAC7B,mCAAmC;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E,IAAI;AAC/E,QAAQ;AACR,2EAA2E,IAAI;AAC/E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD,0CAA0C;;AAE7F;AACA;AACA;AACA;AACA;AACA,UAAU,yFAAuB;AACjC;AACA,kDAAkD,WAAW;AAC7D,sCAAsC,MAAM,SAAS,iBAAiB;AACtE;;AAEA;AACA;AACA;AACA,6BAA6B,oBAAoB,mBAAmB,mBAAmB;AACvF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,WAAW,YAAY,WAAW;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,8BAA8B,cAAc;AAChE,QAAQ;AACR,QAAQ,uEAAY,6BAA6B,cAAc;AAC/D,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB;AACA;AACA,KAAK;;AAEL;AACA,wBAAwB,yGAA+B;AACvD;AACA;AACA;AACA;AACA,4BAA4B,2GAAgC;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,qFAAqB;AAC1C,WAAW;;AAEX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,mHAAoC;;AAE5D;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;;AAEA,2CAA2C,kCAAkC;AAC7E,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B,+FAA0B;AACxD;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA,8DAA8D;AAC9D;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,iFAAmB;;AAE7C;AACA;AACA;AACA;AACA;AACA,qCAAqC,yFAAuB;AAC5D;AACA,gBAAgB,yFAAuB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe;AACf,eAAe,2BAA2B;AAC1C;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA,sBAAsB;AACtB,2BAA2B,+DAAU;AACrC;AACA;AACA;AACA;AACA,+BAA+B,8FAAiB,GAAG,2DAA2D;AAC9G;AACA,IAAI,uEAAY,mCAAmC,4BAA4B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,iBAAiB;AACjB;AACA;AACA,QAAQ,uEAAY;AACpB,iBAAiB;AACjB;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL,aAAa;AACb;;AAEA;;AAEA;AACA;AACA,MAAM,uEAAY,oBAAoB,eAAe,yBAAyB,YAAY;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,gCAAgC;AACzE;AACA;AACA,YAAY,qBAAqB;AACjC;;AAEA;AACA;AACA,IAAI,uEAAY,kCAAkC,KAAK,KAAK,yBAAyB;;AAErF,yBAAyB,MAAM,EAAE,YAAY;AAC7C,qBAAqB,8EAAM;AAC3B,qEAAqE;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,+DAA+D,UAAU;AACzE,yEAAyE,UAAU;;AAEnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,IAAI,uEAAY,iCAAiC,KAAK,KAAK,yDAAyD;AACpH;;AAEA;;;;;;;;;;;;;;;;AC9lBuC;AACF;AACyC;AACwB;AACzD;;AAE9B;;AAEf,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;AAC3C,IAAI,uEAAY,gCAAgC,OAAO;AACvD,6BAA6B,iEAAY,+BAA+B,yBAAyB;AACjG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oFAAgB;AACpC;;AAEA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA,QAAQ;AACR;AACA,4CAA4C,qBAAqB;AACjE;;AAEA;;AAEA;AACA;;AAEA;AACA,6BAA6B,kGAAuB;AACpD;AACA;AACA,2BAA2B,kGAAuB,sBAAsB,oFAAgB;AACxF;AACA;AACA;AACA;;AAEA,qCAAqC,oFAAoF,IAAI;AAC7H;;AAEA;AACA,IAAI,uEAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAW,uBAAuB,eAAe;AACvD;AACA,YAAY,oFAAsB;AAClC;AACA,wBAAwB,6EAAQ;AAChC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,qEAAW,uBAAuB,eAAe;AACvD;AACA;AACA,sCAAsC,6EAAQ;AAC9C;AACA;AACA;AACA;;AAEA,mCAAmC,4DAA4D,IAAI;AACnG,uEAAuE,wCAAwC;;AAE/G;;AAEA;AACA;AACA,QAAQ,uEAAY;AACpB,wBAAwB,8FAAyB;AACjD;AACA;;AAEA,gCAAgC,yEAAW;AAC3C,UAAU,oFAAe;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AClNqC;AACE;AAC4B;AACZ;AACV;AACJ;AAC8B;;AAEvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,EAAE,qHAAqC;AACvC;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA,GAAG;AACH,EAAE,+GAAkC;AACpC;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA,2CAA2C,WAAW;AACtD;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,EAAE,2GAA+B;AACjC,IAAI,uEAAY,kCAAkC,aAAa;AAC/D;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA,IAAI,uEAAY,cAAc,cAAc,KAAK,eAAe;AAChE;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iHAAmC;AACrC;AACA;AACA,oBAAoB,iHAAmC;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE,uHAAsC;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gBAAgB,GAAG,4BAA4B;AACrG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,4EAAc;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iHAAmC;AAC9E,eAAe;AACf,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,EAAE,uEAAY;AACd;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,WAAW;;AAEvE;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,+BAA+B,MAAM,gCAAgC;AAC9G;;AAEA;AACA,uCAAuC,+BAA+B,iBAAiB,uCAAuC,kBAAkB,sCAAsC;AACtL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,EAAE,uEAAY;AACd;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA,IAAI,uEAAY;AAChB;;AAEA,yBAAyB,kGAAuB,oCAAoC,WAAW;;AAE/F;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,IAAI,uEAAY;AAChB,+BAA+B,8EAAiB,GAAG,0CAA0C;AAC7F;AACA,IAAI,uEAAY;;AAEhB;AACA,IAAI,uEAAY;;AAEhB,oCAAoC,mFAAmB,qBAAqB,6BAA6B;AACzG,yDAAyD,wBAAwB;;AAEjF,IAAI;AACJ,IAAI,uEAAY;AAChB,IAAI,uEAAY;AAChB,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjjBA;AACA;AACuC;AACQ;AACY;AACW;AACf;AACiB;AACN;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kHAAiC;AACrC,IAAI,4FAAsB;AAC1B,IAAI,4FAAsB;AAC1B,IAAI,4FAAsB;AAC1B;;AAEA;AACA;AACA,qBAAqB,cAAc,qBAAqB,kCAAkC;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8EAAe;AAC1B;AACA;;AAEA,SAAS,yFAAwB;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,gGAAsB;AACxC;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gFAAmB;AAChC;AACA;AACA;;AAEA;;;AAGO;AACP;AACA;AACA;AACA;;AAEA;AACA,MAAM,gFAAmB;AACzB;AACA,QAAQ,gFAAmB;AAC3B;;AAEA;AACA,MAAM,gFAAmB;AACzB;AACA,QAAQ,gFAAmB;AAC3B;;AAEA,kBAAkB,gGAAsB;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,0BAA0B,sGAAyB;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wDAAwD,6BAA6B,GAAG,YAAY;AACpG,UAAU;AACV,kEAAkE,6BAA6B,GAAG,YAAY;AAC9G;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,yEAAa;AAC1C;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,2FAAuB;AACpC,KAAK;AACL;AACA,IAAI;AACJ;AACA;;AAEA;;;;;;;;;;;;;;;AC/hB+C;AACV;;AAEsB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qBAAqB,EAAE,gCAAgC;;AAE5E;AACA;;AAEA;AACA,4BAA4B,kGAAyB;AACrD,qBAAqB,gGAAwB;;AAE7C;AACA,4CAA4C,WAAW;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,sBAAsB;AAC7E,2BAA2B,SAAS,aAAa,oBAAoB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA,EAAE,uEAAY;AACd,EAAE,uEAAY;AACd;AACA;;AAEO;AACP;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA;AACA,IAAI,uEAAY,0BAA0B,iBAAiB;AAC3D;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,8EAAe;AACjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iGAAiG,oBAAoB,aAAa,2BAA2B;AAC7J,gGAAgG,oBAAoB,aAAa,qDAAqD;;AAEtL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,0GAA6B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,qEAAW,IAAI,kBAAkB;AACrC;AACA;;AAEA;;;;;;;;;;;;;;;;ACvL0C;AACF;AACQ;AACU;AACd;;AAE7B;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,sFAAiB;AAC1C;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,kFAAe,IAAI,UAAU;;AAErD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,sBAAsB,2FAA2F,IAAI;;AAErH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE,iFAAkB;AAClF,8DAA8D,iFAAkB;AAChF,uCAAuC,iFAAkB;;AAEzD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,kBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA,6DAA6D,WAAW;AACxE,sBAAsB,8FAAqB;AAC3C;AACA;AACA;AACA;AACA,sBAAsB,0GAA2B;AACjD;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sEAAsE,kBAAkB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,uEAAY,IAAI,WAAW,mBAAmB,2BAA2B;AAC7E;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO,EAAE,oGAAoG;AAC1H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,eAAe;AACf,gDAAgD,YAAY;AAC5D;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,8FAAqB;AAC9D;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yGAA+B;AACtD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,2GAAgC;AACnD;AACA;AACA;AACA,0BAA0B,IAAI,IAAI,MAAM;AACxC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,qEAAW,+BAA+B,yBAAyB,WAAW,YAAY,OAAO,UAAU;;AAEnH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,uEAAY,yBAAyB,4CAA4C;AACzF;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU,uEAAY,kCAAkC,8DAA8D;AACtH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mDAAmD,UAAU;AAC7D;AACA,0CAA0C,0BAA0B,mBAAmB,kBAAkB;AACzG,MAAM;AACN,0CAA0C,0BAA0B,QAAQ,kBAAkB;AAC9F,MAAM;AACN,0CAA0C,0BAA0B,OAAO,mBAAmB;AAC9F,MAAM;AACN,0CAA0C,0BAA0B,OAAO,kBAAkB;AAC7F;AACA;AACA;;AAEA;AACA,+EAA+E,UAAU;AACzF;AACA,4CAA4C,yEAAa;AACzD;;;AAGA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iCAAiC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,gCAAgC,UAAU,KAAK,kBAAkB;AACrF,uDAAuD,UAAU;AACjE;;AAEA;;AAEA,IAAI,uEAAY,mBAAmB,WAAW,MAAM,qBAAqB,KAAK,eAAe;;AAE7F;;AAEA;;;;;;;;;;;;;;ACxzB0C;AACF;AACC;;AAElC;;AAEP;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;;AAEA,gBAAgB,8CAA8C,IAAI;AAClE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,2EAA2E,gBAAgB;AAC3F;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,gCAAgC,mCAAmC;AACnE,4BAA4B;AAC5B;AACA,uBAAuB,iBAAiB;AACxC;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,mCAAmC;AACrE,8BAA8B;AAC9B;AACA,yBAAyB,iBAAiB;AAC1C;AACA,OAAO;AACP;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,UAAU,EAAE,2BAA2B;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA,4BAA4B,iCAAiC;AAC7D;;AAEA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA,mBAAmB,sCAAsC;AACzD,2BAA2B,gBAAgB;AAC3C;;;AAGA;AACA;AACA;AACA,uBAAuB,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,sBAAsB,eAAe;AACrC,sBAAsB,gBAAgB;AACtC;;AAEA;AACA,+BAA+B,+DAAU,SAAS,6EAA6E;AAC/H;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,2EAA2E,gBAAgB;AAC3F;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,gCAAgC,mCAAmC;AACnE,4BAA4B;AAC5B;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,mCAAmC;AACrE,8BAA8B;AAC9B;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA,uBAAuB,mCAAmC;AAC1D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kCAAkC,6EAA6E;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wDAAwD,kGAAuB,IAAI,KAAK;AACxF;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,gCAAgC,UAAU,KAAK,yBAAyB;AAC5F,uDAAuD,UAAU;AACjE;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAU;AACzC;AACA;AACA,OAAO;;AAEP;;AAEA;;;;;;;;;;;;;ACxiB6C;;AAEtC;AACP;;AAEA,EAAE,uHAAsC;AACxC;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;;;;;;;;;;ACbO;AACP;AACA;AACA;AACA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA,aAAa;AACb,oBAAoB;AACpB;AACA,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjB4D;AACb;AACc;AACZ;;;AAGlC;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,sBAAsB;;AAEnE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B,0FAAqB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC,gCAAgC,6FAAuB;AACvD;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC,wBAAwB,6FAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC,6BAA6B,6FAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,UAAU,0CAA0C,eAAe;AAChH;;AAEA,4BAA4B,+GAAmC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB,GAAG,iBAAiB,EAAE,EAAE,cAAc,qBAAqB,aAAa;AAClJ,+CAA+C,MAAM,IAAI,oBAAoB;AAC7E,KAAK;;AAEL,yCAAyC,+EAAS;;AAElD;AACA;;AAEA;AACA,uBAAuB,6GAAkC;AACzD;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC9I6C;;AAE7C;AACO;AACP,SAAS,iHAAmC;AAC5C;;AAEA;AACO;AACP,SAAS,iHAAmC;AAC5C;;AAEA;AACO;AACP;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;;;;;;;;;;;;;;;;;;;;AC5EO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClC6C;AACN;;;AAGvC;AACA,wBAAwB,kDAAoB;AAC5C,IAAI,uEAAiC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACzF6C;;AAE7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,iDAAsB;AAC1C;;AAEA;AACA;;AAEA;AACA,sBAAsB,2EAAmC;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AChE6C;;AAE7C;AACA;AACA;AACO;AACP;AACA;AACA,yBAAyB,+EAAqC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxBA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AClB6C;;AAE7C;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uDAAyB;AAC/C;AACA,KAAK;AACL,qBAAqB,mDAAuB;;AAE5C;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACtHA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AC9CO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AC1BuC;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uBAAuB;AAC7E,4BAA4B,WAAW,EAAE,eAAe,IAAI,gBAAgB;AAC5E;AACA;AACA;AACA,gDAAgD,WAAW,EAAE,mBAAmB,EAAE,YAAY;AAC9F;AACA,uBAAuB,oDAAqB;AAC5C;AACA,KAAK;;AAEL;AACA;AACA,2FAA2F,oBAAoB;AAC/G;;AAEA;AACA;AACA;AACA,kFAAkF,gDAAgD;AAClI;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;AACzE,4BAA4B,WAAW,WAAW,gBAAgB;AAClE;AACA;AACA;AACA,gDAAgD,WAAW,EAAE,mBAAmB,EAAE,YAAY;AAC9F,mDAAmD,oBAAoB,EAAE,UAAU;AACnF;AACA,aAAa,WAAW,QAAQ,aAAa;AAC7C,aAAa,UAAU,EAAE,aAAa;AACtC;AACA,KAAK;AACL;;AAEA;AACA;;;AC1E6C;;AAEtC;AACP;AACA,wBAAwB,2EAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;ACzBqC;;AAErC;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,+BAAW;AACjB;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,+BAAW,IAAI,MAAM;AACzB,8BAA8B;AAC9B;;AAEA;AACA;;AAEO;AACP;AACA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd,cAAc,+BAAW;AACzB;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChLA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;;;;;AC5BuC;AACM;AACE;;AAE/C;AAC8D;AACJ;AACtB;AACY;AACJ;AACJ;AACF;AACM;AACJ;AACJ;AACW;AACQ;AACgB;AACnC;AACwB;;AAErD;AACP;AACA;AACA,uBAAuB,4CAAiB;AACxC,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,+DAA6B;AAC9C;;AAEA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC,2BAA2B,YAAY;AACvC,6BAA6B,uBAAuB;;AAEpD;AACA;AACA;AACA,gCAAgC,8BAAa;;AAE7C;AACA,WAAW,wCAAS;AACpB;AACA;AACA;;AAEA,wBAAwB,gDAAqB;AAC7C,4BAA4B,aAAa;AACzC,0BAA0B,WAAW;AACrC,wBAAwB,SAAS;AACjC,uBAAuB,QAAQ;AAC/B,4BAA4B,aAAa;AACzC,+BAA+B,SAAS;AACxC;AACA;AACA,sBAAsB,OAAO;AAC7B,yBAAyB,eAAe;AACxC,sBAAsB,OAAO;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,+CAAqB;AAC/B;AACA;;AAEA;AACA;;;;;;;;;;;;;;AC5G6C;AACR;AACU;;AAE/C;AACA;AACA;;AAEA,4BAA4B,0GAA6B;;AAEzD;AACA;AACA;AACA;AACA,sCAAsC,iHAAmC;AACzE;AACA;AACA,kCAAkC,4BAA4B;AAC9D,UAAU;AACV;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAW,4BAA4B,YAAY;AAC3D;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,0GAA6B;;AAE3D;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI,uEAAY,mBAAmB,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,gCAAgC;AAChC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,UAAU;AACV,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,UAAU;AACV;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kGAAyB;AACtC,GAAG;AACH;AACA;;;;;;;;;;;;ACjT2D;;AAE3D;AACA,IAAI,6EAA6E;AACjF,IAAI,oEAAoE;AACxE,IAAI,0EAA0E;AAC9E,IAAI,6EAA6E;AACjF,IAAI,iEAAiE;AACrE,IAAI,iEAAiE;AACrE,IAAI,wEAAwE;AAC5E,IAAI,wEAAwE;AAC5E,IAAI,iEAAiE;AACrE,IAAI,0EAA0E;AAC9E,IAAI,mEAAmE;AACvE,IAAI,wEAAwE;AAC5E,IAAI,wEAAwE;AAC5E,IAAI,gFAAgF;AACpF;;AAEA;AACA,IAAI,wCAAwC;AAC5C,IAAI,sCAAsC;AAC1C,IAAI,+CAA+C;AACnD,IAAI,oCAAoC;AACxC,IAAI,qCAAqC;AACzC,IAAI,+CAA+C;AACnD,IAAI,2CAA2C;AAC/C,IAAI,4CAA4C;AAChD,IAAI,wCAAwC;AAC5C,IAAI,8CAA8C;AAClD,IAAI,qCAAqC;AACzC,IAAI,yCAAyC;AAC7C,IAAI,mCAAmC;AACvC,IAAI,mCAAmC;AACvC,IAAI,uCAAuC;AAC3C,IAAI,qCAAqC;AACzC,IAAI,wCAAwC;AAC5C,IAAI,0CAA0C;AAC9C,IAAI,wDAAwD;AAC5D,IAAI,gDAAgD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,uDAAuD;AAC3D,IAAI,gDAAgD;AACpD,IAAI,yDAAyD;AAC7D,IAAI,sDAAsD;AAC1D,IAAI,uDAAuD;AAC3D,IAAI,sDAAsD;AAC1D,IAAI,wDAAwD;AAC5D,IAAI,yDAAyD;AAC7D,IAAI,sDAAsD;AAC1D,IAAI,sDAAsD;AAC1D,IAAI,iDAAiD;AACrD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzaAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbqCAAqC,+BAA+B;AACpE;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;ACn0CxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,qBAAM,gBAAgB,qBAAM,IAAI,qBAAM,sBAAsB,qBAAM;;AAE1F;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,QAAa;;AAE7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,UAAU;AACrB,WAAW,SAAS;AACpB;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UC9mDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;;;;;WCVA;;;;;;;;;;;;;ACA6C;AACH;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,mFAAuC;AACvC;AACA,EAAE,iFAAsC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;;;;;;;;ACnDqC;AACwB;AACW;AAC9B;;AAE1C,6EAAoC;AACpC;AACA;;AAEA,qEAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,qDAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,sBAAsB,WAAW,IAAI,WAAW;AAChD;AACA;AACA;AACA,4BAA4B,wCAAwC,YAAY,kBAAkB;AAClG;AACA,KAAK;AACL;;AAEA,EAAE,qCAAY;AACd,2BAA2B,mEAAkC;AAC7D,+BAA+B,wDAA6B,0CAA0C,oBAAoB;AAC1H;AACA;AACA;AACA,GAAG;;AAEH,EAAE,qCAAY,kBAAkB,8BAA8B;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,qCAAY,IAAI,kBAAkB;AACpC;AACA;AACA;;AAEA;;;ACjH6C;AACH;;AAE1C,uFAAyC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,uFAAyC;AACzC;;AAEA;AACA;;AAEA,sBAAsB,6EAAoC;;AAE1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;AAEA,iGAA8C;AAC9C;AACA;;AAEA,mGAA+C;AAC/C;AACA;;AAEA,2GAAmD;AACnD;AACA;;AAEA,uGAAiD;AACjD;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,yDAA0B;AACtD;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA,2BAA2B;AAC3B;;AAEA;;;ACpGA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;;;AAGA;;AAE6C;AACR;AACK;;AAE1C,yEAAkC;AAClC;AACA,mBAAmB,+CAAqB;;AAExC;AACA,IAAI,mCAAW;AACf,aAAa;AACb;AACA;AACA;;AAEA,yEAAkC;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;ACzC0C;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;;AAGA,yEAAkC;;AAElC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;ACjC6C;AACR;AACK;;AAE1C;AACA,OAAO,6CAA6C;AACpD,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6EAAoC;AACpC;AACA,sBAAsB,mEAA+B;;AAErD;AACA;AACA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA,0BAA0B,qEAAgC;AAC1D;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;;;AAGA,qFAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qCAAY,6BAA6B,iBAAiB;AAChE,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA,sBAAsB,mEAA+B;AACrD;AACA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA,0BAA0B,qEAAgC;AAC1D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;;;ACvI6C;AACH;;AAE1C,yEAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;;AAEJ,uFAAyC;AACzC;;AAEA;AACA;AACA;AACA,wBAAwB,2CAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mDAAuB;AAC5D;AACA,gBAAgB,mDAAuB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA,6EAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,6BAA6B,gBAAgB,IAAI,cAAc;AAC/D;AACA,MAAM;AACN,2BAA2B,gBAAgB,IAAI,cAAc;AAC7D;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;;;ACzGsC;;AAE1C,yFAA0C;AAC1C;AACA;AACA;AACA;AACA,GAAG;AACH;;;ACR6C;AACH;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ,mFAAuC;AACvC;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,2EAAmC;AAC/D;AACA;AACA,MAAM;AACN,6CAA6C,UAAU;AACvD;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,2BAA2B;AAC3B;AACA;;;AClC0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ,mFAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5B0C;;AAE1C;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,iFAAsC;AACtC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,sBAAsB,KAAK,sBAAsB,GAAG,sBAAsB;AAC3G;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;;AChD0C;;AAE1C,6EAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,uDAAuD,6BAA6B;AACpF,sCAAsC,WAAW,EAAE,KAAK;AACxD;;;;;ACVqC;AACI;AACC;;AAE1C;AACA;AACA;AACA;AACA;AACA,iFAAsC;;AAEtC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,2CAAkB;AAC5C,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,mCAAW,+BAA+B,iBAAiB,KAAK,uDAAuD;AAC3H;AACA;AACA;AACA;AACA;AACA;;;;;ACrD8C;AACT;AACwB;AACpB;AACC;AACG;;;AAG7C,6EAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yFAA0C;AAC1C;AACA;AACA;AACA;;AAEA,qFAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iCAAc;AACpC;AACA;AACA;AACA;AACA;;;AAGA,uFAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8FAA8F;AACjI,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8EAA8E;AACnH,QAAQ;AACR;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8FAA8F;AACjI;AACA;AACA;;;AAGA;AACA,qGAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,2EAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,WAAW;AAC9C,mCAAmC,WAAW;AAC9C,mCAAmC,WAAW;AAC9C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6FAA4C;AAC5C;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA,qEAAqE;;AAErE,6EAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yCAAyC;AACjD;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA,EAAE,qCAAY;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA,+FAA6C;AAC7C,iDAAiD,2CAAkB;AACnE,gCAAgC,+FAAgD;AAChF;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,+EAAqC;AACrC;AACA;;AAEA;AACA,IAAI,qCAAY,wBAAwB,WAAW;AACnD;AACA;AACA;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA;AACA,oBAAoB,YAAY,GAAG,cAAc;AACjD,+DAA+D,cAAc,eAAe,8BAA8B;AAC1H,6DAA6D,cAAc,eAAe,+BAA+B;;AAEzH;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iEAA8B;AAC9B;AACA;AACA;AACA;;AAEA,EAAE,qCAAY;AACd;AACA;AACA;AACA;;AAEA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,8BAA8B,iDAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;;;ACteuC;AACO;AAC9C,YAAY,qBAAqB;;AAEjC,6EAAqC;AACrC;;AAEA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA,qFAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AChGqC;AACQ;AACC;;AAE9C,6EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,2CAAmB;AACvF,2BAA2B,2CAAmB;AAC9C;AACA;AACA;AACA;AACA,mCAAmC,mDAAuB;AAC1D;AACA,cAAc,mDAAuB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ,IAAI,qCAAY;AAChB,IAAI,qCAAY;AAChB;AACA;AACA;;;;;;;AChEqC;;AAErC;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA,2BAA2B,oBAAoB,GAAG,sBAAsB;AACxE;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,MAAM,QAAQ;AACd,MAAM,QAAQ;AACd,MAAM,SAAS;AACf,MAAM,UAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB,GAAG,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oDAAoD,kBAAkB,gCAAgC;AACjH;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC,gCAAgC,GAAG,kCAAkC;AAC3G;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA,oBAAoB,sDAAsD,QAAQ,UAAU,IAAI,UAAU;AAC1G;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AC1K6C;AACR;AACU;AACD;AAC4C;AAC/B;;AAE3D;AACA;AACA;AACA,mEAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA,mBAAmB,2EAAmC;AACtD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,6BAA6B,kBAAkB;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,iBAAiB;AAC5D;;AAEA;AACA,oBAAoB,2EAAmC;AACvD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,IAAI,wDAAyB;AAC7B;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,yCAAyC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,2EAAmC;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,gEAA6B;AACrE;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,sBAAsB,+CAA+C,aAAa,cAAc;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,sBAAsB,+CAA+C,uBAAuB,cAAc;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,eAAe,6BAA6B,+CAA+C,eAAe,cAAc;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,sBAAsB,+CAA+C,WAAW,cAAc;AACpI;AACA;AACA;AACA,yCAAyC,gEAA6B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,QAAQ,GAAG,sBAAsB,cAAc,WAAW,+CAA+C,YAAY,cAAc;AAC7K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,QAAQ,6BAA6B,+CAA+C,WAAW,cAAc;AACvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,QAAQ,6BAA6B,8CAA8C,IAAI,cAAc;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,qCAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,uGAAkD;AAClD,yBAAyB,2CAAqB,mCAAmC,iBAAiB;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,uFAA0C;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEACH;AACxB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,wEAAiC;AACvC;AACA;AACA,MAAM,sEAAgC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA,+BAA+B,wEAAiC;AAChE;AACA;AACA;AACA,mBAAmB,2CAAqB;AACxC;AACA;;AAEA;AACA;AACA;AACA,IAAI,wEAAiC;AACrC,IAAI,kDAAsB;AAC1B,IAAI,kDAAsB;AAC1B,IAAI,kDAAsB;AAC1B;;AAEA,EAAE,wDAAyB;AAC3B,sBAAsB,8EAAoC;AAC1D,yFAAyF,0BAA0B;AACnH,mBAAmB,2CAAqB;AACxC;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,mBAAmB,2CAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAE,qCAAY;AACd,EAAE,qCAAY;AACd,EAAE,qCAAY;AACd,EAAE,qCAAY;AACd,EAAE,qCAAY;AACd,EAAE,qCAAY;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,qCAAY;AACd;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,wBAAwB,mBAAmB;AAC3C,EAAE,qCAAY;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAE,qCAAY;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AC/iB+C;AACD;;AAE9C,2FAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,gEAA6B;;AAEnC;AACA;AACA,MAAM,gEAA6B;;AAEnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AChH6C;AACN;AACQ;AACD;;AAE9C,+FAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2FAA4C;AAC5C,SAAS,gEACe;AACxB;AACA,eAAe;AACf,KAAK;AACL;;;AAGA,2FAA4C;AAC5C;AACA;;AAEA;AACA,yBAAyB,uFAAyC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAA2C;AAC3C;AACA;;AAEA;AACA,6BAA6B,uFAClB;AACX;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA,6FAA6C;AAC7C;AACA;;AAEA;AACA,2BAA2B,uFAAyC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB,EAAE,yBAAyB;AAC/D;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA,mGAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,2EAAmC;AACtD;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,0CAAgB,gBAAgB;AAClE;AACA;;AAEA,qFAAyC;AACzC,oBAAoB,gEAA6B;AACjD;AACA;;AAEA,6FAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;AC5N6C;AACN;AACQ;AACoB;AAC9B;AACS;;AAE9C,uGAAkD;AAClD,sBAAsB,+EACX;AACX;;AAEA;AACA,MAAM,wDAAyB,4CAA4C,YAAY;AACvF,MAAM,gEAA6B,mDAAmD,YAAY;AAClG;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA,MAAM,wEAAiC;AACvC,MAAM,kDAAsB;AAC5B,MAAM,kDAAsB;AAC5B,MAAM,kDAAsB;AAC5B,MAAM,sEAAgC;AACtC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,mGAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yGAAkD;AAC/D;AACA;AACA;AACA;AACA;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA,mFAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,kBAAkB,4BAA4B;AAC9C;AACA;;AAEA,+DAA+D,mBAAmB;;AAElF;AACA;AACA;AACA;AACA,QAAQ,qCAAY,wBAAwB,YAAY,KAAK,8BAA8B;AAC3F,qBAAqB,yGAAkD;AACvE;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA,kBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAuB;AACxC;AACA;AACA,0BAA0B,gCAAgC;AAC1D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAAsC;AACtC;;AAEA;AACA,EAAE,2EAAmC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,gEACL;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA,kBAAkB,cAAc;AAChC;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,0BAA0B,mDAAuB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAuB;AAClC;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;;AAEA;;;ACzO6C;AAC7C;AACuC;AACQ;AACD;;AAE9C,uGAAkD;AAClD,EAAE,iFAAsC;AACxC;AACA;AACA,GAAG;AACH;AACA;;AAEA,mGAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA,2EAAoC;AACpC;AACA,EAAE,iFAAsC;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,gEACP;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gEACQ,8BAA8B,aAAa;AACrE;AACA;AACA,yBAAyB,gEACC,4BAA4B,aAAa;AACnE;AACA;AACA,4CAA4C,0BAA0B;AACtE,wBAAwB,gEACE,8BAA8B,aAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,gEAA6B,oCAAoC,aAAa;AACtF;AACA;;AAEA;AACA;AACA,gCAAgC,wDAAuB;AACvD;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,yFAA2C;;AAE3C;AACA,EAAE,iFAAsC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,gCAAgC,gEACN,8BAA8B,aAAa;AACrE,uBAAuB,sDAAwB;AAC/C;AACA,iDAAiD,WAAW;AAC5D;;AAEA,+BAA+B,gEACL,8BAA8B,aAAa;AACrE,+BAA+B,sDAAwB;AACvD;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,UAAU;AAC5D,QAAQ;AACR,kDAAkD,mBAAmB;AACrE;AACA,MAAM;AACN;AACA,kDAAkD,oBAAoB,IAAI,gBAAgB;AAC1F,QAAQ;AACR,kDAAkD,mBAAmB;AACrE;AACA,MAAM;AACN,gDAAgD,gBAAgB;AAChE;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA,6FAA6C;AAC7C;AACA;;;AAGA;AACA;AACA;AACA,qFAAyC;AACzC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AC9M+C;AACD;;AAE9C,qFAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,gEAA6B;AAC7D,2CAA2C,gEAA6B;;AAExE;AACA;AACA,gBAAgB,kEAA8B;AAC9C;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA,gBAAgB,kEAA8B;AAC9C;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAuC;AACvC;AACA;AACA;AACA;;;AC3D+C;AACD;;AAE9C,uFAA0C;AAC1C,mBAAmB,gEAA6B;AAChD,0BAA0B,sDAAwB;;AAElD;AACA;AACA;AACA;AACA,4GAA4G,iBAAiB;AAC7H;AACA;AACA;AACA;AACA;;AAEA;;;AClB6C;AACE;AACD;;AAE9C,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA,mGAAgD;AAChD,sBAAsB,+FACX;AACX;;AAEA,eAAe,gEACS;AACxB;AACA;AACA;AACA,oBAAoB,2FAA2C;AAC/D;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,sBAAsB,2FAA2C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrE8C;;AAE9C,mFAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACV6C;AACE;AACD;;AAE9C,mEAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAgC;AAClD;AACA;AACA,UAAU;AACV,+BAA+B,iBAAiB;AAChD;AACA,OAAO;AACP;;AAEA;AACA;AACA,IAAI,gEAA6B;AACjC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,EAAE,gEACsB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,EAAE,gEACsB;AACxB;AACA;AACA;AACA;AACA,QAAQ;AACR,8BAA8B,UAAU;AACxC;AACA,KAAK;;AAEL;;AAEA;;AAEA,+EAAsC;AACtC;AACA;;;ACnE6C;AACE;AACD;;AAE9C,6EAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,qEAAgC;AACvD;AACA,oFAAoF,WAAW;AAC/F;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,qBAAqB,gEACG;AACxB;;AAEA;AACA;AACA,sBAAsB,gEACI,oCAAoC,KAAK;AACnE;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI,wEAAiC;AACrC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,uBAAuB,qEAAgC;AACvD;AACA,uBAAuB,gEACG,yCAAyC,WAAW;AAC9E;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;;;AAGA;AACA;AACA;AACA,mBAAmB,qEAAgC;AACnD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;ACvH6C;AACC;;AAE9C,2EAAoC;AACpC,eAAe,6EAAoC;AACnD;AACA;AACA;AACA;;;ACR6C;AACN;AACO;;AAE9C;AACA;AACA,SAAS,2EAAmC;AAC5C;;AAEA;AACA;AACA,SAAS,2EAAmC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAuB;AACnD,oBAAoB,oDAAoD;AACxE;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,iFAAuC;AACvC;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,2EAAoC;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,UAAU;AACV,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,uFAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qGAAiD;AACjD;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gCAAgC,wDAAuB;AACvD;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;;;;AC9L8C;AACL;;AAEzC,2EAAoC;AACpC;AACA,uCAAuC,kEAA6B;AACpE,mBAAmB,sBAAO;AAC1B;AACA;AACA;AACA;;;ACV6C;AACR;AACS;;AAE9C,yEAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uGAAkD;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,2EAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qFAAyC;AACzC;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA,sBAAsB,oDAAoD;AAC1E;;AAEA;AACA;AACA,cAAc;AACd,kDAAkD;AAClD;AACA;AACA;AACA;AACA,sBAAsB,oDAAoD;AAC1E,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAoD;AAC1E,yEAAyE;AACzE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+EAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAAsC;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+FAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,8DAA8D;AACpE,MAAM,sDAAsD;AAC5D,MAAM,wDAAwD;AAC9D,MAAM,gEAAgE;AACtE,MAAM,qDAAqD;AAC3D,MAAM,kEAAkE;AACxE,MAAM,+DAA+D;AACrE,MAAM,sEAAsE;AAC5E,MAAM,oEAAoE;AAC1E,MAAM,mEAAmE;AACzE,MAAM,gEAAgE;AACtE,MAAM,4DAA4D;AAClE,MAAM,0DAA0D;AAChE,MAAM,mDAAmD;AACzD,MAAM,oEAAoE;AAC1E,MAAM,uEAAuE;AAC7E,MAAM,sEAAsE;AAC5E,MAAM,qEAAqE;AAC3E;AACA;;AAEA,mFAAwC;AACxC;AACA;AACA;;AAEA;AACA,IAAI,qCAAY,aAAa,IAAI;AACjC;AACA;AACA;AACA,KAAK;;AAEL;AACA,MAAM,qCAAY;AAClB;AACA,QAAQ,qCAAY,aAAa,MAAM;AACvC;AACA;AACA;AACA,SAAS;;AAET;AACA,UAAU,qCAAY;AACtB;AACA;AACA,YAAY,qCAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;;AAEA;AACA,IAAI,qCAAY,aAAa,IAAI;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA,MAAM,qCAAY;AAClB;AACA,QAAQ,qCAAY,aAAa,WAAW;AAC5C;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,UAAU,qCAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;;AAEA,EAAE,qCAAY;;AAEd;AACA,EAAE,qCAAY;AACd;;;;;;;;;;;ACzZA;AACuC;;AAEvC;AAC2C;AACF;AACI;AACuC;;;AAG7E;AACP;AACA;AACA,kBAAkB,8BAAU;;AAE5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;AACrD;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB,GAAG,cAAc;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA,qBAAqB,gCAAU;AAC/B;;AAEA,aAAa,4BAAS;;AAEtB;AACA;;;ACtE8C;AACa;AACtB;;AAErC,qFAAyC;AACzC,8BAA8B,aAAa;AAC3C,EAAE,qCAAY;AACd;AACA,EAAE,qCAAY;AACd;;;ACT+C;AACD;;AAE9C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,2GAAoD;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,yBAAyB,sDAAwB,CAAC,gEAA6B;AAC/E;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,8BAA8B,4BAA4B;AAC1D;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,yFAA2C;AAC3C;AACA;AACA,MAAM,iDAAiD;AACvD,MAAM,mCAAmC,KAAK,iBAAiB;AAC/D,MAAM,yDAAyD;AAC/D;;AAEA;AACA;;AAEA,qGAAiD;AACjD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA,MAAM,mCAAmC,KAAK,WAAW;AACzD,MAAM,kDAAkD;AACxD,MAAM,mCAAmC,KAAK,kBAAkB;AAChE;;AAEA;AACA;;AAEA,uGAAkD;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,+FAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iDAAiD;AACvD,MAAM,+CAA+C;AACrD,MAAM,+CAA+C;AACrD;;AAEA;AACA,iBAAiB,gEAA6B;AAC9C,kBAAkB,sDAAwB;AAC1C,+DAA+D,MAAM;AACrE,GAAG;AACH;AACA;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA,MAAM,6CAA6C;AACnD,MAAM,qDAAqD;AAC3D;;AAEA;AACA,WAAW,sDAAwB,CAAC,gEAA6B;AACjE,GAAG;AACH;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;;ACvKA;AAC0C;AACQ;;AAE3C;AACP;;AAEA,wBAAwB,kDAAsB,GAAG,qCAAqC;AACtF,wBAAwB,oDAAqB;AAC7C,6BAA6B,kDAAsB,GAAG,iCAAiC;AACvF,sBAAsB,oDAAqB;;AAE3C;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA,6BAA6B,eAAe,IAAI,YAAY;AAC5D,iDAAiD,0BAA0B;AAC3E;AACA;AACA;;AAEA;AACA;;;;ACxG8C;AACmB;;AAEjE,yFAA2C;AAC3C;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAC6C;AACR;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA,YAAY,MAAM;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,mEAA+B;AAC3C,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8BAA8B,eAAe;AAC7C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA,IAAI;AACJ,8BAA8B,aAAa;AAC3C;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,mCAAmC,qFAAwC;AAC3E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,qCAAY;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,qFAAwC;AAChD;;AAEA;AACA,UAAU;AACV,UAAU;AACV;AACA,UAAU;AACV,UAAU;;AAEV;AACA,UAAU;AACV,UAAU;AACV;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY;AACZ,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;;;ACpXA;AACA;;AAEA;AACA;AACA,wDAAwD;AACxD,oDAAoD;AACpD,kDAAkD;AAClD,IAAI;AACJ,yCAAyC,gCAAgC;AACzE;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,6BAA6B;AAC7B,8BAA8B;AAC9B;AACA;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACjKsB;;AAEkE;;AAExF;AACA,eAAe,0CAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD,sBAAsB,sCAAmB;AACzC;;AAEA;AACA;;AAEA;AACA,eAAe,0CAAc;AAC7B,8BAA8B,gCAAa;AAC3C,+BAA+B,wCAAqB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AC1NA;AACA;AACA;AACO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;;;;AC1B6C;AACe;;AAErD;AACP;AACA;;AAEA;AACA,kEAAkE,sCAAsC;AACxG;;AAEA;AACA,WAAW,wCAAS;AACpB,oBAAoB,wCAAS;AAC7B;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACO;AACP;AACA,oBAAoB,iDAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,aAAa;AACb;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB,WAAW,OAAO,8DAA8D,yBAAyB;AACzG;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA,8BAA8B,uFACjB;AACb;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;;AAGA,WAAW;AACX;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACxL6C;AACN;AACQ;AAC2G;;AAE1J;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA,eAAe,uEAAiC;AAChD;AACA;AACA,gBAAgB,yEAAkC;AAClD;AACA;;AAEA;AACA,cAAc,WAAW,EAAE,YAAY;AACvC,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA,EAAE,6EAAoC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,gEAA6B;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,oDAAqB,yBAAyB,mBAAmB;AAC3E;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM,oDAAqB,qCAAqC,mBAAmB,MAAM,IAAI,EAAE,QAAQ;AACvG;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,oDAAqB,oBAAoB,mBAAmB,MAAM,IAAI,EAAE,QAAQ;AACtF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAA4B;AAC7D,6BAA6B,oDAAqB;AAClD,uBAAuB,aAAa;AACpC;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA,iCAAiC,8DAA4B;AAC7D,6BAA6B,oDAAqB;AAClD;AACA;AACA,6BAA6B,WAAW,IAAI,gBAAgB;AAC5D;AACA,KAAK;;AAEL;AACA,2EAA2E,uBAAuB;;AAElG;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,+BAA+B,mBAAmB;AAClD;;AAEA,8BAA8B,cAAc;AAC5C,yBAAyB,gDAAqB;AAC9C,2BAA2B,WAAW;AACtC,yBAAyB,mBAAmB;AAC5C,2BAA2B,WAAW;AACtC,yBAAyB,aAAa;AACtC;AACA,+BAA+B;AAC/B;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;ACrTuC;AACQ;AAC6E;;AAE5H;AACA;AACA;AACA,SAAS,mBAAQ;AACjB,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,gBAAgB,0BAA0B;AAC1C;AACA,IAAI,oBAAS;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,oDAAqB,yCAAyC,mBAAmB;AACvF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe;AACf;AACA;AACA;AACA,4BAA4B,4CAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA,kCAAkC,cAAc;AAChD,6BAA6B,gDAAqB;AAClD;AACA,+BAA+B,WAAW;AAC1C,6BAA6B,mBAAmB;AAChD,+BAA+B,WAAW;AAC1C,6BAA6B,aAAa;AAC1C;AACA,mCAAmC;AACnC,4BAA4B,mBAAQ;AACpC;AACA;AACA,kCAAkC,eAAe;AACjD,6BAA6B,oBAAS,OAAO,eAAe;AAC5D;;AAEA;AACA;;;AC7F6C;AACN;AACQ;AACkG;;AAEjJ;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,SAAS,oBAAa;AACtB;AACA,eAAe,uEAAiC;AAChD,gBAAgB,yEAAkC;;AAElD;AACA,cAAc,WAAW,EAAE,YAAY;AACvC,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA,SAAS,oBAAa;AACtB;AACA;AACA,EAAE,6EAAoC;AACtC;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA;AACA,SAAS,eAAQ;AACjB,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,SAAS,iBAAU;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,gBAAgB,0BAA0B;AAC1C;AACA,SAAS,gBAAS;AAClB;AACA;AACA;AACA,gBAAgB,oDAAqB,uBAAuB,mBAAmB;AAC/E,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM,oDAAqB,wCAAwC,mBAAmB;AACtF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,uBAAuB,UAAU;AACjC;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe;AACf,4BAA4B,4CAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA,4BAA4B,oBAAa;AACzC,4BAA4B,oBAAa;AACzC,4BAA4B,mBAAmB;AAC/C,6BAA6B,cAAc;AAC3C,wBAAwB,gDAAqB;AAC7C,0BAA0B,WAAW;AACrC,wBAAwB,mBAAmB;AAC3C,0BAA0B,WAAW;AACrC,wBAAwB,aAAa;AACrC;AACA,8BAA8B;AAC9B,uBAAuB,eAAQ;AAC/B,yBAAyB,iBAAU;AACnC;AACA,6BAA6B,eAAe;AAC5C,wBAAwB,gBAAS,OAAO,eAAe;;AAEvD;AACA;;;ACjK6C;AACN;AACQ;AACqE;;AAEpH;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA,oBAAoB,2EAAmC;AACvD,kBAAkB,2EAAmC;;AAErD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,sDAAwB,CAAC,wDAAyB;AACjF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO,8DAA8D,yBAAyB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C,wBAAwB,gDAAqB;AAC7C,0BAA0B,WAAW;AACrC,wBAAwB,mBAAmB;AAC3C,0BAA0B,WAAW;AACrC,wBAAwB,aAAa;AACrC;AACA,sBAAsB,OAAO;;AAE7B;AACA;;;ACjHuC;AACQ;AAS1B;;AAEN;AACf;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C,uBAAuB,gDAAqB;AAC5C,yBAAyB,WAAW;AACpC,uBAAuB,mBAAmB;AAC1C,yBAAyB,WAAW;AACpC,uBAAuB,aAAa;AACpC;AACA,qBAAqB,OAAO;AAC5B,yBAAyB,WAAW;;AAEpC;AACA;;;AC1DuC;AACQ;AAC+E;;;AAG9H,SAAS,oBAAa;AACtB;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,SAAS,gBAAS;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uBAAuB;AAC7E,UAAU;AACV,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA,QAAQ,yDAAyD;AACjE,QAAQ,4DAA4D;AACpE,QAAQ,uEAAuE;AAC/E,QAAQ,kEAAkE;AAC1E,QAAQ,+DAA+D;AACvE,QAAQ,wDAAwD;AAChE,QAAQ,+DAA+D;AACvE,WAAW,iDAAiD;AAC5D,QAAQ,4DAA4D;AACpE,QAAQ,4DAA4D;AACpE;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGe;AACf;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA,uBAAuB,iBAAiB;AACxC,8BAA8B,cAAc;AAC5C,yBAAyB,gDAAqB;AAC9C,2BAA2B,WAAW;AACtC,yBAAyB,mBAAmB;AAC5C,2BAA2B,WAAW;AACtC,yBAAyB,aAAa;AACtC;AACA,+BAA+B;AAC/B;AACA,6BAA6B,oBAAa;AAC1C,yBAAyB,gBAAS,OAAO,oBAAa;;AAEtD;AACA;;;AC3HuC;AACQ;AAC+E;;;AAG/G;AACf;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA,uBAAuB,iBAAiB;AACxC,8BAA8B,cAAc;AAC5C,yBAAyB,gDAAqB;AAC9C,2BAA2B,WAAW;AACtC,yBAAyB,mBAAmB;AAC5C,2BAA2B,WAAW;AACtC,yBAAyB,aAAa;AACtC;AACA,+BAA+B;AAC/B;;AAEA;AACA;;;AChC6C;AACN;AACQ;AACqE;;AAEpH;AACA,sBAAsB,+EACX;AACX;AACA,kBAAkB,gEAA6B,uCAAuC,YAAY;AAClG;AACA;;AAEA;AACA;AACA,IAAI,wEAAiC;AACrC,IAAI,kDAAsB;AAC1B,IAAI,kDAAsB;AAC1B,IAAI,kDAAsB;AAC1B,IAAI,sEAAgC;AACpC;AACA;AACA;AACA;;AAEA;AACA,MAAM,wEAAiC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA,yBAAyB,mFAAuC;;AAEhE;AACA,4BAA4B,cAAc;AAC1C;AACA,uBAAuB,gDAAqB;AAC5C,yBAAyB,WAAW;AACpC,uBAAuB,mBAAmB;AAC1C,yBAAyB,WAAW;AACpC,uBAAuB,aAAa;AACpC;AACA,qBAAqB,OAAO;;AAE5B;AACA;;;ACxEuC;AACQ;AAC4F;AAC9F;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,yDAA0B;AACvC,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,4BAA4B,cAAc;AAC1C,uBAAuB,gDAAqB;AAC5C,yBAAyB,WAAW;AACpC,uBAAuB,mBAAmB;AAC1C,yBAAyB,WAAW;AACpC,uBAAuB,aAAa;AACpC;AACA;;AAEA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;;;AClGuC;AACoD;;AAE5E;AACf;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,WAAW;AAC1C,6BAA6B,mBAAmB;AAChD;AACA,+BAA+B,WAAW;AAC1C;AACA,6BAA6B,aAAa;;AAE1C;AACA;;;AC1C+C;AACF;AACC;AACT;AACY;;AAEjD;AAC+C;;AAEP;;AAExC;AAC2D;AACW;AACvB;AACqB;AACA;;AAEpE;AACuD;;AAEvD;AAC6D;;AAE7D;AACsC;AACQ;AACT;;AAErC;AACoC;;AAEpC;AAC4C;;AAE5C;AACsC;AACA;;AAEtC;AACkC;;AAElC;AACkC;AACQ;;AAEe;;;AAGzD;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,MAAM,mCAAW;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,+CAAqB;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,YAAY;AACZ,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU,mCAAW;AACrB;AACA;AACA,MAAM;AACN;AACA,aAAa,eAAe;AAC5B;AACA,qBAAqB,WAAW;AAChC;AACA;AACA,6BAA6B,aAAa;AAC1C;;AAEA;AACA,WAAW,wDAAyB;AACpC;;AAEA;AACA,IAAI;AACJ,IAAI,mCAAW;AACf,+BAA+B,wBAAwB,IAAI,wBAAwB,GAAG,8BAA8B,IAAI,YAAY;AACpI;AACA;AACA,IAAI,qCAAY;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,SAAS,gEAA6B;AACtC;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mGAA+C;AAC1D;AACA;AACA;AACA;AACA;AACA,QAAQ,mGAA+C;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yFAA0C;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,wEAAiC;AACxD;AACA;AACA;;AAEA,qBAAqB,wEAAiC;AACtD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,SAAS,qBAAgB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,qBAAgB;AACnC;AACA,mCAAmC,gEAA6B;AAChE,wBAAwB,gEAA6B;AACrD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,0EAAkC;AAC1C;AACA;AACA;AACA,QAAQ,0EAAkC;AAC1C;AACA;AACA;AACA,QAAQ,0EAAkC;AAC1C;AACA;AACA,QAAQ,gFAAqC;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,8BAA8B,UAAU;AACtE,sBAAsB,mDAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,yEAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6EAAoC;AACzD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,wCAAiB;AAC/C;;AAEA;AACA;AACA;AACA,qCAAqC,8BAAa;;AAElD,+BAA+B;;AAE/B;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;;AAEA,6CAA6C,2CAAe;AAC5D;AACA;AACA;AACA,iBAAiB,8CAAwB;AACzC;AACA,QAAQ;AACR;AACA,eAAe,8CAAwB;AACvC;;AAEA;AACA,mCAAmC,mBAAmB;;AAEtD,kCAAkC,kCAAa;AAC/C;AACA,mBAAmB,2CAAe;AAClC;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,QAAQ;AACV,UAAU,qBAAqB;AAC/B;AACA;;;;;AChdqC;AACE;AACQ;AAC6D;AAC9D;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;;AAEA,EAAE,qCAAY,oBAAoB,UAAU;;AAE5C,sBAAsB,8EAAoC;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAoC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,qCAAY,kBAAkB,MAAM;;AAEtC;AACA,gBAAgB,8CAAoB;;AAEpC;AACA,IAAI,qCAAY,qBAAqB,UAAU;AAC/C,IAAI,qCAAY,UAAU,sCAAsC;AAChE,8BAA8B,2CAAc;AAC5C;AACA;AACA;AACA;AACA,aAAa,2CAAc;AAC3B,8CAA8C,aAAa;AAC3D,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ,IAAI,qCAAY,UAAU,sCAAsC;AAChE;AACA,MAAM,qCAAY,kBAAkB,aAAa;AACjD;AACA;;AAEA;;AAEA;AACA,aAAa,gBAAgB,IAAI,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,2CAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,2CAAc;AACjC;AACA,KAAK;AACL,IAAI;AACJ,8BAA8B,2CAAc;AAC5C;AACA,WAAW,2CAAc;;AAEzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU,UAAU,+CAA+C,OAAO,8BAA8B;AACjJ;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW,IAAI,8BAA8B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa,aAAa,+CAA+C,OAAO,8BAA8B;AACzJ;AACA,YAAY;AACZ;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa,aAAa,+CAA+C,OAAO,8BAA8B;AACvJ;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA,mFAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,qCAAY;AACd;AACA;AACA;AACA;AACA,qBAAqB,gDAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA,uFAAuF,8BAA8B;AACrH,UAAU;AACV;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA,EAAE,qCAAY;AACd;;AAEA;AACA,EAAE,qCAAY;AACd;AACA;AACA;AACA,QAAQ,qCAAY,6BAA6B,UAAU;AAC3D,uBAAuB,gDAAqB;AAC5C;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA,EAAE,qCAAY;AACd;AACA;AACA;AACA;AACA;AACA,uCAAuC,uCAAuC,OAAO,8BAA8B;AACnH;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA,EAAE,qCAAY;AACd;AACA;AACA,qBAAqB,gDAAqB;AAC1C;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL,EAAE,qCAAY;AACd;AACA,2BAA2B,gDAAqB;AAChD;AACA;AACA;AACA,GAAG;;AAEH,EAAE,qCAAY;AACd,EAAE,2CAAc;AAChB,EAAE,wCAAW;AACb,4BAA4B,4CAAe;AAC3C;;;;;ACtXqC;AACI;AACK;AACa;;AAE3D,iGAA+C;AAC/C;AACA;AACA,mEAAmE,sBAAsB;AACzF;AACA;AACA;AACA;AACA,yBAAyB,SAAS;AAClC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAAsC;AACtC;AACA;AACA;AACA;;AAEA,2EAAoC;AACpC;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+EAAsC;AACtC,kCAAkC,kCAAmB,eAAe,sBAAsB;AAC1F;AACA;AACA;;AAEA,mFAAwC;AACxC;AACA;AACA;AACA;AACA;;AAEA,qFAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA,yFAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA,qBAAqB,cAAc,IAAI,UAAU;AACjD,gDAAgD,cAAc,IAAI,UAAU;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA,qFAAyC;AACzC;AACA,IAAI,mCAAW;AACf;AACA;;AAEA,qBAAqB,mFAAsC;AAC3D;AACA;AACA;AACA,qBAAqB,+EAAoC;AACzD;AACA;AACA;AACA,2DAA2D,iFAAqC;AAChG;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE,qCAAY;AACd;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AC/IA;AACyB;AACzB;AACgC;AACP;AACQ;AACN;AACA;AACE;AACA;AACM;AACH;AACP;AACM;AACF;AACE;AACF;;AAE7B;AAC2B;AAC3B;AAC8B;AACA;AACH;AACW;AACA;AACP;AACG;AACP;AACQ;AACH;AACC;AACF;AACD;AACF;AACC;AACQ;AACR;AACK;AACA;AACI;;AAEN;;AAEP;;AAEO;;AAEI;;;AChDG;;;ACAU;;AAEjD;AACA,EAAE,2CAAmB;AACrB;AACA;;AAEA,6BAAe,SAAS,eAAG;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjB6C;AACR;AACI;;;AAGlC;AACP,SAAS,yDAA0B;AACnC;;AAEO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,uCAAuC,6DAC5B;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA,4CAA4C,2CAAkB;AAC9D;AACA;AACA;AACA,IAAI,qCAAY,yBAAyB,WAAW;AACpD;AACA;AACA;AACA;AACA,QAAQ,mCAAW,0BAA0B,OAAO,MAAM,iBAAiB,KAAK,YAAY,GAAG,WAAW;AAC1G,0EAA0E,qBAAqB;AAC/F,QAAQ;AACR;AACA,QAAQ,mCAAW,cAAc,iBAAiB,qBAAqB,MAAM,QAAQ,YAAY,GAAG,WAAW;AAC/G;AACA;AACA,KAAK;AACL;AACA;;;ACvEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,0EAA0E,cAAc;AACxF;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iEAAiE,cAAc;AAC/E;AACA;;;;;ACrFkC;AACE;AACsB;AAChB;AACJ;AACoB;AACP;AACO;AACC;AAC6B;AACV;AACpC;AACW;;AAErD;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,2BAA2B,mEAAkC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qBAAqB;AACrE;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB,6CAAkB;AACxC;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,6BAAS;AAChC,sBAAsB,+DAA4B;AAClD;AACA,MAAM,uDAAwB;AAC9B,MAAM,yCAAiB;AACvB,oCAAoC,2CAAkB;AACtD,qBAAqB,kCAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,SAAS,WAAW,kBAAkB,KAAK;AAC3C,SAAS,WAAW,gBAAgB,KAAK;;AAEzC,EAAE,qCAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qCAAY,sBAAsB,WAAW;AACvD,oDAAoD,WAAW,IAAI,cAAc;AACjF;AACA;AACA,QAAQ,qCAAY,IAAI,MAAM;AAC9B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAY,YAAY,MAAM;AACtC,QAAQ,qCAAY;AACpB;AACA,OAAO;AACP,GAAG;AACH;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,yCAAyC,+BAA+B;AACxE;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,0BAA0B,cAAc;AACxC,oBAAoB,QAAQ;AAC5B,kDAAkD,EAAE;AACpD,4DAA4D,EAAE;AAC9D;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;;AAE7C,0BAA0B,cAAc;AACxC,oBAAoB,QAAQ;AAC5B,kDAAkD,EAAE;AACpD,iFAAiF,EAAE;AACnF;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,0BAAO;;AAExB;AACA;AACA,MAAM;AACN;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA,+CAA+C,+CAA+C;AAC9F,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;AAC7C;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;AAC7C;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;AAC7C;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA,2BAA2B,2CAAkB;AAC7C;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qEAAqE,WAAW;AAChF,GAAG;AACH;;AAEA;AACA;AACA;AACA,8CAA8C,2CAAkB;AAChE,2BAA2B,2CAAkB;AAC7C,IAAI,uBAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;AAC7C,iBAAiB,0BAAO;;AAExB;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,sDAAsD,wBAAwB;AAC9E,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,2CAAkB;;AAE7C;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,iBAAiB,0BAAO,GAAG;AAC3B;AACA,sDAAsD,wBAAwB;AAC9E;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qCAAY,sCAAsC,YAAY,KAAK,qCAAqC;AAC5G;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,yBAAyB,2CAAkB;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,qCAAY;AAClB;AACA;AACA;AACA;AACA,QAAQ,qCAAY,WAAW,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,iBAAiB;AAChG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR,QAAQ,qCAAY,gBAAgB,WAAW;AAC/C,8CAA8C,WAAW;AACzD;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wCAAe;AACpC;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,qCAAY;;AAEd;AACA;AACA;;AAEA;AACA,EAAE,qCAAY;;AAEd;AACA;AACA,IAAI,qCAAY;AAChB,IAAI;AACJ,IAAI,qCAAY;AAChB,IAAI,qCAAY;AAChB,IAAI,qCAAY;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB,MAAM,qCAAY;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,qCAAY,uBAAuB,wBAAwB;AACvE;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ,qCAAY;AACpB,QAAQ,qCAAY;AACpB,QAAQ,qCAAY;AACpB,QAAQ,qCAAY;AACpB;;AAEA,MAAM;AACN,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB,MAAM,qCAAY;AAClB;;AAEA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,2CAAkB;AAC5D;;AAEA;AACA;AACA;AACA;AACA,OAAO,2EAAmC;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,2CAAkB;AAC5D;;AAEA;;AAEA;AACA;AACA,QAAQ,2EAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM,qCAAY,kBAAkB,UAAU;AAC9C;AACA;AACA,QAAQ;AACR,uEAAuE,6CAA6C;AACpH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,0CAA0C,2CAAkB;AAC5D;;AAEA;AACA;AACA;AACA;AACA,OAAO,2EAAmC;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F,GAAG;AACH;AACA,uBAAuB;AACvB,+EAA+E,iBAAiB;AAChG,GAAG;AACH;AACA,uBAAuB;AACvB,8EAA8E,iBAAiB;AAC/F,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,iBAAiB;AACjG;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+EAA+E,iBAAiB;AAChG,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C,wBAAwB,aAAa;AACrC;AACA;AACA,qBAAqB;AACrB;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAY,gBAAgB,WAAW;AAC/C,8CAA8C,WAAW;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAe;AACtC;AACA,wBAAwB,iBAAiB;AACzC,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA,0CAA0C,2CAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wCAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,mFAAmF,WAAW;AAC9F,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,4CAA4C,2CAAkB;;AAE9D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,4BAA4B,8BAAW;;AAEvC;AACA,IAAI,qCAAY;AAChB,IAAI;AACJ,IAAI,qCAAY;AAChB,IAAI,qCAAY;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAAY;AACvC;AACA;AACA;;AAEA;AACA,IAAI,qCAAY,iBAAiB,uBAAuB;AACxD;AACA;;AAEA,EAAE,qCAAY;AACd,EAAE,qCAAY;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,qCAAY;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uCAAuC,2CAAkB;AACzD,6CAA6C,2CAAkB;AAC/D,+CAA+C,2CAAkB;AACjE,gDAAgD,2CAAkB;AAClE,+CAA+C,2CAAkB;AACjE,+CAA+C,2CAAkB;AACjE,uCAAuC,2CAAkB;;;AAGzD;AACA,QAAQ,qCAAY;AACpB;AACA;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU,qCAAY;AACtB;AACA;AACA;AACA;AACA;AACA,UAAU,qCAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,UAAU,eAAe;AACzD;AACA;AACA;;AAEA;AACA,wBAAwB,4BAA4B;AACpD,UAAU,qCAAY,kBAAkB,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAE,qCAAY;;AAEd;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM,qCAAY;AAClB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN,MAAM,mCAAW;AACjB;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN,MAAM,qCAAY;AAClB;AACA,8CAA8C,2CAAkB;AAChE,8CAA8C,2CAAkB;AAChE,uCAAuC,2CAAkB;AACzD,mDAAmD,2CAAkB;AACrE;AACA;;AAEA,gCAAgC,2EAAmC;AACnE;AACA;AACA;;AAEA,MAAM,qCAAY,iCAAiC,kCAAkC;AACrF;AACA;AACA;AACA,UAAU,qCAAY;AACtB;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR,QAAQ,qCAAY;AACpB;AACA,QAAQ;AACR;AACA;AACA,QAAQ,qCAAY;AACpB;AACA,UAAU,qCAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAAY;AAC/C;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,2CAAkB;AAC9D;AACA;AACA;;AAEA;AACA,MAAM,qCAAY,uBAAuB,qBAAqB;AAC9D;AACA;AACA,QAAQ,qCAAY,kBAAkB,qBAAqB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAY;AAC1B;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,cAAc;AACd,cAAc,qCAAY;AAC1B;AACA;AACA;AACA;AACA;AACA,oCAAoC,sBAAsB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAY;AAC1B,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA,6CAA6C,2CAAkB;AAC/D;AACA;AACA;;AAEA;AACA,MAAM,qCAAY,iBAAiB,qBAAqB;AACxD;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;;AAEA;AACA,QAAQ,qCAAY,kBAAkB,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA,MAAM,+DAA4B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2CAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC19C0C;AACY;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,qBAAqB;AACrB,KAAK;AACL;AACA;AACA;;;AAGO;AACP;;AAEA,EAAE,iFAAsC;AACxC;AACA,yBAAyB,kDAAsB,mDAAmD,cAAc;AAChH,GAAG;;AAEH;AACA;;;ACvC+B;AACU;AACY;AACO;AAC1B;AACmB;AAavB;AACqB;AACE;AACQ;AACQ;AAC3B;AACiC;AACjC;AAC8B;AACR;AAC+C;AACzE;;AAEvB;AACf;AACA;AACA;AACA;AACA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,yDAA2B;AACvD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,qCAAe,WAAW,qCAAe;AACjD,MAAM,qCAAe;AACrB,MAAM,qCAAe;AACrB,MAAM;AACN;AACA;AACA;AACA,MAAM,qCAAe;AACrB;AACA;AACA,mDAAmD,MAAM,UAAU,OAAO;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kEAAkE;;AAExF;AACA;;AAEA;AACA;AACA,wBAAwB,oCAAoC,GAAG,MAAM,OAAO,gBAAgB,QAAQ,WAAW;AAC/G;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAA0B;AAC/D;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAA0B;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;;AAEA,0BAA0B,uDAAwB;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAsB;AAC9B;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mCAAW,wBAAwB,kBAAkB;AACnE;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,qCAAY;AAChB;AACA;AACA,6BAA6B;AAC7B,OAAO;AACP;AACA;AACA;;AAEA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAyB,IAAI,kBAAkB,GAAG,oBAAoB;;AAE7F;AACA,wBAAwB,6DAA4B;AACpD;AACA;AACA,gCAAgC,6DAA4B,uDAAuD,SAAS;AAC5H;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;AACA;AACA,2BAA2B,oFAA0C;;AAErE;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,iCAAa;AACrC,yBAAyB,6BAAS;AAClC;AACA,iCAAiC,mEAAkC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAmC;AAC3C,OAAO;;AAEP;AACA;AACA;AACA;AACA,QAAQ,sHAA2D;AACnE,OAAO;;AAEP;AACA;AACA;AACA,6BAA6B,SAAS,eAAe,aAAa;AAClE;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,mCAAmC,SAAS,eAAe;AAC3D;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2BAAY;AAC9C;AACA,UAAU,qCAAY;AACtB;AACA,YAAY,2CAAmB,8CAA8C,YAAY;AACzF;AACA;AACA;AACA;AACA;AACA,YAAY,qCAAY,8BAA8B,4GAA4G;AAClK;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc,qCAAY,cAAc,sDAAsD;AAC9F;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAY;AAC1B,cAAc,qCAAY;AAC1B;AACA,cAAc,qCAAY,cAAc,sDAAsD;AAC9F;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA,YAAY,qCAAY;AACxB;AACA;AACA,WAAW;AACX,UAAU;AACV,UAAU,qCAAY;AACtB,UAAU,qCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU,qCAAiB;AAC3B;AACA,UAAU;AACV,UAAU,qCAAY;AACtB,UAAU,qCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,cAAc,0BAAS,GAAG;AAC1B;AACA,UAAU;AACV,UAAU,qCAAY;AACtB,UAAU,qCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2BAAY;AAC9C;AACA,UAAU,qCAAY;AACtB;AACA;AACA,YAAY,2CAAmB,mCAAmC,YAAY;AAC9E;AACA;AACA,kBAAkB,yCAAuB;AACzC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc,qCAAY;AAC1B;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAY;AAC1B,cAAc,qCAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAA2B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,+CAAoB;AAC1C;;AAEA;AACA;AACA,sBAAsB,iCAAgB;AACtC;;AAEA;AACA;AACA,sBAAsB,uCAAY;AAClC;;AAEA;AACA;AACA,sBAAsB,iDAAsB;AAC5C;;AAEA;AACA;AACA,sBAAsB,iDAAsB;AAC5C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,8BAAc;AACpC;;AAEA;AACA,sBAAsB,6CAAkB;AACxC;;AAEA,oBAAoB,8CAAmB;AACvC;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,8BAA8B,uEAAgC;AAC9D;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM,qCAAY,gDAAgD,QAAQ,KAAK,uCAAuC;AACtH;AACA;AACA;AACA,MAAM,qCAAY,oDAAoD,QAAQ,KAAK,0CAA0C;AAC7H;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qCAAY,wBAAwB,UAAU;AAC5D;AACA;AACA;AACA;AACA,cAAc,qCAAY,4BAA4B,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;;AAEP,MAAM,qCAAY;AAClB;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,qCAAY;AAClB,YAAY,6CAAkB;AAC9B;;AAEA,IAAI,qCAAY;AAChB;AACA;;AAEA,IAAI,qCAAY;AAChB;;AAEA;AACA;;AAEA,IAAI,qCAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA,MAAM,qCAAY;AAClB;AACA;AACA;AACA,uBAAuB,mCAAW,sCAAsC,UAAU;AAClF;AACA,SAAS;AACT;AACA;AACA;AACA,IAAI,qCAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,sDAAsD,qDAA0B;AAChF;AACA;AACA,MAAM,mCAAW;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,mCAAW;AACjB,4CAA4C,6CAAkB;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,mCAAW;AACjB,2CAA2C,gDAAqB;AAChE,6CAA6C,gDAAqB;AAClE,yCAAyC,gDAAqB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,mCAAW;AACjB,2CAA2C,6CAAkB;AAC7D,6CAA6C,6CAAkB;AAC/D,yCAAyC,6CAAkB;AAC3D,yCAAyC,6CAAkB;AAC3D,4CAA4C,6CAAkB;AAC9D,wCAAwC,6CAAkB;AAC1D,0CAA0C,6CAAkB;AAC5D,+CAA+C,6CAAkB;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,qCAAY;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,mCAAW;AACjB;AACA;;AAEA;AACA;AACA,MAAM,mCAAW;AACjB;AACA;;AAEA;AACA;AACA,MAAM,mCAAW;AACjB;AACA;;AAEA;AACA;AACA,MAAM,mCAAW;AACjB;AACA;;AAEA,IAAI,qCAAY;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAY,0BAA0B,WAAW;AACzD;AACA;AACA;AACA,mEAAmE,iBAAiB;AACpF;;AAEA;AACA,IAAI,qCAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,qCAAY;AAChB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA,0DAA0D,mDAAmD;AAC7G;AACA,iCAAiC,cAAc;AAC/C;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD,KAAK;AACL,mEAAmE,iBAAiB;AACpF,kDAAkD,+BAA+B;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,wBAAwB;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,qCAAY;AAClB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;;AAEA;AACA,YAAY,aAAa;AACzB,YAAY,6BAA6B;;AAEzC,MAAM;AACN,MAAM,qCAAY,kCAAkC,6DAA6D;AACjH,MAAM,qCAAY;AAClB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2BAAY;AACzC;;AAEA,IAAI,qCAAY;AAChB;AACA,MAAM,2CAAmB,yCAAyC,YAAY;AAC9E;AACA;AACA;AACA;AACA,oCAAoC,wCAAe;AACnD;AACA;AACA,MAAM,mCAAW;AACjB;AACA,MAAM;AACN,MAAM,qCAAY,mCAAmC,oDAAoD;AACzG;AACA;AACA,IAAI;AACJ;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA,QAAQ,qCAAY;AACpB;AACA;AACA,QAAQ,qCAAY;AACpB,QAAQ,qCAAY;AACpB;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,YAAY;AACnE,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;;;AC5wCqC;AACY;AACA;AACa;AACrB;AACI;AACU;;AAExC;;AAEf;AACA;AACA;;AAEA;AACA,MAAM,+CAA+C;AACrD,MAAM,qCAAqC;AAC3C,MAAM,uCAAuC;AAC7C,MAAM,sCAAsC;AAC5C,MAAM,qCAAqC;AAC3C;;AAEA;AACA,yBAAyB,6BAAS;AAClC,sCAAsC,2CAAkB;AACxD,uBAAuB,yCAAiB;AACxC,wCAAwC,2CAAkB;;AAE1D;AACA;AACA;AACA;;AAEA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,2BAA2B,iBAAiB,aAAa;AACrE;AACA;AACA;AACA,YAAY,2CAAmB;AAC/B;AACA;AACA,SAAS;AACT;AACA,UAAU,2BAA2B,cAAc,kBAAkB;AACrE,UAAU,mCAAW,cAAc,kBAAkB;AACrD;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA,IAAI,qCAAY;AAChB,IAAI,2BAA2B;AAC/B,IAAI,2BAA2B;AAC/B;AACA;;AAEA;AACA,4BAA4B,0CAAqB;AACjD;AACA;;AAEA,IAAI,qCAAY,IAAI,sBAAsB;AAC1C,IAAI,qCAAY;AAChB;AACA,IAAI,qCAAY,uBAAuB,WAAW,KAAK,2BAA2B;AAClF;AACA,IAAI,qCAAY,IAAI,2BAA2B;AAC/C;AACA;AACA;;;ACpFqC;AACE;AACsB;AACN;AACQ;AACD;AACuB;AACd;AAC9B;AACM;AACoB;;AAEpD;;AAEf,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;;AAEA;AACA,MAAM,kEAAkE;AACxE,MAAM,0EAA0E;AAChF,MAAM,yEAAyE;AAC/E,MAAM,sEAAsE;AAC5E,MAAM,oEAAoE;AAC1E,MAAM,sEAAsE;AAC5E,MAAM,oEAAoE;AAC1E;;AAEA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAmE;AACzF;AACA;;AAEA;AACA,IAAI,qCAAY,2BAA2B,GAAG;AAC9C;AACA,wBAAwB,mEAAkC;AAC1D,iCAAiC,0CAA0C;;AAE3E;;AAEA;AACA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA,8BAA8B,wFAAwF;AACtH,QAAQ;AACR,iCAAiC,uCAAuC;AACxE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yEAAyE;AAC5G,UAAU;AACV,sCAAsC,2CAA2C;AACjF;AACA,OAAO;;AAEP,uBAAuB,oCAAoC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,qCAAY;;AAEhB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,2CAAkB;;AAE/D;AACA,MAAM,qCAAY;AAClB,iCAAiC,gCAAiB,GAAG,wCAAwC;AAC7F;AACA,MAAM,qCAAY;AAClB;;AAEA,wBAAwB,mEAAkC;AAC1D,iCAAiC,0CAA0C;AAC3E,2BAA2B,qEAAmC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe,GAAG,kBAAkB,EAAE,EAAE,oBAAoB;AAClG;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,yCAAyC,wCAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,qCAAY;AAChB,UAAU,8DAAkC;AAC5C;AACA;AACA;AACA;AACA,QAAQ,mCAAW;AACnB,+BAA+B,YAAY,cAAc,aAAa,OAAO,2BAA2B,UAAU,SAAS;AAC3H;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV,UAAU,qCAAY;AACtB,UAAU,mCAAW,2BAA2B,YAAY,UAAU,UAAU;AAChF,UAAU,qCAAY;AACtB,+EAA+E,SAAS,KAAK,WAAW,0BAA0B,GAAG,EAAE;AACvI;AACA;AACA;AACA,6DAA6D,mBAAmB;AAChF,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA,+CAA+C,2CAAkB;AACjE;AACA,YAAY,8DAAkC;AAC9C,cAAc,mBAAmB;AACjC,OAAO;AACP;AACA;;AAEA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,4CAA4C,2CAAkB;AAC9D;AACA,kCAAkC,wCAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB,GAAG,iBAAiB;AAChF,SAAS;AACT;AACA;AACA;AACA,kEAAkE,gCAAgC,IAAI,+BAA+B;AACrI;AACA;AACA,kDAAkD,2BAA2B;AAC7E;AACA;AACA,8CAA8C,uBAAuB;AACrE;;AAEA;AACA;AACA;AACA;AACA,QAAQ,mCAAW,sBAAsB,aAAa;AACtD;AACA;AACA,UAAU;AACV,UAAU,qCAAY;AACtB,UAAU,mCAAW,6BAA6B,aAAa;AAC/D;AACA,QAAQ;AACR,QAAQ,mCAAW,qBAAqB,aAAa;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;;AAGA;AACA,kCAAkC,wCAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,8CAA8C,2CAAkB;AAChE,+CAA+C,2CAAkB;;AAEjE;;AAEA;AACA;;AAEA;AACA,MAAM,qCAAY,kCAAkC,oBAAoB;AACxE;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ,qCAAY,0BAA0B,gBAAgB,mBAAmB,oBAAoB,OAAO,uBAAuB;AACnI,QAAQ;AACR,QAAQ,mCAAW,yBAAyB,aAAa;AACzD,gDAAgD,aAAa;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA,yDAAyD,2CAAkB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mCAAW,qBAAqB,gBAAgB,MAAM,oBAAoB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,QAAQ,mCAAW,qBAAqB,sBAAsB,GAAG,kBAAkB,QAAQ,oBAAoB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,mCAAW,mBAAmB,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mCAAW,wBAAwB,eAAe;AAC5D;AACA,kEAAkE,iBAAiB;AACnF;AACA,UAAU;AACV,UAAU,mCAAW,4BAA4B,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ,mCAAW,oBAAoB,eAAe;AACtD;AACA;AACA;AACA,UAAU;AACV,UAAU,qCAAY;AACtB,UAAU,mCAAW,2BAA2B,eAAe;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA,MAAM,qCAAY;AAClB;AACA,yDAAyD,cAAc;;AAEvE;;AAEA;AACA;AACA,IAAI,qCAAY;;AAEhB;;AAEA;AACA;;AAEA;AACA,2CAA2C,2CAAkB;AAC7D,2BAA2B,2CAAkB;;AAE7C;AACA,IAAI,qCAAY,kCAAkC,oBAAoB;;AAEtE;AACA,uDAAuD,2CAAkB;;AAEzE;AACA;AACA;AACA;AACA,wCAAwC,oCAAoC;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAqC;AAC7C,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAmC;AAC3C,OAAO;;AAEP;AACA;AACA;AACA;AACA,QAAQ,sHAA2D;AACnE,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,8BAA8B,2CAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2CAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa,IAAI,eAAe;AAC3E,8DAA8D,wBAAwB;AACtF,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAA+E,eAAe;AAC9F,wEAAwE,aAAa;AACrF;AACA;AACA;AACA,SAAS,IAAI,6EAA6E;AAC1F;AACA;AACA;AACA;AACA,SAAS,cAAc,uEAAuE;AAC9F;;AAEA,4GAA4G,eAAe;AAC3H;AACA,+GAA+G,kBAAkB;AACjI;AACA;AACA,uDAAuD,kBAAkB,4BAA4B,eAAe,EAAE,qBAAqB;AAC3I;AACA;AACA,qDAAqD,gBAAgB,0BAA0B,aAAa,EAAE,mBAAmB;AACjI;AACA,uIAAuI,2BAA2B,IAAI,0BAA0B;AAChM;AACA,+GAA+G,kBAAkB;AACjI;;AAEA;AACA,6LAA6L,kBAAkB;AAC/M;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,mCAAW,UAAU,UAAU;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+FAA+F,oBAAoB;AACnH,uDAAuD,cAAc,wBAAwB,oBAAoB;AACjH,KAAK;AACL;;AAEA;AACA;AACA,mCAAmC,2CAAkB;AACrD,kBAAkB,4DAA6B;AAC/C,qCAAqC,0CAAqB;AAC1D;;AAEA,8BAA8B,oFAA0C;AACxE,4BAA4B,oEAAkC;;AAE9D;;AAEA;AACA;AACA;AACA,qCAAqC,2CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,2CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,2CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,2CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,2CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,2CAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,8CAA8C,kBAAkB;AAChE;AACA,mBAAmB,WAAW,EAAE,WAAW;AAC3C;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2CAAkB;AAC7D,6CAA6C,2CAAkB;AAC/D;;AAEA;AACA,IAAI,qCAAY;;AAEhB;AACA;AACA;;;;;;;;;;;;;;;;;ACp1BkC;;AAElC;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA,8BAA8B,YAAY,GAAG,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wCAAwC,kBAAkB;AAC1D;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,EAAE,cAAc;AAC9C,gBAAgB,UAAU;AAC1B;AACA;AACA,oCAAoC,QAAQ;AAC5C,OAAO;AACP,KAAK;AACL;AACA,wDAAwD,oDAAoD;AAC5G;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,oCAAoC,kCAAkC;AAC7E;AACA;AACA,IAAI,qCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,4BAA4B;AAC9F;AACA;AACA,GAAG;AACH;AACA;;;AC3GA;AACoD;AACe;AACb;AACF;AACQ;AAC4C;AACQ;AACnC;AACR;AACA;AACL;AAC6C;AAC1D;AACI;AACC;AAC6D;AACrE;AACgC;AACnB;AACN;AACM;AACZ;AACc;AACA;AACb;AACL;AACsB;AACc;AAM/C;AACO;;AAEzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,qEAAmC;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA,iBAAiB,8BAAW;AAC5B,eAAe;AACf,kBAAkB,sDAA0B;AAC5C,mCAAmC;AACnC,eAAe;AACf,mBAAmB;AACnB,2BAA2B;AAC3B,yBAAyB;AACzB,oBAAoB,0DAA4B;AAChD,qBAAqB,4DAA6B;AAClD,mBAAmB;AACnB,uBAAuB;AACvB,iBAAiB;AACjB;AACA,kDAAkD,mDAAyB;AAC3E,iBAAiB;AACjB,mBAAmB;AACnB,gBAAgB,qBAAQ;AACxB,cAAc;AACd,cAAc;AACd,qBAAqB;AACrB,eAAe;AACf,uBAAuB;AACvB,YAAY;AACZ,iBAAiB;AACjB,qBAAqB;AACrB,mBAAmB;AACnB,gBAAgB,6CAAmB;AACnC;AACA,oBAAoB,0DAA4B;AAChD,sBAAsB;AACtB,uBAAuB;AACvB,iBAAiB,qBAAQ;AACzB,YAAY;AACZ,gBAAgB;AAChB,gBAAgB;AAChB,mBAAmB;AACnB,YAAY,qBAAM;AAClB,eAAe;AACf,8BAA8B;AAC9B,oBAAoB;AACpB,cAAc;AACd,mBAAmB;AACnB,wBAAwB,qEAAmC;AAC3D,uBAAuB,mEAAkC;AACzD,wBAAwB,qEAAmC;AAC3D,8BAA8B,iFAAyC;AACvE,qBAAqB,oEAAkC;AACvD,uBAAuB,oFAA0C;AACjE,gBAAgB;AAChB,uBAAuB;AACvB;AACA,8BAA8B;AAC9B,mCAAmC;AACnC,mCAAmC;AACnC,wBAAwB;AACxB,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,2CAAkB;AACrC;;;;ACjIO;AACP;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE,KAAK;AACL,GAAG;AACH;;;ACVsC;;;AAG/B;;AAEP;AACA;AACA,8BAA8B,mDAAsB;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,KAAK,WAAW,aAAa,IAAI,gCAAgC;AAC5G,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;ACjDyE;AAChC;;AAEzC,6BAAe,SAAS,oBAAG;AAC3B,+CAA+C,2CAAkB,EAAE,oBAAoB;AACvF;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,MAAM;;AAEN;;;AClB0C;AACR;;AAE3B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAM,qCAAY,aAAa,SAAS,kBAAkB,cAAc;AACxE;AACA,QAAQ,qCAAY;AACpB;AACA,oCAAoC,cAAc,GAAG,QAAQ;AAC7D;AACA,UAAU,mCAAW,oCAAoC,SAAS;AAClE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA,MAAM,qCAAY,eAAe,UAAU;AAC3C;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA,gBAAgB,uEAAiC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,uFAAuF,eAAe,GAAG,WAAW;;AAEpH,IAAI,qCAAY;AAChB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAY,6BAA6B,iBAAiB,IAAI,WAAW,KAAK,QAAQ;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;;AClHmE;AAC9B;AAC6B;AACC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM,UAAU,OAAO;AACxE;AACA;AACA;AACA;;AAEA,6BAAe,SAAS,iBAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kGAAkG,WAAW;AAC7G,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,iBAAiB,iBAAiB;AAChD,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,gCAAgC,oCAAe;;AAE/C;AACA,wCAAwC,mBAAmB,CAAC,kCAAkC;AAC9F;AACA,YAAY;AACZ,gBAAgB,yBAAQ;AACxB;;AAEA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gGAAgG,WAAW;AAC3G,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,iBAAiB,iBAAiB;AAChD,UAAU;AACV,UAAU,qCAAY,oBAAoB,IAAI;AAC9C;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;AC9JyC;AACoB;;AAE7D,6BAAe,eAAe,mBAAG;AACjC,wBAAwB,2CAAkB;AAC1C,6BAA6B,+CAAoB;AACjD,+CAA+C,2CAAkB;AACjE,+BAA+B,yDAAyD,iBAAiB;AACzG;AACA,2BAA2B,mEAAkC;;AAE7D;AACA;AACA,gCAAgC,2CAAkB;AAClD;AACA;AACA;AACA;;;ACjBsC;AACD;;;AAG9B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB,iCAAiC,2CAAkB,CAAC;AACpD;;AAEA;AACA,oBAAoB;AACpB,2BAA2B,yCAAiB;AAC5C,2BAA2B,6CAAmB;AAC9C,2CAA2C,2CAAkB;;AAE7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;;AAEA;AACA;;AAEA,4BAA4B,2CAAkB;AAC9C,4BAA4B,2CAAkB;AAC9C;AACA;;;ACxC2D;AACI;AAC+C;AACrE;;AAEzC;AACA;AACA;AACA,eAAe;AACf;AACA,aAAa;AACb,UAAU;AACV,YAAY;AACZ,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,iBAAiB;AACjB,KAAK;AACL,GAAG;AACH,WAAW;AACX,YAAY;AACZ;AACA;AACA,eAAe;AACf,mBAAmB;AACnB,aAAa;AACb,GAAG;AACH;AACA;AACA,cAAc;AACd;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,CAAC;;AAED;AACA,4CAA4C,iEAA6B;AACzE;AACA,4BAA4B,2CAAkB;AAC9C;AACA,4CAA4C,iEAA6B;AACzE;AACA,4BAA4B,2CAAkB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAAkB,CAAC;AACtD,4BAA4B,2CAAkB,CAAC,qBAAqB;AACpE,WAAW,2CAAkB,CAAC;AAC9B,QAAQ;AACR;AACA;AACA;AACA,uCAAuC,2CAAkB,CAAC;AAC1D;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,uCAAuC,2CAAkB,CAAC;AAC1D,SAAS;AACT,OAAO;AACP;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,+CAA+C,2CAAkB;AACjE,2CAA2C,2CAAkB;AAC7D;AACA,wBAAwB,2CAAkB;AAC1C,MAAM;AACN,MAAM,4DAA0B,CAAC,kDAAqB;AACtD;AACA,IAAI,4DAA0B,CAAC,kDAAqB;;AAEpD,2CAA2C,2CAAkB;AAC7D,IAAI,4DAA0B,CAAC,kDAAqB;;AAEpD,+CAA+C,2CAAkB;AACjE,IAAI,4DAA0B,CAAC,kDAAqB;;AAEpD,0CAA0C,2CAAkB;AAC5D,IAAI,4DAA0B,CAAC,kDAAqB;AACpD;AACA;;AAEA,6BAAe,SAAS,uBAAG;;AAE3B,6BAA6B,2CAAkB;AAC/C,aAAa,2CAAkB,CAAC;AAChC,cAAc,2CAAkB,CAAC;AACjC,aAAa,2CAAkB,CAAC;AAChC;AACA,UAAU,yBAAQ;AAClB;AACA,GAAG;;AAEH,6BAA6B,2CAAkB;AAC/C,aAAa,2CAAkB,CAAC;AAChC,cAAc,2CAAkB,CAAC;AACjC,aAAa,2CAAkB,CAAC;AAChC;AACA,UAAU,mCAAkB;AAC5B;AACA,GAAG;;AAEH,6BAA6B,2CAAkB;AAC/C,aAAa,2CAAkB,CAAC;AAChC,cAAc,2CAAkB,CAAC;AACjC,aAAa,2CAAkB,CAAC;AAChC;AACA,UAAU,iCAAgB;AAC1B;AACA,GAAG;;AAEH,6BAA6B,2CAAkB;AAC/C,aAAa,2CAAkB,CAAC;AAChC,cAAc,2CAAkB,CAAC;AACjC,aAAa,2CAAkB,CAAC;AAChC;AACA,UAAU,sCAAqB;AAC/B;AACA,GAAG;;AAEH,4CAA4C,iEAA6B;AACzE,2BAA2B,2CAAkB;AAC7C;;AAEA;AACA;;AAEA,0CAA0C,2CAAkB;AAC5D,yBAAyB,2CAAkB;AAC3C,sBAAsB,2CAAkB;AACxC;;AAEA,wBAAwB,2CAAkB;AAC1C,sBAAsB,2CAAkB;AACxC;;AAEA;AACA,6BAA6B,2CAAkB;AAC/C,aAAa,2CAAkB,CAAC;AAChC,cAAc,2CAAkB,CAAC;AACjC,aAAa,2CAAkB,CAAC;AAChC;AACA;AACA;AACA,GAAG;;AAEH;AACA,6BAA6B,2CAAkB;AAC/C,aAAa,2CAAkB,CAAC;AAChC,cAAc,2CAAkB,CAAC;AACjC,aAAa,2CAAkB,CAAC;AAChC;AACA,UAAU,aAAa;AACvB;AACA,GAAG;;;AAGH,wBAAwB,2CAAkB;AAC1C;AACA;;AAEA;AACA,oBAAoB,2CAAkB;AACtC,oBAAoB,2CAAkB;AACtC,oBAAoB,2CAAkB;;AAEtC;;;ACrMqD;;AAE9C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,qEAAmC;AACrD,uBAAuB,2DAA8B;AACrD;;AAEA;AACA;AACA,kBAAkB,WAAW,GAAG,UAAU;AAC1C;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACzG2D;AACQ;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,MAAM,mCAAmC,WAAW;AACjH;AACA;AACA,UAAU,iBAAiB,iBAAiB;AAC5C,MAAM;AACN,UAAU,aAAa,iBAAiB;AACxC;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEO;AACP;AACA;;;;ACxBuC;AACF;;AAErC;AACA;AACA;AACA,2DAA2D,cAAc,GAAG,YAAY;AACxF,wEAAwE,cAAc,GAAG,YAAY;AACrG;;AAEA;AACA;AACA;AACA,YAAY,sCAAsC;AAClD,aAAa;AACb,IAAI;AACJ,IAAI,qCAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA,YAAY,4CAA4C;AACxD,aAAa;AACb,IAAI;AACJ,IAAI,qCAAY;AAChB;AACA;;AAEA,mDAAe;AACf;AACA;AACA;AACA;AACA;AACA,YAAY,4CAA4C;AACxD,oCAAoC,kDAAoB;;AAExD;AACA,gCAAgC,cAAc,iCAAiC,oBAAoB,qDAAqD,iBAAiB;AACzK;;AAEA;AACA;AACA;;AAEA,YAAY,wCAAwC;;AAEpD,6BAA6B,kDAAoB;AACjD,2BAA2B,kDAAoB;AAC/C,kCAAkC,kDAAoB;;AAEtD;;AAEA,4DAA4D;AAC5D,4DAA4D;AAC5D,4DAA4D;;AAE5D,oBAAoB,qCAAY,kBAAkB,cAAc;;AAEhE;AACA;AACA,eAAe,cAAc,0BAA0B,YAAY,kDAAkD,cAAc;AACnI;AACA;AACA;AACA,IAAI;AACJ,IAAI,mCAAW;AACf,yFAAyF,aAAa;AACtG;AACA,CAAC,EAAC;;;ACvuBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,oBAAoB;AAC1B,MAAM,wBAAwB;AAC9B,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC,MAAM,4BAA4B;AAClC,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,2BAA2B;AACjC,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,6BAA6B;AACnC,MAAM,2BAA2B;AACjC,MAAM,2BAA2B;AACjC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,sBAAsB;AAC5B,MAAM,2BAA2B;AACjC,MAAM,sBAAsB;AAC5B,MAAM,qBAAqB;AAC3B,MAAM,2BAA2B;AACjC,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,6BAA6B;AACnC,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,+BAA+B;AACrC,MAAM,uBAAuB;AAC7B,MAAM,2BAA2B;AACjC,MAAM,2BAA2B;AACjC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,wBAAwB;AAC9B,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,+BAA+B;AACrC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,0BAA0B;AAChC,MAAM,2BAA2B;AACjC,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,8BAA8B;AACpC,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,2BAA2B;AACjC,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB;AAC/B,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,sBAAsB;AAC5B,MAAM,0BAA0B;AAChC;AACA;AACA,MAAM,+DAA+D;AACrE,MAAM,6DAA6D;AACnE;AACA;AACA,MAAM,sGAAsG;AAC5G,MAAM,yGAAyG;AAC/G,MAAM,oGAAoG;AAC1G,MAAM,0GAA0G;AAChH,MAAM,yGAAyG;AAC/G,MAAM,sGAAsG;AAC5G,MAAM,yGAAyG;AAC/G,MAAM,2GAA2G;AACjH,MAAM,sGAAsG;AAC5G,MAAM,0GAA0G;AAChH,MAAM,yGAAyG;AAC/G,MAAM,wGAAwG;AAC9G,MAAM,yGAAyG;AAC/G,MAAM,yGAAyG;AAC/G,MAAM,uGAAuG;AAC7G,MAAM,4GAA4G;AAClH,MAAM,wGAAwG;AAC9G,MAAM,wGAAwG;AAC9G,MAAM,yGAAyG;AAC/G,MAAM,wGAAwG;AAC9G,MAAM,2GAA2G;AACjH,MAAM,wGAAwG;AAC9G,MAAM,qGAAqG;AAC3G;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,wGAAwG;AAC9G,MAAM,sGAAsG;AAC5G,MAAM,4GAA4G;AAClH,MAAM,0GAA0G;AAChH,MAAM,iDAAiD;AACvD,MAAM,2CAA2C;AACjD;AACA;AACA,MAAM,qBAAqB;AAC3B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,0BAA0B;AAChC;AACA;AACA,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B;AACA;AACA,MAAM,4BAA4B;AAClC,MAAM,gDAAgD;AACtD,MAAM,4BAA4B;AAClC;AACA;AACA,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B;AACA;AACA,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,4BAA4B;AAClC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,0BAA0B;AAChC,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,qBAAqB;AAC3B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC;AACA;AACA,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC;AACA;AACA,MAAM,qBAAqB;AAC3B,MAAM,6BAA6B;AACnC;AACA;AACA,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B;AACA;AACA,MAAM,yBAAyB;AAC/B,MAAM,+BAA+B;AACrC;AACA;AACA,MAAM,0BAA0B;AAChC,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,oBAAoB;AAC1B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,8BAA8B;AACpC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,qBAAqB;AAC3B,MAAM,2BAA2B;AACjC,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,2BAA2B;AACjC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,2BAA2B;AACjC,MAAM,yBAAyB;AAC/B,MAAM,2BAA2B;AACjC,MAAM,4BAA4B;AAClC,MAAM,2BAA2B;AACjC,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,yBAAyB;AAC/B,MAAM,qBAAqB;AAC3B,MAAM,0BAA0B;AAChC,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,mCAAmC;AACzC,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,8BAA8B;AACpC,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;AAC5B;AACA;AACA,MAAM,4FAA4F;AAClG,MAAM,mGAAmG;AACzG,MAAM,mGAAmG;AACzG,MAAM,wGAAwG;AAC9G,MAAM,+GAA+G;AACrH,MAAM,iGAAiG;AACvG,MAAM,oGAAoG;AAC1G,MAAM,mGAAmG;AACzG,MAAM,+EAA+E;AACrF,MAAM,+FAA+F;AACrG,MAAM,0FAA0F;AAChG,MAAM,qGAAqG;AAC3G,MAAM,mGAAmG;AACzG,MAAM,uFAAuF;AAC7F,MAAM,gGAAgG;AACtG,MAAM,yGAAyG;AAC/G,MAAM,gGAAgG;AACtG,MAAM,yGAAygDAAgD;AACtD,MAAM,kDAAkD;AACxD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,kDAAkD;AACxD,MAAM,kDAAkD;AACxD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,sDAAsD;AAC5D,MAAM,sDAAsD;AAC5D,MAAM,sDAAsD;AAC5D,MAAM,sDAAshC,MAAM,4BAA4B;AAClC,MAAM,sBAAsB;AAC5B;AACA;AACA,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,0BAA0B;AAChC,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,iCAAiC;AACvC,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,qBAAqB;AAC3B,MAAM,oBAAoB;AAC1B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,gCAAgC;AACtC,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,+BAA+B;AACrC,MAAM,gCAAgC;AACtC,MAAM,iCAAiC;AACvC,MAAM,0BAA0B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sCAAsC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C,UAAU,mCAAmC;AAC7C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C,UAAU,mCAAmC;AAC7C;AACA,KAAK;AACL,MAAM,uEAAuE;AAC7E,MAAM,iEAAiE;AACvE,MAAM,wEAAwE;AAC9E,MAAM,6DAA6D;AACnE;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,oCAAoC;AAC9C;AACA,KAAK;AACL,MAAM,kEAAkE;AACxE;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,oCAAoC;AAC9C;AACA,KAAK;AACL,MAAM,8DAA8D;AACpE,MAAM,6DAA6D;AACnE,MAAM,sEAAsE;AAC5E,MAAM,mEAAmE;AACzE,MAAM,kEAAkE;AACxE,MAAM,iEAAiE;AACvE,MAAM,0DAA0D;AAChE,MAAM,iEAAiE;AACvE,MAAM,oEAAoE;AAC1E,MAAM,6DAA6D;AACnE,MAAM,mEAAmE;AACzE,MAAM,2DAA2D;AACjE,MAAM,8DAA8D;AACpE,MAAM,6DAA6D;AACnE,MAAM,yDAAyD;AAC/D,MAAM,0EAA0E;AAChF,MAAM,iEAAiE;AACvE,MAAM,4DAA4D;AAClE,MAAM,oDAAoD;AAC1D;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL,MAAM,6DAA6D;AACnE,MAAM,gEAAgE;AACtE,MAAM,wEAAwE;AAC9E,MAAM,uEAAuE;AAC7E,MAAM,qEAAqE;AAC3E,MAAM,8EAA8E;AACpF,MAAM,8DAA8D;AACpE,MAAM,iEAAiE;AACvE,MAAM,gEAAgE;AACtE,MAAM,8DAA8D;AACpE,MAAM,uEAAuE;AAC7E,MAAM,mEAAmE;AACzE,MAAM,4DAA4D;AAClE,MAAM,+DAA+D;AACrE,MAAM,sEAAsE;AAC5E,MAAM,wEAAwE;AAC9E,MAAM,+DAA+D;AACrE;AACA;AACA,MAAM,gDAAgD;AACtD,MAAM,iDAAiD;AACvD,MAAM,kDAAkD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wHAAwH;AACxH,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,qGAAqG;AAC3G,MAAM,wGAAwG;AAC9G,MAAM,2GAA2G;AACjH,MAAM,uGAAuG;AAC7G,MAAM,qGAAqG;AAC3G,MAAM,mGAAmG;AACzG,MAAM,sGAAsG;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qGAAqG;AACrpH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,yGAAyG;AAC/G;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+oBAA+oB;AAC/oB,KAAK;AACL;AACA;AACA;AACA;AACA,qIAAqI;AACrI,KAAK;AACL;AACA;AACA;AACA;AACA,+LAA+L;AAC/L,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uyBAAuyB,qxBAAqxB;AAC5jiHAAiH;AACvH,MAAM,gHAAgH;AACtH,MAAM,4GAA4G;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,uGAAuG;AAC7G,MAAM,iHAAiH;AACvH,MAAM,gHAAgH;AACtH,MAAM,8GAA8G;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,uGAAuG;AAC7G,MAAM,yGAAyG;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,qGAAqG;AAC3G,MAAM,2GAA2G;AACjcAAc,uFAAuF;AACjH,YAAY,cAAc,qEAAqE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,YAAY,cAAc,iFAAiF;AAC3G,YAAY,cAAc,2EAA2E;AACrG,YAAY,cAAc,8DAA8D;AACxF;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,MAAM,2FAA2F;AACjG,MAAM,qFAAqF;AAC3F,MAAM,sFAAsF;AAC5F,MAAM,uFAAuF;AAC7F,MAAM,oFAAoF;AAC1F,MAAM,iFAAiF;AACvF,MAAM,6EAA6E;AACnF,MAAM,oFAAoF;AAC1F,MAAM,6EAA6E;AACnF,MAAM,sFAAsF;AAC5F,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,4FAA4F;AAClG,MAAM,sFAAsF;AAC5F,MAAM,uFAAuF;AAC7F,MAAM,wFAAwF;AAC9F,MAAM,qFAAqF;AAC3F,MAAM,kFAAkF;AACxF,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F,MAAM,8EAA8E;AACpF,MAAM,sFAAsF;AAC5F,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,4FAA4F;AAClG,MAAM,sFAAsF;AAC5F,MAAM,uFAAuF;AAC7F,MAAM,wFAAwF;AAC9F,MAAM,qFAAqF;AAC3F,MAAM,kFAAkF;AACxF,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F,MAAM,8EAA8E;AACpF,MAAM,sFAAsF;AAC5F,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,mGAAmG;AACzG,MAAM,iHAAiH;AACvH,MAAM,4EAA4E;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2GAA2G;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2EAA2E;AACjF,MAAM,0FAA0F;AAChG,MAAM,oGAAoG;AAC1G,MAAM,oGAAoG;AAC1G,MAAM,0GAA0G;AAChH,MAAM,wGAAwG;AAC9G,MAAM,4GAA4G;AAClH,MAAM,gHAAgH;AACtH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,4GAA4G;AAClH,MAAM,0GAA0G;AAChH,MAAM,4GAA4G;AAClH,MAAM,4GAA4G;AAClH,MAAM,4GAA4G;AAClH,MAAM,kGAAkG;AACxG,MAAM,0GAA0G;AAChH,MAAM,gHAAgH;AACtmCAAmC;AACnoBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4nJAA4nJ;AAC5nJ,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,yDAAyD;AAC/D,MAAM,wDAAwD;AAC9D,MAAM,wDAAwD;AAC9D,MAAM,wDAAwD;AAC9D,MAAM,yDAAyD;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,qDAAqD;AAC3D,MAAM,mDAAmD;AACzD,MAAM,iDAAiD;AACvD;AACA;AACA,MAAM,6DAA6D;AACnE,MAAM,8DAA8D;AACpE,MAAM,+DAA+D;AACrE,MAAM,8DAA8D;AACpE,MAAM,6DAA6D;AACnE,MAAM,mEAAmE;AACzE,MAAM,yEAAyE;AAC/E;AACA;AACA,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,sBAAsB;AAC5B;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sRAAsR,oGAAoG,sJAAsJ,mHAAmH;AACnoB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB;AACnB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6DAA6D,6BAA6B;AAC1F;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,4RAA4R,2CAA2C;AACvU;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B;AAC3B;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,6CAA6C;AACnD,MAAM,iDAAiD;AACvD,MAAM,+CAA+C;AACrD,MAAM,2CAA2C;AACjD,MAAM,8CAA8C;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,2GAA2G;AACjH,MAAM,8GAA8G;AACpH,MAAM,6GAA6G;AACnH,MAAM,oGAAoG;AAC1G;AACA;AACA;;;AC9pJqC;AACmB;AACP;AACR;AACI;;AAE7C;AACA;AACA;AACA;AACA;AACA,QAAQ,mCAAW;AACnB;AACA;AACA,KAAK;AACL;AACA,MAAM,mCAAW;AACjB;AACA,KAAK;AACL;AACA;AACA,mCAAmC,iBAAiB;AACpD,QAAQ,mCAAW;AACnB,QAAQ;AACR,QAAQ,mCAAW;AACnB;AACA,MAAM,qCAAY;AAClB,KAAK;AACL;;AAEA;AACA,qBAAqB,yCAAiB;AACtC,sCAAsC,2CAAkB;;AAExD,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,UAAU,qCAAY,iBAAiB,aAAa;AACpD,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,OAAO;AACP;AACA;AACA,UAAU,mCAAW;AACrB;AACA;AACA,QAAQ,qCAAY;AACpB;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEO;AACP;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA,QAAQ,mCAAW;AACnB,QAAQ,qCAAY;AACpB,QAAQ;AACR,QAAQ,mCAAW;AACnB;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;AClFqC;AACE;;AAEvC;AACA;AACA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;;AAEA,cAAc,gDAAmB;AACjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA,MAAM,qCAAY;AAClB;AACA,MAAM;AACN,MAAM,qCAAY;AAClB;AACA,MAAM;AACN,MAAM,qCAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qCAAY;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;AC1FyC;;AAElC;AACP,4CAA4C,iEAA6B;AACzE,2BAA2B,2CAAkB;AAC7C;AACA;;;;;ACNqD;AACoC;AACtC;;AAE5C;AACP;AACA;;AAEA;AACA;AACA,4BAA4B,oCAAe;;AAE3C;AACA,mCAAmC,8BAAW;AAC9C;AACA,+BAA+B,+BAAU;AACzC;AACA,gBAAgB,yBAAU;AAC1B;AACA,UAAU;AACV,cAAc,0BAAS;AACvB;AACA,QAAQ;AACR;AACA,YAAY,yBAAQ;AACpB;AACA,KAAK;;AAEL;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;ACnC6E;AACY;AACtC;AACI;AAClB;;;AAG9B;AACP;AACA,gBAAgB,4DAA6B;AAC7C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oCAAe;;AAE7C;AACA,qCAAqC,8BAAW;AAChD;AACA,iCAAiC,+BAAU;AAC3C;AACA,kBAAkB,iBAAiB;AACnC;AACA,YAAY;AACZ;AACA,gBAAgB,0BAAS;AACzB;AACA,UAAU;AACV;AACA,cAAc,yBAAQ;AACtB;AACA,QAAQ;AACR,QAAQ,qCAAY;AACpB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA,KAAK;;AAEL;AACA;;;ACzDqC;;AAE9B;AACP;AACA;AACA,MAAM,mCAAW;AACjB;AACA;AACA;AACA;;;ACTO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;;AAEX,SAAS;AACT;AACA,KAAK;AACL;;;AC/DuC;;AAEvC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP,mEAAmE,IAAI,SAAS,IAAI;;AAEpF;AACA;AACA,GAAG;AACH;;AAEA;AACA,uBAAuB,wCAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,oDAAoD;AAC5F;AACA;;AAEO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;;ACnGuC;AAC+B;;AAE/D;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qGAAqG;AACrG,iGAAiG;;AAEjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0CAAgB;AACnD;AACA;AACA,kBAAkB,0BAA0B;AAC5C;AACA,eAAe;AACf;AACA,sDAAsD,iBAAiB;AACvE;AACA,eAAe;AACf;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;AChEqC;;AAErC;AACA,EAAE,qCAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,KAAK,iEAAiE,OAAO,MAAM,EAAE,MAAM;AAClH;AACA;;AAEA;AACA;AACA,2FAA2F;AAC3F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA,oEAAe,UAAU,EAAC;;;AC/GyC;AAC1B;;AAEzC,MAAM,gBAAM;AACZ;AACA;AACA;AACA,MAAM,qBAAW;AACjB,MAAM,gBAAM,WAAW,gBAAM;AAC7B,IAAI,gBAAM;AACV,IAAI,gBAAM;AACV,IAAI;AACJ;AACA;AACA;AACA,IAAI,gBAAM;AACV;AACA;AACA,iDAAiD,MAAM,UAAU,OAAO;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kEAAkE,MAAM,mCAAmC,WAAW;AACtH;AACA;AACA,UAAU,iBAAiB,iBAAiB;AAC5C,MAAM;AACN;AACA;AACA;AACA,aAAa,qBAAW,qCAAqC,qBAAqB,GAAG,WAAW;AAChG;AACA;AACA,GAAG;;AAEH;AACA;AACA,EAAE,6BAAU;AACZ;;;AAGA,mEAAe,cAAc,EAAC;;;AClDS;AACkB;;AAElD;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kHAAkH;AAClH,kGAAkG;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAAgB;AAC/C;AACA;AACA,cAAc,0BAA0B;AACxC;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,iCAAiC,4BAA4B;AAC7D,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;AC9CA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,sDAAsD,gBAAgB,YAAY;;AAElF;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wEAAwE;AACtF;AACA;AACA;AACA;AACA,YAAY,kFAAkF;AAC9F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA,mDAAe,qBAAqB,EAAC;;;ACrIE;AACN;;AAEjC;AACwD;AACN;AACI;AACY;;AAElE;AAC6D;AACI;AACQ;AACrB;AACK;AACE;AACQ;;AAEnE;AACuE;AACN;AACkB;;AAEnF;AACoE;;AAEpE;AACsE;AACA;AACD;AACS;;AAEpB;;AAEG;;;AAG7D;AACO;AACP,EAAE,aAAa;AACf,EAAE,YAAY;AACd,EAAE,WAAW;AACb,EAAE,SAAS;AACX,EAAE,iBAAiB;AACnB,EAAE,mCAAW;AACb;;AAEA;AACO;AACP;AACA,EAAE,oBAAoB;;AAEtB;AACA,EAAE,gBAAgB;;AAElB;AACA,EAAE,YAAqB;;AAEvB;AACA;AACA;AACA,IAAI,cAAc;AAClB,IAAI,UAAU;AACd,IAAI,YAAY;AAChB,IAAI,aAAa;AACjB,IAAI,mBAAmB;;AAEvB,GAAG;;AAEH,EAAE,eAAe;AACjB,EAAE,mCAAW;AACb;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,eAAe;AACnB,GAAG;AACH;;AAEO;AACP,EAAE,mBAAmB;AACrB,EAAE,UAAU;AACZ;;AAEO;AACP,EAAE,UAAU;AACZ;AACA;AACA;;AAEO;AACP;AACA,IAAI,UAAU;AACd,IAAI,UAAU;AACd,IAAI,cAAc;AAClB;AACA,EAAE,4BAAc;AAChB;;;;;ACvG8C;AACZ;AACO;;AAEzC;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uDAAuD;AAC7F;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,mCAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6BAA6B,sBAAsB;AACnD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA;;AAEA;AACA,iCAAiC,4CAA4C;;AAE7E;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,iBAAiB,6DAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAqE;AAC3F;AACA;;AAEA;AACA,oDAAoD,gBAAgB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU,GAAG,SAAS,GAAG,WAAW;AAC7E,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;;AAGA,uCAAuC;AACvC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA,8BAA8B,mBAAmB;;AAEjD;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,IAAI,qCAAY;AAChB;AACA,2CAA2C,KAAK;AAChD,IAAI,2CAAmB,wCAAwC,SAAS;;AAExE;AACA;AACA;;;;ACnfA;AACiD;AACwC;;AAEzF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,SAAS,6BAAC;AACzB;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,0BAA0B,yBAAyB,GAAG,sBAAsB;AAC5E,uDAAuD,yBAAyB;AAChF,uDAAuD,yBAAyB;AAChF,mEAAmE,+BAA+B;AAClG;AACA,0BAA0B,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,GAAG,KAAK;AAClF,aAAa,2CAAmB,mCAAmC,SAAS;AAC5E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;;AC1CoB;AACiF;;AAErG;AACA,mBAAmB,IAAI;AACvB,oBAAoB,SAAS;AAC7B,kBAAkB,OAAO;AACzB,6BAA6B,gBAAgB;AAC7C,mCAAmC,kBAAkB;AACrD,4BAA4B,eAAe;AAC3C,sCAAsC,4BAA4B;AAClE,0CAA0C,4BAA4B;;AAEtE;AACA;AACA","sources":["webpack://ddb-importer/./src/dictionary.js","webpack://ddb-importer/./src/effects/acEffects.js","webpack://ddb-importer/./src/effects/specialInfusions.js","webpack://ddb-importer/./src/effects/effects.js","webpack://ddb-importer/./src/effects/macros.js","webpack://ddb-importer/./src/effects/items/bootsOfSpeed.js","webpack://ddb-importer/./src/effects/items/cloakOfDisplacement.js","webpack://ddb-importer/./src/effects/items/javelinOfLightning.js","webpack://ddb-importer/./src/effects/items/moonSickle.js","webpack://ddb-importer/./src/effects/items/pearlOfPower.js","webpack://ddb-importer/./src/effects/specialEquipment.js","webpack://ddb-importer/./src/effects/feats/ancestralProtectors.js","webpack://ddb-importer/./src/effects/feats/arcaneWard.js","webpack://ddb-importer/./src/effects/feats/bardicInspiration.js","webpack://ddb-importer/./src/effects/feats/bladesong.js","webpack://ddb-importer/./src/effects/feats/blessedHealer.js","webpack://ddb-importer/./src/effects/feats/blessedStrikes.js","webpack://ddb-importer/./src/effects/feats/cloudRune.js","webpack://ddb-importer/./src/effects/feats/crossbowExpert.js","webpack://ddb-importer/./src/effects/feats/defensiveDuelist.js","webpack://ddb-importer/./src/effects/feats/deflectMissiles.js","webpack://ddb-importer/./src/effects/feats/favoredFoe.js","webpack://ddb-importer/./src/effects/feats/fightingStyles.js","webpack://ddb-importer/./src/effects/feats/fireRune.js","webpack://ddb-importer/./src/effects/feats/fontOfMagic.js","webpack://ddb-importer/./src/effects/feats/frostRune.js","webpack://ddb-importer/./src/effects/feats/giantsMight.js","webpack://ddb-importer/./src/effects/feats/heavyArmorMaster.js","webpack://ddb-importer/./src/effects/feats/hillRune.js","webpack://ddb-importer/./src/effects/feats/indomitable.js","webpack://ddb-importer/./src/effects/feats/kiEmptyBody.js","webpack://ddb-importer/./src/effects/feats/maneuvers.js","webpack://ddb-importer/./src/effects/feats/momentaryStasis.js","webpack://ddb-importer/./src/effects/feats/paladinDefaultAura.js","webpack://ddb-importer/./src/effects/feats/piercer.js","webpack://ddb-importer/./src/effects/feats/planarWarrior.js","webpack://ddb-importer/./src/effects/feats/potentCantrip.js","webpack://ddb-importer/./src/effects/feats/radiantSoul.js","webpack://ddb-importer/./src/effects/feats/rage.js","webpack://ddb-importer/./src/effects/feats/recklessAttack.js","webpack://ddb-importer/./src/effects/feats/runeCarver.js","webpack://ddb-importer/./src/effects/feats/sacredWeapon.js","webpack://ddb-importer/./src/effects/feats/savageAttacker.js","webpack://ddb-importer/./src/effects/feats/sculptSpells.js","webpack://ddb-importer/./src/effects/feats/sharpShooter.js","webpack://ddb-importer/./src/effects/feats/shift.js","webpack://ddb-importer/./src/effects/feats/slayersPrey.js","webpack://ddb-importer/./src/effects/feats/steadyAim.js","webpack://ddb-importer/./src/effects/feats/stoneRune.js","webpack://ddb-importer/./src/effects/feats/stonesEndurance.js","webpack://ddb-importer/./src/effects/feats/stormRune.js","webpack://ddb-importer/./src/effects/feats/unarmoredMovement.js","webpack://ddb-importer/./src/effects/feats/uncannyDodge.js","webpack://ddb-importer/./src/effects/feats/vigilantBlessing.js","webpack://ddb-importer/./src/effects/feats/visageOfTheAstralSelf.js","webpack://ddb-importer/./src/effects/feats/warCaster.js","webpack://ddb-importer/./src/effects/feats/crusher.js","webpack://ddb-importer/./src/effects/feats/crusherCritical.js","webpack://ddb-importer/./src/effects/feats/slasherReduceSpeed.js","webpack://ddb-importer/./src/effects/feats/slasherCritical.js","webpack://ddb-importer/./src/effects/feats/squireOfSolamnia.js","webpack://ddb-importer/./src/effects/feats/arcaneRecovery.js","webpack://ddb-importer/./src/effects/specialFeats.js","webpack://ddb-importer/./src/effects/spells/absorbElements.js","webpack://ddb-importer/./src/effects/spells/acidArrow.js","webpack://ddb-importer/./src/effects/spells/aid.js","webpack://ddb-importer/./src/effects/spells/alterSelf.js","webpack://ddb-importer/./src/effects/spells/animalFriendship.js","webpack://ddb-importer/./src/effects/spells/arcaneSword.js","webpack://ddb-importer/./src/effects/spells/armorOfAgathys.js","webpack://ddb-importer/./src/effects/spells/auraOfLife.js","webpack://ddb-importer/./src/effects/spells/bane.js","webpack://ddb-importer/./src/effects/spells/banishment.js","webpack://ddb-importer/./src/effects/spells/barkskin.js","webpack://ddb-importer/./src/effects/spells/beaconofHope.js","webpack://ddb-importer/./src/effects/spells/blackTentacles.js","webpack://ddb-importer/./src/effects/spells/bless.js","webpack://ddb-importer/./src/effects/spells/blindnessDeafness.js","webpack://ddb-importer/./src/effects/spells/blur.js","webpack://ddb-importer/./src/effects/spells/boomingBlade.js","webpack://ddb-importer/./src/effects/spells/brandingSmite.js","webpack://ddb-importer/./src/effects/spells/callLightning.js","webpack://ddb-importer/./src/effects/spells/charmPerson.js","webpack://ddb-importer/./src/effects/spells/chillTouch.js","webpack://ddb-importer/./src/effects/spells/chromaticOrb.js","webpack://ddb-importer/./src/effects/spells/cloudkill.js","webpack://ddb-importer/./src/effects/spells/colorSpray.js","webpack://ddb-importer/./src/effects/spells/command.js","webpack://ddb-importer/./src/effects/spells/comprehendLanguages.js","webpack://ddb-importer/./src/effects/spells/confusion.js","webpack://ddb-importer/./src/effects/spells/contagion.js","webpack://ddb-importer/./src/effects/spells/createBonfire.js","webpack://ddb-importer/./src/effects/spells/crownofMadness.js","webpack://ddb-importer/./src/effects/spells/crownofStars.js","webpack://ddb-importer/./src/effects/spells/darkness.js","webpack://ddb-importer/./src/effects/spells/darkvision.js","webpack://ddb-importer/./src/effects/spells/divineFavor.js","webpack://ddb-importer/./src/effects/spells/divineWord.js","webpack://ddb-importer/./src/effects/spells/dominateBeast.js","webpack://ddb-importer/./src/effects/spells/dominateMonster.js","webpack://ddb-importer/./src/effects/spells/dominatePerson.js","webpack://ddb-importer/./src/effects/spells/elementalWeapon.js","webpack://ddb-importer/./src/effects/spells/enhanceAbility.js","webpack://ddb-importer/./src/effects/spells/enlargeReduce.js","webpack://ddb-importer/./src/effects/spells/ensnaringStrike.js","webpack://ddb-importer/./src/effects/spells/entangle.js","webpack://ddb-importer/./src/effects/spells/eyebite.js","webpack://ddb-importer/./src/effects/spells/faerieFire.js","webpack://ddb-importer/./src/effects/spells/fear.js","webpack://ddb-importer/./src/effects/spells/feeblemind.js","webpack://ddb-importer/./src/effects/spells/fireShield.js","webpack://ddb-importer/./src/effects/spells/flameBlade.js","webpack://ddb-importer/./src/effects/spells/fleshtoStone.js","webpack://ddb-importer/./src/effects/spells/fly.js","webpack://ddb-importer/./src/effects/spells/frostbite.js","webpack://ddb-importer/./src/effects/spells/geas.js","webpack://ddb-importer/./src/effects/spells/grease.js","webpack://ddb-importer/./src/effects/spells/greenFlameBlade.js","webpack://ddb-importer/./src/effects/spells/guidance.js","webpack://ddb-importer/./src/effects/spells/guidingBolt.js","webpack://ddb-importer/./src/effects/spells/haste.js","webpack://ddb-importer/./src/effects/spells/heroesFeast.js","webpack://ddb-importer/./src/effects/spells/heroism.js","webpack://ddb-importer/./src/effects/spells/hex.js","webpack://ddb-importer/./src/effects/spells/hideousLaughter.js","webpack://ddb-importer/./src/effects/spells/holdMonster.js","webpack://ddb-importer/./src/effects/spells/holdPerson.js","webpack://ddb-importer/./src/effects/spells/holyAura.js","webpack://ddb-importer/./src/effects/spells/huntersMark.js","webpack://ddb-importer/./src/effects/spells/hypnoticPattern.js","webpack://ddb-importer/./src/effects/spells/iceKnife.js","webpack://ddb-importer/./src/effects/spells/incendiaryCloud.js","webpack://ddb-importer/./src/effects/spells/insectPlague.js","webpack://ddb-importer/./src/effects/spells/invisibility.js","webpack://ddb-importer/./src/effects/spells/irresistibleDance.js","webpack://ddb-importer/./src/effects/spells/light.js","webpack://ddb-importer/./src/effects/spells/longstrider.js","webpack://ddb-importer/./src/effects/spells/mageArmor.js","webpack://ddb-importer/./src/effects/spells/magicWeapon.js","webpack://ddb-importer/./src/effects/spells/massSuggestion.js","webpack://ddb-importer/./src/effects/spells/mindBlank.js","webpack://ddb-importer/./src/effects/spells/mirrorImage.js","webpack://ddb-importer/./src/effects/spells/mistyStep.js","webpack://ddb-importer/./src/effects/spells/moonbeam.js","webpack://ddb-importer/./src/effects/spells/passWithoutTrace.js","webpack://ddb-importer/./src/effects/spells/phantasmalKiller.js","webpack://ddb-importer/./src/effects/spells/polymorph.js","webpack://ddb-importer/./src/effects/spells/protectionfromEnergy.js","webpack://ddb-importer/./src/effects/spells/protectionfromPoison.js","webpack://ddb-importer/./src/effects/spells/rayofEnfeeblement.js","webpack://ddb-importer/./src/effects/spells/rayofFrost.js","webpack://ddb-importer/./src/effects/spells/regenerate.js","webpack://ddb-importer/./src/effects/spells/resilientSphere.js","webpack://ddb-importer/./src/effects/spells/resistance.js","webpack://ddb-importer/./src/effects/spells/shield.js","webpack://ddb-importer/./src/effects/spells/shieldofFaith.js","webpack://ddb-importer/./src/effects/spells/shillelagh.js","webpack://ddb-importer/./src/effects/spells/silence.js","webpack://ddb-importer/./src/effects/spells/sleep.js","webpack://ddb-importer/./src/effects/spells/slow.js","webpack://ddb-importer/./src/effects/spells/spiderClimb.js","webpack://ddb-importer/./src/effects/spells/spikeGrowth.js","webpack://ddb-importer/./src/effects/spells/spiritGuardians.js","webpack://ddb-importer/./src/effects/spells/spiritShroud.js","webpack://ddb-importer/./src/effects/spells/spiritualWeapon.js","webpack://ddb-importer/./src/effects/spells/stoneskin.js","webpack://ddb-importer/./src/effects/spells/stormSphere.js","webpack://ddb-importer/./src/effects/spells/sunbeam.js","webpack://ddb-importer/./src/effects/spells/thunderousSmite.js","webpack://ddb-importer/./src/effects/spells/tolltheDead.js","webpack://ddb-importer/./src/effects/spells/trueStrike.js","webpack://ddb-importer/./src/effects/spells/viciousMockery.js","webpack://ddb-importer/./src/effects/spells/vitriolicSphere.js","webpack://ddb-importer/./src/effects/spells/wardingBond.js","webpack://ddb-importer/./src/effects/spells/web.js","webpack://ddb-importer/./src/effects/spells/witchBolt.js","webpack://ddb-importer/./src/effects/spells/zephyrStrike.js","webpack://ddb-importer/./src/effects/specialSpells.js","webpack://ddb-importer/./src/icons/index.js","webpack://ddb-importer/./src/lib/CompendiumHelper.js","webpack://ddb-importer/./src/lib/DDBHelper.js","webpack://ddb-importer/./src/lib/DDBProxy.js","webpack://ddb-importer/./src/lib/DDBSources.js","webpack://ddb-importer/./src/lib/DDBTemplateStrings.js","webpack://ddb-importer/./src/lib/DirectoryPicker.js","webpack://ddb-importer/./src/lib/FileHelper.js","webpack://ddb-importer/./src/lib/PatreonHelper.js","webpack://ddb-importer/./src/lib/Secrets.js","webpack://ddb-importer/./src/lib/Settings.js","webpack://ddb-importer/./src/lib/base64Check.js","webpack://ddb-importer/./src/lib/icons.js","webpack://ddb-importer/./src/lib/utils.js","webpack://ddb-importer/./src/logger.js","webpack://ddb-importer/./src/muncher/DDBMonsterFactory.js","webpack://ddb-importer/./src/muncher/races/races.js","webpack://ddb-importer/./src/muncher/races.js","webpack://ddb-importer/./src/muncher/feats.js","webpack://ddb-importer/./src/muncher/classes/shared.js","webpack://ddb-importer/./src/muncher/classes/classes.js","webpack://ddb-importer/./src/muncher/classes/subclasses.js","webpack://ddb-importer/./src/muncher/classes/options.js","webpack://ddb-importer/./src/muncher/classes.js","webpack://ddb-importer/./src/muncher/frames.js","webpack://ddb-importer/./src/muncher/adventure/PageFinder.js","webpack://ddb-importer/./src/muncher/adventure/ThirdPartyMunch.js","webpack://ddb-importer/./src/muncher/backgrounds/backgrounds.js","webpack://ddb-importer/./src/muncher/backgrounds.js","webpack://ddb-importer/./src/muncher/DDBMuncher.js","webpack://ddb-importer/./src/muncher/MuncherSettings.js","webpack://ddb-importer/./src/muncher/adventure.js","webpack://ddb-importer/./src/muncher/adventure/AdventureMunch.js","webpack://ddb-importer/./src/muncher/adventure/AdventureMunchHelpers.js","webpack://ddb-importer/./src/muncher/compendiumFolders.js","webpack://ddb-importer/./src/muncher/dae.js","webpack://ddb-importer/./src/muncher/feats/feats.js","webpack://ddb-importer/./src/muncher/import.js","webpack://ddb-importer/./src/muncher/importMonster.js","webpack://ddb-importer/./src/muncher/items.js","webpack://ddb-importer/./src/parser/spells/getGenericSpells.js","webpack://ddb-importer/./src/muncher/spells.js","webpack://ddb-importer/./vendor/lowdash/uniq.js","webpack://ddb-importer/./vendor/parseTable.js","webpack://ddb-importer/./src/muncher/table.js","webpack://ddb-importer/./src/muncher/tools.js","webpack://ddb-importer/./src/parser/vehicle/templates/vehicle.js","webpack://ddb-importer/./src/parser/vehicle/conditions.js","webpack://ddb-importer/./src/parser/vehicle/abilities.js","webpack://ddb-importer/./src/parser/vehicle/size.js","webpack://ddb-importer/./src/parser/vehicle/capacity.js","webpack://ddb-importer/./src/parser/vehicle/movement.js","webpack://ddb-importer/./src/parser/vehicle/templates/component.js","webpack://ddb-importer/./src/parser/vehicle/components.js","webpack://ddb-importer/./src/parser/vehicle/threshold.js","webpack://ddb-importer/./src/parser/vehicle/vehicle.js","webpack://ddb-importer/./src/muncher/vehicles.js","webpack://ddb-importer/./src/parser/features/actions.js","webpack://ddb-importer/./src/parser/spells/CharacterSpellFactory.js","webpack://ddb-importer/./src/parser/DDBCharacter.js","webpack://ddb-importer/./src/parser/monster/special.js","webpack://ddb-importer/./src/effects/monsterFeatures/absorbtion.js","webpack://ddb-importer/./src/effects/monsterFeatures/legendary.js","webpack://ddb-importer/./src/effects/monsterFeatures/overTimeEffect.js","webpack://ddb-importer/./src/effects/monsterFeatures/packTactics.js","webpack://ddb-importer/./src/effects/specialMonsters.js","webpack://ddb-importer/./src/parser/DDBMonster.js","webpack://ddb-importer/./src/parser/character/bio.js","webpack://ddb-importer/./src/parser/classes/special.js","webpack://ddb-importer/./src/parser/classes/index.js","webpack://ddb-importer/./src/parser/companions/DDBCompanion.js","webpack://ddb-importer/./src/parser/companions/DDBCompanionFactory.js","webpack://ddb-importer/./src/parser/extras/extras.js","webpack://ddb-importer/./src/parser/features/special.js","webpack://ddb-importer/./src/parser/item/infusions.js","webpack://ddb-importer/./src/parser/monster/features/DDBFeature.js","webpack://ddb-importer/./src/parser/monster/features/DDBFeatureFactory.js","webpack://ddb-importer/./src/parser/monster/helpers.js","webpack://ddb-importer/./src/parser/monster/templates/monster.js","webpack://ddb-importer/./src/parser/race/DDBRace.js","webpack://ddb-importer/./src/parser/spells/ability.js","webpack://ddb-importer/./src/parser/spells/metadata.js","webpack://ddb-importer/./src/parser/spells/components.js","webpack://ddb-importer/./src/parser/spells/prepartion.js","webpack://ddb-importer/./src/parser/spells/uses.js","webpack://ddb-importer/./src/parser/spells/activation.js","webpack://ddb-importer/./src/parser/spells/duration.js","webpack://ddb-importer/./src/parser/spells/target.js","webpack://ddb-importer/./src/parser/spells/range.js","webpack://ddb-importer/./src/parser/spells/action.js","webpack://ddb-importer/./src/parser/spells/damage.js","webpack://ddb-importer/./src/parser/spells/save.js","webpack://ddb-importer/./src/parser/spells/scaling.js","webpack://ddb-importer/./src/parser/spells/name.js","webpack://ddb-importer/./src/parser/spells/parseSpell.js","webpack://ddb-importer/./src/parser/spells/special.js","webpack://ddb-importer/./src/settings.js","webpack://ddb-importer/./vendor/lowdash/isequal.js","webpack://ddb-importer/webpack/bootstrap","webpack://ddb-importer/webpack/runtime/define property getters","webpack://ddb-importer/webpack/runtime/global","webpack://ddb-importer/webpack/runtime/harmony module decorator","webpack://ddb-importer/webpack/runtime/hasOwnProperty shorthand","webpack://ddb-importer/./src/parser/monster/abilities.js","webpack://ddb-importer/./src/parser/monster/ac.js","webpack://ddb-importer/./src/parser/monster/conditions.js","webpack://ddb-importer/./src/parser/monster/size.js","webpack://ddb-importer/./src/parser/monster/type.js","webpack://ddb-importer/./src/parser/monster/skills.js","webpack://ddb-importer/./src/parser/monster/senses.js","webpack://ddb-importer/./src/parser/monster/environments.js","webpack://ddb-importer/./src/parser/monster/languages.js","webpack://ddb-importer/./src/parser/monster/hp.js","webpack://ddb-importer/./src/parser/monster/movement.js","webpack://ddb-importer/./src/parser/monster/source.js","webpack://ddb-importer/./src/parser/monster/features.js","webpack://ddb-importer/./src/parser/monster/spells.js","webpack://ddb-importer/./src/parser/character/index.js","webpack://ddb-importer/./src/parser/character/token.js","webpack://ddb-importer/./src/parser/character/filterModifiers.js","webpack://ddb-importer/./src/parser/character/ac.js","webpack://ddb-importer/./src/parser/character/specialTraits.js","webpack://ddb-importer/./src/parser/character/proficiencies.js","webpack://ddb-importer/./src/parser/character/skills.js","webpack://ddb-importer/./src/parser/character/abilities.js","webpack://ddb-importer/./src/parser/character/hp.js","webpack://ddb-importer/./src/parser/character/initiative.js","webpack://ddb-importer/./src/parser/character/effects.js","webpack://ddb-importer/./src/parser/character/currency.js","webpack://ddb-importer/./src/parser/character/senses.js","webpack://ddb-importer/./src/parser/character/speed.js","webpack://ddb-importer/./src/parser/character/size.js","webpack://ddb-importer/./src/parser/character/spellCasting.js","webpack://ddb-importer/./src/parser/character/race.js","webpack://ddb-importer/./src/parser/character/resources.js","webpack://ddb-importer/./src/parser/spells/getItemSpells.js","webpack://ddb-importer/./src/parser/character/inventory.js","webpack://ddb-importer/./src/parser/character/globalBonuses.js","webpack://ddb-importer/./src/parser/special/additions/divineSmite.js","webpack://ddb-importer/./src/parser/special/character.js","webpack://ddb-importer/./src/parser/item/magicify.js","webpack://ddb-importer/./src/parser/item/special.js","webpack://ddb-importer/./src/effects/restrictions.js","webpack://ddb-importer/./src/parser/item/itemCollections.js","webpack://ddb-importer/./src/parser/item/common.js","webpack://ddb-importer/./src/parser/item/weapon.js","webpack://ddb-importer/./src/parser/item/ammunition.js","webpack://ddb-importer/./src/parser/item/staves.js","webpack://ddb-importer/./src/parser/item/armor.js","webpack://ddb-importer/./src/parser/item/wonderous.js","webpack://ddb-importer/./src/parser/item/potion.js","webpack://ddb-importer/./src/parser/item/scroll.js","webpack://ddb-importer/./src/parser/item/tool.js","webpack://ddb-importer/./src/parser/item/loot.js","webpack://ddb-importer/./src/parser/item/custom.js","webpack://ddb-importer/./src/parser/item/index.js","webpack://ddb-importer/./src/parser/features/features.js","webpack://ddb-importer/./src/parser/companions/companions.js","webpack://ddb-importer/./src/parser/extendParsers.js","webpack://ddb-importer/./src/hooks/init/extendClasses.js","webpack://ddb-importer/./src/hooks/init/setupLogging.js","webpack://ddb-importer/./src/parser/special/conditions.js","webpack://ddb-importer/./src/parser/special/itemCollections.js","webpack://ddb-importer/./src/updater/character.js","webpack://ddb-importer/./src/effects/abilityOverrides.js","webpack://ddb-importer/./src/lib/DDBCharacterManager.js","webpack://ddb-importer/./src/parser/encounters/DDBEncounters.js","webpack://ddb-importer/./src/parser/encounters/DDBEncounterMunch.js","webpack://ddb-importer/./src/effects/helpers.js","webpack://ddb-importer/./src/hooks/init/api.js","webpack://ddb-importer/./src/hooks/init/chatHooks.js","webpack://ddb-importer/./src/lib/DDBAdventureImporter.js","webpack://ddb-importer/./src/hooks/init/adventureImporter.js","webpack://ddb-importer/./src/lib/DDBAdventureFlags.js","webpack://ddb-importer/./src/hooks/ready/registerSheets.js","webpack://ddb-importer/./src/hooks/ready/checkCompendiums.js","webpack://ddb-importer/./src/lib/DDBProxySetup.js","webpack://ddb-importer/./src/hooks/ready/registerGameSettings.js","webpack://ddb-importer/./src/lib/DDBItemConfig.js","webpack://ddb-importer/./src/hooks/ready/items.js","webpack://ddb-importer/./src/hooks/ready/checkVersion.js","webpack://ddb-importer/./src/hooks/ready/fallbackConfig.js","webpack://ddb-importer/./src/hooks/ready/ddbConfig.js","webpack://ddb-importer/./src/hooks/ready/anchorInjection.js","webpack://ddb-importer/./src/hooks/renderMuncher/earlySettings.js","webpack://ddb-importer/./src/hooks/renderMuncher/addMuncher.js","webpack://ddb-importer/./src/hooks/renderMuncher/addEncounterMuncher.js","webpack://ddb-importer/./src/hooks/socket/onSocketMessage.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/linkTables.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/shared.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/linkImages.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/buildNotes.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/adventure.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/linkReadAlouds.js","webpack://ddb-importer/./src/lib/Notification.js","webpack://ddb-importer/./src/hooks.js","webpack://ddb-importer/./src/lib/SceneEnhancerExport.js","webpack://ddb-importer/./src/hooks/navigationContext/extendSceneNavigationContext.js","webpack://ddb-importer/./src/index.js"],"sourcesContent":["const DICTIONARY = {\n  types: {\n    full: [\"weapon\", \"equipment\", \"consumable\", \"tool\", \"loot\", \"class\", \"subclass\", \"background\", \"spell\", \"feat\", \"backpack\"],\n    equipment: [\"equipment\", \"consumable\", \"tool\", \"loot\", \"backpack\"],\n    inventory: [\"equipment\", \"consumable\", \"tool\", \"loot\", \"backpack\", \"weapon\"],\n    monster: [\"equipment\", \"consumable\", \"tool\", \"loot\", \"backpack\", \"weapon\", \"feat\"],\n  },\n  sizes: [\n    { name: \"Tiny\", value: \"tiny\", size: 0.5 },\n    { name: \"Small\", value: \"sm\", size: 0.8 },\n    { name: \"Medium\", value: \"med\", size: 1 },\n    { name: \"Large\", value: \"lg\", size: 2 },\n    { name: \"Huge\", value: \"huge\", size: 3 },\n    { name: \"Gargantuan\", value: \"grg\", size: 4 },\n  ],\n  numbers: [\n    { num: 1, natural: \"a\" },\n    { num: 1, natural: \"one\" },\n    { num: 2, natural: \"two\" },\n    { num: 3, natural: \"three\" },\n    { num: 4, natural: \"four\" },\n    { num: 5, natural: \"five\" },\n    { num: 6, natural: \"six\" },\n    { num: 7, natural: \"seven\" },\n    { num: 8, natural: \"eight\" },\n    { num: 9, natural: \"nine\" },\n    { num: 10, natural: \"ten\" },\n    { num: 11, natural: \"eleven\" },\n    { num: 12, natural: \"twelve\" },\n    { num: 13, natural: \"thirteen\" },\n    { num: 14, natural: \"fourteen\" },\n    { num: 15, natural: \"fifteen\" },\n    { num: 16, natural: \"sixteen\" },\n    { num: 17, natural: \"seventeen\" },\n    { num: 18, natural: \"eighteen\" },\n    { num: 19, natural: \"nineteen\" },\n    { num: 20, natural: \"twenty\" },\n  ],\n  magicitems: {\n    rechargeUnits: [\n      { id: 1, value: \"r4\" },\n      { id: \"ShortRest\", value: \"r4\" },\n      { id: 2, value: \"r5\" },\n      { id: \"LongRest\", value: \"r5\" },\n      { id: \"Dawn\", value: \"r2\" },\n      { id: \"Dusk\", value: \"r3\" },\n      { id: \"Sunset\", value: \"r3\" },\n      { id: \"Consumable\", value: \"\" },\n      { id: \"Other\", value: \"\" },\n      { id: \"Daily\", value: \"r1\" },\n      { id: \"sr\", value: \"r4\" },\n      { id: \"lr\", value: \"r5\" },\n    ],\n    nums: [\n      { id: \"once\", value: 1 },\n      { id: \"twice\", value: 2 },\n      { id: \"thrice\", value: 3 },\n      { id: \"one\", value: 1 },\n      { id: \"two\", value: 2 },\n      { id: \"three\", value: 3 },\n    ],\n  },\n  resets: [\n    { id: 1, value: \"sr\" },\n    { id: \"ShortRest\", value: \"sr\" },\n    { id: \"Short\", value: \"sr\" },\n    { id: \"short\", value: \"sr\" },\n    { id: 2, value: \"lr\" },\n    { id: \"LongRest\", value: \"lr\" },\n    { id: \"Long\", value: \"lr\" },\n    { id: \"long\", value: \"lr\" },\n    { id: \"Day\", value: \"day\" },\n    { id: \"day\", value: \"day\" },\n    { id: \"Dawn\", value: \"day\" },\n    { id: \"dusk\", value: \"day\" },\n    { id: \"Consumable\", value: \"charges\" },\n    { id: \"Other\", value: \"charges\" },\n    { id: \"\", value: \"\" },\n    { id: null, value: \"\" },\n    { id: 3, value: \"day\" },\n    { id: 4, value: \"charges\" },\n  ],\n  // CONFIG.Canvas.visionModes\n  senseMap: {\n    blindsight: \"basic\",\n    darkvision: \"darkvision\",\n    // tremorsense: \"tremorsense\",\n    truesight: \"basic\",\n    unknown: \"basic\",\n  },\n  // CONFIG.Canvas.detectionModes\n  detectionMap: {\n    blindsight: \"senseAll\",\n    truesight: \"seeAll\",\n    tremorsense: \"feelTremor\",\n  },\n  conditions: [\n    { label: \"Blinded\", foundry: \"blinded\", statusId: \"Convenient Effect: Blinded\", ddbId: 1, levelId: null, ddbType: 1 },\n    { label: \"Charmed\", foundry: \"charmed\", statusId: \"Convenient Effect: Charmed\", ddbId: 2, levelId: null, ddbType: 1 },\n    { label: \"Deafened\", foundry: \"deafened\", statusId: \"Convenient Effect: Deafened\", ddbId: 3, levelId: null, ddbType: 1 },\n    { label: \"Exhaustion\", foundry: \"exhaustion\", statusId: null, ddbId: null, levelId: null, ddbType: null },\n    { label: \"Exhaustion 1\", foundry: null, statusId: \"Convenient Effect: Exhaustion 1\", ddbId: 4, levelId: 1, ddbType: 2 },\n    { label: \"Exhaustion 2\", foundry: null, statusId: \"Convenient Effect: Exhaustion 2\", ddbId: 4, levelId: 2, ddbType: 2 },\n    { label: \"Exhaustion 3\", foundry: null, statusId: \"Convenient Effect: Exhaustion 3\", ddbId: 4, levelId: 3, ddbType: 2 },\n    { label: \"Exhaustion 4\", foundry: null, statusId: \"Convenient Effect: Exhaustion 4\", ddbId: 4, levelId: 4, ddbType: 2 },\n    { label: \"Exhaustion 5\", foundry: null, statusId: \"Convenient Effect: Exhaustion 5\", ddbId: 4, levelId: 5, ddbType: 2 },\n    { label: \"Exhaustion 6\", foundry: null, statusId: \"Convenient Effect: Exhaustion 6\", ddbId: 4, levelId: 6, ddbType: 2 },\n    { label: \"Frightened\", foundry: \"frightened\", statusId: \"Convenient Effect: Frightened\", ddbId: 5, levelId: null, ddbType: 1 },\n    { label: \"Grappled\", foundry: \"grappled\", statusId: \"Convenient Effect: Grappled\", ddbId: 6, levelId: null, ddbType: 1 },\n    { label: \"Incapacitated\", foundry: \"incapacitated\", statusId: \"Convenient Effect: Incapacitated\", ddbId: 7, levelId: null, ddbType: 1 },\n    { label: \"Invisible\", foundry: \"invisible\", statusId: \"Convenient Effect: Invisible\", ddbId: 8, levelId: null, ddbType: 1 },\n    { label: \"Paralyzed\", foundry: \"paralyzed\", statusId: \"Convenient Effect: Paralyzed\", ddbId: 9, levelId: null, ddbType: 1 },\n    { label: \"Petrified\", foundry: \"petrified\", statusId: \"Convenient Effect: Petrified\", ddbId: 10, levelId: null, ddbType: 1 },\n    { label: \"Poisoned\", foundry: \"poisoned\", statusId: \"Convenient Effect: Poisoned\", ddbId: 11, levelId: null, ddbType: 1 },\n    { label: \"Prone\", foundry: \"prone\", statusId: \"Convenient Effect: Prone\", ddbId: 12, levelId: null, ddbType: 1 },\n    { label: \"Restrained\", foundry: \"restrained\", statusId: \"Convenient Effect: Restrained\", ddbId: 13, levelId: null, ddbType: 1 },\n    { label: \"Stunned\", foundry: \"stunned\", statusId: \"Convenient Effect: Stunned\", ddbId: 14, levelId: null, ddbType: 1 },\n    { label: \"Unconscious\", foundry: \"unconscious\", statusId: \"Convenient Effect: Unconscious\", ddbId: 15, levelId: null, ddbType: 1 },\n    { label: \"Diseased\", foundry: \"diseased\", statusId: null, ddbId: null, levelId: null, ddbType: null },\n    { label: \"Disease\", foundry: \"diseased\", statusId: null, ddbId: null, levelId: null, ddbType: null },\n  ],\n  character: {\n    abilities: [\n      { id: 1, value: \"str\", long: \"strength\" },\n      { id: 2, value: \"dex\", long: \"dexterity\" },\n      { id: 3, value: \"con\", long: \"constitution\" },\n      { id: 4, value: \"int\", long: \"intelligence\" },\n      { id: 5, value: \"wis\", long: \"wisdom\" },\n      { id: 6, value: \"cha\", long: \"charisma\" },\n    ],\n    skills: [\n      { name: \"acr\", label: \"Acrobatics\", ability: \"dex\", subType: \"acrobatics\", valueId: 3 },\n      { name: \"ani\", label: \"Animal Handling\", ability: \"wis\", subType: \"animal-handling\", valueId: 11 },\n      { name: \"arc\", label: \"Arcana\", ability: \"int\", subType: \"arcana\", valueId: 6 },\n      { name: \"ath\", label: \"Athletics\", ability: \"str\", subType: \"athletics\", valueId: 2 },\n      { name: \"dec\", label: \"Deception\", ability: \"cha\", subType: \"deception\", valueId: 16 },\n      { name: \"his\", label: \"History\", ability: \"int\", subType: \"history\", valueId: 7 },\n      { name: \"ins\", label: \"Insight\", ability: \"wis\", subType: \"insight\", valueId: 12 },\n      { name: \"itm\", label: \"Intimidation\", ability: \"cha\", subType: \"intimidation\", valueId: 17 },\n      { name: \"inv\", label: \"Investigation\", ability: \"int\", subType: \"investigation\", valueId: 8 },\n      { name: \"med\", label: \"Medicine\", ability: \"wis\", subType: \"medicine\", valueId: 13 },\n      { name: \"nat\", label: \"Nature\", ability: \"int\", subType: \"nature\", valueId: 9 },\n      { name: \"prc\", label: \"Perception\", ability: \"wis\", subType: \"perception\", valueId: 14 },\n      { name: \"prf\", label: \"Performance\", ability: \"cha\", subType: \"performance\", valueId: 18 },\n      { name: \"per\", label: \"Persuasion\", ability: \"cha\", subType: \"persuasion\", valueId: 19 },\n      { name: \"rel\", label: \"Religion\", ability: \"int\", subType: \"religion\", valueId: 10 },\n      { name: \"slt\", label: \"Sleight of Hand\", ability: \"dex\", subType: \"sleight-of-hand\", valueId: 4 },\n      { name: \"ste\", label: \"Stealth\", ability: \"dex\", subType: \"stealth\", valueId: 5 },\n      { name: \"sur\", label: \"Survival\", ability: \"wis\", subType: \"survival\", valueId: 15 },\n    ],\n    customSkillProficiencies: [\n      // typeId:26\n      // value not: 1, half 2, prof: 3, expertise 4\n      { value: 1, proficient: 0 },\n      { value: 2, proficient: 0.5 },\n      { value: 3, proficient: 1 },\n      { value: 4, proficient: 2 },\n    ],\n    alignments: [\n      { id: 1, name: \"Lawful Good\", value: \"lg\" },\n      { id: 2, name: \"Neutral Good\", value: \"ng\" },\n      { id: 3, name: \"Chaotic Good\", value: \"cg\" },\n      { id: 4, name: \"Lawful Neutral\", value: \"ln\" },\n      { id: 5, name: \"True Neutral\", value: \"tn\" },\n      { id: 6, name: \"Chaotic Neutral\", value: \"cn\" },\n      { id: 7, name: \"Lawful Evil\", value: \"le\" },\n      { id: 8, name: \"Neutral Evil\", value: \"ne\" },\n      { id: 9, name: \"Chaotic Evil\", value: \"ce\" },\n    ],\n    actorSizes: [\n      { id: 2, name: \"Tiny\", value: \"tiny\" }, // wild guess\n      { id: 3, name: \"Small\", value: \"sm\" }, // consistent\n      { id: 4, name: \"Medium\", value: \"med\" }, // consistent\n      { id: 5, name: \"Large\", value: \"lg\" }, // wild guess\n      { id: 6, name: \"Huge\", value: \"huge\" }, // wild guess\n      { id: 7, name: \"Gargantuan\", value: \"grg\" }, // wild guess\n    ],\n    senses: [\n      { id: 1, name: \"Blindsight\" },\n      { id: 2, name: \"Darkvision\" },\n      { id: 3, name: \"Tremorsense\" },\n    ],\n    speeds: [\n      { id: 1, type: \"walk\", innate: \"walking\" },\n      { id: 2, type: \"burrow\", innate: \"burrowing\" },\n      { id: 3, type: \"climb\", innate: \"climbing\" },\n      { id: 4, type: \"fly\", innate: \"flying\" },\n      { id: 5, type: \"swim\", innate: \"swimming\" },\n    ],\n    languages: [\n      { name: \"Common\", value: \"common\" },\n      { name: \"Aarakocra\", value: \"aarakocra\" },\n      { name: \"Abyssal\", value: \"abyssal\" },\n      { name: \"Aquan\", value: \"aquan\" },\n      { name: \"Auran\", value: \"auran\" },\n      { name: \"Celestial\", value: \"celestial\" },\n      { name: \"Deep Speech\", value: \"deep\" },\n      { name: \"Draconic\", value: \"draconic\" },\n      { name: \"Druidic\", value: \"druidic\" },\n      { name: \"Dwarvish\", value: \"dwarvish\" },\n      { name: \"Elvish\", value: \"elvish\" },\n      { name: \"Giant\", value: \"giant\" },\n      { name: \"Gith\", value: \"gith\" },\n      { name: \"Gnomish\", value: \"gnomish\" },\n      { name: \"Goblin\", value: \"goblin\" },\n      { name: \"Gnoll\", value: \"gnoll\" },\n      { name: \"Halfling\", value: \"halfling\" },\n      { name: \"Ignan\", value: \"ignan\" },\n      { name: \"Infernal\", value: \"infernal\" },\n      { name: \"Orc\", value: \"orc\" },\n      { name: \"Primordial\", value: \"primordial\" },\n      { name: \"Terran\", value: \"terran\" },\n      { name: \"Sylvan\", value: \"sylvan\" },\n      { name: \"Thieves' Cant\", value: \"cant\" },\n      { name: \"Thieves’ Cant\", value: \"cant\" },\n      { name: \"Undercommon\", value: \"undercommon\" },\n    ],\n    armorTypes: [\n      { name: \"Clothing\", value: \"clothing\" },\n      { name: \"Light Armor\", value: \"light\" },\n      { name: \"Medium Armor\", value: \"medium\" },\n      { name: \"Heavy Armor\", value: \"heavy\" },\n      { name: \"Magical Bonus\", value: \"bonus\" },\n      { name: \"Natural Armor\", value: \"natural\" },\n      { name: \"Shield\", value: \"shield\" },\n    ],\n    damageAdjustments: [\n      { id: 1, type: 2, kind: \"resistance\", name: \"Bludgeoning\", value: \"bludgeoning\" },\n      { id: 2, type: 2, kind: \"resistance\", name: \"Piercing\", value: \"piercing\" },\n      { id: 3, type: 2, kind: \"resistance\", name: \"Slashing\", value: \"slashing\" },\n      { id: 4, type: 2, kind: \"resistance\", name: \"Lightning\", value: \"lightning\" },\n      { id: 5, type: 2, kind: \"resistance\", name: \"Thunder\", value: \"thunder\" },\n      { id: 6, type: 2, kind: \"resistance\", name: \"Poison\", value: \"poison\" },\n      { id: 7, type: 2, kind: \"resistance\", name: \"Cold\", value: \"cold\" },\n      { id: 8, type: 2, kind: \"resistance\", name: \"Radiant\", value: \"radiant\" },\n      { id: 9, type: 2, kind: \"resistance\", name: \"Fire\", value: \"fire\" },\n      { id: 10, type: 2, kind: \"resistance\", name: \"Necrotic\", value: \"necrotic\" },\n      { id: 11, type: 2, kind: \"resistance\", name: \"Acid\", value: \"acid\" },\n      { id: 12, type: 2, kind: \"resistance\", name: \"Psychic\", value: \"psychic\" },\n      { id: 13, type: 2, kind: \"resistance\", name: \"Physical\", value: \"bludgeoning-piercing-and-slashing-from-nonmagical-weapons\", foundryValue: \"physical\" },\n      { id: 14, type: 2, kind: \"resistance\", name: \"Physical\", value: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-silvered\", foundryValue: \"physical\" },\n      { id: 15, type: 2, kind: \"resistance\", name: \"Physical\", value: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\", foundryValue: \"physical\" },\n      // { id: 16, type: 2, kind: \"resistance\", name: \"Physical\", value: \"piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\", foundryValue: \"physical\" },\n      { id: 17, type: 2, kind: \"immunity\", name: \"Bludgeoning\", value: \"bludgeoning\" },\n      { id: 18, type: 2, kind: \"immunity\", name: \"Piercing\", value: \"piercing\" },\n      { id: 19, type: 2, kind: \"immunity\", name: \"Slashing\", value: \"slashing\" },\n      { id: 20, type: 2, kind: \"immunity\", name: \"Lightning\", value: \"lightning\" },\n      { id: 21, type: 2, kind: \"immunity\", name: \"Thunder\", value: \"thunder\" },\n      { id: 22, type: 2, kind: \"immunity\", name: \"Poison\", value: \"poison\" },\n      { id: 23, type: 2, kind: \"immunity\", name: \"Cold\", value: \"cold\" },\n      { id: 24, type: 2, kind: \"immunity\", name: \"Radiant\", value: \"radiant\" },\n      { id: 25, type: 2, kind: \"immunity\", name: \"Fire\", value: \"fire\" },\n      { id: 26, type: 2, kind: \"immunity\", name: \"Necrotic\", value: \"necrotic\" },\n      { id: 27, type: 2, kind: \"immunity\", name: \"Acid\", value: \"acid\" },\n      { id: 28, type: 2, kind: \"immunity\", name: \"Psychic\", value: \"psychic\" },\n      { id: 29, type: 2, kind: \"immunity\", name: \"Physical\", value: \"bludgeoning-piercing-and-slashing-from-nonmagical-weapons\", foundryValue: \"physical\" },\n      { id: 30, type: 2, kind: \"immunity\", name: \"Physical\", value: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-silvered\", foundryValue: \"physical\" },\n      { id: 31, type: 2, kind: \"immunity\", name: \"Physical\", value: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\", foundryValue: \"physical\" },\n      // { id: 32, type: 2, kind: \"immunity\", name: \"Physical\", value: \"piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\", foundryValue: \"physical\" },\n      { id: 33, type: 2, kind: \"vulnerability\", name: \"Bludgeoning\", value: \"bludgeoning\" },\n      { id: 34, type: 2, kind: \"vulnerability\", name: \"Piercing\", value: \"piercing\" },\n      { id: 35, type: 2, kind: \"vulnerability\", name: \"Slashing\", value: \"slashing\" },\n      { id: 36, type: 2, kind: \"vulnerability\", name: \"Lightning\", value: \"lightning\" },\n      { id: 37, type: 2, kind: \"vulnerability\", name: \"Thunder\", value: \"thunder\" },\n      { id: 38, type: 2, kind: \"vulnerability\", name: \"Poison\", value: \"poison\" },\n      { id: 39, type: 2, kind: \"vulnerability\", name: \"Cold\", value: \"cold\" },\n      { id: 40, type: 2, kind: \"vulnerability\", name: \"Radiant\", value: \"radiant\" },\n      { id: 41, type: 2, kind: \"vulnerability\", name: \"Fire\", value: \"fire\" },\n      { id: 42, type: 2, kind: \"vulnerability\", name: \"Necrotic\", value: \"necrotic\" },\n      { id: 43, type: 2, kind: \"vulnerability\", name: \"Acid\", value: \"acid\" },\n      { id: 44, type: 2, kind: \"vulnerability\", name: \"Psychic\", value: \"psychic\" },\n\n      { id: 47, type: 2, kind: \"resistance\", name: \"Force\", value: \"force\" },\n      { id: 48, type: 2, kind: \"immunity\", name: \"Force\", value: \"force\" },\n      { id: 49, type: 2, kind: \"vulnerability\", name: \"Force\", value: \"force\" },\n      { id: 51, type: 2, kind: \"resistance\", name: \"Ranged attacks\" },\n      { id: 52, type: 2, kind: \"resistance\", name: \"Damage dealt by traps\" },\n      { id: 54, type: 2, kind: \"resistance\", name: \"Bludgeoning from non magical attacks\" },\n\n      { id: 1, type: 1, kind: \"immunity\", name: \"Blinded\", value: \"blinded\" },\n      { id: 2, type: 1, kind: \"immunity\", name: \"Charmed\", value: \"charmed\" },\n      { id: 3, type: 1, kind: \"immunity\", name: \"Deafened\", value: \"deafened\" },\n      { id: 4, type: 1, kind: \"immunity\", name: \"Exhaustion\", value: \"exhaustion\" },\n      { id: 5, type: 1, kind: \"immunity\", name: \"Frightened\", value: \"frightened\" },\n      { id: 6, type: 1, kind: \"immunity\", name: \"Grappled\", value: \"grappled\" },\n      { id: 7, type: 1, kind: \"immunity\", name: \"Incapacitated\", value: \"incapacitated\" },\n      { id: 8, type: 1, kind: \"immunity\", name: \"Invisible\", value: \"invisible\" },\n      { id: 9, type: 1, kind: \"immunity\", name: \"Paralyzed\", value: \"paralyzed\" },\n      { id: 10, type: 1, kind: \"immunity\", name: \"Petrified\", value: \"petrified\" },\n      { id: 11, type: 1, kind: \"immunity\", name: \"Poisoned\", value: \"poisoned\" },\n      { id: 12, type: 1, kind: \"immunity\", name: \"Prone\", value: \"prone\" },\n      { id: 13, type: 1, kind: \"immunity\", name: \"Restrained\", value: \"restrained\" },\n      { id: 14, type: 1, kind: \"immunity\", name: \"Stunned\", value: \"stunned\" },\n      { id: 15, type: 1, kind: \"immunity\", name: \"Unconscious\", value: \"unconscious\" },\n      // In DDB it is disease, but in FVTT ut is diseased\n      { id: 16, type: 1, kind: \"immunity\", name: \"Diseased\", value: \"disease\", foundryValue: \"diseased\" },\n    ],\n    proficiencies: [\n      // Armor\n      { name: \"Studded Leather\", type: \"Armor\", subType: \"Light Armor\" },\n      { name: \"Scale Mail\", type: \"Armor\", subType: \"Medium Armor\" },\n      { name: \"Shield\", type: \"Armor\", subType: \"Shield\" },\n      { name: \"Padded\", type: \"Armor\", subType: \"Light Armor\" },\n      { name: \"Leather\", type: \"Armor\", subType: \"Light Armor\" },\n      { name: \"Hide\", type: \"Armor\", subType: \"Medium Armor\" },\n      { name: \"Chain Shirt\", type: \"Armor\", subType: \"Medium Armor\" },\n      { name: \"Breastplate\", type: \"Armor\", subType: \"Medium Armor\" },\n      { name: \"Half Plate\", type: \"Armor\", subType: \"Medium Armor\" },\n      { name: \"Ring Mail\", type: \"Armor\", subType: \"Heavy Armor\" },\n      { name: \"Chain Mail\", type: \"Armor\", subType: \"Heavy Armor\" },\n      { name: \"Splint\", type: \"Armor\", subType: \"Heavy Armor\" },\n      { name: \"Plate\", type: \"Armor\", subType: \"Heavy Armor\" },\n      { name: \"Spiked Armor\", type: \"Armor\", subType: \"Medium Armor\" },\n\n      // Weapons\n      { name: \"Crossbow, Hand\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Glaive\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Dagger\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Longsword\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Club\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Greatclub\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Handaxe\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Javelin\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Light Hammer\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Mace\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Quarterstaff\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Sickle\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Spear\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Crossbow, Light\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Dart\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Shortbow\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Sling\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Battleaxe\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Flail\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Greataxe\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Greatsword\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Halberd\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Lance\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Maul\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Morningstar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Pike\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Rapier\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Scimitar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Shortsword\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Trident\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"War Pick\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Warhammer\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Whip\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Blowgun\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Crossbow, Heavy\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Longbow\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Net\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Boomerang\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Yklwa\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n      { name: \"Pistol\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Musket\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Pistol, Automatic\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Revolver\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Rifle, Hunting\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Rifle, Automatic\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Shotgun\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Laser Pistol\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Antimatter Rifle\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Laser Rifle\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Double-Bladed Scimitar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Revenant Double-Bladed Scimitar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\" },\n      { name: \"Ammunition\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\" },\n\n      // Tools and Instruments and Stuff\n      { name: \"Carpenter's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"carpenter\", toolType: \"art\" },\n      { name: \"Cartographer's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"cartographer\", toolType: \"art\" },\n      { name: \"Cobbler's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"cobbler\", toolType: \"art\" },\n      { name: \"Cook's Utensils\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"wis\", baseTool: \"cook\", toolType: \"art\" },\n      { name: \"Glassblower's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"glassblower\", toolType: \"art\" },\n      { name: \"Jeweler's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"jeweler\", toolType: \"art\" },\n      { name: \"Leatherworker's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"leatherworker\", toolType: \"art\" },\n      { name: \"Mason's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"mason\", toolType: \"art\" },\n      { name: \"Navigator's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"int\", baseTool: \"navg\", toolType: \"\" },\n      { name: \"Potter's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"potter\", toolType: \"art\" },\n      { name: \"Smith's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"smith\", toolType: \"art\" },\n      { name: \"Thieves' Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"thief\", toolType: \"\" },\n      { name: \"Tinker's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"tinker\", toolType: \"art\" },\n      { name: \"Weaver's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"weaver\", toolType: \"art\" },\n      { name: \"Woodcarver's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"woodcarver\", toolType: \"art\" },\n      { name: \"Dice Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"dice\", toolType: \"game\" },\n      { name: \"Dragonchess Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"chess\", toolType: \"game\" },\n      { name: \"Playing Card Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"card\", toolType: \"game\" },\n      { name: \"Three-Dragon Ante Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"card\", toolType: \"game\" },\n      { name: \"Disguise Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"disg\", toolType: \"\" },\n      { name: \"Forgery Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"forge\", toolType: \"\" },\n      { name: \"Herbalism Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"herb\", toolType: \"\" },\n      { name: \"Poisoner's Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"pois\", toolType: \"\" },\n      { name: \"Bagpipes\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"con\", baseTool: \"bagpipes\", toolType: \"music\" },\n      { name: \"Birdpipes\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"con\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Drum\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"drum\", toolType: \"music\" },\n      { name: \"Dulcimer\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"dulcimer\", toolType: \"music\" },\n      { name: \"Flute\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"flute\", toolType: \"music\" },\n      { name: \"Glaur\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Hand Drum\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Horn\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"horn\", toolType: \"music\" },\n      { name: \"Longhorn\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Lute\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"lute\", toolType: \"music\" },\n      { name: \"Lyre\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"lyre\", toolType: \"music\" },\n      { name: \"Pan Flute\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Shawm\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Songhorn\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Tantan\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Thelarr\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Tocken\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Viol\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"viol\", toolType: \"music\" },\n      { name: \"Wargong\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Yarting\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Zulkoon\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"\", toolType: \"music\" },\n      { name: \"Alchemist's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"int\", baseTool: \"alchemist\", toolType: \"art\" },\n      { name: \"Brewer's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"int\", baseTool: \"brewer\", toolType: \"art\" },\n      { name: \"Calligrapher's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"dex\", baseTool: \"calligrapher\", toolType: \"art\" },\n      { name: \"Painter's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"dex\", baseTool: \"painter\", toolType: \"art\" },\n      { name: \"Vehicles (Land)\", type: \"Tool\", subType: \"Vehicles\", ability: \"dex\", baseTool: \"land\", toolType: \"\" },\n      { name: \"Vehicles (Air)\", type: \"Tool\", subType: \"Vehicles\", ability: \"dex\", baseTool: \"air\", toolType: \"\" },\n      { name: \"Vehicles (Water)\", type: \"Tool\", subType: \"Vehicles\", ability: \"dex\", baseTool: \"water\", toolType: \"\" },\n    ],\n    characterValuesLookup: [\n      { name: \"pactWeapon\", typeId: 28 },\n      { name: \"hexWarrior\", typeId: 29 },\n    ],\n    // Supported Warlock Pact Weapon options\n    pactFeatures: [\"Improved Pact Weapon\", \"Lifedrinker\"],\n  },\n  item: {\n    characterValues: [\n      { typeId: 8, value: \"name\" },\n      //   { typeId: 9, value: 'notes'},  // note: Not supported by Foundry right now, skipping\n      { typeId: 19, value: \"price\" },\n      { typeId: 22, value: \"weight\" },\n    ],\n  },\n  items: [\n    { filterType: \"Armor\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/armor.jpg\" },\n    { filterType: \"Potion\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/potion.jpg\" },\n    { filterType: \"Ring\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/ring.jpg\" },\n    { filterType: \"Rod\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/rod.jpg\" },\n    { filterType: \"Scroll\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/scroll.jpg\" },\n    { filterType: \"Staff\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/staff.jpg\" },\n    { filterType: \"Wand\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/wand.jpg\" },\n    { filterType: \"Weapon\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/weapon.jpg\" },\n    { filterType: \"Wondrous item\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/wondrousitem.jpg\" },\n  ],\n  genericItemIcons: [\n    { name: \"Adventuring Gear\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/adventuring-gear.jpg\" },\n    { name: \"Tool\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/tool.jpg\" },\n    { name: \"Gemstone\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/gemstone.jpg\" },\n    { name: \"Holy Symbol\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/holy-symbol.jpg\" },\n    { name: \"Weapon\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/weapon.jpg\" },\n    { name: \"Arcane Focus\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/arcane-focus.jpg\" },\n    { name: \"Druidic Focus\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/druidic-focus.jpg\" },\n    { name: \"Ammunition\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/ammunition.jpg\" },\n    { name: \"Poison\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/poison.jpg\" },\n    { name: \"Mount\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/mount.jpg\" },\n    { name: \"Potion\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/potion.jpg\" },\n    { name: \"Equipment Pack\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/pack.jpg\" },\n    // Vehicle (Land)/(Water)\n    { name: \"Vehicle\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/vehicle.jpg\" },\n  ],\n  equipment: {\n    armorType: [\n      { name: \"Light Armor\", id: 1, value: \"light\" },\n      { name: \"Medium Armor\", id: 2, value: \"medium\" },\n      { name: \"Heavy Armor\", id: 3, value: \"heavy\" },\n      { name: \"Shield\", id: 4, value: \"shield\" },\n      { name: \"Unarmored\", id: 0, value: null },\n      { name: \"Unarmored Defense\", id: -1, value: null },\n      { name: \"Natural Armor\", id: -2, value: \"natural\" },\n      { name: \"Magical Bonus\", id: -3, value: \"bonus\" },\n      { name: \"Clothing\", id: -4, value: \"clothing\" },\n    ],\n  },\n  weapon: {\n    weaponRange: [\n      { attackType: 1, value: \"M\" },\n      { attackType: 2, value: \"R\" },\n      { attackType: null, value: \"R\" },\n    ],\n    weaponType: [\n      { categoryId: 1, value: \"simple\" },\n      { categoryId: 2, value: \"martial\" },\n      { categoryId: 3, value: \"martial\" }, // this is not 100% correct. a martialF for \"Martial Firearms\" would be better\n      { categoryId: 0, value: \"simple\" }, // this is totally incorrect, this is of type ammunition\n    ],\n    properties: [\n      { name: \"Ammunition\", value: \"amm\" },\n      { name: \"Ammunition (Firearms)\", value: \"fir\" },\n      { name: \"Finesse\", value: \"fin\" },\n      { name: \"Heavy\", value: \"hvy\" },\n      { name: \"Light\", value: \"lgt\" },\n      { name: \"Loading\", value: \"lod\" },\n      { name: \"Range\", value: \"fir\" },\n      { name: \"Reach\", value: \"rch\" },\n      { name: \"Reload\", value: \"rel\" },\n      { name: \"Special\", value: \"spc\" },\n      { name: \"Thrown\", value: \"thr\" },\n      { name: \"Two-Handed\", value: \"two\" },\n      { name: \"Versatile\", value: \"ver\" },\n      { name: \"Returning\", value: \"ret\" },\n      { name: \"Focus\", value: \"foc\" },\n      { name: \"Adamantine\", value: \"ada\" },\n      { name: \"Magical\", value: \"mgc\" },\n      { name: \"Silvered\", value: \"sil\" },\n    ],\n  },\n  actions: {\n    activationTypes: [\n      { id: 0, value: \"none\" },\n      { id: 1, value: \"action\" },\n      { id: 2, value: \"action\" },\n      { id: 3, value: \"bonus\" },\n      { id: 4, value: \"reaction\" },\n      { id: 5, value: \"action\" },\n      { id: 6, value: \"minute\" },\n      { id: 7, value: \"hour\" },\n      { id: 8, value: \"special\" },\n    ],\n    attackTypes: [\n      //  natural improv\n      // { attackSubtype: 1, value: \"\" },\n      { attackSubtype: 2, value: \"natural\" },\n      { attackSubtype: 3, value: \"simpleM\" }, // unarmed\n    ],\n    damageType: [\n      { name: \"bludgeoning\", id: 1 },\n      { name: \"piercing\", id: 2 },\n      { name: \"slashing\", id: 3 },\n      { name: \"necrotic\", id: 4 },\n      { name: \"acid\", id: 5 },\n      { name: \"cold\", id: 6 },\n      { name: \"fire\", id: 7 },\n      { name: \"lightning\", id: 8 },\n      { name: \"thunder\", id: 9 },\n      { name: \"poison\", id: 10 },\n      { name: \"psychic\", id: 11 },\n      { name: \"radiant\", id: 12 },\n      { name: \"force\", id: 13 },\n      { name: null, id: null },\n    ],\n    aoeType: [\n      { id: 1, value: \"cone\" },\n      { id: 2, value: \"\" },\n      { id: 3, value: \"\" },\n      { id: 4, value: \"line\" },\n      // presumably others here too! add when found\n    ],\n  },\n  spell: {\n    schools: [\n      { id: \"abj\", name: \"abjuration\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/abjuration.png\" },\n      { id: \"con\", name: \"conjuration\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/conjuration.png\" },\n      { id: \"div\", name: \"divination\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/divination.png\" },\n      { id: \"enc\", name: \"enchantment\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/enchantment.png\" },\n      { id: \"evo\", name: \"evocation\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/evocation.png\" },\n      { id: \"ill\", name: \"illusion\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/illusion.png\" },\n      { id: \"nec\", name: \"necromancy\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/necromancy.png\" },\n      { id: \"trs\", name: \"transmutation\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/transmutation.png\" },\n    ],\n    progression: [\n      { name: \"Artificer\", value: \"artificer\" },\n      { name: \"Artificer (UA)\", value: \"artificer\" },\n      { name: \"Bard\", value: \"full\" },\n      { name: \"Barbarian\", value: \"none\" },\n      { name: \"Blood Hunter\", value: \"pact\" },\n      { name: \"Blood Hunter (archived)\", value: \"pact\" },\n      { name: \"Cleric\", value: \"full\" },\n      { name: \"Druid\", value: \"full\" },\n      { name: \"Fighter\", value: \"third\" },\n      { name: \"Hunter\", value: \"half\" },\n      { name: \"Paladin\", value: \"half\" },\n      { name: \"Ranger\", value: \"half\" },\n      { name: \"Rogue\", value: \"third\" },\n      { name: \"Sorcerer\", value: \"full\" },\n      { name: \"Warlock\", value: \"pact\" },\n      { name: \"Wizard\", value: \"full\" },\n      { name: \"Monk\", value: \"none\" },\n    ],\n    preparationModes: [\n      { name: \"Artificer\", value: \"prepared\" },\n      { name: \"Artificer (UA)\", value: \"prepared\" },\n      { name: \"Bard\", value: \"always\" },\n      { name: \"Blood Hunter\", value: \"pact\" },\n      { name: \"Blood Hunter (archived)\", value: \"pact\" },\n      { name: \"Cleric\", value: \"prepared\" },\n      { name: \"Druid\", value: \"prepared\" },\n      { name: \"Fighter\", value: \"always\" },\n      { name: \"Hunter\", value: \"always\" },\n      { name: \"Paladin\", value: \"prepared\" },\n      { name: \"Ranger\", value: \"always\" },\n      { name: \"Rogue\", value: \"always\" },\n      { name: \"Sorcerer\", value: \"always\" },\n      { name: \"Warlock\", value: \"pact\" },\n      { name: \"Wizard\", value: \"prepared\" },\n      { name: \"Monk\", value: \"always\" },\n    ],\n    activationTypes: [\n      { activationType: 0, value: \"none\", name: \"No Action\" }, // doesn't exist an more\n      { activationType: 1, value: \"action\", name: \"Action\", }, // action\n      { activationType: 2, value: \"none\", name: \"No Action\" }, // no action\n      { activationType: 3, value: \"bonus\", name: \"Bonus Action\" }, // bonus action\n      { activationType: 4, value: \"reaction\", name: \"Reaction\", }, // reaction\n      { activationType: 5, value: \"special\", name: \"Unknown\" }, // no longer exists\n      { activationType: 6, value: \"minute\", name: \"Minute\" }, // minute\n      { activationType: 7, value: \"hour\", name: \"Hour\" }, // hour\n      { activationType: 8, value: \"special\", name: \"Special\" }, // special\n    ],\n  },\n  monsters: {\n    weapons: [\n      { name: \"Hand Crossbow\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lgt: true, lod: true } },\n      { name: \"Glaive\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, rch: true, two: true } },\n      { name: \"Dagger\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true, fin: true, thr: true } },\n      { name: \"Longsword\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true } },\n      { name: \"Club\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true } },\n      { name: \"Greatclub\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { two: true } },\n      { name: \"Handaxe\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true, thr: true } },\n      { name: \"Javelin\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { thr: true } },\n      { name: \"Light Hammer\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true, thr: true } },\n      { name: \"Mace\", actionType: \"mwak\", weaponType: \"simpleM\", properties: {} },\n      { name: \"Quarterstaff\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { ver: true } },\n      { name: \"Sickle\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true } },\n      { name: \"Spear\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { thr: true, ver: true } },\n      { name: \"Light Crossbow\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true, lod: true, two: true } },\n      { name: \"Dart\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { fin: true, thr: true } },\n      { name: \"Shortbow\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true, two: true } },\n      { name: \"Sling\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true } },\n      { name: \"Battleaxe\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true } },\n      { name: \"Flail\", actionType: \"mwak\", weaponType: \"martialM\", properties: {} },\n      { name: \"Greataxe\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true } },\n      { name: \"Greatsword\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true } },\n      { name: \"Halberd\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true, rch: true } },\n      { name: \"Lance\", actionType: \"mwak\", weaponType: \"martialM\", properties: { rch: true, spc: true } },\n      { name: \"Maul\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true } },\n      { name: \"Morningstar\", actionType: \"mwak\", weaponType: \"martialM\", properties: {} },\n      { name: \"Pike\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true, rch: true } },\n      { name: \"Rapier\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true } },\n      { name: \"Scimitar\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true, lgt: true } },\n      { name: \"Shortsword\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true, lgt: true } },\n      { name: \"Trident\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true, thr: true } },\n      { name: \"War Pick\", actionType: \"mwak\", weaponType: \"martialM\", properties: {} },\n      { name: \"Warhammer\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true } },\n      { name: \"Whip\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true, rch: true } },\n      { name: \"Blowgun\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lod: true } },\n      { name: \"Heavy Crossbow\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, hvy: true, two: true, lod: true } },\n      { name: \"Longbow\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, hvy: true, two: true } },\n      { name: \"Net\", actionType: \"mwak\", weaponType: \"martialR\", properties: { spc: true, thw: true } },\n      { name: \"Boomerang\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true } },\n      { name: \"Yklwa\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true } },\n      { name: \"Pistol\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lod: true, fir: true } },\n      { name: \"Musket\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lod: true, fir: true } },\n      { name: \"Bite\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Claw\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Tail\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Wing\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Slam\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Rake\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Beak\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Tentacles\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n    ],\n    resets: [\n      { id: 1, value: \"sr\" },\n      { id: \"ShortRest\", value: \"sr\" },\n      { id: \"Short\", value: \"sr\" },\n      { id: \"short\", value: \"sr\" },\n      { id: 2, value: \"lr\" },\n      { id: \"LongRest\", value: \"lr\" },\n      { id: \"Long\", value: \"lr\" },\n      { id: \"long\", value: \"lr\" },\n      { id: \"Day\", value: \"day\" },\n      { id: \"day\", value: \"day\" },\n      { id: \"Dawn\", value: \"day\" },\n      { id: \"dusk\", value: \"day\" },\n      { id: \"Consumable\", value: \"charges\" },\n      { id: \"Other\", value: \"charges\" },\n    ],\n  }\n};\n\nexport default DICTIONARY;\n","import DDBHelper from \"../lib/DDBHelper.js\";\nimport logger from \"../logger.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport { baseItemEffect, generateUpgradeChange, addAddEffect } from \"./effects.js\";\n\n// // ac -\n// { type: \"bonus\", subType: \"armor-class\" },\n// // e.g. robe of the archm\n// { type: \"set\", subType: \"unarmored-armor-class\" },\n// // bracers of defence\n// { type: \"bonus\", subType: \"unarmored-armor-class\" },\n\n/**\n *\n * @param {*} label\n */\nfunction buildBaseACEffect(label) {\n  let effect = {\n    changes: [],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    origin: null,\n    label,\n    tint: \"\",\n    disabled: true,\n    transfer: true,\n    selectedKey: [],\n    icon: \"icons/svg/shield.svg\",\n  };\n  return effect;\n}\n\n/**\n *\n * Generate an effect given inputs for AC\n * This is a high priority set effect that will typically override all other AE.\n * @param {*} formula\n * @param {*} label\n * @param {*} alwaysActive\n * @param {*} priority\n * @param {*} mode\n */\nexport function generateFixedACEffect(formula, label, alwaysActive = false, priority = 30, mode = CONST.ACTIVE_EFFECT_MODES.OVERRIDE) {\n  let effect = buildBaseACEffect(label);\n\n  effect.flags = {\n    dae: { transfer: true, armorEffect: true },\n    ddbimporter: { disabled: !alwaysActive, itemId: null, entityTypeId: null, characterEffect: true },\n  };\n  // effect.disabled = !alwaysActive;\n  effect.disabled = false;\n  effect.origin = \"AC\";\n\n  const change = {\n    key: \"system.attributes.ac.value\",\n    value: formula,\n    mode,\n    priority,\n  };\n\n  effect.changes.push(change);\n\n  return effect;\n}\n\n/**\n * Generate stat sets\n *\n * @param {*} modifiers\n * @param {*} name\n * @param {*} subType\n */\nfunction addACSetEffect(modifiers, name, subType) {\n  let bonuses;\n\n  if (modifiers.some((mod) => mod.statId !== null && mod.type === \"set\" && mod.subType === subType)) {\n    modifiers.filter((mod) => mod.statId !== null && mod.type === \"set\" && mod.subType === subType)\n      .forEach((mod) => {\n        const ability = DICTIONARY.character.abilities.find((ability) => ability.id === mod.statId);\n        if (bonuses) {\n          bonuses += \" \";\n        } else {\n          bonuses = \"\";\n        }\n        bonuses += `@abilities.${ability.value}.mod`;\n      });\n  } else {\n    // others are picked up here e.g. Draconic Resilience\n    const fixedValues = modifiers.filter((mod) => mod.type === \"set\" && mod.subType === subType).map((mod) => mod.value);\n    bonuses = Math.max(fixedValues);\n  }\n\n  let effects = [];\n  const maxDexTypes = [\"ac-max-dex-unarmored-modifier\", \"ac-max-dex-modifier\"];\n\n  if (bonuses && bonuses != 0) {\n    let effectString = \"\";\n    switch (subType) {\n      case \"unarmored-armor-class\": {\n        let maxDexMod = 99;\n        const ignoreDexMod = modifiers.some((mod) => mod.type === \"ignore\" && mod.subType === \"unarmored-dex-ac-bonus\");\n        const maxDexArray = modifiers\n          .filter((mod) => mod.type === \"set\" && maxDexTypes.includes(mod.subType))\n          .map((mod) => mod.value);\n        if (maxDexArray.length > 0) maxDexMod = Math.min(maxDexArray);\n        if (ignoreDexMod) {\n          effectString = `10 + ${bonuses}`;\n        } else {\n          effectString = `@abilities.dex.mod > ${maxDexMod} ? 10 + ${bonuses} + ${maxDexMod} : 10 + ${bonuses} + @abilities.dex.mod`;\n        }\n        break;\n      }\n      default: {\n        effectString = `10 + ${bonuses} + @abilities.dex.mod`;\n      }\n    }\n\n    logger.debug(`Generating ${subType} AC set for ${name}: ${effectString}`);\n    effects.push(\n      generateUpgradeChange(\n        effectString,\n        15,\n        \"system.attributes.ac.value\"\n      )\n    );\n  }\n  return effects;\n}\n\n/**\n *\n * @param {*} modifiers\n * @param {*} name\n */\nfunction addACSets(modifiers, name) {\n  let changes = [];\n  const stats = [\"unarmored-armor-class\"];\n  stats.forEach((set) => {\n    const result = addACSetEffect(modifiers, name, set);\n    changes = changes.concat(result);\n  });\n\n  return changes;\n}\n\n/**\n * Generates an AC bonus for an item\n *\n * @param {*} modifiers\n * @param {*} name\n * @param {*} subType\n */\nfunction addACBonusEffect(modifiers, name, subType, restrictions = [\"while wearing heavy armor\", \"while not wearing heavy armor\", \"\", null]) {\n  const bonusModifiers = DDBHelper.filterModifiers(modifiers, \"bonus\", subType, restrictions);\n\n  // using bonus here adds them to the bonus field, but then items that add a bonsu don't get applied\n  // (e.g. bracers of defense) if wearing something like robi of archmage.\n  // this is set to value, and show up as separate line in ac calculation.\n  // we set this to bonus if dae is not installed as otherwise it is not applied.\n  const key = game.modules.get(\"dae\")?.active\n    ? \"system.attributes.ac.value\"\n    : \"system.attributes.ac.bonus\";\n\n  const changes = addAddEffect(bonusModifiers, name, subType, key);\n  if (changes.length > 0) logger.debug(`Generating ${subType} bonus for ${name}`);\n\n  return changes;\n}\n\n\n/**\n *\n * Generate an effect given inputs for AC\n * This is a high priority set effect that will typically override all other AE.\n * @param {*} formula\n * @param {*} label\n * @param {*} alwaysActive\n * @param {*} priority\n * @param {*} mode\n */\nexport function generateBonusACEffect(modifiers, label, subType, restrictions = [], alwaysActive = true) {\n  let effect = buildBaseACEffect(label);\n\n  effect.flags = {\n    dae: { transfer: true, armorEffect: true },\n    ddbimporter: { disabled: !alwaysActive, itemId: null, entityTypeId: null, characterEffect: true },\n  };\n  // effect.disabled = !alwaysActive;\n  effect.disabled = false;\n  effect.origin = \"AC\";\n\n  const changes = addACBonusEffect(modifiers, label, subType, restrictions);\n  if (changes.length > 0) effect.changes = changes;\n\n  return effect;\n}\n\nfunction addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem) {\n  if (\n    isCompendiumItem\n    || foundryItem.type === \"feat\"\n    || (ddbItem.isAttuned && ddbItem.equipped) // if it is attuned and equipped\n    || (ddbItem.isAttuned && !ddbItem.definition.canEquip) // if it is attuned but can't equip\n    || (!ddbItem.definition.canAttune && ddbItem.equipped) // can't attune but is equipped\n  ) {\n    setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n    setProperty(effect, \"flags.ddbimporter.disabled\", false);\n    effect.disabled = false;\n  } else {\n    effect.disabled = true;\n    setProperty(effect, \"flags.ddbimporter.disabled\", true);\n    setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n  }\n\n  setProperty(effect, \"flags.ddbimporter.itemId\", ddbItem.id);\n  setProperty(effect, \"flags.ddbimporter.itemEntityTypeId\", ddbItem.entityTypeId);\n  // set dae flag for active equipped\n  if (ddbItem.definition?.canEquip || ddbItem.definition?.canAttune) {\n    setProperty(foundryItem, \"flags.dae.activeEquipped\", true);\n  } else {\n    setProperty(foundryItem, \"flags.dae.activeEquipped\", false);\n  }\n\n  return [foundryItem, effect];\n}\n\nfunction generateBaseACEffectChanges(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect) {\n  const noModifiers = !ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0;\n  // const noACValue = !foundryItem.system?.armor?.value;\n\n  // note: I don't know why I had noACValue here. does this break stuff if I remove it?\n  // if (noModifiers && noACValue) return [];\n  if (noModifiers) return [];\n  // console.error(`Item: ${foundryItem.name}`, ddbItem);\n  logger.debug(`Generating supported AC changes for ${foundryItem.name} for effect ${effect.label}`);\n\n  // base ac from modifiers\n  const acSets = game.modules.get(\"dae\")?.active\n    ? addACSets(ddbItem.definition.grantedModifiers, foundryItem.name)\n    : [];\n\n  // ac bonus effects\n  const acBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"armor-class\",\n  );\n  const unarmoredACBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"unarmored-armor-class\",\n  );\n  const armoredACBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"armored-armor-class\",\n  );\n  const dualWieldACBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"dual-wield-armor-class\",\n  );\n\n  const acChanges = [\n    ...acSets,\n    ...acBonus,\n    ...unarmoredACBonus,\n    ...armoredACBonus,\n    ...dualWieldACBonus,\n  ];\n\n  return acChanges;\n\n}\n\n// generates changes and adds to effect for item\nexport function generateACEffectChangesForItem(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect) {\n  const noModifiers = !ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0;\n\n  if (noModifiers) return [foundryItem, effect];\n\n  const acChanges = generateBaseACEffectChanges(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect);\n\n  if (acChanges.length === 0) return [foundryItem, effect]; ;\n\n  effect.changes = effect.changes.concat(acChanges);\n\n  // generate flags for effect (e.g. checking attunement and equipped status)\n  [foundryItem, effect] = addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem);\n\n  return [foundryItem, effect];\n\n}\n\n/**\n *\n * @param {*} ddb\n * @param {*} character\n * @param {*} ddbItem\n * @param {*} foundryItem\n * @param {*} isCompendiumItem\n */\nexport function generateBaseACItemEffect(ddb, character, ddbItem, foundryItem, isCompendiumItem) {\n  const noModifiers = !ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0;\n  const noACValue = !foundryItem.system?.armor?.value;\n\n  if (noModifiers && noACValue) return foundryItem;\n  // console.error(`Item: ${foundryItem.name}`, ddbItem);\n  logger.debug(`Generating supported AC effects for ${foundryItem.name}`);\n\n  let effect = baseItemEffect(foundryItem, `AC: ${foundryItem.name}`);\n\n  // generate flags for effect (e.g. checking attunement and equipped status)\n  [foundryItem, effect] = generateACEffectChangesForItem(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect);\n\n  if (effect.changes?.length > 0) {\n    if (!foundryItem.effects) foundryItem.effects = [];\n    foundryItem.effects.push(effect);\n  }\n  return foundryItem;\n}\n","// import {\n//   baseItemEffect,\n//   generateUpgradeChange,\n//   generateAddChange,\n//   generateMultiplyChange,\n//   generateCustomChange,\n// } from \"./effects.js\";\n\n/**\n * This function is mainly for effects that can't be dynamically generated\n * @param {*} document\n */\nexport function infusionEffectAdjustment(document) {\n\n  return document;\n}\n","import utils from \"../lib/utils.js\";\nimport DDBHelper from \"../lib/DDBHelper.js\";\nimport logger from \"../logger.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport { equipmentEffectAdjustment } from \"./specialEquipment.js\";\nimport { infusionEffectAdjustment } from \"./specialInfusions.js\";\nimport { generateACEffectChangesForItem } from \"./acEffects.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\n// import { spellEffectAdjustment } from \"./specialSpells.js\";\n\n/**\n * Add supported effects here to exclude them from calculations.\n */\nconst EFFECT_EXCLUDED_COMMON_MODIFIERS = [\n  { type: \"bonus\", subType: \"saving-throws\" },\n  { type: \"bonus\", subType: \"ability-checks\" },\n  { type: \"bonus\", subType: \"skill-checks\" },\n  { type: \"bonus\", subType: \"proficiency-bonus\" },\n\n  { type: \"set\", subType: \"strength-score\" },\n  { type: \"set\", subType: \"dexterity-score\" },\n  { type: \"set\", subType: \"constitution-score\" },\n  { type: \"set\", subType: \"wisdom-score\" },\n  { type: \"set\", subType: \"intelligence-score\" },\n  { type: \"set\", subType: \"charisma-score\" },\n\n  // skills\n  { type: \"bonus\", subType: \"acrobatics\" },\n  { type: \"bonus\", subType: \"animal-handling\" },\n  { type: \"bonus\", subType: \"arcana\" },\n  { type: \"bonus\", subType: \"athletics\" },\n  { type: \"bonus\", subType: \"deception\" },\n  { type: \"bonus\", subType: \"history\" },\n  { type: \"bonus\", subType: \"insight\" },\n  { type: \"bonus\", subType: \"intimidation\" },\n  { type: \"bonus\", subType: \"investigation\" },\n  { type: \"bonus\", subType: \"medicine\" },\n  { type: \"bonus\", subType: \"nature\" },\n  { type: \"bonus\", subType: \"perception\" },\n  { type: \"bonus\", subType: \"performance\" },\n  { type: \"bonus\", subType: \"persuasion\" },\n  { type: \"bonus\", subType: \"religion\" },\n  { type: \"bonus\", subType: \"sleight-of-hand\" },\n  { type: \"bonus\", subType: \"stealth\" },\n  { type: \"bonus\", subType: \"survival\" },\n  // advantage on skills - not added here as not used elsewhere in importer.\n  // { type: \"advantage\", subType: \"acrobatics\" },\n\n  // initiative\n  { type: \"advantage\", subType: \"initiative\" },\n\n  { type: \"bonus\", subType: \"strength-ability-checks\" },\n  { type: \"bonus\", subType: \"dexterity-ability-checks\" },\n  { type: \"bonus\", subType: \"constitution-ability-checks\" },\n  { type: \"bonus\", subType: \"wisdom-ability-checks\" },\n  { type: \"bonus\", subType: \"intelligence-ability-checks\" },\n  { type: \"bonus\", subType: \"charisma-ability-checks\" },\n\n  { type: \"bonus\", subType: \"strength-saving-throws\" },\n  { type: \"bonus\", subType: \"dexterity-saving-throws\" },\n  { type: \"bonus\", subType: \"constitution-saving-throws\" },\n  { type: \"bonus\", subType: \"wisdom-saving-throws\" },\n  { type: \"bonus\", subType: \"intelligence-saving-throws\" },\n  { type: \"bonus\", subType: \"charisma-saving-throws\" },\n\n  // attack modifiers\n  { type: \"bonus\", subType: \"weapon-attacks\" },\n  { type: \"bonus\", subType: \"melee-attacks\" },\n  { type: \"bonus\", subType: \"ranged-attacks\" },\n  { type: \"bonus\", subType: \"melee-weapon-attacks\" },\n  { type: \"bonus\", subType: \"ranged-weapon-attacks\" },\n  { type: \"damage\", subType: null },\n];\n\nconst EFFECT_EXCLUDED_SPELL_MODIFIERS = [\n  { type: \"bonus\", subType: \"spell-save-dc\" },\n  { type: \"bonus\", subType: \"spell-attacks\" },\n  { type: \"bonus\", subType: \"warlock-spell-save-dc\" },\n  { type: \"bonus\", subType: \"warlock-spell-attacks\" },\n  { type: \"bonus\", subType: \"spell-group-healing\" } // system.bonuses.heal.damage\n];\n\nconst EFFECT_EXCLUDED_HP_MODIFIERS = [\n  { type: \"bonus\", subType: \"hit-points-per-level\" },\n  { type: \"bonus\", subType: \"hit-points\" },\n];\n\nconst EFFECT_EXCLUDED_SENSE_MODIFIERS = [\n  // senses\n  { type: \"set-base\", subType: \"darkvision\" },\n  { type: \"sense\", subType: \"darkvision\" },\n  { type: \"set-base\", subType: \"blindsight\" },\n  { type: \"sense\", subType: \"blindsight\" },\n  { type: \"set-base\", subType: \"tremorsense\" },\n  { type: \"sense\", subType: \"tremorsense\" },\n  { type: \"set-base\", subType: \"truesight\" },\n  { type: \"sense\", subType: \"truesight\" },\n];\n\nconst EFFECT_EXCLUDED_SPEED_SET_MODIFIERS = [\n  // speeds\n  { type: \"set\", subType: \"innate-speed-walking\" },\n  { type: \"set\", subType: \"innate-speed-climbing\" },\n  { type: \"set\", subType: \"innate-speed-swimming\" },\n  { type: \"set\", subType: \"innate-speed-flying\" },\n];\n\nconst EFFECT_EXCLUDED_SPEED_BONUS_MODIFIERS = [\n  { type: \"bonus\", subType: \"speed\" },\n  { type: \"bonus\", subType: \"speed-walking\" },\n  { type: \"bonus\", subType: \"speed-climbing\" },\n  { type: \"bonus\", subType: \"speed-swimming\" },\n  { type: \"bonus\", subType: \"speed-flying\" },\n];\n\nconst EFFECT_EXCLUDED_GENERAL_SPEED_MODIFIERS = EFFECT_EXCLUDED_SPEED_SET_MODIFIERS.concat(EFFECT_EXCLUDED_SPEED_BONUS_MODIFIERS);\n\nconst EFFECT_EXCLUDED_MONK_SPEED_MODIFIERS = [\n  { type: \"bonus\", subType: \"unarmored-movement\" },\n];\n\nconst EFFECT_EXCLUDED_ALL_SPEED_MODIFIERS = EFFECT_EXCLUDED_GENERAL_SPEED_MODIFIERS.concat(EFFECT_EXCLUDED_MONK_SPEED_MODIFIERS);\n\nconst EFFECT_EXCLUDED_ABILITY_BONUSES = [\n  { type: \"bonus\", subType: \"strength-score\" },\n  { type: \"bonus\", subType: \"dexterity-score\" },\n  { type: \"bonus\", subType: \"constitution-score\" },\n  { type: \"bonus\", subType: \"wisdom-score\" },\n  { type: \"bonus\", subType: \"intelligence-score\" },\n  { type: \"bonus\", subType: \"charisma-score\" },\n];\n\nconst EFFECT_EXCLUDED_PROFICIENCY_BONUSES = [\n  // profs\n  { type: \"proficiency\", subType: null },\n];\n\nconst EFFECT_EXCLUDED_LANGUAGES_MODIFIERS = [\n  // languages - e.g. dwarvish -- lookup from DICTIONARY\n  { type: \"language\", subType: null },\n];\n\nconst EFFECT_EXCLUDED_DAMAGE_CONDITION_MODIFIERS = [\n  // resistances - subType - e.g. poison - lookup from DICTIONARY\n  { type: \"resistance\", subType: null },\n  { type: \"immunity\", subType: null },\n  { type: \"vulnerability\", subType: null },\n];\n\nconst AC_BONUS_MODIFIERS = [\n  { type: \"bonus\", subType: \"unarmored-armor-class\" },\n  { type: \"bonus\", subType: \"armor-class\" },\n  { type: \"bonus\", subType: \"armored-armor-class\" },\n  { type: \"bonus\", subType: \"dual-wield-armor-class\" },\n];\n\nconst AC_EFFECTS = [\n  { type: \"set\", subType: \"unarmored-armor-class\" },\n  { type: \"ignore\", subType: \"unarmored-dex-ac-bonus\" },\n  { type: \"set\", subType: \"ac-max-dex-modifier\" },\n];\n\nexport function getEffectExcludedModifiers(type, features, ac) {\n  let modifiers = [];\n\n  if (type !== \"item\") {\n    // these are the effect tweaks, and mostly excessive\n    const speedEffect = game.settings.get(\"ddb-importer\", `character-update-policy-effect-${type}-speed`);\n    const senseEffect = game.settings.get(\"ddb-importer\", `character-update-policy-effect-${type}-senses`);\n    const hpEffect = game.settings.get(\"ddb-importer\", `character-update-policy-effect-${type}-hp`);\n    const spellBonusEffect = game.settings.get(\"ddb-importer\", `character-update-policy-effect-${type}-spell-bonus`);\n    const damageEffect = game.settings.get(\"ddb-importer\", `character-update-policy-effect-${type}-damages`);\n\n    // features represent core non ac features\n    if (features) {\n      modifiers = modifiers.concat(EFFECT_EXCLUDED_COMMON_MODIFIERS);\n      if ([\"feat\", \"background\", \"race\", \"class\"].includes(type)) {\n        if (speedEffect) modifiers = modifiers.concat(EFFECT_EXCLUDED_GENERAL_SPEED_MODIFIERS);\n        if (senseEffect) modifiers = modifiers.concat(EFFECT_EXCLUDED_SENSE_MODIFIERS);\n        if (hpEffect) modifiers = modifiers.concat(EFFECT_EXCLUDED_HP_MODIFIERS);\n        if (spellBonusEffect) modifiers = modifiers.concat(EFFECT_EXCLUDED_SPELL_MODIFIERS);\n        if (damageEffect) modifiers = modifiers.concat(EFFECT_EXCLUDED_DAMAGE_CONDITION_MODIFIERS);\n      }\n      if ([\"class\"].includes(type)) {\n        modifiers = modifiers.concat(EFFECT_EXCLUDED_MONK_SPEED_MODIFIERS);\n      } else if ([\"feat\", \"background\", \"race\"].includes(type)) {\n        if (speedEffect) modifiers = modifiers.concat(EFFECT_EXCLUDED_MONK_SPEED_MODIFIERS);\n      }\n    }\n    // here ac represents the more exotic ac effects that set limits and change base\n    modifiers = modifiers.concat(AC_BONUS_MODIFIERS);\n    if (ac) {\n      modifiers = modifiers.concat(AC_EFFECTS);\n    }\n  }\n\n  // items are basically their own thing, all or nuffin\n  if (type === \"item\") {\n    modifiers = modifiers.concat(\n      EFFECT_EXCLUDED_COMMON_MODIFIERS,\n      EFFECT_EXCLUDED_ABILITY_BONUSES,\n      EFFECT_EXCLUDED_DAMAGE_CONDITION_MODIFIERS,\n      EFFECT_EXCLUDED_LANGUAGES_MODIFIERS,\n      EFFECT_EXCLUDED_PROFICIENCY_BONUSES,\n      EFFECT_EXCLUDED_ALL_SPEED_MODIFIERS,\n      EFFECT_EXCLUDED_SENSE_MODIFIERS,\n      EFFECT_EXCLUDED_HP_MODIFIERS,\n      EFFECT_EXCLUDED_SPELL_MODIFIERS,\n      AC_EFFECTS,\n      AC_BONUS_MODIFIERS,\n    );\n  }\n  return modifiers;\n}\n\n/**\n *\n * Generate a base effect for an Item\n *\n * @param {*} formula\n * @param {*} mode\n * @param {*} itemData\n * @param {*} label\n * @param {*} origin\n */\n\nexport function baseItemEffect(foundryItem, label) {\n  return {\n    label,\n    icon: foundryItem.img,\n    changes: [],\n    duration: {},\n    // duration: {\n    //   seconds: null,\n    //   startTime: null,\n    //   rounds: null,\n    //   turns: null,\n    //   startRound: null,\n    //   startTurn: null,\n    // },\n    tint: \"\",\n    transfer: true,\n    disabled: false,\n    // origin: origin,\n    flags: {\n      dae: {\n        transfer: true,\n        stackable: \"none\",\n        // armorEffect: true\n      },\n      ddbimporter: {\n        disabled: false,\n      },\n      \"midi-qol\": { // by default force CE effect usage to off\n        forceCEOff: true,\n      },\n    },\n  };\n}\n\nexport function getMidiCEOnFlags(midiFlags = {}) {\n  setProperty(midiFlags, \"forceCEOff\", false);\n  setProperty(midiFlags, \"forceCEOn\", true);\n  return midiFlags;\n}\n\nexport function forceItemEffect(document) {\n  if (document.effects.length > 0 || hasProperty(document.flags, \"itemacro\")) {\n    setProperty(document, \"flags.ddbimporter.effectsApplied\", true);\n    setProperty(document, \"flags.midi-qol.forceCEOff\", true);\n  }\n  return document;\n}\n\n// *\n// CONST.ACTIVE_EFFECT_MODES.\n// ADD: 2\n// CUSTOM: 0\n// DOWNGRADE: 3\n// MULTIPLY: 1\n// OVERRIDE: 5\n// UPGRADE: 4\n//\n\nexport function generateBaseSkillEffect(id, label) {\n  const mockItem = {\n    img: \"icons/svg/up.svg\",\n  };\n  let skillEffect = baseItemEffect(mockItem, label);\n  skillEffect.flags.dae = {};\n  skillEffect.flags.ddbimporter.characterEffect = true;\n  skillEffect.origin = `Actor.${id}`;\n  delete skillEffect.transfer;\n  return skillEffect;\n}\n\n\nexport function generateStatusEffectChange(statusName, priority = 20, macro = false) {\n  const value = macro\n    ? statusName\n    : CONFIG.statusEffects.find((se) => se.name === statusName)?.id || statusName;\n  if (!value) {\n    logger.error(`Status effect ${statusName} not found`);\n  }\n  return {\n    key: macro && !value.startsWith(\"Convenient Effect:\") ? \"macro.CE\" : \"StatusEffect\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: macro || value.startsWith(\"Convenient Effect:\") ? value : `Convenient Effect: ${value}`,\n    priority: priority,\n  };\n}\n\nexport function generateTokenMagicFXChange(macroValue, priority = 20) {\n  return {\n    key: 'macro.tokenMagic',\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: macroValue,\n    priority: priority,\n  };\n}\n\nexport function generateATLChange(atlKey, mode, value, priority = 20) {\n  let key = atlKey;\n\n  switch (atlKey) {\n    case 'ATL.dimLight':\n      key = 'ATL.light.dim';\n      break;\n    case 'ATL.brightLight':\n      key = 'ATL.light.bright';\n      break;\n    case 'ATL.lightAnimation':\n      key = 'ATL.light.animation';\n      break;\n    case 'ATL.lightColor':\n      key = 'ATL.light.color';\n      break;\n    case 'ATL.lightAlpha':\n      key = 'ATL.light.alpha';\n      break;\n    case 'ATL.lightAngle':\n      key = 'ATL.light.angle';\n      break;\n    // no default\n  }\n\n  return {\n    key,\n    mode,\n    value,\n    priority,\n  };\n}\n\nexport function generateChange(bonus, priority, key, mode) {\n  return {\n    key: key,\n    value: bonus,\n    mode: mode,\n    priority: priority,\n  };\n}\n\nexport function generateAddChange(bonus, priority, key) {\n  const bonusValue = (Number.isInteger(bonus) && bonus >= 0) // if bonus is a positive integer\n    || (!Number.isInteger(bonus) && !bonus.trim().startsWith(\"+\") && !bonus.trim().startsWith(\"-\")) // not an int and does not start with + or -\n    ? `+${bonus}`\n    : bonus;\n  return generateChange(bonusValue, priority, key, CONST.ACTIVE_EFFECT_MODES.ADD);\n}\n\nexport function generateCustomChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.CUSTOM);\n}\n\nexport function generateCustomBonusChange(bonus, priority, key) {\n  const bonusValue = (Number.isInteger(bonus) && bonus >= 0) // if bonus is a positive integer\n    || (!Number.isInteger(bonus) && !bonus.trim().startsWith(\"+\") && !bonus.trim().startsWith(\"-\")) // not an int and does not start with + or -\n    ? `+${bonus}`\n    : bonus;\n  return generateChange(bonusValue, priority, key, CONST.ACTIVE_EFFECT_MODES.CUSTOM);\n}\n\nexport function generateUpgradeChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.UPGRADE);\n}\n\nexport function generateOverrideChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.OVERRIDE);\n}\n\nexport function generateMultiplyChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.MULTIPLY);\n}\n\nexport function generateDowngradeChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.DOWNGRADE);\n}\n\n\n// special effect functions\nfunction attunedItemsBonus(actor, change) {\n  // actor is the actor being processed and change a key/value pair\n  if (change.key === \"system.bonuses.abilities.save\" && change.value === \"ATTUNED_ITEM_BONUS\") {\n    // If your active effect spec was\n    const bonus = actor.items.filter((item) => item.system.attunement == 2).length;\n    // actor.system.bonuses.abilities.save += bonus;\n    logger.debug(`Setting attuned items saving throw bonus for ${actor.name} to ${bonus}`);\n    // setProperty(actor, \"system.flags.ddbimporter.attundedItems\", bonus);\n    // this updates the effect value\n    change.value = bonus;\n    // console.warn(actor);\n    // console.warn(change);\n    // console.warn(bonus);\n  }\n}\n\nHooks.on(\"applyActiveEffect\", attunedItemsBonus);\n\n\n//\nfunction extractModifierValue(modifier) {\n  let value = \"\";\n  let modBonus = \"\";\n\n  let statBonus = (modifier.statId)\n    ? modifier.statId\n    : modifier.abilityModifierStatId\n      ? modifier.abilityModifierStatId\n      : null;\n\n  if (statBonus) {\n    const ability = DICTIONARY.character.abilities.find((ability) => ability.id === modifier.statId).value;\n    modBonus = modBonus === \"\" ? `@abilities.${ability}.mod` : `+ @abilities.${ability}.mod`;\n  }\n\n  const die = modifier.dice ? modifier.dice : modifier.die ? modifier.die : undefined;\n\n  if (die) {\n    const fixedBonus = die.fixedValue ? ` + ${die.fixedValue}` : \"\";\n    if (die.diceString) {\n      value = die.diceString + modBonus + fixedBonus;\n    } else if (fixedBonus) {\n      value = fixedBonus + modBonus;\n    }\n  } else if (modifier.fixedValue) {\n    value = modifier.fixedValue;\n  } else if (modifier.value) {\n    value = modifier.value;\n  } else if (modBonus) {\n    value = modBonus;\n  }\n\n  if (value === \"\" && modifier.subType == \"saving-throws\" && modifier.bonusTypes.includes(2)) {\n    // we set the value to zero and when the saving throw is calculated it will\n    // be updated by the attunedItemsBonus function above\n    value = \"ATTUNED_ITEM_BONUS\";\n  }\n\n  return value;\n}\n\n\nfunction getValueFromModifiers(modifiers, name, modifierSubType, modifierType = \"bonus\") {\n  let bonuses;\n  const bonusEffects = DDBHelper.filterModifiers(modifiers, modifierType, modifierSubType, null);\n\n  if (bonusEffects.length > 0) {\n    logger.debug(`Generating ${modifierSubType} ${modifierType} for ${name}`);\n    bonuses = \"\";\n    bonusEffects.forEach((modifier) => {\n      let bonusParse = extractModifierValue(modifier);\n      if (bonuses !== \"\") bonuses += \" + \";\n      bonuses += bonusParse;\n    });\n    if (bonuses === \"\") {\n      bonuses = undefined;\n      logger.debug(`Modifier value 0 for ${modifierSubType} ${modifierType} for ${name}. Reset to undefined`);\n    } else {\n      logger.debug(`Modifier value string for ${modifierSubType} ${modifierType} for ${name}`, bonuses);\n    }\n  }\n\n  return bonuses;\n}\n\n/**\n * Generates a global custom bonus for an item with a +\n */\nfunction addCustomBonusEffect(modifiers, name, type, key) {\n  let changes = [];\n  const bonuses = getValueFromModifiers(modifiers, name, type, \"bonus\");\n\n  if (bonuses) {\n    changes.push(generateCustomChange(`${bonuses}`, 18, key));\n    logger.debug(`Changes for ${type} bonus for ${name}`, changes);\n  }\n\n  return changes;\n}\n\n//\n// Generate saving throw bonuses\n//\nfunction addGlobalSavingBonusEffect(modifiers, name) {\n  const type = \"saving-throws\";\n  const key = \"system.bonuses.abilities.save\";\n  let changes = [];\n  const regularBonuses = modifiers.filter((mod) => !mod.bonusTypes?.includes(2));\n  const customBonuses = modifiers.filter((mod) => mod.bonusTypes?.includes(2));\n\n  if (customBonuses.length > 0) {\n    let customEffects = addCustomBonusEffect(customBonuses, name, type, key);\n    changes = changes.concat(customEffects);\n  }\n\n  const regularModifiers = DDBHelper.filterModifiers(regularBonuses, \"bonus\", type);\n\n  if (regularModifiers.length > 0) {\n    logger.debug(`Generating ${type} bonus for ${name}`);\n    let bonuses = \"\";\n    regularModifiers.forEach((modifier) => {\n      let bonusParse = extractModifierValue(modifier);\n      if (bonuses !== \"\") bonuses += \" + \";\n      bonuses += bonusParse;\n    });\n    if (bonuses === \"\") bonuses = 0;\n    changes.push(generateAddChange(`+ ${bonuses}`, 20, key));\n    logger.debug(`Changes for ${type} bonus for ${name}`, changes);\n  }\n\n  return changes;\n}\n\n/**\n * Generates a global custom bonus for an item\n */\nfunction addCustomEffect(modifiers, name, type, key, extra = \"\") {\n  let changes = [];\n  const bonus = DDBHelper.filterModifiers(modifiers, \"bonus\", type).reduce((a, b) => a + b.value, 0);\n  if (bonus !== 0) {\n    logger.debug(`Generating ${type} bonus for ${name}`);\n    changes.push(generateCustomChange(`${bonus}${(extra) ? extra : \"\"}`, 18, key));\n  }\n  return changes;\n}\n\n/**\n * Generates a global add for an item\n */\nexport function addAddEffect(modifiers, name, type, key) {\n  let changes = [];\n  // const bonus = DDBHelper.filterModifiers(modifiers, \"bonus\", type).reduce((a, b) => a + b.value, 0);\n  const bonus = getValueFromModifiers(modifiers, name, type, \"bonus\");\n  if (bonus) {\n    logger.debug(`Generating ${type} bonus for ${name}`, bonus);\n    changes.push(generateAddChange(`+ ${bonus}`, 18, key));\n  }\n  return changes;\n}\n\n/**\n * Adds languages, can't handle custom languages\n */\nfunction addLanguages(modifiers, name) {\n  let changes = [];\n\n  const ddbCharacter = new DDBCharacter();\n  const languages = ddbCharacter.getLanguagesFromModifiers(modifiers);\n\n  languages.value.forEach((prof) => {\n    logger.debug(`Generating language ${prof} for ${name}`);\n    changes.push(generateCustomChange(prof, 0, \"system.traits.languages.value\"));\n  });\n  if (languages?.custom != \"\") {\n    logger.debug(`Generating language ${languages.custom} for ${name}`);\n    changes.push(generateCustomChange(languages.custom, 0, \"system.traits.languages.custom\"));\n  }\n\n  return changes;\n}\n\n\n/**\n * Generate global damage bonuses\n*/\nfunction addGlobalDamageBonus(modifiers, name) {\n  const meleeRestrictions = [\"Melee Weapon Attacks\"];\n  let changes = [];\n  const meleeBonus = DDBHelper.filterModifiers(modifiers, \"damage\", null, meleeRestrictions)\n    .filter((mod) => mod.dice || mod.die || mod.value)\n    .map((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      if (die) {\n        return utils.parseDiceString(die.diceString, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      } else {\n        return utils.parseDiceString(mod.value, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      }\n    });\n  if (meleeBonus && meleeBonus.length > 0) {\n    logger.debug(`Generating melee damage for ${name}`);\n    changes.push(generateCustomChange(`${meleeBonus.join(\" + \")}`, 18, \"system.bonuses.mwak.damage\"));\n  }\n  const rangedRestrictions = [\"Ranged Weapon Attacks\"];\n  const rangedBonus = DDBHelper.filterModifiers(modifiers, \"damage\", null, rangedRestrictions)\n    .filter((mod) => mod.dice || mod.die || mod.value)\n    .map((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      if (die) {\n        return utils.parseDiceString(die.diceString, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      } else {\n        return utils.parseDiceString(mod.value, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      }\n    });\n  if (rangedBonus && rangedBonus.length > 0) {\n    logger.debug(`Generating ranged damage for ${name}`);\n    changes.push(generateCustomChange(`${rangedBonus.join(\" + \")}`, 18, \"system.bonuses.rwak.damage\"));\n  }\n  const bonus = DDBHelper.filterModifiers(modifiers, \"damage\", null)\n    .filter((mod) => mod.dice || mod.die || mod.value)\n    .map((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      if (die) {\n        return utils.parseDiceString(die.diceString, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      } else {\n        return utils.parseDiceString(mod.value, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      }\n    });\n  if (bonus && bonus.length > 0) {\n    logger.debug(`Generating all damage for ${name}`);\n    changes.push(generateCustomChange(`${bonus.join(\" + \")}`, 18, \"system.bonuses.mwak.damage\"));\n    changes.push(generateCustomChange(`${bonus.join(\" + \")}`, 18, \"system.bonuses.rwak.damage\"));\n  }\n  return changes;\n}\n\n// *\n// Get list of generic conditions/damages\n//\nfunction getGenericConditionAffect(modifiers, condition, typeId) {\n  const damageTypes = DICTIONARY.character.damageAdjustments\n    .filter((type) => type.kind === condition && type.type === typeId)\n    .map((type) => type.value);\n\n  let restrictions = [\n    \"\",\n    null,\n    \"While within 20 feet\",\n    \"Dwarf Only\",\n    \"While Not Incapacitated\",\n    // \"As an Action\", this is a timed/limited effect, dealt with elsewhere\n    \"While Staff is Held\",\n    \"Helm has at least one ruby remaining\",\n    \"while holding\",\n    \"While Held\",\n  ];\n  let result = DDBHelper\n    .filterModifiers(modifiers, condition, null, restrictions)\n    .filter((modifier) => modifier.isGranted && damageTypes.includes(modifier.subType))\n    .map((modifier) => {\n      const entry = DICTIONARY.character.damageAdjustments.find(\n        (type) => type.type === typeId && type.kind === modifier.type && type.value === modifier.subType\n      );\n      return entry ? entry.foundryValue || entry.value : undefined;\n    });\n\n  return result;\n}\n\n/**\n * Get  Damage Conditions, and Condition Immunities\n * @param {*} ddbItem\n */\nfunction addDamageConditions(modifiers) {\n  let charges = [];\n\n  const damageImmunities = getGenericConditionAffect(modifiers, \"immunity\", 2);\n  const damageResistances = getGenericConditionAffect(modifiers, \"resistance\", 2);\n  const damageVulnerability = getGenericConditionAffect(modifiers, \"vulnerability\", 2);\n\n  damageImmunities.forEach((type) => {\n    charges.push(generateCustomChange(type, 1, \"system.traits.di.value\"));\n  });\n  damageResistances.forEach((type) => {\n    charges.push(generateCustomChange(type, 1, \"system.traits.dr.value\"));\n  });\n  damageVulnerability.forEach((type) => {\n    charges.push(generateCustomChange(type, 1, \"system.traits.dv.value\"));\n  });\n\n  const conditionImmunities = getGenericConditionAffect(modifiers, \"immunity\", 1);\n\n  conditionImmunities.forEach((type) => {\n    charges.push(generateCustomChange(type, 1, \"system.traits.ci.value\"));\n  });\n\n  // system.traits.di.all\n  const allDamageImmunity = DDBHelper.filterModifiers(modifiers, \"immunity\", \"all\");\n  if (allDamageImmunity?.length > 0) {\n    charges.push(generateCustomChange(1, 1, \"system.traits.di.all\"));\n  }\n\n  return charges;\n}\n\n// *\n// Generate stat bonuses\n//\nfunction addStatBonusEffect(modifiers, name, subType) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"bonus\" && modifier.subType === subType);\n\n  let effects = [];\n  if (bonuses.length > 0) {\n    bonuses.forEach((bonus) => {\n      const maxMatch = /Maximum of (\\d*)/;\n      const match = bonus.restriction ? bonus.restriction.match(maxMatch) : false;\n      logger.debug(`Generating ${subType} stat bonus for ${name}`);\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.long === subType.split(\"-\")[0]);\n      const abilityScoreMaxBonus = modifiers\n        .filter((modifier) => modifier.type === \"bonus\" && modifier.subType === \"ability-score-maximum\")\n        .filter((mod) => mod.statId === ability.id)\n        .reduce((prev, cur) => prev + cur.value, 0);\n      const max = match ? match[1] : 20 + abilityScoreMaxBonus;\n\n      const bonusString = `@abilities.${ability.value}.value + ${bonus.value} > ${max} ? ${max} : @abilities.${ability.value}.value + ${bonus.value}`;\n      effects.push(generateOverrideChange(bonusString, 5, `system.abilities.${ability.value}.value`));\n    });\n  }\n  return effects;\n}\n\nfunction addStatBonuses(modifiers, name) {\n  let changes = [];\n  const stats = [\n    \"strength-score\",\n    \"dexterity-score\",\n    \"constitution-score\",\n    \"wisdom-score\",\n    \"intelligence-score\",\n    \"charisma-score\",\n  ];\n  stats.forEach((stat) => {\n    const result = addStatBonusEffect(modifiers, name, stat);\n    changes = changes.concat(result);\n  });\n\n  return changes;\n}\n\n// *\n// Generate stat sets\n//\nfunction addStatSetEffect(modifiers, name, subType) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"set\" && modifier.subType === subType);\n\n  let effects = [];\n  // dwarfen \"Maximum of 20\"\n  if (bonuses.length > 0) {\n    bonuses.forEach((bonus) => {\n      logger.debug(`Generating ${subType} stat set for ${name}`);\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.long === subType.split(\"-\")[0]).value;\n      effects.push(generateUpgradeChange(bonus.value, 3, `system.abilities.${ability}.value`));\n    });\n  }\n  return effects;\n}\n\n// requires midi\n// does not add advantages with restrictions - which is most of them\nfunction addAbilityAdvantageEffect(modifiers, name, subType, type) {\n  const bonuses = DDBHelper.filterModifiers(modifiers, \"advantage\", subType);\n\n  let effects = [];\n  if (bonuses.length > 0) {\n    logger.debug(`Generating ${subType} saving throw advantage for ${name}`);\n    const ability = DICTIONARY.character.abilities.find((ability) => ability.long === subType.split(\"-\")[0]).value;\n    effects.push(generateCustomChange(1, 4, `flags.midi-qol.advantage.ability.${type}.${ability}`));\n  }\n  return effects;\n}\n\nfunction addStatChanges(modifiers, name) {\n  let changes = [];\n  const stats = [\"strength\", \"dexterity\", \"constitution\", \"wisdom\", \"intelligence\", \"charisma\"];\n  stats.forEach((stat) => {\n    const ability = DICTIONARY.character.abilities.find((ab) => ab.long === stat);\n    const statEffect = addStatSetEffect(modifiers, name, `${stat}-score`);\n    const savingThrowAdvantage = addAbilityAdvantageEffect(modifiers, name, `${stat}-saving-throw`, \"save\");\n    const abilityCheckAdvantage = addAbilityAdvantageEffect(modifiers, name, `${stat}-ability-checks`, \"check\");\n    const abilityBonusesSave = addAddEffect(modifiers, name, `${stat}-saving-throws`, `system.abilities.${ability.value}.bonuses.save`);\n    const abilityBonusesCheck = addAddEffect(modifiers, name, `${stat}-ability-checks`, `system.abilities.${ability.value}.bonuses.check`);\n    changes = changes.concat(statEffect, savingThrowAdvantage, abilityCheckAdvantage, abilityBonusesSave, abilityBonusesCheck);\n  });\n\n  return changes;\n}\n\n// *\n// Senses\n//\nfunction addSenseBonus(modifiers, name) {\n  let changes = [];\n\n  const senses = [\"darkvision\", \"blindsight\", \"tremorsense\", \"truesight\"];\n\n  senses.forEach((sense) => {\n    const base = modifiers\n      .filter((modifier) => modifier.type === \"set-base\" && modifier.subType === sense)\n      .map((mod) => mod.value);\n    if (base.length > 0) {\n      logger.debug(`Generating ${sense} base for ${name}`);\n      changes.push(generateUpgradeChange(Math.max(base), 10, `system.attributes.senses.${sense}`));\n    }\n    const bonus = modifiers\n      .filter((modifier) => modifier.type === \"sense\" && modifier.subType === sense)\n      .reduce((a, b) => a + b.value, 0);\n    if (bonus > 0) {\n      logger.debug(`Generating ${sense} bonus for ${name}`);\n      changes.push(generateAddChange(Math.max(bonus), 15, `system.attributes.senses.${sense}`));\n    }\n  });\n  return changes;\n}\n\n/**\n * Proficiency bonus\n */\n\nfunction addProficiencyBonus(modifiers, name) {\n  let changes = [];\n  const bonus = DDBHelper.filterModifiers(modifiers, \"bonus\", \"proficiency-bonus\").reduce((a, b) => a + b.value, 0);\n  if (bonus) {\n    logger.debug(`Generating proficiency bonus for ${name}`);\n    changes.push(generateAddChange(bonus, 0, \"system.attributes.prof\"));\n  }\n  return changes;\n}\n\n// *\n// Generate set speeds\n//\nfunction addSetSpeedEffect(modifiers, name, subType) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"set\" && modifier.subType === subType);\n\n  let effects = [];\n  // \"Equal to Walking Speed\"\n  if (bonuses.length > 0) {\n    bonuses.forEach((bonus) => {\n      logger.debug(`Generating ${subType} speed set for ${name}`);\n      const innate = subType.split(\"-\").slice(-1)[0];\n      const speedType = DICTIONARY.character.speeds.find((s) => s.innate === innate).type;\n      // current assumption if no speed provided, set to walking speed\n      const speed = bonus.value ? bonus.value : \"@attributes.movement.walk\";\n      effects.push(generateUpgradeChange(speed, 5, `system.attributes.movement.${speedType}`));\n    });\n  }\n  return effects;\n}\n\n/**\n * Innate Speeds\n */\nfunction addSetSpeeds(modifiers, name) {\n  let changes = [];\n  const speedSets = [\n    \"innate-speed-walking\",\n    \"innate-speed-climbing\",\n    \"innate-speed-swimming\",\n    \"innate-speed-flying\",\n    \"innate-speed-burrowing\",\n    \"speed-walking\",\n    \"speed-climbing\",\n    \"speed-swimming\",\n    \"speed-flying\",\n    \"speed-burrowing\",\n  ];\n  speedSets.forEach((speedSet) => {\n    const result = addSetSpeedEffect(modifiers, name, speedSet);\n    changes = changes.concat(result);\n  });\n\n  return changes;\n}\n\n// *\n// Generate speed bonus speeds\n//\nfunction addBonusSpeedEffect(modifiers, name, subType, speedType = null) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"bonus\" && modifier.subType === subType);\n\n  let effects = [];\n  // \"Equal to Walking Speed\"\n  // max(10+(ceil(((@classes.monk.levels)-5)/4))*5,10)\n  if (bonuses.length > 0) {\n    logger.debug(`Generating ${subType} speed bonus for ${name}`);\n    if (!speedType) {\n      const innate = subType.split(\"-\").slice(-1)[0];\n      speedType = DICTIONARY.character.speeds.find((s) => s.innate === innate).type;\n    }\n    const bonusValue = bonuses.reduce((speed, mod) => speed + mod.value, 0);\n    if (speedType === \"all\") {\n      effects.push(generateCustomChange(`+ ${bonusValue}`, 9, `system.attributes.movement.${speedType}`));\n    } else {\n      effects.push(generateAddChange(bonusValue, 9, `system.attributes.movement.${speedType}`));\n    }\n  }\n  return effects;\n}\n\n/**\n * Bonus Speeds\n */\nfunction addBonusSpeeds(modifiers, name) {\n  let changes = [];\n  const speedBonuses = [\"speed-walking\", \"speed-climbing\", \"speed-swimming\", \"speed-flying\", \"speed-burrowing\"];\n  speedBonuses.forEach((speed) => {\n    const result = addBonusSpeedEffect(modifiers, name, speed);\n    changes = changes.concat(result);\n  });\n\n  changes = changes.concat(addBonusSpeedEffect(modifiers, name, \"unarmored-movement\", \"walk\"));\n  changes = changes.concat(addBonusSpeedEffect(modifiers, name, \"speed\", \"walk\")); // probably all, but doesn't handle cases of where no base speed set, so say fly gets set to 10.\n\n  return changes;\n}\n\nfunction addSkillProficiencies(modifiers) {\n  let changes = [];\n  const ddbCharacter = new DDBCharacter();\n  DICTIONARY.character.skills.forEach((skill) => {\n    const prof = ddbCharacter.getSkillProficiency(skill, modifiers);\n    if (prof != 0) {\n      changes.push(generateUpgradeChange(prof, 9, `system.skills.${skill.name}.value`));\n    }\n  });\n  return changes;\n}\n\nfunction addProficiencies(modifiers, name) {\n  let changes = [];\n\n  const proficiencies = modifiers\n    .filter((mod) => mod.type === \"proficiency\")\n    .map((mod) => {\n      return { name: mod.friendlySubtypeName };\n    });\n\n  const ddbCharacter = new DDBCharacter();\n\n  changes = changes.concat(addSkillProficiencies(modifiers));\n  const toolProf = ddbCharacter.getToolProficiencies(proficiencies);\n  const weaponProf = ddbCharacter.getWeaponProficiencies(proficiencies);\n  const armorProf = ddbCharacter.getArmorProficiencies(proficiencies);\n\n  toolProf.value.forEach((prof) => {\n    logger.debug(`Generating tool proficiencies for ${name}`);\n    changes.push(generateCustomChange(prof, 8, \"system.traits.toolProf.value\"));\n  });\n  weaponProf.value.forEach((prof) => {\n    logger.debug(`Generating weapon proficiencies for ${name}`);\n    changes.push(generateCustomChange(prof, 8, \"system.traits.weaponProf.value\"));\n  });\n  armorProf.value.forEach((prof) => {\n    logger.debug(`Generating armor proficiencies for ${name}`);\n    changes.push(generateCustomChange(prof, 8, \"system.traits.armorProf.value\"));\n  });\n  if (toolProf?.custom != \"\") changes.push(generateCustomChange(toolProf.custom, 8, \"system.traits.toolProf.custom\"));\n  if (weaponProf?.custom != \"\")\n    changes.push(generateCustomChange(weaponProf.custom, 8, \"system.traits.weaponProf.custom\"));\n  if (armorProf?.custom != \"\") changes.push(generateCustomChange(armorProf.custom, 8, \"system.traits.armorProf.custom\"));\n\n  return changes;\n}\n\n/**\n * Add HP effects\n * @param {*} modifiers\n * @param {*} name\n */\nfunction addHPEffect(ddb, modifiers, name, consumable) {\n  let changes = [];\n\n  // HP per level\n  DDBHelper.filterModifiers(modifiers, \"bonus\", \"hit-points-per-level\").forEach((bonus) => {\n    const cls = DDBHelper.findClassByFeatureId(ddb, bonus.componentId);\n    if (cls) {\n      logger.debug(`Generating HP Per Level effects for ${name} for class ${cls.definition.name}`);\n      changes.push(generateAddChange(`${bonus.value} * @classes.${cls.definition.name.toLowerCase()}.levels`, 14, \"system.attributes.hp.max\"));\n    } else {\n      logger.debug(`Generating HP Per Level effects for ${name} for all levels`);\n      changes.push(generateAddChange(`${bonus.value} * @details.level`, 14, \"system.attributes.hp.max\"));\n    }\n  });\n\n  const hpBonusModifiers = DDBHelper.filterModifiers(modifiers, \"bonus\", \"hit-points\");\n  if (hpBonusModifiers.length > 0 && !consumable) {\n    let hpBonus = \"\";\n    hpBonusModifiers.forEach((modifier) => {\n      let hpParse = extractModifierValue(modifier);\n      if (hpBonus !== \"\") hpBonus += \" + \";\n      hpBonus += hpParse;\n    });\n    changes.push(generateCustomChange(`${hpBonus}`, 14, \"system.attributes.hp.max\"));\n  }\n\n  return changes;\n}\n\n//\n// Generate skill bonuses\n//\nfunction addSkillBonusEffect(modifiers, name, skill) {\n  const bonus = getValueFromModifiers(modifiers, name, skill.subType, \"bonus\");\n\n  let changes = [];\n  if (bonus) {\n    logger.debug(`Generating ${skill.subType} skill bonus for ${name}`, bonus);\n    changes.push(generateAddChange(bonus, 12, `system.skills.${skill.name}.bonuses.check`));\n  }\n  return changes;\n}\n\n//\n// generate skill advantages\n// requires midi\n//\nfunction addSkillMidiEffect(modifiers, name, skill, midiEffect = \"advantage\") {\n  const allowedRestrictions = [\n    \"\",\n    null,\n    \"Sound Only\",\n    \"Sight Only\",\n    \"that rely on smell\",\n    \"While the hood is up, checks made to Hide \",\n  ];\n  const advantage = DDBHelper.filterModifiers(modifiers, midiEffect, skill.subType, allowedRestrictions);\n\n  let effects = [];\n  if (advantage.length > 0) {\n    logger.debug(`Generating ${skill.subType} skill ${midiEffect} for ${name}`);\n    effects.push(generateCustomChange(1, 5, `flags.midi-qol.${midiEffect}.skill.${skill.name}`));\n    // handled by midi already\n    // advantage/disadvantage on skill grants +/-5 passive bonus, https://www.dndbeyond.com/sources/phb/using-ability-scores#PassiveChecks\n    // if (midiEffect === \"advantage\") {\n    //   effects.push(generateAddChange(5, 5, `system.skills.${skill.name}.bonuses.passive`));\n    // } else if (midiEffect === \"disadvantage\") {\n    //   effects.push(generateAddChange(-5, 5, `system.skills.${skill.name}.bonuses.passive`));\n    // }\n  }\n  return effects;\n}\n\nfunction addSkillBonuses(modifiers, name) {\n  let changes = [];\n  DICTIONARY.character.skills.forEach((skill) => {\n    const skillBonuses = addSkillBonusEffect(modifiers, name, skill);\n    const skillAdvantages = addSkillMidiEffect(modifiers, name, skill, \"advantage\");\n    changes = changes.concat(skillBonuses, skillAdvantages);\n  });\n\n  return changes;\n}\n\n//\n// initiative\n//\nfunction addInitiativeBonuses(modifiers, name) {\n  let changes = [];\n  const advantage = DDBHelper.filterModifiers(modifiers, \"advantage\", \"initiative\");\n  if (advantage.length > 0) {\n    logger.debug(`Generating Intiative advantage for ${name}`);\n    changes.push(generateCustomChange(1, 20, \"flags.dnd5e.initiativeAdv\"));\n  }\n  return changes;\n}\n\n//\n// attack rolls against you\n// midi only\n//\nfunction addAttackRollDisadvantage(modifiers, name) {\n  let changes = [];\n  const disadvantage = DDBHelper.filterModifiers(modifiers, \"disadvantage\", \"attack-rolls-against-you\", false);\n  if (disadvantage.length > 0) {\n    logger.debug(`Generating disadvantage for ${name}`);\n    changes.push(generateCustomChange(1, 5, \"flags.midi-qol.grants.disadvantage.attack.all\"));\n  }\n  return changes;\n}\n\n// midi advantages on saving throws against spells and magical effects\nfunction addMagicalAdvantage(modifiers, name) {\n  let changes = [];\n  const restrictions = [\n    \"against spells and magical effects\",\n    \"Against Spells and Magical Effects\",\n    \"Against Spells\",\n    \"against spells\",\n    \"Against spells\",\n    \"Against spells and magical effects within 10 ft. (or 30 ft. at level 17+) while holding the Holy Avenger\",\n  ];\n  const advantage = DDBHelper.filterModifiers(modifiers, \"advantage\", \"saving-throws\", restrictions);\n  if (advantage.length > 0) {\n    logger.debug(`Generating magical advantage on saving throws for ${name}`);\n    changes.push(generateCustomChange(\"magic-resistant\", 5, \"system.traits.dr.custom\"));\n  }\n  return changes;\n}\n\nfunction generateEffectDuration(foundryItem) {\n  let duration = {\n    seconds: null,\n    startTime: null,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  switch (foundryItem.system.duration.units) {\n    case \"turn\":\n      duration.turns = foundryItem.system.duration.value;\n      break;\n    case \"round\":\n      duration.rounds = foundryItem.system.duration.value;\n      break;\n    case \"hour\":\n      duration.seconds = foundryItem.system.duration.value * 60 * 60;\n      break;\n    case \"minute\":\n      duration.rounds = foundryItem.system.duration.value * 10;\n      break;\n    // no default\n  }\n  return duration;\n}\n\nfunction consumableEffect(effect, ddbItem, foundryItem) {\n  effect.label = `${foundryItem.name} - Consumable Effects`;\n  effect.disabled = false;\n  effect.transfer = false;\n  setProperty(effect, \"flags.ddbimporter.disabled\", false);\n  setProperty(effect, \"flags.dae.transfer\", false);\n  effect.duration = generateEffectDuration(foundryItem);\n  if (!foundryItem.system.target?.value) {\n    foundryItem.system.target = {\n      value: 1,\n      width: null,\n      units: \"\",\n      type: \"creature\",\n    };\n  }\n  if (!foundryItem.system.range?.units) {\n    foundryItem.system.range = {\n      value: null,\n      long: null,\n      units: \"touch\",\n    };\n  }\n  if (foundryItem.system.uses) {\n    foundryItem.system.uses.autoDestroy = true;\n    foundryItem.system.uses.autoUse = true;\n  }\n\n  return effect;\n}\n\n/**\n * This checks attunement status and similar to determine effect state\n * set disabled flags etc\n * @param {*} foundryItem\n * @param {*} effect\n * @param {*} ddbItem\n * @param {*} isCompendiumItem\n */\nfunction addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem) {\n  // check attunement status etc\n\n  if (\n    !ddbItem.definition?.canEquip\n    && !ddbItem.definition?.canAttune\n    && !ddbItem.definition?.isConsumable\n    && DICTIONARY.types.inventory.includes(foundryItem.type)\n  ) {\n    // if item just gives a thing and not potion/scroll\n    effect.disabled = false;\n    setProperty(effect, \"flags.ddbimporter.disabled\", false);\n    setProperty(foundryItem, \"flags.dae.alwaysActive\", true);\n  } else if (\n    isCompendiumItem\n    || foundryItem.type === \"feat\"\n    || (ddbItem.isAttuned && ddbItem.equipped) // if it is attuned and equipped\n    || (ddbItem.isAttuned && !ddbItem.definition?.canEquip) // if it is attuned but can't equip\n    || (!ddbItem.definition?.canAttune && ddbItem.equipped) // can't attune but is equipped\n  ) {\n    setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n    setProperty(effect, \"flags.ddbimporter.disabled\", false);\n    effect.disabled = false;\n  } else {\n    effect.disabled = true;\n    setProperty(effect, \"flags.ddbimporter.disabled\", true);\n    setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n  }\n\n  setProperty(effect, \"flags.ddbimporter.itemId\", ddbItem.id);\n  setProperty(effect, \"flags.ddbimporter.itemEntityTypeId\", ddbItem.entityTypeId);\n  // set dae flag for active equipped\n  if (ddbItem.definition?.canEquip || ddbItem.definitio?.canAttune) {\n    setProperty(foundryItem, \"flags.dae.activeEquipped\", true);\n  } else {\n    setProperty(foundryItem, \"flags.dae.activeEquipped\", false);\n  }\n\n  if (ddbItem.definition?.filterType === \"Potion\") {\n    effect = consumableEffect(effect, ddbItem, foundryItem);\n  }\n\n  return [foundryItem, effect];\n}\n\n/**\n * Generate supported effects for items\n * @param {*} ddb\n * @param {*} character\n * @param {*} ddbItem\n * @param {*} foundryItem\n */\nfunction generateGenericEffects(ddb, character, ddbItem, foundryItem, isCompendiumItem, labelOverride) {\n  if (!foundryItem.effects) foundryItem.effects = [];\n\n  const label = labelOverride\n    ? labelOverride\n    : `${foundryItem.name} - Constant Effects`;\n\n  let effect = baseItemEffect(foundryItem, label);\n\n  if (!ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0) return [foundryItem, effect];\n  logger.debug(`Generating Effects for ${foundryItem.name}`, ddbItem);\n\n  const globalSaveBonus = addGlobalSavingBonusEffect(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const globalAbilityBonus = addCustomBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"ability-checks\",\n    \"system.bonuses.abilities.check\",\n  );\n  const globalSkillBonus = addCustomBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"skill-checks\",\n    \"system.bonuses.abilities.skill\",\n  );\n  const languages = addLanguages(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const conditions = addDamageConditions(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const statSets = addStatChanges(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const statBonuses = addStatBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const senses = addSenseBonus(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const proficiencyBonus = addProficiencyBonus(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const speedSets = addSetSpeeds(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const spellAttackBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"spell-attacks\",\n    \"system.bonuses.spell.attack\"\n  );\n  const spellDCBonus = addAddEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"spell-save-dc\",\n    \"system.bonuses.spell.dc\"\n  );\n  const warlockSpellAttackBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"warlock-spell-attacks\",\n    \"system.bonuses.spell.attack\"\n  );\n  const warlockSpellDCBonus = addAddEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"warlock-spell-save-dc\",\n    \"system.bonuses.spell.dc\"\n  );\n  const healingSpellBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"spell-group-healing\",\n    \"system.bonuses.heal.damage\",\n    \" + @item.level\"\n  );\n\n  const profs = addProficiencies(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const hp = addHPEffect(ddb, ddbItem.definition.grantedModifiers, foundryItem.name, ddbItem.definition.isConsumable);\n  const skillBonus = addSkillBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const initiative = addInitiativeBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const disadvantageAgainst = addAttackRollDisadvantage(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const magicalAdvantage = addMagicalAdvantage(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const bonusSpeeds = addBonusSpeeds(ddbItem.definition.grantedModifiers, foundryItem.name);\n\n  const meleeAttackBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"melee-attacks\",\n    \"system.bonuses.mwak.attack\"\n  );\n  const rangedAttackBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"ranged-attacks\",\n    \"system.bonuses.rwak.attack\"\n  );\n  const meleeWeaponAttackBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"melee-weapon-attacks\",\n    \"system.bonuses.mwak.attack\"\n  );\n  const rangedWeaponAttackBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"ranged-weapon-attacks\",\n    \"system.bonuses.rwak.attack\"\n  );\n  const weaponAttackMeleeBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"weapon-attacks\",\n    \"system.bonuses.mwak.attack\"\n  );\n  const weaponAttackRangedBonus = addCustomEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"weapon-attacks\",\n    \"system.bonuses.rwak.attack\"\n  );\n\n  const globalDamageBonus = addGlobalDamageBonus(ddbItem.definition.grantedModifiers, foundryItem.name);\n\n  effect.changes = [\n    ...globalSaveBonus,\n    ...globalAbilityBonus,\n    ...globalSkillBonus,\n    ...languages,\n    ...conditions,\n    ...statSets,\n    ...statBonuses,\n    ...senses,\n    ...proficiencyBonus,\n    ...speedSets,\n    ...spellAttackBonus,\n    ...warlockSpellAttackBonus,\n    ...spellDCBonus,\n    ...warlockSpellDCBonus,\n    ...profs,\n    ...hp,\n    ...skillBonus,\n    ...initiative,\n    ...disadvantageAgainst,\n    ...magicalAdvantage,\n    ...bonusSpeeds,\n    ...healingSpellBonus,\n    ...meleeAttackBonus,\n    ...rangedAttackBonus,\n    ...meleeWeaponAttackBonus,\n    ...rangedWeaponAttackBonus,\n    ...weaponAttackMeleeBonus,\n    ...weaponAttackRangedBonus,\n    ...globalDamageBonus,\n  ];\n\n  // if we don't have effects, lets return the item\n  if (effect.changes?.length === 0) {\n    return [foundryItem, effect];\n  }\n\n  // generate flags for effect (e.g. checking attunement and equipped status)\n  [foundryItem, effect] = addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem);\n\n  return [foundryItem, effect];\n}\n\nexport function generateEffects(ddb, character, ddbItem, foundryItem, isCompendiumItem, type) {\n  let label;\n\n  if (type === \"item\" && hasProperty(ddbItem, \"definition.grantedModifiers\")) {\n    ddbItem.definition.grantedModifiers = ddbItem.definition.grantedModifiers.filter((modifier) =>\n      modifier.type !== \"damage\" && modifier.subType !== null\n    );\n  }\n\n  if (type == \"infusion\") {\n    label = `${foundryItem.name} - Infusion Effects`;\n  }\n  let effect;\n  [foundryItem, effect] = generateGenericEffects(ddb, character, ddbItem, foundryItem, isCompendiumItem, label);\n  if (type == \"infusion\") {\n    [foundryItem, effect] = generateACEffectChangesForItem(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect);\n  }\n  if (effect.changes?.length > 0) {\n    foundryItem.effects.push(effect);\n  }\n  switch (type) {\n    case \"infusion\": {\n      foundryItem = infusionEffectAdjustment(foundryItem);\n      break;\n    }\n    case \"equipment\":\n    case \"item\": {\n      foundryItem = equipmentEffectAdjustment(foundryItem);\n      break;\n    }\n    // spells and feats get called from respective parsers for async loading\n    // no default\n  }\n\n  if (foundryItem.effects?.length > 0 || hasProperty(foundryItem.flags, \"itemacro\")) {\n    logger.debug(`${type} effect ${foundryItem.name}:`, duplicate(foundryItem));\n    setProperty(foundryItem, \"flags.ddbimporter.effectsApplied\", true);\n  }\n  return foundryItem;\n\n}\n","import logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\n\nexport async function checkMacroFolder() {\n  const macroFolder = game.folders.find((folder) => folder.name === \"DDB Macros\" && folder.type === \"Macro\");\n\n  if (!macroFolder) {\n    await Folder.create({\n      color: \"#FF0000\",\n      name: \"DDB Macros\",\n      parent: null,\n      type: \"Macro\"\n    });\n  }\n}\n\nexport function configureDependencies() {\n  // allow item use macros on items\n  if (game.modules.get(\"midi-qol\")?.active) {\n    let midiQOLSettings = game.settings.get(\"midi-qol\", \"ConfigSettings\");\n    if (!midiQOLSettings.allowUseMacro) {\n      midiQOLSettings.allowUseMacro = true;\n      game.settings.set(\"midi-qol\", \"ConfigSettings\", midiQOLSettings);\n    }\n  } else {\n    logger.error(\"Midi-QOL needs to be installed for effects\");\n    ui.notifications.warn(\"Midi-QOL needs to be installed for effects\");\n  }\n\n  const useCEConditions = game.settings.get(SETTINGS.MODULE_ID, \"apply-conditions-with-ce\");\n  // if dfreds status effects not added, add them\n  if (game.modules.get(\"dfreds-convenient-effects\")?.active && useCEConditions) {\n    const convenientEffectStatusSettings = game.settings.get(\"dfreds-convenient-effects\", \"modifyStatusEffects\");\n    if (!convenientEffectStatusSettings || convenientEffectStatusSettings === \"none\") {\n      game.settings.set(\"dfreds-convenient-effects\", \"modifyStatusEffects\", \"add\");\n    }\n  } else if (useCEConditions) {\n    logger.error(\"Convenient Effects needs to be installed for effects\");\n    ui.notifications.warn(\"Convenient Effects needs to be installed for effects\");\n  }\n\n  if (game.modules.get(\"itemacro\")?.active) {\n    const itemMacroSheet = game.settings.get(\"itemacro\", \"charsheet\");\n    if (itemMacroSheet) {\n      game.settings.get(\"itemacro\", \"charsheet\", false);\n    }\n  } else {\n    logger.error(\"Item Macro needs to be installed for effects\");\n    ui.notifications.warn(\"Item Macro needs to be installed for effects\");\n  }\n\n  return true;\n}\n\nexport async function loadMacroFile(type, fileName, forceLoad = false, forceDDB = false) {\n  const embedMacros = game.settings.get(\"ddb-importer\", \"embed-macros\");\n  logger.debug(`Getting macro for ${type} ${fileName}`);\n  const fileExists = forceLoad || (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge)\n    ? true\n    : await FileHelper.fileExists(`[data] modules/ddb-importer/macros/${type}s`, fileName);\n\n  let data;\n  if (fileExists && (forceLoad || embedMacros) && !forceDDB) {\n    const url = await FileHelper.getFileUrl(`[data] modules/ddb-importer/macros/${type}s`, fileName);\n    const response = await fetch(url, { method: \"GET\" });\n    data = await response.text();\n  } else if (fileExists && (!embedMacros || forceDDB)) {\n    data = `// Execute DDB Importer dynamic macro\\nreturn game.modules.get(\"ddb-importer\")?.api.executeDDBMacro(\"${type}\", \"${fileName}\", ...args);`;\n  } else if (!fileExists) {\n    data = \"// Unable to load the macro file\";\n  }\n  return data;\n}\n\nexport function generateItemMacroFlag(document, macroText) {\n  return {\n    macro: {\n      data: {\n        name: document.name,\n        type: \"script\",\n        scope: \"global\",\n        command: macroText,\n      },\n      options: {},\n      apps: {},\n      compendium: null,\n    },\n  };\n}\n\nexport function generateMacroChange(macroValues, priority = 20, local = false) {\n  const macroKey = local ? \"macro.itemMacro.local\" : \"macro.itemMacro\";\n  return {\n    key: macroKey,\n    value: macroValues,\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: priority,\n  };\n}\n\nexport async function createMacro({ name, content, img, isGM, isTemp }) {\n  const macroFolder = isTemp\n    ? undefined\n    : game.folders.find((folder) => folder.name === \"DDB Macros\" && folder.type === \"Macro\");\n\n  const data = {\n    \"name\": name,\n    \"type\": \"script\",\n    \"img\": img ? img : \"icons/svg/dice-target.svg\",\n    \"scope\": \"global\",\n    \"command\": content,\n    \"folder\": macroFolder ? macroFolder.id : undefined,\n    \"flags\": {\n      \"advanced-macros\": {\n        \"runAsGM\": isGM\n      },\n    }\n  };\n\n  const existingMacro = game.macros.find((m) => m.name == name);\n  if (existingMacro) data._id = existingMacro.id;\n  const macro = existingMacro\n    ? existingMacro.update(data)\n    : Macro.create(data, {\n      temporary: isTemp,\n      displaySheet: false,\n    });\n\n  return macro;\n\n}\n\nexport const MACROS = {\n  AA_ONLY: {\n    name: \"Active Aura Only (Generic)\",\n    type: \"generic\",\n    file: \"activeAuraConditionOnEntry.js\",\n    isGM: false,\n    img: null,\n    world: true,\n  },\n  AA_ON_ENTRY: {\n    name: \"Active Aura Damage and Condition On Entry (Generic)\",\n    type: \"generic\",\n    file: \"activeAuraDamageAndConditionOnEntry.js\",\n    isGM: false,\n    img: null,\n    world: true,\n  },\n  AA_CONDITION_ON_ENTRY: {\n    name: \"Active Aura Condition On Entry (Generic)\",\n    type: \"generic\",\n    file: \"activeAuraConditionOnEntry.js\",\n    isGM: false,\n    img: null,\n    world: true,\n  },\n  AA_DAMAGE_ON_ENTRY: {\n    name: \"Active Aura Damage On Entry (Generic)\",\n    type: \"generic\",\n    file: \"activeAuraDamageOnEntry.js\",\n    isGM: false,\n    img: null,\n    world: true,\n  },\n  DARKNESS_GM: {\n    name: \"Darkness (DDB - GM)\",\n    type: \"gm\",\n    file: \"darkness.js\",\n    isGM: true,\n    img: \"icons/magic/unholy/orb-glowing-yellow-purple.webp\",\n    world: true,\n  },\n  CHILL_TOUCH: {\n    name: \"Chill Touch (Target effect)\",\n    type: \"spell\",\n    file: \"chillTouchWorld.js\",\n    isGM: false,\n    img: \"icons/magic/fire/flame-burning-hand-purple.webp\",\n    world: true,\n  }\n};\n\nexport async function createGMMacros() {\n  if (game.user.isGM) {\n    await checkMacroFolder();\n\n    for (const macro of Object.values(MACROS).filter((m) => m.world)) {\n      // eslint-disable-next-line no-await-in-loop\n      const macroFile = await loadMacroFile(macro.type, macro.file, true);\n      if (macroFile) {\n        // eslint-disable-next-line no-await-in-loop\n        await createMacro({ name: macro.name, content: macroFile, img: macro.img, isGM: macro.isGM, isTemp: false });\n      }\n    }\n  }\n}\n\nexport async function executeDDBMacro(type, fileName, ...params) {\n  if (!fileName.endsWith(\".js\")) fileName = `${fileName}.js`;\n  const strippedName = fileName.split(\".js\")[0];\n  let macro = CONFIG.DDBI.MACROS[type]?.[strippedName];\n  if (!macro) {\n    const macroText = await loadMacroFile(type, fileName, true);\n    if (!macroText) {\n      ui.notifications.error(`Unable to load macro (${type}) ${fileName}`);\n      logger.warn(`Unable to load macro (${type}) ${fileName}`);\n      throw new Error(`Unable to load macro (${type}) ${fileName}`);\n    }\n\n    // eslint-disable-next-line require-atomic-updates\n    macro = await createMacro({ name: `${type} ${fileName}`, content: macroText, img: null, isGM: false, isTemp: true });\n    // eslint-disable-next-line require-atomic-updates\n    setProperty(CONFIG.DDBI.MACROS, `${type}.${strippedName}`, macro);\n    logger.debug(`Macro (${type}) ${fileName} loaded from file into cache`, macro);\n  }\n\n  logger.debug(`Calling (${type}) ${fileName} with params`, ...params);\n  return macro.execute(...params);\n}\n","import {\n  baseItemEffect,\n  generateMultiplyChange,\n} from \"../effects.js\";\n\nexport function bootsOfSpeedEffect(document) {\n  let effect = baseItemEffect(document, `${document.name}`);\n  effect.changes.push(generateMultiplyChange(2, 20, \"system.attributes.movement.walk\"));\n  effect.duration = {\n    startTime: null,\n    seconds: 600,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  effect.transfer = true;\n  effect.disabled = true;\n  effect.flags.dae.transfer = true;\n  effect.flags.dae.stackable = true;\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  document.system.activation.type = \"bonus\";\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function cloakOfDisplacementEffect(document) {\n  let effect = baseItemEffect(document, `${document.name} - Check`);\n  setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  const itemMacroText = await loadMacroFile(\"item\", \"cloakOfDisplacement.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects[0] = effect;\n\n  // setProperty(document.effects[0], \"flags.dae.specialDuration\", [\"isDamaged\"]);\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function javelinOfLightningEffect(document) {\n  let effect = baseItemEffect(document, `${document.name}: Used Effect Tracker`);\n  const itemMacroText = await loadMacroFile(\"item\", \"javelinOfLightning.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(`\"${document.name}\"`));\n  effect.transfer = false;\n  setProperty(effect, \"flags.dae.specialDuration\", [\"newDay\", \"longRest\"]);\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro,[postDamageRoll]ItemMacro,[preAttackRoll]ItemMacro\");\n\n  // setProperty(document.effects[0], \"flags.dae.specialDuration\", [\"isDamaged\"]);\n  document.system.uses = {\n    value: null,\n    max: \"\",\n    per: \"\",\n  };\n\n  return document;\n}\n","export function moonSickleEffect(document) {\n  document.effects[0].changes.push(\n    {\n      key: \"system.bonuses.heal.damage\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+ d4\",\n      priority: \"20\",\n    },\n  );\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function pearlOfPowerEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"item\", \"pearlOfPower.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(`\"${document.name}\"`));\n  effect.transfer = false;\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import {\n  baseItemEffect,\n  generateUpgradeChange,\n  generateAddChange,\n  generateCustomChange,\n  forceItemEffect,\n} from \"./effects.js\";\nimport { featEffectModules } from \"./specialFeats.js\";\n// load item effects\nimport { bootsOfSpeedEffect } from \"./items/bootsOfSpeed.js\";\nimport { cloakOfDisplacementEffect } from \"./items/cloakOfDisplacement.js\";\nimport { javelinOfLightningEffect } from \"./items/javelinOfLightning.js\";\nimport { moonSickleEffect } from \"./items/moonSickle.js\";\nimport { pearlOfPowerEffect } from \"./items/pearlOfPower.js\";\n\n\nexport async function midiItemEffects(document) {\n  if (!featEffectModules().hasCore) return document;\n  const name = document.flags.ddbimporter.originalName || document.name;\n  switch (name) {\n    case \"Cloak of Displacement\": {\n      document = await cloakOfDisplacementEffect(document);\n      break;\n    }\n    case \"Javelin of Lightning\":\n    case \"Tempus Javelin\": {\n      document = await javelinOfLightningEffect(document);\n      break;\n    }\n    case \"Pearl of Power\": {\n      document = await pearlOfPowerEffect(document);\n      break;\n    }\n    // no default\n  }\n\n  return forceItemEffect(document);\n}\n\n/**\n * This function is mainly for effects that can't be dynamically generated\n * @param {*} document\n */\nexport function equipmentEffectAdjustment(document) {\n  const name = document.flags.ddbimporter.originalName || document.name;\n  switch (name) {\n    case \"Armor of Invulnerability\": {\n      // this effect is 1/day, we have to add it\n      let effect = baseItemEffect(document, `${document.name} - Invulnerability`);\n      effect.changes.push(generateAddChange(\"physical\", 20, \"system.traits.di.value\"));\n      effect.duration = {\n        startTime: null,\n        seconds: 600,\n        rounds: null,\n        turns: null,\n        startRound: null,\n        startTurn: null,\n      };\n      effect.transfer = false;\n      effect.disabled = false;\n      effect.flags.dae.transfer = false;\n      effect.flags.dae.stackable = false;\n      document.system.uses = {\n        value: 1,\n        max: \"1\",\n        per: \"day\",\n      };\n      document.system.target = {\n        value: null,\n        width: null,\n        units: \"\",\n        type: \"self\",\n      };\n      document.system.range = {\n        value: null,\n        long: null,\n        units: \"self\",\n      };\n      document.effects.push(effect);\n      break;\n    }\n    case \"Bracers of Archery\": {\n      // +2 damage to longbows/shortbows translates to +2 ranged weapon damage\n      document.effects[0].changes.push({\n        key: \"system.bonuses.rwak.damage\",\n        value: \"+2\",\n        mode: 0,\n        priority: 20,\n      });\n      break;\n    }\n    case \"Demon Armor\": {\n      // Unarmed strikes bonus/weapons\n      document.effects[0].changes.push(\n        {\n          key: \"items.Unarmed Strike.system.attackBonus\",\n          value: \"1\",\n          mode: 2,\n          priority: 20,\n        },\n        {\n          key: \"items.Unarmed Strike.system.damage.parts.0.0\",\n          value: \"1d8+@mod+1\",\n          mode: 5,\n          priority: 20,\n        },\n        {\n          key: \"items.Unarmed Strike.system.properties.mgc\",\n          value: \"true\",\n          mode: 5,\n          priority: 20,\n        }\n      );\n      break;\n    }\n    case \"Belashyrra’s Beholder Crown\": {\n      let effect = baseItemEffect(document, `${document.name} - Constant Effects`);\n      effect.changes.push(generateUpgradeChange(120, 10, \"system.attributes.senses.darkvision\"));\n      document.effects.push(effect);\n      break;\n    }\n    case \"Boots of Speed\": {\n      document = bootsOfSpeedEffect(document);\n      break;\n    }\n    case \"Moon Sickle, +1\":\n    case \"Moon Sickle, +2\":\n    case \"Moon Sickle, +3\":\n    case \"Moon Sickle\": {\n      document = moonSickleEffect(document);\n      break;\n    }\n    case \"Spellguard Shield\": {\n      document.effects[0].changes.push(\n        generateCustomChange(1, 20, \"flags.midi-qol.grants.disadvantage.attack.msak\"),\n        generateCustomChange(1, 20, \"flags.midi-qol.grants.disadvantage.attack.rsak\")\n      );\n      break;\n    }\n    // no default\n  }\n\n  if (document.effects.length > 0 || hasProperty(document.flags, \"itemacro\")) {\n    setProperty(document, \"flags.ddbimporter.effectsApplied\", true);\n  }\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function ancestralProtectorsEffect(document) {\n  const itemMacroText = await loadMacroFile(\"feat\", \"ancestralProtectors.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.onUseMacroName\",\n    value: \"ItemMacro.Ancestral Protectors,postAttackRoll\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: \"20\",\n  });\n\n\n  effect.transfer = true;\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function arcaneWardEffect(document) {\n  let detectionEffect = baseItemEffect(document, `${document.name}: Spell Detection`);\n  const itemMacroText = await loadMacroFile(\"feat\", \"arcaneWard.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  detectionEffect.changes.push({\n    key: \"flags.midi-qol.onUseMacroName\",\n    value: `ItemMacro.${document.name}, preActiveEffects`,\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: \"20\",\n  });\n\n  document.effects.push(detectionEffect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function bardicInspirationEffect(document) {\n  document.system.damage.parts = [];\n  let inspiredEffect = baseItemEffect(document, \"Inspired\");\n\n  const diceString = \"@scale.bard.bardic-inspiration\";\n  inspiredEffect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.attack.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.save.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.check.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.skill.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"Bardic Inspiration\",\n      priority: \"20\",\n    }\n  );\n  inspiredEffect.transfer = false;\n  inspiredEffect.disabled = false;\n  setProperty(inspiredEffect, \"flags.dae.transfer\", false);\n  setProperty(inspiredEffect, \"flags.dae.stackable\", false);\n  setProperty(inspiredEffect, \"flags.dae.macroRepeat\", \"none\");\n  setProperty(inspiredEffect, \"flags.dae.specialDuration\", []);\n\n  if (document.flags.ddbimporter.subclass === \"College of Valor\") {\n    inspiredEffect.changes.push(\n      {\n        key: \"flags.midi-qol.optional.bardicInspiration.damage.all\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: diceString,\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.bardicInspiration.ac.all\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: diceString,\n        priority: \"20\",\n      }\n    );\n  }\n\n  document.effects.push(inspiredEffect);\n\n  setProperty(document, \"flags.midi-qol.effectActivation\", false);\n  return document;\n}\n\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function bladesongEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  setProperty(document, \"system.range\", { value: null, units: \"self\", long: null });\n  setProperty(document, \"system.range.value\", null);\n  setProperty(document, \"system.target.type\", \"self\");\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  effect.changes.push(\n    {\n      key: \"system.attributes.ac.bonus\",\n      value: \"max(@abilities.int.mod,1)\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.skill.acr\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.concentrationSaveBonus\",\n      value: \"max(@abilities.int.mod,1)\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"system.attributes.movement.walk\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"10\",\n      priority: \"20\",\n    },\n  );\n  effect.duration = {\n    startTime: null,\n    seconds: 60,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  document.effects.push(effect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function blessedHealerEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"feat\", \"blessedHealer.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  effect.changes.push({\n    key: \"flags.midi-qol.onUseMacroName\",\n    value: \"ItemMacro.Blessed Healer, postActiveEffects\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: \"20\",\n  });\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function blessedStrikesEffect(document) {\n  if (document.system.actionType === null) return document;\n  let effect = baseFeatEffect(document, document.name);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.blessedstrikes.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.name} Bonus Damage`,\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.blessedstrikes.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"each-round\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.blessedstrikes.damage.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.system.damage.parts[0][0]}`,\n      priority: \"5\",\n    },\n  );\n\n  document.system.damage.parts = [];\n  document.system.actionType = null;\n  effect.transfer = true;\n\n  document.effects.push(effect);\n  return document;\n}\n","export function cloudRuneEffect(document) {\n  // Missing: reaction effect to transfer attack\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function crossbowExpertEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.ignoreNearbyFoes\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  effect.transfer = true;\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function defensiveDuelistEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.ac.bonus\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"@system.attributes.prof\",\n      priority: \"20\",\n    },\n  );\n  setProperty(effect, \"duration.turns\", 1);\n  setProperty(effect, \"flags.dae.specialDuration\", [\"isAttacked\"]);\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  document.system.duration = {\n    value: null,\n    units: \"inst\",\n  };\n  document.system.actionType = null;\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function deflectMissilesEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.DR.rwak\",\n    value: \"[[1d10 + @mod + @classes.monk.levels]]\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 0,\n  });\n  effect.flags.dae.specialDuration = [\"1Reaction\"];\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  setProperty(document, \"system.activation.type\", \"reactiondamage\");\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function favoredFoeEffect(document) {\n  let effect = baseFeatEffect(document, `Marked by ${document.name}`);\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateSource\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: document.name,\n      priority: 20,\n    },\n  );\n  effect.transfer = false;\n  effect.duration.seconds = 60;\n  document.effects.push(effect);\n\n  let damageBonusEffect = baseFeatEffect(document, document.name);\n  damageBonusEffect.changes.push({\n    key: \"flags.dnd5e.DamageBonusMacro\",\n    value: \"ItemMacro\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 20,\n  });\n  damageBonusEffect.transfer = true;\n\n  setProperty(damageBonusEffect, \"flags.dae.transfer\", true);\n  document.effects.push(damageBonusEffect);\n\n  const itemMacroText = await loadMacroFile(\"feat\", \"favoredFoe.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n\n  setProperty(document, \"system.actionType\", \"util\");\n  document.system.damage.parts = [];\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"\",\n  };\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function fightingStyleInterceptionEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.DR.rwak\",\n      mode: 0,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.DR.mwak\",\n      mode: 2,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.DR.msak\",\n      mode: 2,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.DR.rsak\",\n      mode: 2,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    }\n  );\n  setProperty(effect, \"duration.turns\", 1);\n  setProperty(effect, \"flags.dae.specialDuration\", [\"isDamaged\"]);\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.damage.parts = [];\n  document.system.duration = {\n    value: null,\n    units: \"inst\",\n  };\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateStatusEffectChange } from \"../effects.js\";\n\nexport function fireRuneEffect(document) {\n  setProperty(document, \"system.range.units\", \"\");\n  setProperty(document, \"system.target.value\", 1);\n  setProperty(document, \"system.target.type\", \"creature\");\n\n  let baseEffect = baseFeatEffect(document, document.name);\n  setProperty(baseEffect, \"duration.seconds\", 60);\n\n  baseEffect.changes.push(generateStatusEffectChange(\"Restrained\", 20, true));\n  baseEffect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `label=${document.name} (Start of Turn Damage),turn=start,savingThrow=false,damageRoll=${document.system.damage.parts[0][0]}, damageType=${document.system.damage.parts[0][1]}`,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `label=${document.name} (End of Turn Save),turn=end,saveDC=@attributes.spelldc,saveAbility=${document.system.save.ability},savingThrow=true,saveMagic=true,saveRemove=true`,\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(baseEffect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function fontOfMagicEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"feat\", \"fontOfMagic.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preItemRoll]ItemMacro\");\n\n  document.effects.push(effect);\n  document.system.activation.type = \"bonus\";\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function frostRuneEffect(document) {\n  setProperty(document, \"system.target.type\", \"self\");\n  setProperty(document, \"system.range.units\", \"self\");\n  setProperty(document, \"system.range.value\", \"\");\n  setProperty(document, \"system.actionType\", null);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Sturdiness)`);\n  bonusEffect.changes.push(\n    {\n      key: \"system.abilities.con.bonuses.check\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.abilities.con.bonuses.save\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.abilities.str.bonuses.check\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.abilities.str.bonuses.save\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n  );\n  setProperty(bonusEffect, \"duration.seconds\", 600);\n  document.effects.push(bonusEffect);\n\n  return document;\n}\n","import { baseFeatEffect, featEffectModules } from \"../specialFeats.js\";\nimport { generateATLChange } from \"../effects.js\";\n\nexport function giantsMightEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n\n  if (featEffectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.width\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 2, 5));\n    effect.changes.push(generateATLChange(\"ATL.height\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 2, 5));\n  }\n\n  effect.changes.push({\n    key: \"flags.midi-qol.advantage.ability.save.str\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"5\",\n  },\n  {\n    key: \"flags.midi-qol.advantage.ability.check.str\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"5\",\n  },\n  {\n    key: \"flags.midi-qol.optional.giantsmight.label\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"Giant's Might Bonus Damage\",\n    priority: \"5\",\n  },\n  {\n    key: \"flags.midi-qol.optional.giantsmight.count\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"each-round\",\n    priority: \"5\",\n  },\n  {\n    key: \"flags.midi-qol.optional.giantsmight.damage.all\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: `${document.system.damage.parts[0][0]}`,\n    priority: \"5\",\n  });\n\n  document.system.damage.parts = [];\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function heavyArmorMasterEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.DR.non-magical\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"3\",\n      priority: \"20\",\n    },\n  );\n  effect.transfer = true;\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function hillRuneEffect(document) {\n  setProperty(document, \"system.target.type\", \"self\");\n  setProperty(document, \"system.range.units\", \"self\");\n  setProperty(document, \"system.range.value\", \"\");\n  setProperty(document, \"system.actionType\", null);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Temporary)`);\n  bonusEffect.changes.push(\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"bludgeoning\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"slashing\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"piercing\",\n      priority: \"20\",\n    },\n  );\n  setProperty(bonusEffect, \"duration.seconds\", 60);\n\n  document.effects.push(bonusEffect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function indomitableEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.Indomitable.save.fail\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"reroll\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.Indomitable.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"ItemUses.Indomitable\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.Indomitable.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Use Indomitable to Succeed?\",\n      priority: \"20\",\n    }\n  );\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateStatusEffectChange } from \"../effects.js\";\n\nexport function kiEmptyBodyEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.traits.dr.all\", value: \"\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.traits.dv.value\", value: \"force\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    generateStatusEffectChange(\"invisible\"),\n  );\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.duration = { value: 1, units: \"min\" };\n  document.system.actionType = null;\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateStatusEffectChange } from \"../effects.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\nimport logger from \"../../logger.js\";\n\n// eslint-disable-next-line complexity\nexport async function maneuversEffect(ddb, character, document) {\n  const fighterClass = ddb.character.classes.find((klass) => klass.definition.name === \"Fighter\");\n  if (!fighterClass) return document;\n  const combatSuperiority = fighterClass.classFeatures.find((feat) => feat.definition.name === \"Combat Superiority\");\n  if (!combatSuperiority) return document;\n  const diceString = \"@scale.battle-master.combat-superiority-die\";\n\n  logger.debug(`Generating effect for ${document.name}`);\n\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n  const ability = characterAbilities.str?.value > characterAbilities.dex?.value ? \"str\" : \"dex\";\n\n  const name = document.flags.ddbimporter.originalName || document.name;\n  let effect = baseFeatEffect(document, document.name);\n  setProperty(document, \"system.range.units\", \"\");\n  setProperty(document, \"system.range.value\", null);\n  setProperty(document, \"system.target.type\", \"self\");\n\n  // special durations\n  switch (name) {\n    case \"Maneuvers: Rally\": {\n      setProperty(effect, \"duration.seconds\", 86400);\n      setProperty(effect, \"flags.dae.specialDuration\", [\"longRest\"]);\n      break;\n    }\n    case \"Maneuvers: Brace\":\n    case \"Maneuvers: Riposte\": {\n      setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:mwak\"]);\n      setProperty(effect, \"duration.turns\", 2);\n      break;\n    }\n    case \"Maneuvers: Lunging Attack\":\n    case \"Maneuvers: Sweeping Attack\": {\n      setProperty(effect, \"duration.turns\", 1);\n      setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:mwak\"]);\n      break;\n    }\n    case \"Maneuvers: Quick Toss\": {\n      setProperty(effect, \"duration.turns\", 1);\n      setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:rwak\"]);\n      break;\n    }\n    case \"Maneuvers: Tactical Assessment\": {\n      setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.inv\", \"isSkill.his\", \"isSkill.ins\"]);\n      break;\n    }\n    case \"Maneuvers: Commanding Presence\": {\n      setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.itm\", \"isSkill.per\", \"isSkill.prf\"]);\n      break;\n    }\n    case \"Maneuvers: Ambush\": {\n      setProperty(effect, \"duration.turns\", 1);\n      setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.ste\"]);\n      break;\n    }\n    case \"Maneuvers: Distracting Strike\": {\n      setProperty(effect, \"flags.dae.specialDuration\", [\"isAttacked\", \"turnStartSource\"]);\n      break;\n    }\n    case \"Maneuvers: Bait and Switch\": {\n      setProperty(effect, \"flags.dae.specialDuration\", [\"turnStartSource\"]);\n      break;\n    }\n    case \"Maneuvers: Feinting Attack\": {\n      setProperty(effect, \"duration.turns\", 1);\n      setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack\"]);\n      break;\n    }\n    case \"Maneuvers: Trip Attack\": {\n      setProperty(document, \"system.duration.units\", \"inst\");\n      break;\n    }\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Goading Attack\": {\n      setProperty(effect, \"flags.dae.specialDuration\", [\"turnEndSource\"]);\n      break;\n    }\n    case \"Maneuvers: Grappling Strike\": {\n      setProperty(effect, \"duration.turns\", 1);\n      setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.ath\"]);\n      break;\n    }\n    case \"Maneuvers: Parry\": {\n      setProperty(document, \"system.duration.units\", \"inst\");\n      setProperty(effect, \"flags.dae.specialDuration\", [\"isDamaged\"]);\n      break;\n    }\n    // no default\n  }\n\n  const damageEffect = {\n    \"key\": \"system.bonuses.mwak.damage\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n    \"value\": `+ ${diceString}`,\n    \"priority\": \"20\"\n  };\n  // damage effect\n  switch (name) {\n    case \"Maneuvers: Riposte\":\n    case \"Maneuvers: Brace\": {\n      // manual reaction types\n      setProperty(document, \"system.activation.type\", \"reactionmanual\");\n      effect.changes.push(damageEffect);\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Quick Toss\":\n    case \"Maneuvers: Lunging Attack\":\n    case \"Maneuvers: Feinting Attack\": {\n      effect.changes.push(damageEffect);\n      document.effects.push(effect);\n      break;\n    }\n    // no default\n  }\n\n  const rangedDamageEffect = {\n    \"key\": \"system.bonuses.rwak.damage\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n    \"value\": `+ ${diceString}`,\n    \"priority\": \"20\"\n  };\n  // damage effect\n  switch (name) {\n    case \"Maneuvers: Commander’s Strike\":\n    case \"Maneuvers: Commander's Strike\": {\n      effect.changes.push(damageEffect);\n      effect.changes.push(rangedDamageEffect);\n      document.effects.push(effect);\n      break;\n    }\n    // no default\n  }\n\n  // other effects\n  switch (name) {\n    // advantage effect\n    case \"Maneuvers: Distracting Strike\":\n    case \"Maneuvers: Feinting Attack\": {\n      effect.changes.push(\n        {\n          \"key\": \"flags.midi-qol.advantage.attack.all\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": \"1\",\n          \"priority\": \"20\"\n        }\n      );\n      document.effects.push(effect);\n      break;\n    }\n    // skill bonus\n    case \"Maneuvers: Commanding Presence\": {\n      [\"per\", \"itm\", \"prf\"].forEach((skill) => {\n        effect.changes.push(\n          {\n            \"key\": `system.skills.${skill}.value`,\n            \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n            \"value\": `+ ${diceString}`,\n            \"priority\": \"20\"\n          }\n        );\n      });\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Tactical Assessment\": {\n      [\"inv\", \"his\", \"ins\"].forEach((skill) => {\n        effect.changes.push(\n          {\n            \"key\": `system.skills.${skill}.value`,\n            \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n            \"value\": `+ ${diceString}`,\n            \"priority\": \"20\"\n          }\n        );\n      });\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Ambush\": {\n      effect.changes.push(\n        {\n          \"key\": \"system.skills.ste.value\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        },\n        {\n          \"key\": \"system.attributes.init.bonus\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        }\n      );\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Evasive Footwork\":\n    case \"Maneuvers: Bait and Switch\": {\n      effect.changes.push(\n        {\n          \"key\": \"system.attributes.ac.bonus\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        }\n      );\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Grappling Strike\": {\n      effect.changes.push(\n        {\n          \"key\": \"system.skills.ath.value\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        },\n      );\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Menacing Attack\": {\n      effect.changes.push(generateStatusEffectChange(\"Frightened\"));\n      break;\n    }\n    case \"Maneuvers: Trip Attack\": {\n      effect.changes.push(generateStatusEffectChange(\"Prone\"));\n      break;\n    }\n    case \"Maneuvers: Parry\": {\n      setProperty(document, \"system.activation.type\", \"reactiondamage\");\n      effect.changes.push(\n        {\n          \"key\": \"flags.midi-qol.DR.all\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": \"1\",\n          \"priority\": \"20\"\n        }\n      );\n      break;\n    }\n    case \"Maneuvers: Rally\": {\n      const itemMacroText = await loadMacroFile(\"feat\", \"maneuversRally.js\");\n      document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n      effect.changes.push(generateMacroChange(`${diceString} @abilities.cha.mod`, 20));\n      document.effects.push(effect);\n      break;\n    }\n    // no default\n  }\n  // flags.dnd5e.initiativeAdv\n\n  // set target\n  switch (name) {\n    case \"Maneuvers: Trip Attack\":\n    case \"Maneuvers: Maneuvering Attack\":\n    case \"Maneuvers: Goading Attack\":\n    case \"Maneuvers: Distracting Strike\":\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Sweeping Attack\":\n    case \"Maneuvers: Disarming Attack\":\n    case \"Maneuvers: Pushing Attack\":\n    case \"Maneuvers: Rally\":\n    case \"Maneuvers: Bait and Switch\":\n    case \"Maneuvers: Commander’s Strike\":\n    case \"Maneuvers: Commander's Strike\": {\n      setProperty(document, \"system.target.value\", 1);\n      setProperty(document, \"system.target.type\", \"creature\");\n      break;\n    }\n    // no default\n  }\n\n  // set regular damage\n  switch (name) {\n    case \"Maneuvers: Parry\":\n    case \"Maneuvers: Trip Attack\":\n    case \"Maneuvers: Maneuvering Attack\":\n    case \"Maneuvers: Goading Attack\":\n    case \"Maneuvers: Distracting Strike\":\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Sweeping Attack\":\n    case \"Maneuvers: Disarming Attack\":\n    case \"Maneuvers: Pushing Attack\": {\n      setProperty(document, \"system.damage.parts\", [[diceString]]);\n      break;\n    }\n    // no default\n  }\n\n  switch (name) {\n    case \"Maneuvers: Precision Attack\": {\n      setProperty(document, \"system.damage.parts\", [[diceString, \"midi-none\"]]);\n      break;\n    }\n    // no default\n  }\n\n  // saves\n  switch (name) {\n    case \"Maneuvers: Trip Attack\":\n    case \"Maneuvers: Disarming Attack\":\n    case \"Maneuvers: Pushing Attack\": {\n      setProperty(effect, \"flags.midiProperties.fulldam\", true);\n      setProperty(document, \"system.damage.parts\", [[diceString]]);\n      setProperty(document, \"system.save\", { ability: \"str\", dc: null, \"scaling\": ability });\n      break;\n    }\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Goading Attack\": {\n      setProperty(effect, \"flags.midiProperties.fulldam\", true);\n      setProperty(document, \"system.damage.parts\", [[diceString]]);\n      setProperty(document, \"system.save\", { ability: \"wis\", dc: null, \"scaling\": ability });\n      break;\n    }\n    // no default\n  }\n\n  return document;\n}\n\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function momentaryStasis(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Incapacitated\"));\n  setProperty(effect, \"flags.dae.specialDuration\", [\"isDamaged\", \"turnEndSource\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","export function paladinDefaultAuraEffect(document) {\n  document.effects.forEach((effect) => {\n    if (effect.label.includes(\"Constant Effects\")) {\n      const distance = document.flags.ddbimporter?.dndbeyond?.levelScale?.fixedValue ?? 10;\n      effect.flags.ActiveAuras = {\n        aura: \"Allies\",\n        radius: distance,\n        isAura: true,\n        inactive: false,\n        hidden: false,\n        displayTemp: true,\n      };\n      setProperty(effect, \"flags.core.statusId\", \"1\");\n      setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n    }\n  });\n  return document;\n}\n\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nasync function commonPiercer(document) {\n  const itemMacroText = await loadMacroFile(\"feat\", \"piercer.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  return document;\n};\n\nexport async function piercerCriticalEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  effect.transfer = true;\n\n  setProperty(effect, \"flags.dae.transfer\", true);\n  document.effects.push(effect);\n\n  await commonPiercer(document);\n\n  return document;\n}\n\n\nexport async function piercerRerollEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.onUseMacroName\",\n      value: `ItemMacro.${document.name},postDamageRoll`,\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  effect.transfer = true;\n\n  setProperty(effect, \"flags.dae.transfer\", true);\n  document.effects.push(effect);\n\n  await commonPiercer(document);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function planarWarriorEffect(document) {\n  const itemMacroText = await loadMacroFile(\"feat\", \"planarWarrior.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseFeatEffect(document, \"Marked by Planar Warrior\");\n\n  setProperty(effect, \"duration.turns\", 1);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preItemRoll]ItemMacro,[preActiveEffects]ItemMacro\");\n\n  document.effects.push(effect);\n\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.range = {\n    value: 30,\n    long: null,\n    units: \"ft\",\n  };\n  document.system.damage = {\n    parts: [],\n    versatile: \"\",\n    value: \"\",\n  };\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function potentCantripEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.midi-qol.potentCantrip\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 20 },\n  );\n  document.effects.push(effect);\n  return document;\n}\n\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function radiantSoulEffect(document) {\n\n  if (document.flags.ddbimporter.type == \"race\") {\n    let effect = baseFeatEffect(document, document.name);\n\n    effect.changes.push(\n      {\n        key: \"data.attributes.movement.fly\",\n        mode: 4,\n        value: \"30\",\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.radiantsoul.label\",\n        mode: 0,\n        value: `${document.name} Bonus Damage`,\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.radiantsoul.count\",\n        mode: 0,\n        value: \"each-round\",\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.radiantsoul.damage.all\",\n        mode: 0,\n        value: document.name === \"Celestial Revelation (Radiant Soul)\" ? \"+@prof[radiant]\" : \"+@details.level[radiant]\",\n        priority: \"20\",\n      }\n    );\n    effect.duration = {\n      startTime: null,\n      seconds: null,\n      rounds: 10,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    };\n\n    document.effects.push(effect);\n\n    document.system[\"target\"][\"type\"] = \"self\";\n    document.system.range = { value: null, units: \"self\", long: null };\n    document.system.actionType = \"other\";\n\n  } else if (document.flags.ddbimporter.type == \"class\") {\n    let effect = baseFeatEffect(document, document.name);\n    effect.changes.push(\n      {\n        key: \"flags.dnd5e.DamageBonusMacro\",\n        value: `ItemMacro.${document.name}`,\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        priority: \"20\",\n      },\n    );\n    effect.transfer = true;\n\n    const itemMacroText = await loadMacroFile(\"feat\", \"radiantSoul.js\");\n    document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n    setProperty(document, \"system.activation.type\", \"special\");\n\n    document.effects.push(effect);\n  }\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function rageEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  const useScale = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue\");\n  const extraDamage = useScale\n    ? \"@scale.barbarian.rage\"\n    : document.flags?.ddbimporter?.dndbeyond?.levelScale?.fixedValue\n      ? document.flags.ddbimporter.dndbeyond.levelScale.fixedValue\n      : 2;\n  effect.changes.push(\n    {\n      key: \"system.bonuses.mwak.damage\",\n      value: `${extraDamage}`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"piercing\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"slashing\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"bludgeoning\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.save.str\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.check.str\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    }\n  );\n  effect.duration = {\n    startTime: null,\n    seconds: 60,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  document.system.damage = {\n    parts: [],\n    versatile: \"\",\n    value: \"\",\n  };\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function recklessAttackEffect(document) {\n  let attackEffect = baseFeatEffect(document, `${document.name} (Attack)`);\n\n  attackEffect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.attack.str\",\n      value: `1`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n  );\n  attackEffect.duration = {\n    startTime: null,\n    seconds: null,\n    rounds: 1,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n\n  document.effects.push(attackEffect);\n\n  let defenseEffect = baseFeatEffect(document, `${document.name} (Defense)`);\n\n  defenseEffect.changes.push(\n    {\n      key: \"flags.midi-qol.grants.advantage.attack.all\",\n      value: `1`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n  );\n  setProperty(defenseEffect, \"flags.dae.specialDuration\", [\"turnStartSource\"]);\n  setProperty(defenseEffect, \"flags.core.statusId\", \"Reckless\");\n\n  document.effects.push(defenseEffect);\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = null;\n  document.system.activation = { type: \"none\", cost: null, condition: \"\" };\n\n  return document;\n}\n","import { baseFeatEffect, featEffectModules } from \"../specialFeats.js\";\nimport { generateATLChange } from \"../effects.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function runeCarverEffect(document) {\n\n  let baseEffect = baseFeatEffect(document, document.name);\n  baseEffect.transfer = true;\n\n  switch (document.name) {\n    case \"Rune Carver: Cloud Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.dec\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n        {\n          key: \"flags.midi-qol.advantage.skill.slt\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n      );\n      break;\n    }\n    case \"Rune Carver: Fire Rune\": {\n      // Missing: prof bonus expertise for tool\n      break;\n    }\n    case \"Rune Carver: Frost Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.ani\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n        {\n          key: \"flags.midi-qol.advantage.skill.itm\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n      );\n      break;\n    }\n    case \"Rune Carver: Stone Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.ins\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n        {\n          key: \"system.attributes.senses.darkvision\",\n          value: \"120\",\n          mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n          priority: 20,\n        },\n      );\n      if (featEffectModules().atlInstalled) {\n        baseEffect.changes.push(generateATLChange(\"ATL.dimSight\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 120, 5));\n      } else {\n        const itemMacroText = await loadMacroFile(\"spell\", \"darkvision.js\");\n        document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n        baseEffect.changes.push(generateMacroChange(\"\"));\n      }\n      break;\n    }\n    case \"Rune Carver: Hill Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"system.traits.dr.value\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"poison\",\n          priority: \"20\",\n        },\n      );\n      // Missing : advantage of saving throws against being poisoned\n      break;\n    }\n    case \"Rune Carver: Storm Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.arc\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n      );\n      // Missing : can't be surprised\n\n      break;\n    }\n    // no default\n  }\n\n  if (baseEffect.changes.length > 0) {\n    setProperty(document, \"system.target.type\", \"self\");\n    setProperty(document, \"system.range.units\", \"self\");\n    setProperty(document, \"system.range.value\", \"\");\n    setProperty(document, \"system.actionType\", null);\n    document.effects.push(baseEffect);\n  }\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\nimport { generateATLChange } from \"../effects.js\";\n\nexport async function sacredWeaponEffect(document) {\n  if (document.system.actionType === null) return document;\n  let effect = baseFeatEffect(document, document.name);\n\n  const itemMacroText = await loadMacroFile(\"feat\", \"sacredWeapon.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@abilities.cha.mod\", 0));\n\n  // effect.changes.push(\n  //   {\n  //     key: \"system.bonuses.weapon.attack\",\n  //     mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  //     value: \"+ @abilities.cha.mod\",\n  //     priority: \"20\",\n  //   },\n  // );\n\n  if (CONFIG.DDBI.EFFECT_CONFIG.FEATS.installedModules.atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.dimLight\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '5'));\n    effect.changes.push(generateATLChange(\"ATL.lightColor\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '#ffffff'));\n    effect.changes.push(generateATLChange(\"ATL.lightAlpha\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '0.25'));\n    const lightAnimation = '{\"type\": \"sunburst\", \"speed\": 2,\"intensity\": 4}';\n    effect.changes.push(generateATLChange(\"ATL.lightAnimation\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, lightAnimation));\n  }\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  setProperty(effect, \"duration.turns\", 10);\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function savageAttackerEffect(document) {\n  if (document.system.actionType === null) return document;\n  let effect = baseFeatEffect(document, document.name);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.savageAttacker.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.name} - Weapon Damage Reroll`,\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.savageAttacker.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"turn\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.savageAttacker.damage.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"reroll-kh\",\n      priority: \"5\",\n    },\n  );\n\n  effect.transfer = true;\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function sculptSpellsEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.midi-qol.sculptSpell\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 10 },\n  );\n  document.effects.push(effect);\n  return document;\n}\n\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function sharpShooterEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name} - Range Adjustment`);\n\n  effect.changes.push(\n    // changes range\n    {\n      key: \"flags.midi-qol.sharpShooter\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 30,\n    },\n    {\n      key: \"flags.dnd5e.helpersIgnoreCover\",\n      value: \"2\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 30,\n    },\n  );\n\n  effect.transfer = true;\n  // effect.flags.dae.selfTarget = true;\n  effect.flags.dae.transfer = true;\n  // setProperty(effect, \"flags.core.statusId\", true);\n\n  document.effects.push(effect);\n  document.system.activation = {\n    \"type\": \"none\",\n    \"cost\": 1,\n    \"condition\": \"\"\n  };\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = \"other\";\n\n  const midiFlags = {\n    \"effectActivation\": false,\n    \"forceCEOff\": false,\n    \"forceCEOn\": true\n  };\n\n  setProperty(document, \"flags.midi-qol\", midiFlags);\n\n  const midiProperties = {\n    \"toggleEffect\": true,\n  };\n\n  setProperty(document, \"flags.midiProperties\", midiProperties);\n\n  return document;\n}\n","import parseTemplateString from \"../../lib/DDBTemplateStrings.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function shiftEffect(ddb, character, document) {\n  const isBeasthide = ddb.character.options.race.find((trait) => trait.definition.name === \"Beasthide\");\n  const isSwiftstride = ddb.character.options.race.find((trait) => trait.definition.name === \"Swiftstride\");\n  const isWildhunt = ddb.character.options.race.find((trait) => trait.definition.name === \"Wildhunt\");\n  const isLongtooth = ddb.character.options.race.find((trait) => trait.definition.name === \"Longtooth\");\n\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  if (isBeasthide) {\n    document.system.damage.parts[0][0] = `1d6 + ${document.system.damage.parts[0][0]}`;\n    effect.changes.push(\n      {\n        key: \"system.attributes.ac.bonus\",\n        value: \"+ 1\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        priority: 20,\n      },\n    );\n    setProperty(effect, \"flags.dae.selfTarget\", true);\n    setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n    const description = parseTemplateString(ddb, character, isBeasthide.definition.description, isBeasthide.definition).text;\n    document.system.description.value += `<h2>Beasthide</h2>\\n${description}`;\n    document.effects.push(effect);\n  } else if (isSwiftstride) {\n    effect.changes.push(\n      {\n        key: \"system.attributes.movement.walk\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"+ 10\",\n        priority: \"20\",\n      },\n    );\n    setProperty(effect, \"flags.dae.selfTarget\", true);\n    setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n    const description = parseTemplateString(ddb, character, isSwiftstride.definition.description, isSwiftstride.definition).text;\n    document.system.description.value += `<h2>Swiftstride</h2>\\n${description}`;\n    document.effects.push(effect);\n  } else if (isWildhunt) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.advantage.ability.check.wis\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"1\",\n        priority: \"20\",\n      },\n    );\n    setProperty(effect, \"flags.dae.selfTarget\", true);\n    setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n    const description = parseTemplateString(ddb, character, isWildhunt.definition.description, isWildhunt.definition).text;\n    document.system.description.value += `<h2>Wildhunt</h2>\\n${description}`;\n    document.effects.push(effect);\n  } else if (isLongtooth) {\n    const description = parseTemplateString(ddb, character, isLongtooth.definition.description, isLongtooth.definition).text;\n    document.system.description.value += `<h2>Longtooth</h2>\\n${description}`;\n  }\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function slayersPreyEffect(document) {\n  let effect = baseFeatEffect(document, `Marked by ${document.name}`);\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateSource\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: document.name,\n      priority: 20,\n    },\n  );\n  effect.transfer = false;\n  effect.duration.seconds = 60;\n  document.effects.push(effect);\n\n  let damageBonusEffect = baseFeatEffect(document, document.name);\n  damageBonusEffect.changes.push({\n    key: \"flags.dnd5e.DamageBonusMacro\",\n    value: \"ItemMacro\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 20,\n  });\n  damageBonusEffect.transfer = true;\n\n  setProperty(damageBonusEffect, \"flags.dae.transfer\", true);\n  document.effects.push(damageBonusEffect);\n\n  const itemMacroText = await loadMacroFile(\"feat\", \"slayersPrey.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n\n  setProperty(document, \"system.actionType\", \"util\");\n  document.system.damage.parts = [];\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"\",\n  };\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function steadyAimEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.attack.all\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 30,\n    },\n  );\n  effect.flags.dae.specialDuration = [\"1Attack\"];\n  setProperty(effect, \"duration.turns\", 1);\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = null;\n  document.system.duration = {\n    value: 1,\n    units: \"turn\",\n  };\n  document.effects.push(effect);\n\n  let moveEffect = baseFeatEffect(document, `${document.name} Movement Restriction`);\n  moveEffect.changes.push(\n    {\n      key: 'data.attributes.movement.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '0',\n      priority: \"40\",\n    },\n  );\n  moveEffect.flags.dae.specialDuration = [\"turnStartSource\"];\n  setProperty(moveEffect, \"duration.turns\", 1);\n  document.effects.push(moveEffect);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateStatusEffectChange } from \"../effects.js\";\n\nexport function stoneRuneEffect(document) {\n  setProperty(document, \"system.target.value\", 1);\n  setProperty(document, \"system.target.type\", \"creature\");\n  setProperty(document, \"system.range.units\", \"ft\");\n  setProperty(document, \"system.range.value\", 30);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Charm Effect)`);\n  setProperty(bonusEffect, \"flags.core.statusId\", `${document.name} (Charm Effect)`);\n  setProperty(bonusEffect, \"duration.seconds\", 60);\n  bonusEffect.changes.push(generateStatusEffectChange(\"Charmed\", 20, true));\n  bonusEffect.changes.push(generateStatusEffectChange(\"Incapacitated\", 20, true));\n  bonusEffect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `label=${document.name} (End of Turn Save),turn=end,saveDC=@attributes.spelldc,saveAbility=${document.system.save.ability},savingThrow=true,saveMagic=true,saveRemove=true`,\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(bonusEffect);\n\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function stonesEnduranceEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.DR.all\",\n    value: \"[[1d10 + @abilities.con.mod]]\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  effect.flags.dae.specialDuration = [\"1Reaction\"];\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  setProperty(document, \"system.activation.type\", \"reactiondamage\");\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.damage.parts = [];\n  document.system.ability = null;\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function stormRuneEffect(document) {\n\n  let baseEffect = baseFeatEffect(document, document.name);\n  setProperty(document, \"system.target.type\", \"self\");\n  setProperty(document, \"system.range.units\", \"self\");\n  setProperty(document, \"system.range.value\", \"\");\n  setProperty(document, \"system.actionType\", null);\n\n  document.effects.push(baseEffect);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Prophetic State)`);\n  setProperty(bonusEffect, \"duration.seconds\", 60);\n  setProperty(bonusEffect, \"flags.core.statusId\", \"Prophetic State\");\n\n  // Missing effect for Prophetic State to enforce adv or disvantage\n\n  document.effects.push(bonusEffect);\n\n\n  return document;\n}\n","export function unarmoredMovementEffect(document) {\n  document.effects.forEach((effect) => {\n    if (effect.label.includes(\"Constant Effects\")) {\n      effect.changes = [\n        {\n          key: \"system.attributes.movement.walk\",\n          value: \"max(10+(ceil(((@classes.monk.levels)-5)/4))*5,10)\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          priority: 20,\n        },\n      ];\n    }\n  });\n  return document;\n}\n\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function uncannyDodgeEffect(document) {\n  let effect = baseFeatEffect(document, \"1/2 Damage\");\n  effect.changes.push({\n    key: \"flags.midi-qol.uncanny-dodge\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 10,\n  });\n  effect.flags.dae.specialDuration = [\"1Reaction\"];\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = null;\n  document.system.activation.type = \"reactiondamage\";\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function vigilantBlessingEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.dnd5e.initiativeAdv\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 30,\n  });\n  effect.flags.dae.specialDuration = [\"Initiative\"];\n  document.system[\"target\"][\"type\"] = \"creature\";\n  document.system.actionType = null;\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function visageOfTheAstralSelfEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.skill.itm\",\n      value: `1`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.skill.ins\",\n      value: `1`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"ATL.sight.visionMode\",\n      value: `basic`,\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      priority: 20,\n    },\n    {\n      key: \"ATL.sight.range\",\n      value: `120`,\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      priority: 20,\n    },\n  );\n  effect.duration = {\n    startTime: null,\n    seconds: 360,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  document.effects.push(effect);\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = null;\n  document.system.duration = {\n    value: 10,\n    units: \"minute\",\n  };\n\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function warCasterEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.midi-qol.advantage.concentration\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 10 },\n  );\n  document.effects.push(effect);\n  return document;\n}\n\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function crusherEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  effect.transfer = true;\n\n  setProperty(effect, \"flags.dae.transfer\", true);\n  document.effects.push(effect);\n\n  const itemMacroText = await loadMacroFile(\"feat\", \"crusher.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  document.system.actionType = null;\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function crusherCriticalEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  effect.transfer = true;\n\n  setProperty(effect, \"flags.dae.transfer\", true);\n  document.effects.push(effect);\n\n  const itemMacroText = await loadMacroFile(\"feat\", \"crusherCritical.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  document.system.actionType = null;\n\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function slasherReduceSpeedEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  effect.transfer = true;\n\n  setProperty(effect, \"flags.dae.transfer\", true);\n  document.effects.push(effect);\n\n  const itemMacroText = await loadMacroFile(\"feat\", \"slasherReduceSpeed.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  document.system.actionType = null;\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function slasherCriticalEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  effect.transfer = true;\n\n  setProperty(effect, \"flags.dae.transfer\", true);\n  document.effects.push(effect);\n\n  const itemMacroText = await loadMacroFile(\"feat\", \"slasherCritical.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  document.system.actionType = null;\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport { loadMacroFile, generateItemMacroFlag, generateMacroChange } from \"../macros.js\";\n\nexport async function squireOfSolamniaEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"feat\", \"squireOfSolamnia.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(`\"${document.name}\"`));\n  effect.transfer = false;\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.attack.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.advantage.attack.rwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    }\n  );\n  setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack\"]);\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  document.system.damage.parts = [];\n  document.system.actionType = null;\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag, generateMacroChange } from \"../macros.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport async function arcaneRecoveryEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"feat\", \"arcaneRecovery.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n  document.system.actionType = \"\";\n\n  return document;\n}\n","import { configureDependencies } from \"./macros.js\";\nimport { forceItemEffect } from \"./effects.js\";\n\n// effect loads\nimport { ancestralProtectorsEffect } from \"./feats/ancestralProtectors.js\";\nimport { arcaneWardEffect } from \"./feats/arcaneWard.js\";\nimport { bardicInspirationEffect } from \"./feats/bardicInspiration.js\";\nimport { bladesongEffect } from \"./feats/bladesong.js\";\nimport { blessedHealerEffect } from \"./feats/blessedHealer.js\";\nimport { blessedStrikesEffect } from \"./feats/blessedStrikes.js\";\nimport { cloudRuneEffect } from \"./feats/cloudRune.js\";\nimport { crossbowExpertEffect } from \"./feats/crossbowExpert.js\";\nimport { defensiveDuelistEffect } from \"./feats/defensiveDuelist.js\";\nimport { deflectMissilesEffect } from \"./feats/deflectMissiles.js\";\nimport { favoredFoeEffect } from \"./feats/favoredFoe.js\";\nimport { fightingStyleInterceptionEffect } from \"./feats/fightingStyles.js\";\nimport { fireRuneEffect } from \"./feats/fireRune.js\";\nimport { fontOfMagicEffect } from \"./feats/fontOfMagic.js\";\nimport { frostRuneEffect } from \"./feats/frostRune.js\";\nimport { giantsMightEffect } from \"./feats/giantsMight.js\";\nimport { heavyArmorMasterEffect } from \"./feats/heavyArmorMaster.js\";\nimport { hillRuneEffect } from \"./feats/hillRune.js\";\nimport { indomitableEffect } from \"./feats/indomitable.js\";\nimport { kiEmptyBodyEffect } from \"./feats/kiEmptyBody.js\";\nimport { maneuversEffect } from \"./feats/maneuvers.js\";\nimport { momentaryStasis } from \"./feats/momentaryStasis.js\";\nimport { paladinDefaultAuraEffect } from \"./feats/paladinDefaultAura.js\";\nimport { piercerCriticalEffect, piercerRerollEffect } from \"./feats/piercer.js\";\nimport { planarWarriorEffect } from \"./feats/planarWarrior.js\";\nimport { potentCantripEffect } from \"./feats/potentCantrip.js\";\nimport { radiantSoulEffect } from \"./feats/radiantSoul.js\";\nimport { rageEffect } from \"./feats/rage.js\";\nimport { recklessAttackEffect } from \"./feats/recklessAttack.js\";\nimport { runeCarverEffect } from \"./feats/runeCarver.js\";\nimport { sacredWeaponEffect } from \"./feats/sacredWeapon.js\";\nimport { savageAttackerEffect } from \"./feats/savageAttacker.js\";\nimport { sculptSpellsEffect } from \"./feats/sculptSpells.js\";\nimport { sharpShooterEffect } from \"./feats/sharpShooter.js\";\nimport { shiftEffect } from \"./feats/shift.js\";\nimport { slayersPreyEffect } from \"./feats/slayersPrey.js\";\nimport { steadyAimEffect } from \"./feats/steadyAim.js\";\nimport { stoneRuneEffect } from \"./feats/stoneRune.js\";\nimport { stonesEnduranceEffect } from \"./feats/stonesEndurance.js\";\nimport { stormRuneEffect } from \"./feats/stormRune.js\";\nimport { unarmoredMovementEffect } from \"./feats/unarmoredMovement.js\";\nimport { uncannyDodgeEffect } from \"./feats/uncannyDodge.js\";\nimport { vigilantBlessingEffect } from \"./feats/vigilantBlessing.js\";\nimport { visageOfTheAstralSelfEffect } from \"./feats/visageOfTheAstralSelf.js\";\nimport { warCasterEffect } from \"./feats/warCaster.js\";\nimport { crusherEffect } from \"./feats/crusher.js\";\nimport { crusherCriticalEffect } from \"./feats/crusherCritical.js\";\nimport { slasherReduceSpeedEffect } from \"./feats/slasherReduceSpeed.js\";\nimport { slasherCriticalEffect } from \"./feats/slasherCritical.js\";\nimport { squireOfSolamniaEffect } from \"./feats/squireOfSolamnia.js\";\nimport { arcaneRecoveryEffect } from \"./feats/arcaneRecovery.js\";\n\nexport function baseFeatEffect(document, label) {\n  return {\n    label,\n    icon: document.img,\n    changes: [],\n    duration: {},\n    tint: \"\",\n    transfer: false,\n    disabled: false,\n    flags: {\n      dae: {\n        transfer: false,\n        stackable: \"none\",\n      },\n      ddbimporter: {\n        disabled: false,\n      },\n      \"midi-qol\": { // by default force CE effect usage to off\n        forceCEOff: true,\n      },\n    },\n  };\n}\n\nexport function featEffectModules() {\n  if (CONFIG.DDBI.EFFECT_CONFIG.FEATS.installedModules) {\n    return CONFIG.DDBI.EFFECT_CONFIG.FEATS.installedModules;\n  }\n  const midiQolInstalled = game.modules.get(\"midi-qol\")?.active;\n  const advancedMacrosInstalled = game.modules.get(\"advanced-macros\")?.active;\n  const itemMacroInstalled = game.modules.get(\"itemacro\")?.active;\n  const timesUp = game.modules.get(\"times-up\")?.active;\n  const daeInstalled = game.modules.get(\"dae\")?.active;\n  const convenientEffectsInstalled = game.modules.get(\"dfreds-convenient-effects\")?.active;\n\n  const activeAurasInstalled = game.modules.get(\"ActiveAuras\")?.active;\n  const atlInstalled = game.modules.get(\"ATL\")?.active;\n  const tokenAurasInstalled = game.modules.get(\"token-auras\")?.active;\n  const tokenMagicInstalled = game.modules.get(\"tokenmagic\")?.active;\n  const autoAnimationsInstalled = game.modules.get(\"autoanimations\")?.active;\n  CONFIG.DDBI.EFFECT_CONFIG.FEATS.installedModules = {\n    hasCore:\n      itemMacroInstalled\n      && midiQolInstalled\n      && advancedMacrosInstalled\n      && timesUp\n      && daeInstalled\n      && convenientEffectsInstalled,\n    midiQolInstalled,\n    itemMacroInstalled,\n    advancedMacrosInstalled,\n    timesUp,\n    daeInstalled,\n    convenientEffectsInstalled,\n    atlInstalled,\n    tokenAurasInstalled,\n    tokenMagicInstalled,\n    activeAurasInstalled,\n    autoAnimationsInstalled,\n  };\n  return CONFIG.DDBI.EFFECT_CONFIG.FEATS.installedModules;\n}\n\n\n/**\n * These are effects that can't be generated dynamically and have extra requirements\n */\n// eslint-disable-next-line complexity\nexport async function featureEffectAdjustment(ddb, character, document) {\n  if (!document.effects) document.effects = [];\n\n  const name = document.flags.ddbimporter.originalName || document.name;\n\n  // check that we can gen effects\n  const deps = featEffectModules();\n\n  if (deps.daeInstalled) {\n    switch (name) {\n      // if using active auras add the aura effect\n      case \"Aura of Courage\":\n      case \"Aura of Protection\": {\n        document = paladinDefaultAuraEffect(document);\n        break;\n      }\n      case \"Defensive Duelist\": {\n        document = defensiveDuelistEffect(document);\n        break;\n      }\n      case \"Frost Rune\": {\n        document = frostRuneEffect(document);\n        break;\n      }\n      case \"Hill Rune\": {\n        document = hillRuneEffect(document);\n        break;\n      }\n      case \"Momentary Stasis\": {\n        document = momentaryStasis(document);\n        break;\n      }\n      case \"Rage\": {\n        document = rageEffect(document);\n        break;\n      }\n      case \"Unarmored Movement\": {\n        document = unarmoredMovementEffect(document);\n        break;\n      }\n      case \"Uncanny Dodge\": {\n        document = uncannyDodgeEffect(document);\n        break;\n      }\n      case \"Vigilant Blessing\": {\n        document = vigilantBlessingEffect(document);\n        break;\n      }\n      // no default\n    }\n  }\n\n  if (deps.daeInstalled && deps.midiQolInstalled) {\n    switch (name) {\n      case \"Arcane Recovery\": {\n        document = await arcaneRecoveryEffect(document);\n        break;\n      }\n      case \"Bladesong\": {\n        document = bladesongEffect(document);\n        break;\n      }\n      case \"Bardic Inspiration\": {\n        document = bardicInspirationEffect(document);\n        break;\n      }\n      case \"Blessed Strikes\": {\n        document = blessedStrikesEffect(document);\n        break;\n      }\n      case \"Cloud Rune\": {\n        document = cloudRuneEffect(document);\n        break;\n      }\n      case \"Crossbow Expert\": {\n        document = crossbowExpertEffect(document);\n        break;\n      }\n      case \"Deflect Missiles\": {\n        document = deflectMissilesEffect(document);\n        break;\n      }\n      case \"Empty Body\":\n      case \"Ki: Empty Body\": {\n        document = kiEmptyBodyEffect(document);\n        break;\n      }\n      case \"Fighting Style: Interception\": {\n        document = fightingStyleInterceptionEffect(document);\n        break;\n      }\n      case \"Fire Rune\": {\n        document = fireRuneEffect(document);\n        break;\n      }\n      case \"Giant's Might\": {\n        document = giantsMightEffect(document);\n        break;\n      }\n      case \"Heavy Armor Master\": {\n        document = heavyArmorMasterEffect(document);\n        break;\n      }\n      case \"Indomitable\": {\n        document = indomitableEffect(document);\n        break;\n      }\n      case \"Potent Cantrip\": {\n        document = potentCantripEffect(document);\n        break;\n      }\n      case \"Celestial Revelation (Radiant Soul)\":\n      case \"Radiant Soul\": {\n        document = await radiantSoulEffect(document);\n        break;\n      }\n      case \"Reckless Attack\": {\n        document = recklessAttackEffect(document);\n        break;\n      }\n      case \"Channel Divinity: Sacred Weapon\":\n      case \"Sacred Weapon\": {\n        document = await sacredWeaponEffect(document);\n        break;\n      }\n      case \"Sculpt Spells\": {\n        document = sculptSpellsEffect(document);\n        break;\n      }\n      case \"Sharpshooter\": {\n        document = sharpShooterEffect(document);\n        break;\n      }\n      case \"Savage Attacker\": {\n        document = savageAttackerEffect(document);\n        break;\n      }\n      case \"Shift\": {\n        document = shiftEffect(ddb, character, document);\n        break;\n      }\n      case \"Squire of Solamnia: Precise Strike\": {\n        document = await squireOfSolamniaEffect(document);\n        break;\n      }\n      case \"Steady Aim\": {\n        document = steadyAimEffect(document);\n        break;\n      }\n      case \"Stone Rune\": {\n        document = stoneRuneEffect(document);\n        break;\n      }\n      case \"Stone's Endurance\":\n      case \"Stone’s Endurance\": {\n        document = stonesEnduranceEffect(document);\n        break;\n      }\n      case \"Storm Rune\": {\n        document = stormRuneEffect(document);\n        break;\n      }\n      case \"Visage of the Astral Self\": {\n        document = visageOfTheAstralSelfEffect(document);\n        break;\n      }\n      case \"War Caster\":\n      case \"Warcaster\": {\n        document = warCasterEffect(document);\n        break;\n      }\n      // no default\n    }\n  }\n\n  if (!deps.hasCore) {\n    return forceItemEffect(document);\n  }\n  if (!CONFIG.DDBI.EFFECT_CONFIG.FEATS.configured) {\n    CONFIG.DDBI.EFFECT_CONFIG.FEATS.configured = configureDependencies();\n  }\n\n\n  if (name.startsWith(\"Maneuvers: \")) {\n    document = await maneuversEffect(ddb, character, document);\n  }\n  if (name.startsWith(\"Rune Carver: \")) {\n    document = await runeCarverEffect(document);\n  }\n  switch (name) {\n    case \"Ancestral Protectors\": {\n      document = await ancestralProtectorsEffect(document);\n      break;\n    }\n    case \"Arcane Ward\": {\n      document = await arcaneWardEffect(document);\n      break;\n    }\n    case \"Blessed Healer\": {\n      document = await blessedHealerEffect(document);\n      break;\n    }\n    case \"Convert Sorcery Points\":\n    case \"Font of Magic\": {\n      document = await fontOfMagicEffect(document);\n      break;\n    }\n    case \"Crusher\": {\n      document = await crusherEffect(document);\n      break;\n    }\n    case \"Crusher: Critical\": {\n      document = await crusherCriticalEffect(document);\n      break;\n    }\n    case \"Favored Foe\": {\n      document = await favoredFoeEffect(document);\n      break;\n    }\n    case \"Piercer\": {\n      document = await piercerCriticalEffect(document);\n      document = await piercerRerollEffect(document);\n      break;\n    }\n    case \"Piercer: Reroll Damage\": {\n      document = await piercerRerollEffect(document);\n      break;\n    }\n    case \"Piercer: Critical Hit\": {\n      document = await piercerCriticalEffect(document);\n      break;\n    }\n    case \"Planar Warrior\": {\n      document = await planarWarriorEffect(document);\n      break;\n    }\n    case \"Slasher: Reduce Speed\": {\n      document = await slasherReduceSpeedEffect(document);\n      break;\n    }\n    case \"Slasher: Critical Hit\": {\n      document = await slasherCriticalEffect(document);\n      break;\n    }\n    case \"Slayer's Prey\": {\n      document = await slayersPreyEffect(document);\n      break;\n    }\n    // no default\n  }\n\n  return forceItemEffect(document);\n}\n","\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function absorbElementsEffect(document) {\n  const effect = baseSpellEffect(document, `${document.name} - Extra Damage`);\n  effect.changes.push({\n    key: \"system.bonuses.mwak.damage\",\n    value: `(@item.level)d6`,\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 0,\n  });\n  effect.flags.dae.specialDuration = [\"1Hit\"];\n  effect.duration = {\n    startTime: null,\n    seconds: null,\n    rounds: 1,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  document.system.damage = {\n    parts: [[\"\", \"\"]],\n    versatile: \"\",\n    value: \"\",\n  };\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  document.effects.push(effect);\n\n  return document;\n}\n\n\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function acidArrowEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: `label=${document.name} (End of Turn),turn=end,damageRoll=(@spellLevel)d4[acid],damageType=acid`,\n    priority: \"20\",\n  });\n  effect.flags.dae.specialDuration = [\"turnEnd\"];\n  effect.duration.rounds = 1;\n  document.effects.push(effect);\n\n  return document;\n}\n","import { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function aidEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.hp.tempmax\",\n    value: \"5 * (@spellLevel - 1)\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  const itemMacroText = await loadMacroFile(\"spell\", \"aid.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@spellLevel\", 0));\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function alterSelfEffect(document) {\n  let effectAquaticAdaptation = baseSpellEffect(document, document.name);\n  effectAquaticAdaptation.changes.push({\n    key: \"system.attributes.movement.swim\",\n    value: \"@attributes.movement.walk\",\n    mode: 4,\n    priority: 20,\n  });\n  document.effects.push(effectAquaticAdaptation);\n\n  let effectNaturalWeapons = baseSpellEffect(document, document.name);\n  effectNaturalWeapons.changes.push(\n    { key: \"items.Unarmed Strike.system.damage.parts.0.0\", value: \"1d6+@mod+1\", mode: 5, priority: 20 },\n    { key: \"items.Unarmed Strike.system.properties.mgc\", value: \"true\", mode: 5, priority: 20 },\n    { key: \"items.Unarmed Strike.system.proficient\", value: \"true\", mode: 5, priority: 20 },\n    { key: \"items.Unarmed Strike.system.attackBonus\", value: \"1\", mode: 2, priority: 20 }\n  );\n  document.effects.push(effectNaturalWeapons);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function animalFriendshipEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function arcaneSwordEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"arcaneSword.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n\n  document.effects.push(effect);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preTargeting]ItemMacro\");\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function armorOfAgathysEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateTarget\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Armor of Agathys,ItemMacro,system.attributes.hp.temp,@item.level\",\n      priority: 20,\n    },\n  );\n  effect.duration.seconds = 3600;\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"armorOfAgathys.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"system.actionType\", \"util\");\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function auraOfLifeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"necrotic\",\n      priority: \"20\",\n    },\n    // {\n    //   key: \"flags.midi-qol.OverTime\",\n    //   mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    //   value: \"turn=start,label=Aura of Life (Start of Turn),damageRoll=1,damageType=heal,killAnim=true,applyCondition=##attributes.hp.value <= 0\",\n    //   priority: \"20\",\n    // }\n  );\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"auraOfLife.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"Allies\",\n    radius: 30,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    onlyOnce: false,\n    save: false,\n    savedc: null,\n    displayTemp: true,\n  };\n  // setProperty(effect, \"duration.seconds\", 600);\n  setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  effect.changes.push(generateMacroChange(\"@token\"));\n  document.system.actionType = \"other\";\n  document.system.damage.parts = [];\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system['target']['type'] = \"self\";\n\n  document.effects.push(effect);\n  return document;\n\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function baneEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.bonuses.All-Attacks\", value: \"-1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.abilities.save\", value: \"-1d4\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function banishmentEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"banishment.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\", 0));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function barkskinEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.ac.value\",\n    mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n    value: \"16\",\n    priority: \"100\",\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function beaconofHopeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.ability.save.wis\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      priority: 20,\n    },\n    { key: \"flags.midi-qol.advantage.deathSave\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules, generateStatusEffectChange } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag, MACROS } from \"../macros.js\";\n\nexport async function blackTentaclesEffect(document) {\n  if (!spellEffectModules().activeAurasInstalled) {\n    let effect = baseSpellEffect(document, document.name);\n    effect.changes.push(generateStatusEffectChange(\"Restrained\"));\n    document.effects.push(effect);\n\n    return document;\n  }\n\n\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(MACROS.AA_ON_ENTRY.type, MACROS.AA_ON_ENTRY.file);\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"str\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 60);\n  setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  effect.changes.push(generateMacroChange(\"\"));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n\n  const aaMacroFlags = {\n    applyStart: true,\n    handleStartRoll: true,\n    autoDamageIfCondition: true,\n    applyEnd: false,\n    applyEntry: true,\n    applyImmediate: true,\n    everyEntry: false,\n    conditionEffect: true,\n    damageEffect: true,\n    removeOnOff: true,\n    allowVsRemoveCondition: true,\n    removalCheck: [\"str\", \"dex\"],\n    removalSave: null,\n    saveRemoves: false,\n    condition: \"Restrained\",\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.black_tentacles.dark_purple\",\n  };\n  setProperty(document, \"flags.ddbimporter.effect\", aaMacroFlags);\n  setProperty(effect, \"flags.ddbimporter.effect\", aaMacroFlags);\n  setProperty(document, \"flags.midiProperties.nodam\", true);\n\n  document.effects.push(effect);\n  return document;\n\n}\n","import { baseSpellEffect, generateTokenMagicFXChange, spellEffectModules } from \"../specialSpells.js\";\n\nexport function blessEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.bonuses.abilities.save\", value: \"+1d4\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.bonuses.All-Attacks\", value: \"+1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 }\n  );\n  document.effects.push(effect);\n\n  if (spellEffectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"bloom\"));\n  }\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function blindnessDeafnessEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: \"label=Blindness/Deafness (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=con,savingThrow=true,saveMagic=true\",\n    priority: \"20\",\n  });\n  const itemMacroText = await loadMacroFile(\"spell\", \"blindnessDeafness.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateTokenMagicFXChange, spellEffectModules } from \"../specialSpells.js\";\n\nexport function blurEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'flags.midi-qol.grants.disadvantage.attack.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '1',\n      priority: \"20\",\n    }\n  );\n\n  if (spellEffectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"blur\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function boomingBladeEffect(document) {\n  const itemMacroText = await loadMacroFile(\"spell\", \"boomingBlade.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function brandingSmiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro.Branding Smite\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.brandingSmite.level\",\n      value: \"@item.level\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      priority: \"20\",\n    },\n  );\n  setProperty(effect, \"flags.dae.specialDuration\", [\"1Hit:rwak\", \"1Hit:mwak\"]);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"brandingSmite.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  document.system.actionType = \"other\";\n  document.system.target.type = \"self\";\n  document.system.damage.parts = [];\n  document.effects.push(effect);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function callLightningEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"callLightning.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@spellLevel\"));\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n  setProperty(document, \"system.actionType\", \"other\");\n  document.system.save.ability = \"\";\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preTargeting]ItemMacro\");\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function charmPersonEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n// import { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function chillTouchEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.traits.di.value\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    value: \"healing\",\n    priority: \"30\",\n  }, {\n    key: \"flags.midi-qol.onUseMacroName\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"Chill Touch (Target effect),preAttackRoll\",\n    priority: \"30\",\n  });\n  // const itemMacroText = await loadMacroFile(\"spell\", \"chillTouch.js\");\n  // document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  // effect.changes.push(generateMacroChange(\"\"));\n  setProperty(effect, \"flags.dae.specialDuration\", [\"turnEndSource\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function chromaticOrbEffect(document) {\n  const itemMacroText = await loadMacroFile(\"spell\", \"chromaticOrb.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postDamageRoll]ItemMacro\");\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag, MACROS } from \"../macros.js\";\n\nexport async function cloudkillEffect(document) {\n  // we require active auras for this effect\n  if (!spellEffectModules().activeAurasInstalled) return document;\n\n  const itemMacroText = await loadMacroFile(\"generic\", MACROS.AA_DAMAGE_ON_ENTRY.file);\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        `label=${document.name} (Start of Turn),turn=start, saveAbility=${document.system.save.ability}, saveDC=@attributes.spelldc, saveDamage=halfdamage, rollType=save, saveMagic=true, damageBeforeSave=false, damageRoll=(@item.level)d8, damageType=${document.system.damage.parts[0][1]}`,\n      priority: \"20\",\n    },\n  );\n  effect.changes.push(generateMacroChange(\"@item.level\"));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"str\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 600);\n  // setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n  setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.fog_cloud.2.green\",\n  });\n\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function colorSprayEffect(document) {\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"colorSpray.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  document.system.damage = { parts: [[\"6d10\", \"midi-none\"]], versatile: \"\", value: \"\" };\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function commandEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function comprehendLanguagesEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.traits.languages.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '1',\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function confusionEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: \"label=Confusion (End of Turn),turn=end,saveAbility=wis,saveDC=@attributes.spelldc,saveMagic=true\",\n    priority: \"20\",\n  });\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  const itemMacroText = await loadMacroFile(\"spell\", \"confusion.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function contagionEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.flags.dae.macroRepeat = \"endEveryTurn\";\n  effect.changes.push(generateStatusEffectChange(\"Poisoned\"));\n  const itemMacroText = await loadMacroFile(\"spell\", \"contagion.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag, MACROS } from \"../macros.js\";\n\nexport async function createBonfireEffect(document) {\n  // we require active auras for this effect\n  if (!spellEffectModules().activeAurasInstalled) return document;\n\n  const itemMacroText = await loadMacroFile(\"generic\", MACROS.AA_DAMAGE_ON_ENTRY.file);\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        \"turn=end,label=Create Bonfire (End of Turn),damageRoll=(@cantripDice)d8,damageType=fire,saveRemove=false,saveDC=@attributes.spelldc,saveAbility=dex,saveDamage=nodamage,killAnim=true\",\n      priority: \"20\",\n    },\n  );\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 60);\n  effect.changes.push(generateMacroChange(\"\"));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n\n  document.effects.push(effect);\n\n  setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.flames.01.orange\",\n    isCantrip: true,\n    saveOnEntry: true,\n  });\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function crownofMadnessEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: \"label=Crown of Madness (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,saveMagic=true\",\n    priority: \"20\",\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { generateATLChange } from \"../effects.js\";\nimport { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function crownofStarsEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (spellEffectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.dimLight\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '60'));\n    effect.changes.push(generateATLChange(\"ATL.brightLight\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '30'));\n  }\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"crownofStars.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@spellLevel\"));\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function darknessEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  const itemMacroText = await loadMacroFile(\"spell\", \"darkness.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preTargeting]ItemMacro\");\n  return document;\n}\n","import { baseSpellEffect, generateATLChange, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function darkvisionEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.senses.darkvision\",\n    value: \"60\",\n    mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n    priority: 20,\n  });\n\n  if (spellEffectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.dimSight\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 60, 5));\n  } else {\n    const itemMacroText = await loadMacroFile(\"spell\", \"darkvision.js\");\n    document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n    effect.changes.push(generateMacroChange(\"\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function divineFavorEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.bonuses.mwak.damage\", value: \"1d4[Radiant]\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.rwak.damage\", value: \"1d4[Radiant]\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function divineWordEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"divineWord.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function dominateBeastEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function dominateMonsterEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function dominatePersonEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function elementalWeaponEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"elementalWeapon.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@item.level\", 0));\n  document.effects.push(effect);\n\n  document.system.damage.parts = [];\n  document.system.actionType = \"other\";\n  document.system.chatFlavor = \"\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function enhanceAbilityEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"enhanceAbility.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\", 20));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function enlargeReduceEffect(document) {\n  if (!spellEffectModules().atlInstalled) return document;\n\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"enlargeReduce.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\", 0));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function ensnaringStrikeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"ensnaringStrike.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  effect.changes.push({\n    key: \"flags.midi-qol.onUseMacroName\",\n    value: `ItemMacro.${document.name},postActiveEffects`,\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: \"20\",\n  });\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = null;\n  document.system.save.ability = \"\";\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preTargeting]ItemMacro\");\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function entangleEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Restrained\"));\n\n  // not implemented as the target can choose to escape with it's action\n  // effect.changes.push(\n  //   {\n  //     key: \"flags.midi-qol.OverTime\",\n  //     mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n  //     value:\n  //       `label=${document.name} (Start of Turn),turn=start, saveAbility=${document.system.save.ability}, saveDC=@attributes.spelldc, rollType=save, saveMagic=true, saveRemove=true`,\n  //     priority: \"20\",\n  //   },\n  // );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function eyebiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"eyebite.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n  setProperty(document, \"system.actionType\", \"other\");\n  setProperty(document, \"system.save.ability\", \"\");\n\n  return document;\n}\n","import { baseSpellEffect, generateTokenMagicFXChange, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function faerieFireEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.grants.advantage.attack.all\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n\n  if (game.modules.get(\"ATL\")?.active) {\n    const itemMacroText = await loadMacroFile(\"spell\", \"faerieFire.js\");\n    document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n    effect.changes.push(generateMacroChange(\"\", 20));\n  }\n\n  if (spellEffectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"glow\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function fearEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Frightened\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function feeblemindEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.abilities.cha.value\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 50 },\n    { key: \"system.abilities.int.value\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 50 },\n    { key: \"flags.midi-qol.fail.spell.all\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function fireShieldEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"fireShield.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\", 0));\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function flameBladeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"flameBlade.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@spellLevel\"));\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.system.actionType = \"other\";\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preTargeting]ItemMacro\");\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function fleshtoStoneEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Restrained\"));\n  const itemMacroText = await loadMacroFile(\"spell\", \"fleshtoStone.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.flags.dae.macroRepeat = \"endEveryTurn\";\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function flyEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.movement.fly\",\n    value: \"60\",\n    mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n    priority: 20,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function frostbiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.midi-qol.disadvantage.attack.mwak\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 50 },\n    { key: \"flags.midi-qol.disadvantage.attack.rwak\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 50 },\n  );\n  setProperty(effect, \"duration.turns\", 1);\n  setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:rwak\", \"1Attack:mwak\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function geasEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules, generateStatusEffectChange } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag, MACROS } from \"../macros.js\";\n\nexport async function greaseEffect(document) {\n\n  if (!spellEffectModules().activeAurasInstalled) {\n    let effect = baseSpellEffect(document, document.name);\n    effect.changes.push(generateStatusEffectChange(\"Prone\"));\n    document.effects.push(effect);\n\n    return document;\n  }\n\n  // if we have active auras use a more advanced macro\n  let effect = baseSpellEffect(document, document.name);\n  // effect.changes.push(generateStatusEffectChange(\"Prone\", 20, true));\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `turn=end,label=${document.name},saveRemove=false,saveDC=@attributes.spelldc,saveAbility=${document.system.save.ability},saveDamage=nodamage,killAnim=true,macro=${MACROS.AA_CONDITION_ON_ENTRY.name}`,\n      priority: \"20\",\n    },\n  );\n\n  const itemMacroText = await loadMacroFile(MACROS.AA_CONDITION_ON_ENTRY.type, MACROS.AA_CONDITION_ON_ENTRY.file);\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n  effect.changes.push(generateMacroChange(\"@item.level @attributes.spelldc\"));\n\n  // effect.changes.push(generateMacroChange(\"@item.level @attributes.spelldc\"));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 60);\n  // setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  const aaMacroFlags = {\n    applyStart: true,\n    applyEnd: true,\n    applyEntry: true,\n    applyImmediate: true,\n    everyEntry: true,\n    removeOnOff: false,\n    allowVsRemoveCondition: false,\n    removalCheck: null,\n    removalSave: null,\n    saveRemoves: false,\n    condition: \"Prone\",\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.grease.dark_green.loop\",\n  };\n  setProperty(document, \"flags.ddbimporter.effect\", aaMacroFlags);\n  setProperty(effect, \"flags.ddbimporter.effect\", aaMacroFlags);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function greenFlameBladeEffect(document) {\n  const itemMacroText = await loadMacroFile(\"spell\", \"greenFlameBlade.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function guidanceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'flags.midi-qol.optional.guidance.label',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: 'Guidance',\n      priority: \"20\",\n    },\n    {\n      key: 'flags.midi-qol.optional.guidance.check.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '+ 1d4',\n      priority: \"20\",\n    },\n    {\n      key: 'flags.midi-qol.optional.guidance.skill.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '+ 1d4',\n      priority: \"20\",\n    },\n  );\n  setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill\", \"isCheck\"]);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function guidingBoltEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.grants.advantage.attack.all\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    priority: 20,\n  });\n  effect.flags.dae.specialDuration = [\"isAttacked\"];\n  effect.duration = {\n    startTime: null,\n    seconds: null,\n    rounds: 1,\n    turns: 1,\n    startRound: null,\n    startTurn: null,\n  };\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function hasteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.ac.bonus\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"+2\", priority: \"20\" },\n    {\n      key: \"flags.midi-qol.advantage.ability.save.dex\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1\",\n      priority: \"20\",\n    },\n    { key: \"system.attributes.movement.all\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"*2\", priority: \"30\" }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function heroesFeastEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.traits.di.value\", value: \"poison\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 20 },\n    { key: \"system.traits.ci.value\", value: \"frightened\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 20 }\n  );\n  const itemMacroText = await loadMacroFile(\"spell\", \"heroesFeast.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@damage\", 0));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function heroismEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.traits.ci.value\",\n    value: \"frightened\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 20,\n  });\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  const itemMacroText = await loadMacroFile(\"spell\", \"heroism.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@damage\", 0));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function hexEffect(document) {\n  let effect = baseSpellEffect(document, \"Marked\");\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"hex.js\");\n\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  setProperty(document, \"system.actionType\", \"util\");\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function hideousLaughterEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    generateStatusEffectChange(\"Incapacitated\"),\n    generateStatusEffectChange(\"Prone\"),\n  );\n\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: \"label=Hideous Laughter (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,saveMagic=true\",\n    priority: \"20\",\n  });\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"hideousLaughter.js\");\n\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function holdMonsterEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Paralyzed\"));\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: `label=${document.name} (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,savingThrow=true,saveMagic=true`,\n    priority: \"20\",\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function holdPersonEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Paralyzed\"));\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: `label=${document.name} (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,savingThrow=true,saveMagic=true`,\n    priority: \"20\",\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateATLChange } from \"../specialSpells.js\";\n\nexport function holyAuraEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.ability.save.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.grants.disadvantage.attack.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n  );\n\n  if (CONFIG.DDBI.EFFECT_CONFIG.SPELLS.installedModules.atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.dimLight\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '5'));\n    effect.changes.push(generateATLChange(\"ATL.lightColor\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '#ffffff'));\n    effect.changes.push(generateATLChange(\"ATL.lightAlpha\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '0.25'));\n    const lightAnimation = '{\"type\": \"sunburst\", \"speed\": 2,\"intensity\": 4}';\n    effect.changes.push(generateATLChange(\"ATL.lightAnimation\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, lightAnimation));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function huntersMarkEffect(document) {\n  let effect = baseSpellEffect(document, \"Marked\");\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateSource\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Hunter's Mark\",\n      priority: 20,\n    },\n  );\n  effect.duration.seconds = 3600;\n  document.effects.push(effect);\n\n  let damageBonusEffect = baseSpellEffect(document, \"Hunter's Mark\");\n  damageBonusEffect.changes.push({\n    key: \"flags.dnd5e.DamageBonusMacro\",\n    value: \"ItemMacro\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 20,\n  });\n  damageBonusEffect.transfer = true;\n\n  setProperty(damageBonusEffect, \"flags.dae.transfer\", true);\n  document.effects.push(damageBonusEffect);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"huntersMark.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"system.actionType\", \"util\");\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function hypnoticPatternEffect(document) {\n  let effectHypnoticPatternCharmed = baseSpellEffect(document, document.name);\n  effectHypnoticPatternCharmed.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effectHypnoticPatternCharmed);\n\n  let effectHypnoticPatternIncapacitated = baseSpellEffect(document, document.name);\n  effectHypnoticPatternIncapacitated.changes.push(generateStatusEffectChange(\"Incapacitated\"));\n  document.effects.push(effectHypnoticPatternIncapacitated);\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function iceKnifeEffect(document) {\n  const itemMacroText = await loadMacroFile(\"spell\", \"iceKnife.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  document.system.damage = { parts: [[\"1d10\", \"piercing\"]], versatile: \"\", value: \"\" };\n  document.system.scaling = { mode: \"none\", formula: \"\" };\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.save.ability = \"\";\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag, MACROS } from \"../macros.js\";\n\nexport async function incendiaryCloudEffect(document) {\n  // we require active auras for this effect\n  if (!spellEffectModules().activeAurasInstalled) return document;\n\n  const itemMacroText = await loadMacroFile(\"generic\", MACROS.AA_DAMAGE_ON_ENTRY.file);\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        `label=${document.name} Turn End,turn=end, saveAbility=${document.system.save.ability}, saveDC=@attributes.spelldc, saveDamage=halfdamage, rollType=save, saveMagic=true, damageBeforeSave=false, damageRoll=(@item.level)d8, damageType=${document.system.damage.parts[0][1]}`,\n      priority: \"20\",\n    },\n  );\n  effect.changes.push(generateMacroChange(\"@item.level\"));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 60);\n  // setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n  setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.fumes.fire.orange\",\n  });\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag, MACROS } from \"../macros.js\";\n\nexport async function insectPlagueEffect(document) {\n  // we require active auras for this effect\n  if (!spellEffectModules().activeAurasInstalled) return document;\n\n  const itemMacroText = await loadMacroFile(\"generic\", MACROS.AA_DAMAGE_ON_ENTRY.file);\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        `label=${document.name} Turn End,turn=end, saveAbility=${document.system.save.ability}, saveDC=@attributes.spelldc, saveDamage=halfdamage, rollType=save, saveMagic=true, damageBeforeSave=false, damageRoll=(@item.level)d10, damageType=${document.system.damage.parts[0][1]}`,\n      priority: \"20\",\n    },\n  );\n  effect.changes.push(generateMacroChange(\"@item.level\"));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 600);\n  // setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n  setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.butterflies.many.orange\",\n  });\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport async function invisibilityEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Convenient Effect: Invisible\"));\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function irresistibleDanceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  effect.changes.push({\n    key: \"flags.midi-qol.disadvantage.ability.save.str\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n  effect.changes.push({\n    key: \"flags.midi-qol.disadvantage.attack.all\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n  effect.changes.push({\n    key: \"flags.midi-qol.grants.advantage.attack.all \",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  const itemMacroText = await loadMacroFile(\"spell\", \"irresistibleDance.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateATLChange, spellEffectModules } from \"../specialSpells.js\";\n\nexport function lightEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (spellEffectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.dimLight\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '40'));\n    effect.changes.push(generateATLChange(\"ATL.brightLight\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '20'));\n    effect.changes.push(generateATLChange(\"ATL.lightColor\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '#ffffff'));\n    effect.changes.push(generateATLChange(\"ATL.lightAlpha\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '0.25'));\n    const lightAnimation = '{\"type\": \"pulse\", \"speed\": 3,\"intensity\": 1}';\n    effect.changes.push(generateATLChange(\"ATL.lightAnimation\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, lightAnimation));\n  }\n\n  setProperty(document, \"flags.midiProperties.autoFailFriendly\", true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function longstriderEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.movement.walk\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.fly\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.burrow\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.climb\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.swim\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function mageArmorEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.ac.calc\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: \"mage\",\n    priority: \"5\",\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function magicWeaponEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"magicWeapon.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@item.level\", 0));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function massSuggestionEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Charmed\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function mindBlankEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.traits.di.value',\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: 'psychic',\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateTokenMagicFXChange, spellEffectModules } from \"../specialSpells.js\";\n\nexport function mirrorImageEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (spellEffectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"images\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function mistyStepEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"mistyStep.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@target\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function moonbeamEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  const itemMacroText = await loadMacroFile(\"spell\", \"moonbeam.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@spellLevel\"));\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function passWithoutTraceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.skills.ste.bonuses.check',\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: '+ 10',\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function phantasmalKillerEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value:\n      \"label=Phantasmal Killer (Start of Turn),turn=end,saveAbility=wis,saveDC=@attributes.spelldc,saveMagic=true,damageRoll=(@item.level)d10,damageType=psychic,savingThrow=true,damageBeforeSave=false\",\n    priority: \"20\",\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","export function polymorphEffect(document) {\n\n  setProperty(document, \"flags.midiProperties.autoFailFriendly\", true);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function protectionfromEnergyEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"protectionfromEnergy.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\", 0));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function protectionfromPoisonEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.traits.dr.value\",\n    value: \"poison\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 0,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function rayofEnfeeblementEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: `label=${document.name} (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=con,savingThrow=true,saveMagic=true`,\n    priority: \"20\",\n  });\n  const itemMacroText = await loadMacroFile(\"spell\", \"rayofEnfeeblement.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function rayofFrostEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.movement.walk\",\n    value: \"-10\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  effect.flags.dae.specialDuration = [\"turnStart\"];\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function regenerateEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: 5,\n      value: `label=${document.name} (Start of Turn),turn=end,damageRoll=1,damageType=healing,condition=@attributes.hp.value > 0 && @attributes.hp.value < @attributes.hp.max`,\n      priority: \"20\",\n    }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function resilientSphereEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.attributes.movement.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '* 0.5',\n      priority: \"20\",\n    },\n    {\n      key: 'system.traits.di.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '1',\n      priority: \"20\",\n    },\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function resistanceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'flags.midi-qol.optional.resistance.label',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: 'Resistance',\n      priority: \"20\",\n    },\n    {\n      key: 'flags.midi-qol.optional.resistance.save.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '+ 1d4',\n      priority: \"20\",\n    },\n  );\n  setProperty(effect, \"flags.dae.specialDuration\", [\"isSave\"]);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateTokenMagicFXChange, spellEffectModules } from \"../specialSpells.js\";\n\nexport function shieldEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.ac.bonus\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    value: \"+5\",\n    priority: \"20\",\n  });\n  effect.flags.dae.specialDuration = [\"turnStart\"];\n\n  if (spellEffectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"water-field\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, generateTokenMagicFXChange, spellEffectModules } from \"../specialSpells.js\";\n\nexport function shieldofFaithEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.ac.bonus\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    value: \"+2\",\n    priority: \"20\",\n  });\n\n  if (spellEffectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"bloom\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function shillelaghEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"shillelagh.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\", 0));\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.system.actionType = \"other\";\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preTargeting]ItemMacro\");\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules, generateStatusEffectChange } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function silenceEffect(document) {\n\n  if (!spellEffectModules().activeAurasInstalled) {\n    return document;\n  }\n\n  // if we have active auras use a more advanced macro\n  const itemMacroText = await loadMacroFile(\"generic\", \"activeAuraOnly.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateStatusEffectChange(\"Deafened\", 20, true));\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.fail.spell.vocal\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1\",\n      priority: \"50\",\n    },\n    {\n      key: \"system.traits.di.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"thunder\",\n      priority: \"50\",\n    }\n  );\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 600);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function sleepEffect(document) {\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"sleep.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  document.system.damage = { parts: [[\"5d8\", \"midi-none\"]], versatile: \"\", value: \"\" };\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function slowEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.ac.bonus\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"-2\", priority: \"20\" },\n    { key: \"system.attributes.movement.all\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"/2\", priority: \"20\" },\n    { key: \"system.abilities.dex.save\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"-2\", priority: \"20\" }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function spiderClimbEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.movement.climb\",\n    value: \"@attributes.movement.walk\",\n    mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n    priority: 20,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function spikeGrowthEffect(document) {\n  // we require active auras for this effect\n  if (!spellEffectModules().activeAurasInstalled) return document;\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"spikeGrowth.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.movement.walk\",\n      value: \"0.5\",\n      mode: CONST.ACTIVE_EFFECT_MODES.MULTIPLY,\n      priority: 30,\n    },\n  );\n  effect.changes.push(generateMacroChange(\"\"));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    // save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 600);\n  setProperty(effect, \"flags.dae.specialDuration\", [\"isMoved\"]);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function spiritGuardiansEffect(document) {\n  // we require active auras for this effect\n  if (!spellEffectModules().activeAurasInstalled) return document;\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.movement.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"/2\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value:\n        \"turn=start,label=Spirit Guardians (Start of Turn),damageRoll=(@spellLevel)d8,damageType=radiant,saveRemove=false,saveDC=@attributes.spelldc,saveAbility=wis,saveDamage=halfdamage,killAnim=true\",\n      priority: \"20\",\n    }\n  );\n  const itemMacroText = await loadMacroFile(\"spell\", \"spiritGuardians.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"Enemy\",\n    radius: 15,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: true,\n    height: false,\n    hidden: false,\n    hostile: false,\n    onlyOnce: false,\n    displayTemp: true,\n  };\n  effect.changes.push(generateMacroChange(\"@token @spellLevel @attributes.spelldc\"));\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: 15, units: \"ft\", long: null };\n  document.system.actionType = \"\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function spiritShroudEffect(document) {\n  if (!spellEffectModules().activeAurasInstalled) return document;\n  let effect = baseSpellEffect(document, document.name);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.spiritShroud\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"@uuid\",\n      priority: 20\n    },\n    {\n      key: \"system.attributes.movement.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"-10\",\n      priority: \"15\",\n    });\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"Enemy\",\n    radius: 10,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: true,\n    height: false,\n    hidden: false,\n    hostile: false,\n    onlyOnce: false,\n    displayTemp: true,\n  };\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"spiritShroud.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function spiritualWeaponEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"spell\", \"spiritualWeapon.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"@item.level\"));\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function stoneskinEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.traits.dr.value\",\n    value: \"physical\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 0,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function stormSphereEffect(document) {\n  // we require active auras for this effect\n  if (!spellEffectModules().activeAurasInstalled) return document;\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.disadvantage.skill.prc\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"0\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        \"turn=end,label=Storm Sphere (End of Turn),damageRoll=(@item.level - 2)d6,damageType=bludgeoning,saveRemove=false,saveDC=@attributes.spelldc,saveAbility=str,saveDamage=nodamage,killAnim=true\",\n      priority: \"20\",\n    }\n  );\n  const itemMacroText = await loadMacroFile(\"spell\", \"stormSphere.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"str\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 60);\n  setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  effect.changes.push(generateMacroChange(\"\"));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n\n  document.effects.push(effect);\n\n  const damageOne = duplicate(document.system.damage.parts[0]);\n  const damageTwo = duplicate(document.system.damage.parts[1]);\n  document.system.damage = { parts: [damageOne], versatile: \"\", value: \"\" };\n  document.system.formula = damageTwo[0];\n  document.system.actionType = \"save\";\n\n  return document;\n}\n","import { baseSpellEffect, generateStatusEffectChange } from \"../specialSpells.js\";\n\nexport function sunbeamEffect(document) {\n  let effectSunbeamBlinded = baseSpellEffect(document, document.name);\n  effectSunbeamBlinded.changes.push(generateStatusEffectChange(\"Blinded\"));\n  document.effects.push(effectSunbeamBlinded);\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function thunderousSmiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: \"ItemMacro.Thunderous Smite\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.thunderousSmite.dc\",\n      value: \"@attributes.spelldc\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      priority: \"20\",\n    },\n  );\n  setProperty(effect, \"flags.dae.specialDuration\", [\"1Hit:mwak\"]);\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"thunderousSmite.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  document.system.damage.parts = [];\n  document.system.save.ability = \"\";\n  document.system.actionType = \"other\";\n  document.effects.push(effect);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro,[preTargeting]ItemMacro\");\n\n  return document;\n}\n","import { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function tolltheDeadEffect(document) {\n  const itemMacroText = await loadMacroFile(\"spell\", \"tolltheDead.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function trueStrikeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.advantage.attack.all\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    priority: 20,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function viciousMockeryEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.disadvantage.attack.all\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    priority: 20,\n  });\n  setProperty(effect, \"duration.turns\", 1);\n  setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack\", \"turnEnd\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","// Vitriolic Sphere\n\n\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function vitriolicSphereEffect(document) {\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `turn=end,label=${document.name} (End of Turn),damageRoll=5d4,damageType=acid,removeCondition=true`,\n      priority: \"20\",\n    }\n  );\n  setProperty(effect, \"flags.dae.specialDuration\", [\"turnEnd\"]);\n  setProperty(effect, \"duration.rounds\", 1);\n  document.effects.push(effect);\n\n  const damageOne = duplicate(document.system.damage.parts[0]);\n  const damageTwo = duplicate(document.system.damage.parts[1]);\n  document.system.damage = { parts: [damageOne], versatile: \"\", value: \"\" };\n  document.system.formula = damageTwo[0];\n  document.system.actionType = \"save\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function wardingBondEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.ac.bonus\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"1\", priority: \"20\" },\n    { key: \"system.traits.dr.all\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"1\", priority: \"20\" },\n    { key: \"system.bonuses.abilities.save\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"1\", priority: \"20\" }\n  );\n  const itemMacroText = await loadMacroFile(\"spell\", \"wardingBond.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange(\"\"));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect, spellEffectModules, generateStatusEffectChange } from \"../specialSpells.js\";\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag, MACROS } from \"../macros.js\";\n\nexport async function webEffect(document) {\n\n  if (!spellEffectModules().activeAurasInstalled) {\n    let effectWebRestrained = baseSpellEffect(document, document.name);\n    effectWebRestrained.changes.push(generateStatusEffectChange(\"Restrained\"));\n    document.effects.push(effectWebRestrained);\n    return document;\n  }\n\n  // if we have active auras use a more advanced macro\n  const itemMacroText = await loadMacroFile(MACROS.AA_CONDITION_ON_ENTRY.type, MACROS.AA_CONDITION_ON_ENTRY.file);\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(generateMacroChange(\"@item.level @attributes.spelldc\"));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  setProperty(effect, \"duration.seconds\", 3600);\n  setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[preActiveEffects]ItemMacro\");\n  setProperty(document, \"flags.ddbimporter.effect\", {\n    applyStart: true,\n    applyEntry: true,\n    applyImmediate: false,\n    everyEntry: false,\n    allowVsRemoveCondition: true,\n    removalCheck: \"str\",\n    removalSave: null,\n    saveRemoves: false,\n    condition: \"Restrained\",\n    save: document.system.save.ability,\n    // sequencerFile: \"jb2a.web.02\",\n  });\n\n  document.effects.push(effect);\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function witchBoltEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"witchBolt.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { loadMacroFile, generateItemMacroFlag } from \"../macros.js\";\n\nexport async function zephyrStrikeEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name}`);\n\n  // macroToCall\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.ZepyrStrike.macroToCall\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"ItemMacro.Zephyr Strike\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZepyrStrike.damage.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.system.damage.parts[0][0]}`,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZepyrStrike.damage.rwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.system.damage.parts[0][0]}`,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZepyrStrike.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZepyrStrike.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Gain Zephyr Strike damage bonus?\",\n      priority: \"20\",\n    },\n  );\n\n  setProperty(effect, \"flags.dae.selfTarget\", true);\n  setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  setProperty(document, \"system.actionType\", \"other\");\n\n  document.effects.push(effect);\n  document.system.damage.parts = [];\n\n  const itemMacroText = await loadMacroFile(\"spell\", \"zephyrStrike.js\");\n  setProperty(document, \"flags.itemacro\", generateItemMacroFlag(document, itemMacroText));\n\n  return document;\n}\n","import logger from \"../logger.js\";\nimport {\n  generateStatusEffectChange as baseGenerateStatusEffectChange,\n  generateTokenMagicFXChange as baseGenerateTokenMagicFXChange,\n  generateATLChange as baseGenerateATLChange,\n  forceItemEffect,\n} from \"./effects.js\";\nimport { configureDependencies } from \"./macros.js\";\n\n// spell effects load start\nimport { absorbElementsEffect } from \"./spells/absorbElements.js\";\nimport { acidArrowEffect } from \"./spells/acidArrow.js\";\nimport { aidEffect } from \"./spells/aid.js\";\nimport { alterSelfEffect } from \"./spells/alterSelf.js\";\nimport { animalFriendshipEffect } from \"./spells/animalFriendship.js\";\nimport { arcaneSwordEffect } from \"./spells/arcaneSword.js\";\nimport { armorOfAgathysEffect } from \"./spells/armorOfAgathys.js\";\nimport { auraOfLifeEffect } from \"./spells/auraOfLife.js\";\nimport { baneEffect } from \"./spells/bane.js\";\nimport { banishmentEffect } from \"./spells/banishment.js\";\nimport { barkskinEffect } from \"./spells/barkskin.js\";\nimport { beaconofHopeEffect } from \"./spells/beaconofHope.js\";\nimport { blackTentaclesEffect } from \"./spells/blackTentacles.js\";\nimport { blessEffect } from \"./spells/bless.js\";\nimport { blindnessDeafnessEffect } from \"./spells/blindnessDeafness.js\";\nimport { blurEffect } from \"./spells/blur.js\";\nimport { boomingBladeEffect } from \"./spells/boomingBlade.js\";\nimport { brandingSmiteEffect } from \"./spells/brandingSmite.js\";\nimport { callLightningEffect } from \"./spells/callLightning.js\";\nimport { charmPersonEffect } from \"./spells/charmPerson.js\";\nimport { chillTouchEffect } from \"./spells/chillTouch.js\";\nimport { chromaticOrbEffect } from \"./spells/chromaticOrb.js\";\nimport { cloudkillEffect } from \"./spells/cloudkill.js\";\nimport { colorSprayEffect } from \"./spells/colorSpray.js\";\nimport { commandEffect } from \"./spells/command.js\";\nimport { comprehendLanguagesEffect } from \"./spells/comprehendLanguages.js\";\nimport { confusionEffect } from \"./spells/confusion.js\";\nimport { contagionEffect } from \"./spells/contagion.js\";\nimport { createBonfireEffect } from \"./spells/createBonfire.js\";\nimport { crownofMadnessEffect } from \"./spells/crownofMadness.js\";\nimport { crownofStarsEffect } from \"./spells/crownofStars.js\";\nimport { darknessEffect } from \"./spells/darkness.js\";\nimport { darkvisionEffect } from \"./spells/darkvision.js\";\nimport { divineFavorEffect } from \"./spells/divineFavor.js\";\nimport { divineWordEffect } from \"./spells/divineWord.js\";\nimport { dominateBeastEffect } from \"./spells/dominateBeast.js\";\nimport { dominateMonsterEffect } from \"./spells/dominateMonster.js\";\nimport { dominatePersonEffect } from \"./spells/dominatePerson.js\";\nimport { elementalWeaponEffect } from \"./spells/elementalWeapon.js\";\nimport { enhanceAbilityEffect } from \"./spells/enhanceAbility.js\";\nimport { enlargeReduceEffect } from \"./spells/enlargeReduce.js\";\nimport { ensnaringStrikeEffect } from \"./spells/ensnaringStrike.js\";\nimport { entangleEffect } from \"./spells/entangle.js\";\nimport { eyebiteEffect } from \"./spells/eyebite.js\";\nimport { faerieFireEffect } from \"./spells/faerieFire.js\";\nimport { fearEffect } from \"./spells/fear.js\";\nimport { feeblemindEffect } from \"./spells/feeblemind.js\";\nimport { fireShieldEffect } from \"./spells/fireShield.js\";\nimport { flameBladeEffect } from \"./spells/flameBlade.js\";\nimport { fleshtoStoneEffect } from \"./spells/fleshtoStone.js\";\nimport { flyEffect } from \"./spells/fly.js\";\nimport { frostbiteEffect } from \"./spells/frostbite.js\";\nimport { geasEffect } from \"./spells/geas.js\";\nimport { greaseEffect } from \"./spells/grease.js\";\nimport { greenFlameBladeEffect } from \"./spells/greenFlameBlade.js\";\nimport { guidanceEffect } from \"./spells/guidance.js\";\nimport { guidingBoltEffect } from \"./spells/guidingBolt.js\";\nimport { hasteEffect } from \"./spells/haste.js\";\nimport { heroesFeastEffect } from \"./spells/heroesFeast.js\";\nimport { heroismEffect } from \"./spells/heroism.js\";\nimport { hexEffect } from \"./spells/hex.js\";\nimport { hideousLaughterEffect } from \"./spells/hideousLaughter.js\";\nimport { holdMonsterEffect } from \"./spells/holdMonster.js\";\nimport { holdPersonEffect } from \"./spells/holdPerson.js\";\nimport { holyAuraEffect } from \"./spells/holyAura.js\";\nimport { huntersMarkEffect } from \"./spells/huntersMark.js\";\nimport { hypnoticPatternEffect } from \"./spells/hypnoticPattern.js\";\nimport { iceKnifeEffect } from \"./spells/iceKnife.js\";\nimport { incendiaryCloudEffect } from \"./spells/incendiaryCloud.js\";\nimport { insectPlagueEffect } from \"./spells/insectPlague.js\";\nimport { invisibilityEffect } from \"./spells/invisibility.js\";\nimport { irresistibleDanceEffect } from \"./spells/irresistibleDance.js\";\nimport { lightEffect } from \"./spells/light.js\";\nimport { longstriderEffect } from \"./spells/longstrider.js\";\nimport { mageArmorEffect } from \"./spells/mageArmor.js\";\nimport { magicWeaponEffect } from \"./spells/magicWeapon.js\";\nimport { massSuggestionEffect } from \"./spells/massSuggestion.js\";\nimport { mindBlankEffect } from \"./spells/mindBlank.js\";\nimport { mirrorImageEffect } from \"./spells/mirrorImage.js\";\nimport { mistyStepEffect } from \"./spells/mistyStep.js\";\nimport { moonbeamEffect } from \"./spells/moonbeam.js\";\nimport { passWithoutTraceEffect } from \"./spells/passWithoutTrace.js\";\nimport { phantasmalKillerEffect } from \"./spells/phantasmalKiller.js\";\nimport { polymorphEffect } from \"./spells/polymorph.js\";\nimport { protectionfromEnergyEffect } from \"./spells/protectionfromEnergy.js\";\nimport { protectionfromPoisonEffect } from \"./spells/protectionfromPoison.js\";\nimport { rayofEnfeeblementEffect } from \"./spells/rayofEnfeeblement.js\";\nimport { rayofFrostEffect } from \"./spells/rayofFrost.js\";\nimport { regenerateEffect } from \"./spells/regenerate.js\";\nimport { resilientSphereEffect } from \"./spells/resilientSphere.js\";\nimport { resistanceEffect } from \"./spells/resistance.js\";\nimport { shieldEffect } from \"./spells/shield.js\";\nimport { shieldofFaithEffect } from \"./spells/shieldofFaith.js\";\nimport { shillelaghEffect } from \"./spells/shillelagh.js\";\nimport { silenceEffect } from \"./spells/silence.js\";\nimport { sleepEffect } from \"./spells/sleep.js\";\nimport { slowEffect } from \"./spells/slow.js\";\nimport { spiderClimbEffect } from \"./spells/spiderClimb.js\";\nimport { spikeGrowthEffect } from \"./spells/spikeGrowth.js\";\nimport { spiritGuardiansEffect } from \"./spells/spiritGuardians.js\";\nimport { spiritShroudEffect } from \"./spells/spiritShroud.js\";\nimport { spiritualWeaponEffect } from \"./spells/spiritualWeapon.js\";\nimport { stoneskinEffect } from \"./spells/stoneskin.js\";\nimport { stormSphereEffect } from \"./spells/stormSphere.js\";\nimport { sunbeamEffect } from \"./spells/sunbeam.js\";\nimport { thunderousSmiteEffect } from \"./spells/thunderousSmite.js\";\nimport { tolltheDeadEffect } from \"./spells/tolltheDead.js\";\nimport { trueStrikeEffect } from \"./spells/trueStrike.js\";\nimport { viciousMockeryEffect } from \"./spells/viciousMockery.js\";\nimport { vitriolicSphereEffect } from \"./spells/vitriolicSphere.js\";\nimport { wardingBondEffect } from \"./spells/wardingBond.js\";\nimport { webEffect } from \"./spells/web.js\";\nimport { witchBoltEffect } from \"./spells/witchBolt.js\";\nimport { zephyrStrikeEffect } from \"./spells/zephyrStrike.js\";\n\n\nexport function spellEffectModules() {\n  if (CONFIG.DDBI.EFFECT_CONFIG.SPELLS.installedModules) {\n    return CONFIG.DDBI.EFFECT_CONFIG.SPELLS.installedModules;\n  }\n  const midiQolInstalled = game.modules.get(\"midi-qol\")?.active;\n  const advancedMacrosInstalled = game.modules.get(\"advanced-macros\")?.active;\n  const itemMacroInstalled = game.modules.get(\"itemacro\")?.active;\n  const timesUp = game.modules.get(\"times-up\")?.active;\n  const daeInstalled = game.modules.get(\"dae\")?.active;\n  const convenientEffectsInstalled = game.modules.get(\"dfreds-convenient-effects\")?.active;\n\n  const activeAurasInstalled = game.modules.get(\"ActiveAuras\")?.active;\n  const atlInstalled = game.modules.get(\"ATL\")?.active;\n  const tokenAurasInstalled = game.modules.get(\"token-auras\")?.active;\n  const tokenMagicInstalled = game.modules.get(\"tokenmagic\")?.active;\n  const autoAnimationsInstalled = game.modules.get(\"autoanimations\")?.active;\n  CONFIG.DDBI.EFFECT_CONFIG.SPELLS.installedModules = {\n    hasCore: itemMacroInstalled && midiQolInstalled && advancedMacrosInstalled && timesUp && daeInstalled && convenientEffectsInstalled,\n    midiQolInstalled,\n    itemMacroInstalled,\n    advancedMacrosInstalled,\n    timesUp,\n    daeInstalled,\n    convenientEffectsInstalled,\n    atlInstalled,\n    tokenAurasInstalled,\n    tokenMagicInstalled,\n    activeAurasInstalled,\n    autoAnimationsInstalled,\n  };\n  return CONFIG.DDBI.EFFECT_CONFIG.SPELLS.installedModules;\n}\n\nexport function baseSpellEffect(document, label) {\n  return {\n    label,\n    icon: document.img,\n    changes: [],\n    duration: {},\n    tint: \"\",\n    transfer: false,\n    disabled: false,\n    flags: {\n      dae: {\n        transfer: false,\n        stackable: \"none\",\n      },\n      ddbimporter: {\n        disabled: false,\n      },\n      \"midi-qol\": { // by default force CE effect usage to off\n        forceCEOff: true,\n      },\n    },\n  };\n}\n\nexport function generateStatusEffectChange(statusName, priority = 20, macro = false) {\n  return baseGenerateStatusEffectChange(statusName, priority, macro);\n}\n\nexport function generateTokenMagicFXChange(macroValue, priority = 20) {\n  return baseGenerateTokenMagicFXChange(macroValue, priority);\n}\n\nexport function generateATLChange(atlKey, mode, value, priority = 20) {\n  return baseGenerateATLChange(atlKey, mode, value, priority);\n}\n\n/**\n * This function is mainly for effects that can't be dynamically generated\n * @param {*} document\n */\n// eslint-disable-next-line complexity\nexport async function spellEffectAdjustment(document) {\n  if (!document.effects) document.effects = [];\n\n  // check that we can gen effects\n  const deps = spellEffectModules();\n  if (!deps.hasCore) {\n    logger.warn(\"Sorry, you're missing some required modules for spell effects. Please install them and try again.\", deps);\n    return document;\n  }\n  if (!CONFIG.DDBI.EFFECT_CONFIG.SPELLS.configured) {\n    CONFIG.DDBI.EFFECT_CONFIG.SPELLS.configured = configureDependencies();\n  }\n\n  const name = document.flags.ddbimporter.originalName ?? document.name;\n  logger.debug(`Adding effects to ${name}`);\n  switch (name) {\n    case \"Absorb Elements\": {\n      document = absorbElementsEffect(document);\n      break;\n    }\n    case \"Melf's Acid Arrow\":\n    case \"Acid Arrow\": {\n      document = acidArrowEffect(document);\n      break;\n    }\n    case \"Aid\": {\n      document = await aidEffect(document);\n      break;\n    }\n    case \"Alter Self\": {\n      document = alterSelfEffect(document);\n      break;\n    }\n    case \"Animal Friendship\": {\n      document = animalFriendshipEffect(document);\n      break;\n    }\n    case \"Mordenkainen's Sword\":\n    case \"Arcane Sword\": {\n      document = await arcaneSwordEffect(document);\n      break;\n    }\n    case \"Armor of Agathys\": {\n      document = await armorOfAgathysEffect(document);\n      break;\n    }\n    case \"Aura of Life\": {\n      document = await auraOfLifeEffect(document);\n      break;\n    }\n    case \"Bane\": {\n      document = baneEffect(document);\n      break;\n    }\n    case \"Banishment\": {\n      document = await banishmentEffect(document);\n      break;\n    }\n    case \"Barkskin\": {\n      document = barkskinEffect(document);\n      break;\n    }\n    case \"Beacon of Hope\": {\n      document = beaconofHopeEffect(document);\n      break;\n    }\n    case \"Evard's Black Tentacles\":\n    case \"Black Tentacles\": {\n      document = await blackTentaclesEffect(document);\n      break;\n    }\n    case \"Bless\": {\n      document = blessEffect(document);\n      break;\n    }\n    case \"Blur\": {\n      document = blurEffect(document);\n      break;\n    }\n    case \"Blindness/Deafness\": {\n      document = await blindnessDeafnessEffect(document);\n      break;\n    }\n    case \"Booming Blade\": {\n      document = await boomingBladeEffect(document);\n      break;\n    }\n    case \"Branding Smite\": {\n      document = await brandingSmiteEffect(document);\n      break;\n    }\n    case \"Call Lightning\": {\n      document = await callLightningEffect(document);\n      break;\n    }\n    case \"Charm Person\": {\n      document = charmPersonEffect(document);\n      break;\n    }\n    case \"Chill Touch\": {\n      document = await chillTouchEffect(document);\n      break;\n    }\n    case \"Chromatic Orb\": {\n      document = await chromaticOrbEffect(document);\n      break;\n    }\n    case \"Cloudkill\": {\n      document = await cloudkillEffect(document);\n      break;\n    }\n    case \"Color Spray\": {\n      document = await colorSprayEffect(document);\n      break;\n    }\n    case \"Command\": {\n      document = commandEffect(document);\n      break;\n    }\n    case \"Comprehend Languages\": {\n      document = comprehendLanguagesEffect(document);\n      break;\n    }\n    case \"Confusion\": {\n      document = await confusionEffect(document);\n      break;\n    }\n    case \"Contagion\": {\n      document = await contagionEffect(document);\n      break;\n    }\n    case \"Crown of Stars\": {\n      document = await crownofStarsEffect(document);\n      break;\n    }\n    case \"Crown of Madness\": {\n      document = crownofMadnessEffect(document);\n      break;\n    }\n    case \"Create Bonfire\": {\n      document = await createBonfireEffect(document);\n      break;\n    }\n    case \"Darkness\": {\n      document = await darknessEffect(document);\n      break;\n    }\n    case \"Darkvision\": {\n      document = await darkvisionEffect(document);\n      break;\n    }\n    case \"Divine Favor\": {\n      document = divineFavorEffect(document);\n      break;\n    }\n    case \"Divine Word\": {\n      document = await divineWordEffect(document);\n      break;\n    }\n    case \"Dominate Beast\": {\n      document = dominateBeastEffect(document);\n      break;\n    }\n    case \"Dominate Monster\": {\n      document = dominateMonsterEffect(document);\n      break;\n    }\n    case \"Dominate Person\": {\n      document = dominatePersonEffect(document);\n      break;\n    }\n    case \"Elemental Weapon\": {\n      document = await elementalWeaponEffect(document);\n      break;\n    }\n    case \"Enhance Ability\": {\n      document = await enhanceAbilityEffect(document);\n      break;\n    }\n    case \"Enlarge/Reduce\": {\n      document = await enlargeReduceEffect(document);\n      break;\n    }\n    case \"Ensnaring Strike\": {\n      document = await ensnaringStrikeEffect(document);\n      break;\n    }\n    case \"Entangle\": {\n      document = entangleEffect(document);\n      break;\n    }\n    case \"Eyebite\": {\n      document = await eyebiteEffect(document);\n      break;\n    }\n    case \"Faerie Fire\": {\n      document = await faerieFireEffect(document);\n      break;\n    }\n    case \"Fear\": {\n      document = fearEffect(document);\n      break;\n    }\n    case \"Feeblemind\": {\n      document = feeblemindEffect(document);\n      break;\n    }\n    case \"Fire Shield\": {\n      document = await fireShieldEffect(document);\n      break;\n    }\n    case \"Flame Blade\": {\n      document = await flameBladeEffect(document);\n      break;\n    }\n    case \"Flesh to Stone\": {\n      document = await fleshtoStoneEffect(document);\n      break;\n    }\n    case \"Fly\": {\n      document = flyEffect(document);\n      break;\n    }\n    case \"Frostbite\": {\n      document = frostbiteEffect(document);\n      break;\n    }\n    case \"Geas\": {\n      document = geasEffect(document);\n      break;\n    }\n    case \"Grease\": {\n      document = await greaseEffect(document);\n      break;\n    }\n    case \"Greater Invisibility\": {\n      document = await invisibilityEffect(document);\n      break;\n    }\n    case \"Green-Flame Blade\": {\n      document = await greenFlameBladeEffect(document);\n      break;\n    }\n    case \"Guidance\": {\n      document = guidanceEffect(document);\n      break;\n    }\n    case \"Guiding Bolt\": {\n      document = guidingBoltEffect(document);\n      break;\n    }\n    case \"Haste\": {\n      document = hasteEffect(document);\n      break;\n    }\n    case \"Heroes' Feast\": {\n      document = await heroesFeastEffect(document);\n      break;\n    }\n    case \"Heroism\": {\n      document = await heroismEffect(document);\n      break;\n    }\n    case \"Hex\": {\n      document = await hexEffect(document);\n      break;\n    }\n    case \"Tasha's Hideous Laughter\":\n    case \"Hideous Laughter\": {\n      document = await hideousLaughterEffect(document);\n      break;\n    }\n    case \"Hold Monster\": {\n      document = holdMonsterEffect(document);\n      break;\n    }\n    case \"Hold Person\": {\n      document = holdPersonEffect(document);\n      break;\n    }\n    case \"Holy Aura\": {\n      document = holyAuraEffect(document);\n      break;\n    }\n    case \"Hunter's Mark\": {\n      document = await huntersMarkEffect(document);\n      break;\n    }\n    case \"Hypnotic Pattern\": {\n      document = hypnoticPatternEffect(document);\n      break;\n    }\n    case \"Ice Knife\": {\n      document = await iceKnifeEffect(document);\n      break;\n    }\n    case \"Incendiary Cloud\": {\n      document = await incendiaryCloudEffect(document);\n      break;\n    }\n    case \"Insect Plague\": {\n      document = await insectPlagueEffect(document);\n      break;\n    }\n    case \"Invisibility\": {\n      document = await invisibilityEffect(document);\n      break;\n    }\n    case \"Otto's Irresistible Dance\":\n    case \"Irresistible Dance\": {\n      document = await irresistibleDanceEffect(document);\n      break;\n    }\n    case \"Light\": {\n      document = lightEffect(document);\n      break;\n    }\n    case \"Longstrider\": {\n      document = longstriderEffect(document);\n      break;\n    }\n    case \"Mage Armor\": {\n      document = mageArmorEffect(document);\n      break;\n    }\n    case \"Magic Weapon\": {\n      document = await magicWeaponEffect(document);\n      break;\n    }\n    case \"Mass Suggestion\": {\n      document = massSuggestionEffect(document);\n      break;\n    }\n    case \"Mind Blank\": {\n      document = mindBlankEffect(document);\n      break;\n    }\n    case \"Mirror Image\": {\n      document = mirrorImageEffect(document);\n      break;\n    }\n    case \"Misty Step\": {\n      document = await mistyStepEffect(document);\n      break;\n    }\n    case \"Moonbeam\": {\n      document = await moonbeamEffect(document);\n      break;\n    }\n    case \"Pass Without Trace\": {\n      document = passWithoutTraceEffect(document);\n      break;\n    }\n    case \"Phantasmal Killer\": {\n      document = phantasmalKillerEffect(document);\n      break;\n    }\n    case \"Polymorph\": {\n      document = polymorphEffect(document);\n      break;\n    }\n    case \"Protection from Energy\": {\n      document = await protectionfromEnergyEffect(document);\n      break;\n    }\n    case \"Protection from Poison\": {\n      document = protectionfromPoisonEffect(document);\n      break;\n    }\n    case \"Ray of Enfeeblement\": {\n      document = await rayofEnfeeblementEffect(document);\n      break;\n    }\n    case \"Ray of Frost\": {\n      document = rayofFrostEffect(document);\n      break;\n    }\n    case \"Regenerate\": {\n      document = regenerateEffect(document);\n      break;\n    }\n    case \"Otiluke's Resilient Sphere\":\n    case \"Resilient Sphere\": {\n      document = resilientSphereEffect(document);\n      break;\n    }\n    case \"Resistance\": {\n      document = resistanceEffect(document);\n      break;\n    }\n    case \"Shield\": {\n      document = shieldEffect(document);\n      break;\n    }\n    case \"Shield of Faith\": {\n      document = shieldofFaithEffect(document);\n      break;\n    }\n    case \"Shillelagh\": {\n      document = await shillelaghEffect(document);\n      break;\n    }\n    case \"Silence\": {\n      document = await silenceEffect(document);\n      break;\n    }\n    case \"Sleep\": {\n      document = await sleepEffect(document);\n      break;\n    }\n    case \"Slow\": {\n      document = slowEffect(document);\n      break;\n    }\n    case \"Spider Climb\": {\n      document = spiderClimbEffect(document);\n      break;\n    }\n    case \"Spike Growth\": {\n      document = await spikeGrowthEffect(document);\n      break;\n    }\n    case \"Spirit Guardians\": {\n      document = await spiritGuardiansEffect(document);\n      break;\n    }\n    case \"Spirit Shroud\": {\n      document = await spiritShroudEffect(document);\n      break;\n    }\n    case \"Spiritual Weapon\": {\n      document = await spiritualWeaponEffect(document);\n      break;\n    }\n    case \"Storm Sphere\": {\n      document = await stormSphereEffect(document);\n      break;\n    }\n    case \"Stoneskin\": {\n      document = stoneskinEffect(document);\n      break;\n    }\n    case \"Sunbeam\": {\n      document = sunbeamEffect(document);\n      break;\n    }\n    case \"Toll the Dead\": {\n      document = await tolltheDeadEffect(document);\n      break;\n    }\n    case \"Thunderous Smite\": {\n      document = await thunderousSmiteEffect(document);\n      break;\n    }\n    case \"True Strike\": {\n      document = trueStrikeEffect(document);\n      break;\n    }\n    case \"Vicious Mockery\": {\n      document = viciousMockeryEffect(document);\n      break;\n    }\n    case \"Vitriolic Sphere\": {\n      document = await vitriolicSphereEffect(document);\n      break;\n    }\n    case \"Warding Bond\": {\n      document = await wardingBondEffect(document);\n      break;\n    }\n    case \"Web\": {\n      document = await webEffect(document);\n      break;\n    }\n    case \"Witch Bolt\": {\n      document = await witchBoltEffect(document);\n      break;\n    }\n    case \"Zephyr Strike\": {\n      document = await zephyrStrikeEffect(document);\n      break;\n    }\n    // no default\n  }\n  try {\n    document = forceItemEffect(document);\n  } catch (err) {\n    await Promise.all(document);\n    logger.error(\"Error applying effects: \", { err, document });\n  }\n  return document;\n}\n","import logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\n\n// const BASE_PATH = ROUTE_PREFIX ? `/${ROUTE_PREFIX}` : \"\";\n\nconst TYPE_MAP = {\n  items: \"items\",\n  weapons: \"items\",\n  weapon: \"items\",\n  item: \"items\",\n  equipment: \"items\",\n  consumable: \"items\",\n  tool: \"items\",\n  loot: \"items\",\n  backpack: \"items\",\n  inventory: \"items\",\n  spells: \"spells\",\n  spell: \"spells\",\n  feats: \"feats\",\n  feat: \"feats\",\n  classes: \"classes\",\n  class: \"classes\",\n  subclass: \"classes\",\n  monster: \"monster\",\n  backgrounds: \"backgrounds\",\n  background: \"backgrounds\",\n  traits: \"traits\",\n  races: \"races\",\n  race: \"races\",\n};\n\nconst FILE_MAP = {\n  items: [\"items.json\", \"class-features.json\", \"races.json\"],\n  traits: [\"class-features.json\", \"races.json\", \"general.json\", \"items.json\"],\n  spells: [\"spells.json\"],\n  races: [\"races.json\"],\n  feats: [\"feats.json\", \"class-features.json\", \"races.json\", \"general.json\"],\n  classes: [\"classes.json\"],\n  monster: [\"named-monster-features.json\", \"generic-monster-features.json\"],\n  backgrounds: [\"backgrounds.json\", \"feats.json\", \"class-features.json\", \"races.json\", \"general.json\"],\n};\n\nfunction sanitiseName(name) {\n  return name.replace(\"’\", \"'\").toLowerCase();\n}\n\nasync function loadDataFile(fileName) {\n  logger.debug(`Getting icon mapping for ${fileName}`);\n  const fileExists = await FileHelper.fileExists(\"[data] modules/ddb-importer/data\", fileName);\n\n  const url = await FileHelper.getFileUrl(\"[data] modules/ddb-importer/data\", fileName);\n  if (!fileExists) {\n    logger.warn(`Possible missing file, icon load may fail. Fetching ${url}`);\n  }\n\n  const data = await fetchJsonWithTimeout(url);\n  return data;\n}\n\nasync function loadIconMap(type) {\n  // check to see if dictionary is loaded\n  if (CONFIG.DDBI.ICONS[type]) return;\n\n  logger.debug(`Loading Inbuilt Icon Map for ${type}`);\n  let data = [];\n  for (const fileName of FILE_MAP[type]) {\n    // eslint-disable-next-line no-await-in-loop\n    const dataLoad = await loadDataFile(fileName);\n    data = data.concat(dataLoad);\n  }\n\n  CONFIG.DDBI.ICONS[type] = data;\n  // console.warn(iconMap);\n}\n\nfunction looseMatch(item, typeValue) {\n  const originalName = item.flags?.ddbimporter?.originalName;\n  if (originalName) {\n    const originalMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name) === sanitiseName(originalName));\n    if (originalMatch) return originalMatch.path;\n  }\n\n  const sanitisedName = sanitiseName(item.name);\n  if (item.name.includes(\":\")) {\n    const nameArray = sanitisedName.split(\":\");\n    const postMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name) === nameArray[1].trim());\n    if (postMatch) return postMatch.path;\n    const subMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name) === nameArray[0].trim());\n    if (subMatch) return subMatch.path;\n  }\n\n  const startsMatchEntry = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitisedName.split(\":\")[0].trim().startsWith(sanitiseName(entry.name).split(\":\")[0].trim()));\n  if (startsMatchEntry) return startsMatchEntry.path;\n  const startsMatchItem = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name).split(\":\")[0].trim().startsWith(sanitisedName.split(\":\")[0].trim()));\n  if (startsMatchItem) return startsMatchItem.path;\n\n  if (item.type === \"subclass\" && item.system.classIdentifier) {\n    const sanitisedClassName = sanitiseName(item.system.classIdentifier);\n    const subClassMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name).startsWith(sanitisedClassName));\n    if (subClassMatch) return subClassMatch.path;\n  }\n\n  return null;\n}\n\nfunction getIconPath(item, type, monsterName) {\n  // check to see if we are able to load a dic for that type\n  const typeValue = TYPE_MAP[type];\n  if (!typeValue || !CONFIG.DDBI.ICONS[typeValue]) return null;\n\n  const iconMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => {\n    const sanitisedName = sanitiseName(entry.name);\n    const sanitisedItemName = sanitiseName(item.name);\n    if (type === \"monster\") {\n      return sanitisedName === sanitisedItemName.split(\"(\")[0].trim() && entry.monster && sanitiseName(entry.monster) == sanitiseName(monsterName);\n    }\n    return sanitisedName === sanitisedItemName;\n  });\n\n  if (!iconMatch && type === \"monster\") {\n    const genericMonsterIconMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => {\n      const sanitisedName = sanitiseName(entry.name);\n      const sanitisedItemName = sanitiseName(item.name);\n      return sanitisedName === sanitisedItemName;\n    });\n    if (genericMonsterIconMatch) return genericMonsterIconMatch.path;\n  }\n\n  if (iconMatch) {\n    return iconMatch.path;\n  } else {\n    return looseMatch(item, typeValue);\n  }\n}\n\n\nasync function loadIconMaps(types) {\n  let promises = [];\n\n  const mapTypes = types\n    .filter((type) => TYPE_MAP[type])\n    .map((type) => TYPE_MAP[type]).filter((type, i, ar) => ar.indexOf(type) === i);\n\n  mapTypes.forEach((type) => {\n    // logger.debug(`Loading ${type}`);\n    promises.push(loadIconMap(type));\n  });\n\n  return Promise.all(promises);\n}\n\nexport async function iconPath(item, monster = false, monsterName = \"\") {\n  const itemTypes = [item.type];\n  if (monster) itemTypes.push(\"monster\");\n  await loadIconMaps(itemTypes);\n\n  let iconPath;\n  // logger.debug(`Inbuilt icon match started for ${item.name} [${item.type}]`);\n  // if we have a monster lets check the monster dict first\n  if (monster) {\n    const monsterPath = getIconPath(item, \"monster\", monsterName);\n    if (monsterPath) {\n      iconPath = monsterPath;\n    }\n  }\n  if (!iconPath) iconPath = getIconPath(item, item.type);\n  return iconPath;\n}\n\nexport async function copyInbuiltIcons(items, monster = false, monsterName = \"\") {\n  // get unique array of item types to be matching\n  const itemTypes = items.map((item) => item.type).filter((item, i, ar) => ar.indexOf(item) === i);\n\n  if (monster) itemTypes.push(\"monster\");\n  await loadIconMaps(itemTypes);\n\n  return new Promise((resolve) => {\n    const iconItems = items.map((item) => {\n      if (getProperty(item, \"flags.ddbimporter.keepIcon\") !== true) {\n        // logger.debug(`Inbuilt icon match started for ${item.name} [${item.type}]`);\n        // if we have a monster lets check the monster dict first\n        if (monster) {\n          const monsterPath = getIconPath(item, \"monster\", monsterName);\n          if (monsterPath) {\n            item.img = monsterPath;\n            return item;\n          }\n        }\n        const pathMatched = getIconPath(item, item.type);\n        if (pathMatched) {\n          item.img = pathMatched;\n          if (item.effects) {\n            item.effects.forEach((effect) => {\n              if (!effect.icon || effect.icon === \"\") {\n                effect.icon = pathMatched;\n              }\n            });\n          }\n        }\n      }\n      return item;\n    });\n    resolve(iconItems);\n  });\n}\n","import logger from \"../logger.js\";\nimport { copySupportedItemFlags } from \"../muncher/import.js\";\nimport SETTINGS from '../settings.js';\nimport utils from \"./utils.js\";\n\nconst CompendiumHelper = {\n\n  // a mapping of compendiums with content type\n  LOOKUP: [\n    { type: \"spells\", compendium: \"entity-spell-compendium\" },\n    { type: \"spell\", compendium: \"entity-spell-compendium\" },\n    { type: \"feats\", compendium: \"entity-feat-compendium\" },\n    { type: \"features\", compendium: \"entity-feature-compendium\" },\n    { type: \"feature\", compendium: \"entity-feature-compendium\" },\n    { type: \"feat\", compendium: \"entity-feature-compendium\" },\n    { type: \"classes\", compendium: \"entity-class-compendium\" },\n    { type: \"class\", compendium: \"entity-class-compendium\" },\n    { type: \"subclasses\", compendium: \"entity-subclass-compendium\" },\n    { type: \"subclass\", compendium: \"entity-subclass-compendium\" },\n    { type: \"races\", compendium: \"entity-race-compendium\" },\n    { type: \"race\", compendium: \"entity-race-compendium\" },\n    { type: \"traits\", compendium: \"entity-trait-compendium\" },\n    { type: \"trait\", compendium: \"entity-trait-compendium\" },\n    { type: \"npc\", compendium: \"entity-monster-compendium\" },\n    { type: \"monsters\", compendium: \"entity-monster-compendium\" },\n    { type: \"monster\", compendium: \"entity-monster-compendium\" },\n    { type: \"custom\", compendium: \"entity-override-compendium\" },\n    { type: \"override\", compendium: \"entity-override-compendium\" },\n    { type: \"inventory\", compendium: \"entity-item-compendium\" },\n    { type: \"item\", compendium: \"entity-item-compendium\" },\n    { type: \"items\", compendium: \"entity-item-compendium\" },\n    { type: \"magicitem\", compendium: \"entity-item-compendium\" },\n    { type: \"weapon\", compendium: \"entity-item-compendium\" },\n    { type: \"consumable\", compendium: \"entity-item-compendium\" },\n    { type: \"tool\", compendium: \"entity-item-compendium\" },\n    { type: \"loot\", compendium: \"entity-item-compendium\" },\n    { type: \"backpack\", compendium: \"entity-item-compendium\" },\n    { type: \"spell\", compendium: \"entity-spell-compendium\" },\n    { type: \"equipment\", compendium: \"entity-item-compendium\" },\n    { type: \"table\", compendium: \"entity-table-compendium\" },\n    { type: \"tables\", compendium: \"entity-table-compendium\" },\n    { type: \"background\", compendium: \"entity-background-compendium\" },\n    { type: \"backgrounds\", compendium: \"entity-background-compendium\" },\n    { type: \"vehicle\", compendium: \"entity-vehicle-compendium\" },\n    { type: \"vehicles\", compendium: \"entity-vehicle-compendium\" },\n    { type: \"adventure\", compendium: \"entity-adventure-compendium\" },\n    { type: \"adventures\", compendium: \"entity-adventure-compendium\" },\n  ],\n\n  getCompendiumLabel: (type) => {\n    const compendiumName = CompendiumHelper.LOOKUP.find((c) => c.type == type).compendium;\n    const compendiumLabel = game.settings.get(\"ddb-importer\", compendiumName);\n    return compendiumLabel;\n  },\n\n  getCompendium: (label, fail = true) => {\n    const compendium = game.packs.get(label);\n    if (compendium) {\n      return compendium;\n    } else {\n      if (fail) {\n        logger.error(`Unable to find compendium ${label}`);\n        ui.notifications.error(`Unable to open the Compendium ${label}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\"`);\n        throw new Error(`Unable to open the Compendium ${label}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\".`);\n      }\n      return undefined;\n    }\n  },\n\n  getCompendiumType: (type, fail = true) => {\n    const compendiumLabel = CompendiumHelper.getCompendiumLabel(type);\n    logger.debug(`Getting compendium ${compendiumLabel} for update of ${type}`);\n    const compendium = CompendiumHelper.getCompendium(compendiumLabel, false);\n    if (compendium) {\n      return compendium;\n    } else {\n      logger.error(`Unable to find compendium ${compendiumLabel} for ${type} documents`);\n      ui.notifications.error(`Unable to open the Compendium ${compendiumLabel}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\"`);\n      if (fail) {\n        throw new Error(`Unable to open the Compendium ${compendiumLabel}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\"`);\n      }\n      return undefined;\n    }\n  },\n\n  loadCompendiumIndex: async (type, indexOptions = {}) => {\n    const compendiumLabel = CompendiumHelper.getCompendiumLabel(type);\n    setProperty(CONFIG.DDBI, `compendium.label.${type}`, compendiumLabel);\n    const compendium = await CompendiumHelper.getCompendium(compendiumLabel);\n\n    if (compendium) {\n      const index = await compendium.getIndex(indexOptions);\n      setProperty(CONFIG.DDBI, `compendium.index.${type}`, index);\n      return index;\n    } else {\n      return undefined;\n    }\n  },\n\n  /* eslint-disable require-atomic-updates */\n  copyExistingActorProperties: async (type, foundryActor) => {\n    const compendium = CompendiumHelper.getCompendiumType(type);\n\n    if (game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\")) {\n      const existingNPC = await compendium.getDocument(foundryActor._id);\n\n      const updateImages = game.settings.get(\"ddb-importer\", \"munching-policy-update-images\");\n      if (!updateImages && existingNPC.system.img !== CONST.DEFAULT_TOKEN) {\n        foundryActor.img = existingNPC.system.img;\n      }\n      if (!updateImages && getProperty(existingNPC, \"prototypeToken.texture.src\") !== CONST.DEFAULT_TOKEN) {\n        foundryActor.prototypeToken.texture.src = existingNPC.prototypeToken.texture.src;\n        foundryActor.prototypeToken.scale = existingNPC.prototypeToken.scale;\n        foundryActor.prototypeToken.randomImg = existingNPC.prototypeToken.randomImg;\n        foundryActor.prototypeToken.mirrorX = existingNPC.prototypeToken.mirrorX;\n        foundryActor.prototypeToken.mirrorY = existingNPC.prototypeToken.mirrorY;\n        foundryActor.prototypeToken.lockRotation = existingNPC.prototypeToken.lockRotation;\n        foundryActor.prototypeToken.rotation = existingNPC.prototypeToken.rotation;\n        foundryActor.prototypeToken.alpha = existingNPC.prototypeToken.alpha;\n        foundryActor.prototypeToken.lightAlpha = existingNPC.prototypeToken.lightAlpha;\n        foundryActor.prototypeToken.lightAnimation = existingNPC.prototypeToken.lightAnimation;\n        foundryActor.prototypeToken.tint = existingNPC.prototypeToken.tint;\n        foundryActor.prototypeToken.lightColor = existingNPC.prototypeToken.lightColor;\n      }\n\n      const retainBiography = game.settings.get(\"ddb-importer\", \"munching-policy-monster-retain-biography\");\n      if (retainBiography) {\n        foundryActor.system.details.biography = existingNPC.system.details.biography;\n      }\n\n      await copySupportedItemFlags(existingNPC.toObject(), foundryActor);\n    }\n\n    return foundryActor;\n\n  },\n  /* eslint-enable require-atomic-updates */\n\n  getActorIndexActor: async (type, npc) => {\n    const monsterIndexFields = [\"name\", \"flags.ddbimporter.id\"];\n    const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    const index = await CompendiumHelper.loadCompendiumIndex(type, { fields: monsterIndexFields });\n    const npcMatch = index.contents.find((entity) =>\n      hasProperty(entity, \"flags.ddbimporter.id\")\n      && entity.flags.ddbimporter.id == npc.flags.ddbimporter.id\n      && ((!legacyName && entity.name.toLowerCase() === npc.name.toLowerCase())\n        || (legacyName && npc.flags.ddbimporter.isLegacy && npc.name.toLowerCase().startsWith(entity.name.toLowerCase()))\n        || (legacyName && entity.name.toLowerCase() === npc.name.toLowerCase()))\n    );\n    return npcMatch;\n  },\n\n  existingActorCheck: async (type, foundryActor) => {\n    const matchingActor = await CompendiumHelper.getActorIndexActor(type, foundryActor);\n    if (matchingActor) {\n      logger.debug(`Found existing ${type}, updating: ${matchingActor.name}`);\n      // eslint-disable-next-line require-atomic-updates\n      foundryActor._id = matchingActor._id;\n      foundryActor = await CompendiumHelper.copyExistingActorProperties(type, foundryActor);\n    } else {\n      logger.debug(`No existing compendium match for ${foundryActor.name}`);\n    }\n    return foundryActor;\n  },\n\n  sanitize: (text) => {\n    if (text && typeof text === \"string\") {\n      return text.replace(/\\s|\\./g, '-').toLowerCase();\n    }\n    return text;\n  },\n\n  getDefaultCompendiumName: (compendiumLabel) => {\n    const sanitizedLabel = CompendiumHelper.sanitize(compendiumLabel);\n    const name = `ddb-${game.world.id}-${sanitizedLabel}`;\n    return name;\n  },\n\n  /**\n   * Attempts to find a compendium pack by name, if not found, create a new one based on item type\n   * @param  {string} label - Label of compendium to find\n   * @param  {string} type - Name of compendium\n   * @param  {string} id - Id of compendium, optional, used in place of label to find compendium\n   * @param  {string} packageType - package type of compendium, defaults to world\n   * @returns {object} - Object consisting of compendium and creation result\n   */\n  createIfNotExists: async ({ label, type, id = undefined, packageType = \"world\" } = {}) => {\n    if (id) logger.debug(`Checking if Compendium with id ${id} exists for ${SETTINGS.MODULE_ID}`);\n    else if (label) logger.debug(`Checking if Compendium with label ${label} exists for ${SETTINGS.MODULE_ID}`);\n    const compendium = await game.packs.get(id) ?? game.packs.find((p) => p.metadata.label === label);\n    if (compendium) {\n      logger.debug(`Compendium '${id}' (${compendium.metadata.label}) found, will not create compendium.`);\n      return {\n        compendium,\n        created: false\n      };\n    } else {\n      logger.info(`Compendium for ${label}, was not found, creating it now.`);\n      const name = CompendiumHelper.getDefaultCompendiumName(label);\n      const defaultCompendium = await game.packs.get(`${packageType}.${name}`);\n      if (defaultCompendium) {\n        logger.error(`Could not load Compendium '${id}', and could not create default Compendium '${name}' as it already exists. Please check your DDB Importer Compendium setup.`);\n        return {\n          compendium: null,\n          created: false,\n        };\n      } else {\n        // create a compendium for the user\n        const newCompendium = await CompendiumCollection.createCompendium({\n          type,\n          label,\n          name,\n          package: packageType,\n        });\n        return {\n          compendium: newCompendium,\n          created: true\n        };\n      }\n    }\n  },\n\n  getCompendiumNames: () => {\n    return SETTINGS.COMPENDIUMS.map((ddbCompendium) => {\n      return game.settings.get(SETTINGS.MODULE_ID, ddbCompendium.setting);\n    });\n  },\n\n  deleteDefaultCompendiums: (force = true) => {\n    if (!force) {\n      logger.warn(\"Pass 'true' to this function to force deletion.\");\n    }\n    game.settings.set(SETTINGS.MODULE_ID, \"auto-create-compendium\", false);\n\n    const clone = foundry.utils.deepClone(SETTINGS.DEFAULT_SETTINGS);\n    const compendiumSettings = SETTINGS.APPLY_GLOBAL_DEFAULTS(clone.READY.COMPENDIUMS);\n\n    for (const [name, data] of Object.entries(compendiumSettings)) {\n      const compendiumName = CompendiumHelper.getDefaultCompendiumName(data.default);\n\n      logger.warn(`Setting: ${name} : Deleting compendium ${data.name} with key world.${compendiumName}}`);\n      game.packs.delete(`world.${compendiumName}`);\n    }\n  },\n\n  /**\n   * Queries a compendium for a single document\n   * Returns either the entry from the index, or the complete document from the compendium\n   */\n  queryCompendiumEntry: async (compendiumName, documentName, getDocument = false) => {\n    // normalize the entity name for comparison\n    documentName = utils.normalizeString(documentName);\n\n    // get the compendium\n    const compendium = game.packs.get(compendiumName);\n    if (!compendium) return null;\n\n    // retrieve the compendium index\n    const index = await compendium.getIndex();\n\n    let id = index.find((entity) => utils.normalizeString(entity.name) === documentName);\n    if (id && getDocument) {\n      let entity = await compendium.getDocument(id._id);\n      return entity;\n    }\n    return id ? id : null;\n  },\n\n  /**\n   * Queries a compendium for a single document\n   * Returns either the entry from the index, or the complete document from the compendium\n   */\n  queryCompendiumEntries: async (compendiumName, documentNames, getDocuments = false) => {\n    // get the compendium\n    let compendium = game.packs.get(compendiumName);\n    if (!compendium) return null;\n\n    // retrieve the compendium index\n    let index = await compendium.getIndex();\n    index = index.map((entry) => {\n      entry.normalizedName = utils.normalizeString(entry.name);\n      return entry;\n    });\n\n    // get the indices of all the entitynames, filter un\n    let indices = documentNames\n      .map((entityName) => {\n        // sometimes spells do have restricted use in paranthesis after the name. Let's try to find those restrictions and add them later\n        if (entityName.search(/(.+)\\(([^()]+)\\)*/) !== -1) {\n          const match = entityName.match(/(.+)\\(([^()]+)\\)*/);\n          return {\n            name: utils.normalizeString(match[1].trim()),\n            restriction: match[2].trim(),\n          };\n        } else {\n          return {\n            name: utils.normalizeString(entityName),\n            restriction: null,\n          };\n        }\n      })\n      .map((data) => {\n        let entry = index.find((entity) => entity.normalizedName === data.name);\n        if (entry) {\n          return {\n            _id: entry._id,\n            name: data.restriction ? `${entry.name} (${data.restriction})` : entry.name,\n          };\n        } else {\n          return null;\n        }\n      });\n\n    if (getDocuments) {\n      // replace non-null values with the complete entity from the compendium\n      let entities = await Promise.all(\n        indices.map((entry) => {\n          return new Promise((resolve) => {\n            if (entry) {\n              compendium.getDocument(entry._id).then((entity) => {\n                entity.name = entry.name; // transfer restrictions over, if any\n                // remove redudant info\n                delete entity.id;\n                delete entity.ownership;\n                resolve(entity);\n              });\n            } else {\n              resolve(null);\n            }\n          });\n        })\n      );\n      return entities;\n    }\n    return indices;\n  },\n\n  /**\n   * Queries a compendium for a given document name\n   * @returns the index entries of all matches, otherwise an empty array\n   */\n  queryCompendium: async (compendiumName, documentName, getDocument = false) => {\n    documentName = utils.normalizeString(documentName);\n\n    let compendium = game.packs.get(compendiumName);\n    if (!compendium) return null;\n    let index = await compendium.getIndex();\n    let id = index.find((entity) => utils.normalizeString(entity.name) === documentName);\n    if (id && getDocument) {\n      let entity = await compendium.getEntity(id._id);\n      return entity;\n    }\n    return id ? id : null;\n  },\n\n  /**\n   *\n   * @param {[string]} items Array of Strings or\n   */\n  async retrieveMatchingCompendiumItems(items, compendiumName) {\n    const GET_ENTITY = true;\n\n    const itemNames = items.map((item) => {\n      if (typeof item === \"string\") return item;\n      if (typeof item === \"object\" && Object.prototype.hasOwnProperty.call(item, \"name\")) return item.name;\n      return \"\";\n    });\n\n    const results = await CompendiumHelper.queryCompendiumEntries(compendiumName, itemNames, GET_ENTITY);\n    const cleanResults = results.filter((item) => item !== null);\n\n    return cleanResults;\n  }\n\n\n};\n\nexport default CompendiumHelper;\n","import DICTIONARY from \"../dictionary.js\";\nimport logger from \"../logger.js\";\nimport { getEffectExcludedModifiers } from \"../effects/effects.js\";\n\nconst DDBHelper = {\n\n  getDamageType: (data) => {\n    if (data.definition.damageType) {\n      const damageTypeReplace = data.definition.grantedModifiers.find((mod) =>\n        mod.type === \"replace-damage-type\"\n        && (!mod.restriction || mod.restriction === \"\")\n      );\n\n      const damageType = damageTypeReplace\n        ? damageTypeReplace.subType.toLowerCase()\n        : data.definition.damageType.toLowerCase();\n      return damageType;\n    } else {\n      return undefined;\n    }\n  },\n\n  globalDamageTagInfo: (mod) => {\n    const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n    const midiInstalled = game.modules.get(\"midi-qol\")?.active;\n    const damageRestrictionHints = game.settings.get(\"ddb-importer\", \"add-damage-restrictions-to-hints\") && !midiInstalled;\n    const hintOrRestriction = globalDamageHints || damageRestrictionHints;\n    const restriction = damageRestrictionHints && mod.restriction && mod.restriction !== \"\" ? mod.restriction : \"\";\n    const hintAndRestriction = globalDamageHints && restriction !== \"\" ? \" - \" : \"\";\n\n    return {\n      globalDamageHints,\n      damageRestrictionHints,\n      hintOrRestriction,\n      hintAndRestriction,\n      restriction,\n    };\n  },\n\n  getDamageTag(mod, overrideDamageType) {\n    const damageTagData = DDBHelper.globalDamageTagInfo(mod);\n    const damageType = overrideDamageType\n      ? overrideDamageType\n      : mod.subType && damageTagData.globalDamageHints ? mod.subType : \"\";\n    const damageHint = damageTagData.hintOrRestriction\n      ? `${damageType}${damageTagData.hintAndRestriction}${damageTagData.restriction}`\n      : \"\";\n    const damageTag = damageTagData.hintOrRestriction ? `[${damageHint}]` : \"\";\n    return {\n      globalDamageHints: damageTagData.globalDamageHints,\n      damageRestrictionHints: damageTagData.damageRestrictionHints,\n      hintOrRestriction: damageTagData.hintOrRestriction,\n      hintAndRestriction: damageTagData.hintAndRestriction,\n      restriction: damageTagData.restriction,\n      damageType,\n      damageHint,\n      damageTag,\n    };\n  },\n\n  getDamageTagForMod: (mod) => {\n    const damageTagData = DDBHelper.getDamageTag(mod);\n    return damageTagData;\n  },\n\n  getDamageTagForItem(data) {\n    const damageType = DDBHelper.getDamageType(data);\n    const damageTagData = DDBHelper.getDamageTag({}, damageType);\n    return damageTagData;\n  },\n\n  hasChosenCharacterOption: (ddb, optionName) => {\n    const hasClassOptions = [ddb.character.options.race, ddb.character.options.class, ddb.character.options.feat]\n      .flat()\n      .some((option) => option.definition.name === optionName);\n    return hasClassOptions;\n  },\n\n  getClassFromOptionID: (ddb, optionId) => {\n    // Use case class spell - which class?\n    // componentId on spells.class[0].componentId = options.class[0].definition.id\n    // options.class[0].definition.componentId = classes[0].classFeatures[0].definition.id\n    const option = ddb.character.options.class.find((option) => option.definition.id === optionId);\n\n    if (option) {\n      const klass = ddb.character.classes.find((klass) =>\n        klass.classFeatures.some((feature) => feature.definition.id === option.componentId)\n      );\n      return klass;\n    }\n    return undefined;\n  },\n\n  /**\n   * Look up a component by id\n   * For now we assume that most features we are going to want to get a scaling value\n   * from are character options\n   * @param {*} ddb\n   * @param {*} featureId\n   */\n\n  findComponentByComponentId: (ddb, componentId) => {\n    let result;\n\n    ddb.character.classes.forEach((cls) => {\n      const feature = cls.classFeatures.find((component) => component.definition.id === componentId);\n      if (feature) result = feature;\n    });\n\n    const optionalClassFeature = ddb.classOptions.find((option) => option.id == componentId);\n    if (optionalClassFeature && !result) {\n      result = optionalClassFeature;\n      const optionalLevelScales = optionalClassFeature.levelScales && optionalClassFeature.levelScales.length > 0;\n      if (result && !result.levelScale && optionalLevelScales) {\n        const klass = ddb.character.classes.find((cls) => cls.definition.id === optionalClassFeature.classId);\n        const klassLevel = klass ? klass.level : undefined;\n        if (klassLevel) {\n          const levelFilteredScales = optionalClassFeature.levelScales.filter((scale) => scale.level <= klassLevel);\n          if (levelFilteredScales.length > 0) {\n            result.levelScale = levelFilteredScales\n              .reduce((previous, current) => {\n                if (previous.level > current.level) return previous;\n                return current;\n              });\n          }\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n * Gets the levelscaling value for a feature\n * @param {*} feature\n */\n  getExactScalingValue: (feature) => {\n    const die = feature.levelScale?.dice ? feature.levelScale.dice : feature.levelScale?.die ? feature.levelScale.die : undefined;\n    if (feature && feature.levelScale && feature.levelScale.fixedValue) {\n      return feature.levelScale.fixedValue;\n    } else if (die) {\n      return die.diceString;\n    } else {\n      return \"{{scalevalue-unknown}}\";\n    }\n  },\n\n  getScaleValueLink: (ddb, feature) => {\n    const featDefinition = feature.definition ? feature.definition : feature;\n\n    const klass = ddb.character.classes.find((cls) =>\n      (cls.definition.id === featDefinition.classId\n      || cls.subclassDefinition?.id === featDefinition.classId)\n      && featDefinition.levelScales?.length > 0\n    );\n\n    if (klass) {\n      const featureName = featDefinition.name.toLowerCase().replace(/\\s|'|’/g, '-');\n      const klassName = klass.subclassDefinition?.id === featDefinition.classId\n        ? klass.subclassDefinition.name.toLowerCase().replace(/\\s|'|’/g, '-')\n        : klass.definition.name.toLowerCase().replace(/\\s|'|’/g, '-');\n      return `@scale.${klassName}.${featureName}`;\n    }\n\n    return undefined;\n\n  },\n\n  getScaleValueString: (ddb, feature) => {\n    const classOption = [ddb.character.options.race, ddb.character.options.class, ddb.character.options.feat]\n      .flat()\n      .find((option) => option.definition.id === feature.componentId);\n\n    let feat = feature.levelScale ? feature : DDBHelper.findComponentByComponentId(ddb, feature.componentId);\n    if (!feat && hasProperty(feature, \"flags.ddbimporter.dndbeyond.choice\")) {\n      feat = DDBHelper.findComponentByComponentId(ddb, feature.flags.ddbimporter.dndbeyond.choice.componentId);\n    }\n    if (!feat && classOption) {\n      feat = DDBHelper.findComponentByComponentId(ddb, classOption.componentId);\n    }\n    if (!feat) {\n      logger.debug(\"no scale value for \", feature);\n      return { name: undefined, value: undefined };\n    }\n    const scaleValue = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue\")\n      ? DDBHelper.getScaleValueLink(ddb, feat)\n      : DDBHelper.getExactScalingValue(feat);\n\n    if (scaleValue) {\n      return {\n        name: feat.definition?.name ? feat.definition?.name : feat.name,\n        value: scaleValue,\n      };\n    }\n    // final fallback if scale value extraction fails\n    return {\n      name: feat.definition?.name ? feat.definition?.name : feat.name,\n      value: DDBHelper.getExactScalingValue(feat),\n    };\n  },\n\n  /**\n   *\n   * Gets the sourcebook for a subset of dndbeyond sources\n   * @param {obj} definition item definition\n   */\n  getSourceData: (definition) => {\n    const fullSource = game.settings.get(\"ddb-importer\", \"use-full-source\");\n    const result = {\n      name: null,\n      page: null,\n    };\n    if (definition.sources?.length > 0) {\n      result.name = CONFIG.DDB.sources\n        .filter((source) => definition.sources.some((ds) => source.id === ds.sourceId))\n        .map((source) => {\n          const dSource = definition.sources.find((ds) => source.id === ds.sourceId);\n          const page = dSource.pageNumber ? ` pg ${dSource.pageNumber}` : \"\";\n          const sourceBook = dSource ? (fullSource ? source.description : source.name) : \"Homebrew\";\n          return `${sourceBook}${page}`;\n        })\n        .join(\", \");\n    } else {\n      if (definition.sourceIds) {\n        result.name = CONFIG.DDB.sources\n          .filter((source) => definition.sourceIds.includes(source.id))\n          .map((source) => source.description ?? \"Homebrew\")\n          .join();\n      } else if (definition.sourceId) {\n        result.name = CONFIG.DDB.sources\n          .filter((source) => source.id === definition.sourceId)\n          .map(\n            fullSource\n              ? ({ description }) => description ?? \"Homebrew\"\n              : ({ name }) => name ?? \"Homebrew\"\n          );\n      }\n\n      // add a page num if available\n      if (definition.sourcePageNumber) result.page = definition.sourcePageNumber;\n    }\n    return result;\n  },\n\n  /**\n   * Fetches the sources and pages for a definition\n   * @param {obj} data item\n   */\n  parseSource: (definition) => {\n    const sourceData = DDBHelper.getSourceData(definition);\n\n    let source = sourceData.name;\n    if (sourceData.page) source += ` (pg. ${sourceData.page})`;\n\n    return source;\n  },\n\n  getActiveItemModifiers: (ddb, includeExcludedEffects = false) => {\n    // are we adding effects to items?\n    const addEffects = game.settings.get(\"ddb-importer\", \"character-update-policy-add-item-effects\");\n    const daeInstalled = game.modules.get(\"dae\")?.active;\n    const excludedModifiers = (addEffects && daeInstalled && !includeExcludedEffects) ? getEffectExcludedModifiers(\"item\", true, true) : [];\n    // get items we are going to interact on\n    const modifiers = ddb.character.inventory\n      .filter(\n        (item) =>\n          ((!item.definition.canEquip && !item.definition.canAttune && !item.definition.isConsumable) // if item just gives a thing and not potion/scroll\n          || (item.isAttuned && item.equipped) // if it is attuned and equipped\n          || (item.isAttuned && !item.definition.canEquip) // if it is attuned but can't equip\n            || (!item.definition.canAttune && item.equipped)) // can't attune but is equipped\n          && item.definition.grantedModifiers.length > 0\n      )\n      .flatMap((item) => item.definition.grantedModifiers)\n      .filter((mod) => !excludedModifiers.some((exMod) =>\n        mod.type === exMod.type\n        && (mod.subType === exMod.subType || !exMod.subType))\n      );\n\n    return modifiers;\n  },\n\n  getActiveItemEffectModifiers: (ddb) => {\n    return DDBHelper.getActiveItemModifiers(ddb, true).filter((mod) =>\n      getEffectExcludedModifiers(\"item\", true, true).some((exMod) => mod.type === exMod.type\n      && (mod.subType === exMod.subType || !exMod.subType))\n    );\n  },\n\n  getModifiers: (ddb, type, includeExcludedEffects = false, effectOnly = false) => {\n    // are we adding effects to items?\n    const featureEffects = game.settings.get(\"ddb-importer\", \"character-update-policy-add-character-effects\");\n    const acEffects = game.settings.get(\"ddb-importer\", \"character-update-policy-generate-ac-feature-effects\");\n    const daeInstalled = game.modules.get(\"dae\")?.active;\n    const excludedModifiers = ((featureEffects || acEffects) && daeInstalled\n      && (!includeExcludedEffects || (includeExcludedEffects && effectOnly)))\n      ? getEffectExcludedModifiers(type, featureEffects, acEffects)\n      : getEffectExcludedModifiers(type, false, false);\n    // get items we are going to interact on\n    let modifiers = [];\n    if (effectOnly) {\n      modifiers = ddb.character.modifiers[type]\n        .filter((mod) => excludedModifiers.some((exMod) =>\n          mod.type === exMod.type\n        && (mod.subType === exMod.subType || !exMod.subType))\n        );\n    } else {\n      modifiers = ddb.character.modifiers[type]\n        .filter((mod) => !excludedModifiers.some((exMod) =>\n          mod.type === exMod.type\n        && (mod.subType === exMod.subType || !exMod.subType))\n        );\n    }\n\n    return modifiers;\n  },\n\n  filterModifiers: (modifiers, type, subType = null, restriction = [\"\", null]) => {\n    return modifiers\n      .flat()\n      .filter(\n        (modifier) =>\n          modifier.type === type\n          && (subType !== null ? modifier.subType === subType : true)\n          && (!restriction ? true : restriction.includes(modifier.restriction))\n      );\n  },\n\n  getChosenClassModifiers: (ddb, includeExcludedEffects = false, effectOnly = false) => {\n    // get items we are going to interact on\n    const modifiers = DDBHelper.getModifiers(ddb, 'class', includeExcludedEffects, effectOnly).filter((mod) => {\n      const isClassFeature = ddb.character.classes.some((klass) => klass.classFeatures.some((feat) =>\n        feat.definition.id == mod.componentId && feat.definition.entityTypeId == mod.componentTypeId\n        // make sure this class feature is not replaced\n        && !ddb.character.optionalClassFeatures.some((f) => f.affectedClassFeatureId == feat.definition.id)\n      ));\n      // generate a list to check in option check\n      const classFeatureIds = ddb.character.classes.map((klass) => klass.classFeatures.map((feat) => feat.definition.id)).flat();\n      const isClassOption = ddb.character.options.class.some((option) =>\n        // does this class option match a modifier?\n        ((option.componentTypeId == mod.componentTypeId && option.componentId == mod.componentId)\n        || (option.definition.entityTypeId == mod.componentTypeId && option.definition.id == mod.componentId))\n        // has this feature set been replacd by an optional class feature?\n        && !ddb.character.optionalClassFeatures.some((f) => f.affectedClassFeatureId == option.componentId)\n        // has it been chosen?\n        && ddb.character.choices.class.some((choice) =>\n          choice.componentId == option.componentId && choice.componentTypeId == option.componentTypeId && choice.optionValue\n        )\n        // is this option actually part of the class list?\n        && classFeatureIds.includes(option.componentId)\n      );\n      // if it's been replaced by a class feature lets check that\n      const isOptionalClassOption = ddb.character.options.class.some((option) =>\n        ((option.componentTypeId == mod.componentTypeId && option.componentId == mod.componentId)\n        || (option.definition.entityTypeId == mod.componentTypeId && option.definition.id == mod.componentId))\n        // !data.character.optionalClassFeatures.some((f) => f.affectedClassFeatureId == option.definition.id) &&\n        && (\n          ddb.character.choices.class.some((choice) =>\n            choice.componentId == option.componentId && choice.componentTypeId == option.componentTypeId && choice.optionValue\n          )\n          || ddb.classOptions?.some((classOption) =>\n            classOption.id == option.componentId && classOption.entityTypeId == option.componentTypeId\n          )\n        )\n        && ddb.character.optionalClassFeatures?.some((f) => f.classFeatureId == option.componentId)\n      );\n\n      // new class feature choice\n      const isOptionalClassChoice = ddb.character.choices.class.some((choice) =>\n        choice.componentTypeId == mod.componentTypeId\n        && choice.componentId == mod.componentId\n        && ddb.character.optionalClassFeatures?.some((f) => f.classFeatureId == choice.componentId)\n      );\n\n      return isClassFeature || isClassOption || isOptionalClassOption || isOptionalClassChoice;\n    });\n\n    return modifiers;\n  },\n\n  filterBaseCharacterModifiers: (ddb, type, subType = null, restriction = [\"\", null], includeExcludedEffects = false, effectOnly = false) => {\n    const modifiers = [\n      DDBHelper.getChosenClassModifiers(ddb, includeExcludedEffects, effectOnly),\n      DDBHelper.getModifiers(ddb, \"race\", includeExcludedEffects, effectOnly),\n      DDBHelper.getModifiers(ddb, \"background\", includeExcludedEffects, effectOnly),\n      DDBHelper.getModifiers(ddb, \"feat\", includeExcludedEffects, effectOnly),\n    ];\n\n    return DDBHelper.filterModifiers(modifiers, type, subType, restriction);\n  },\n\n  // I need to getChosenOriginFeatures from data.optionalOriginFeatures\n\n  filterBaseModifiers: (ddb, type, subType = null, restriction = [\"\", null], includeExcludedEffects = false, effectOnly = false) => {\n    const modifiers = [\n      DDBHelper.getChosenClassModifiers(ddb, includeExcludedEffects, effectOnly),\n      DDBHelper.getModifiers(ddb, \"race\", includeExcludedEffects, effectOnly),\n      DDBHelper.getModifiers(ddb, \"background\", includeExcludedEffects, effectOnly),\n      DDBHelper.getModifiers(ddb, \"feat\", includeExcludedEffects, effectOnly),\n      DDBHelper.getActiveItemModifiers(ddb, includeExcludedEffects),\n    ];\n\n    return DDBHelper.filterModifiers(modifiers, type, subType, restriction);\n  },\n\n  stringIntAdder(one, two) {\n    const oneInt = `${one}`.trim().replace(/^[+-]\\s*/, \"\");\n    const twoInt = `${two}`.trim().replace(/^[+-]\\s*/, \"\");\n    if (Number.isInteger(parseInt(oneInt)) && Number.isInteger(parseInt(twoInt))) {\n      const num = parseInt(oneInt) + parseInt(twoInt);\n      return `${num}`;\n    } else {\n      const twoAdjusted = (/^[+-]/).test(`${two}`.trim()) ? two : `+ ${two}`;\n      return `${one} ${twoAdjusted}`;\n    }\n  },\n\n  /**\n   * Checks the list of modifiers provided for a matching bonus type\n   * and returns a sum of it's value. May include a dice string.\n   * @param {*} modifiers\n   * @param {*} character\n   * @param {*} bonusSubType\n   */\n  getModifierSum: (modifiers, character) => {\n    let sum = \"\";\n    let diceString = \"\";\n    let modBonus = 0;\n    modifiers.forEach((modifier) => {\n      const die = modifier.dice ?? modifier.die ?? undefined;\n      const fixedBonus = die?.fixedValue ?? 0;\n      const statBonus = (Number.isInteger(modifier.statId))\n        ? modifier.statId\n        : Number.isInteger(modifier.abilityModifierStatId)\n          ? modifier.abilityModifierStatId\n          : null;\n      if (Number.isInteger(statBonus)) {\n        const ability = DICTIONARY.character.abilities.find((ability) => ability.id === modifier.statId);\n        modBonus += character.system.abilities[ability.value].mod;\n      }\n      if (die) {\n        const mod = die.diceString;\n        diceString += diceString === \"\" ? mod : \" + \" + mod;\n        if (die.diceString) {\n          const mod = die.diceString + modBonus + fixedBonus;\n          diceString += diceString === \"\" ? mod : \" + \" + mod;\n        } else if (fixedBonus) {\n          sum = DDBHelper.stringIntAdder(sum, fixedBonus + modBonus);\n        }\n      } else if (modifier.fixedValue) {\n        sum = DDBHelper.stringIntAdder(sum, modifier.fixedValue);\n      } else if (modifier.value) {\n        sum = DDBHelper.stringIntAdder(sum, modifier.value);\n      } else if (modBonus !== 0) {\n        sum = DDBHelper.stringIntAdder(sum, modBonus);\n      } else if (modifier.modifierTypeId === 1 && modifier.modifierSubTypeId === 218) {\n        // prof bonus\n        sum = DDBHelper.stringIntAdder(sum, character.system.attributes.prof);\n      }\n    });\n    if (diceString !== \"\") {\n      sum = diceString + \" + \" + sum;\n    }\n\n    sum = `${sum}`.trim().replace(/\\+\\s*\\+/, \"+\");\n\n    return sum !== \"\" ? sum : 0;\n  },\n\n  /**\n   * Searches for selected options if a given feature provides choices to the user\n   * @param {string} type character property: \"class\", \"race\" etc.\n   * @param {object} feat options to search for\n   */\n  getChoices: (ddb, type, feat) => {\n    const id = feat.id ? feat.id : feat.definition.id ? feat.definition.id : null;\n    const featDefinition = feat.definition ? feat.definition : feat;\n\n    if (ddb.character.choices[type] && Array.isArray(ddb.character.choices[type])) {\n      // find a choice in the related choices-array\n      const choices = ddb.character.choices[type].filter(\n        (characterChoice) => characterChoice.componentId && characterChoice.componentId === id\n      );\n\n      if (choices) {\n        const choiceDefinitions = ddb.character.choices.choiceDefinitions;\n\n        const options = choices\n          .filter(\n            (choice) => {\n              const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n              const validOption = optionChoice && optionChoice.options.find((option) => option.id === choice.optionValue);\n              return validOption;\n            })\n          .map((choice) => {\n            // console.warn(choice);\n            const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n            let result = optionChoice.options.find((option) => option.id === choice.optionValue);\n            result.componentId = choice.componentId;\n            result.componentTypeId = choice.componentTypeId;\n            result.choiceId = choice.id;\n            result.parentChoiceId = choice.parentChoiceId;\n            result.subType = choice.subType;\n            result.type = type;\n            result.wasOption = false;\n            return result;\n          });\n\n        if (options.length > 0) return options;\n\n        if (ddb.character.options[type]?.length > 0) {\n          // if it is a choice option, try and see if the mod matches\n          const optionMatch = ddb.character.options[type]\n            .filter(\n              (option) =>\n                // id match\n                !featDefinition.componentTypeId\n                && !featDefinition.entityTypeId\n                && id == option.componentId // && // the choice id matches the option componentID\n                // (featDefinition.componentTypeId == option.componentTypeId || // either the choice componenttype and optiontype match or\n                //   featDefinition.componentTypeId == option.definition.entityTypeId) && // the choice componentID matches the option definition entitytypeid\n                // option.componentTypeId == featDefinition.entityTypeId\n            )\n            .map((option) => {\n              return {\n                id: option.definition.id,\n                entityTypeId: option.definition.entityTypeId,\n                label: option.definition.name,\n                description: option.definition.description,\n                componentId: option.componentId,\n                componentTypeId: option.componentTypeId,\n                choiceId: null,\n                sourceId: option.definition.sourceId,\n                parentChoiceId: null,\n                subType: `${type}-option`,\n                type: type,\n                wasOption: true,\n              };\n            });\n          if (optionMatch.length > 0) return optionMatch;\n        }\n      }\n    }\n    // we could not determine if there are any choices left\n    return [];\n  },\n\n  getComponentIdFromOptionValue: (ddb, type, optionId) => {\n    if (ddb.character?.choices && ddb.character.choices[type] && Array.isArray(ddb.character.choices[type])) {\n      // find a choice in the related choices-array\n      const choice = ddb.character.choices[type].find(\n        (characterChoice) => characterChoice.optionValue && characterChoice.optionValue === optionId\n      );\n      if (choice) return choice.componentId;\n    }\n    // we could not determine if there are any choices left\n    return undefined;\n  },\n\n  determineActualFeatureId: (ddb, featureId, type = \"class\") => {\n    const optionalFeatureReplacement = ddb.character?.optionalClassFeatures\n      ? ddb.character.optionalClassFeatures\n        .filter((f) => f.classFeatureId === featureId)\n        .map((f) => f.affectedClassFeatureId)\n      : [];\n    // are we dealing with an optional class feature?\n    const choiceFeature = DDBHelper.getComponentIdFromOptionValue(ddb, type, featureId);\n\n    if (choiceFeature) {\n      const choiceOptionalFeature = ddb.character.optionalClassFeatures\n        .filter((f) => f.classFeatureId === choiceFeature)\n        .map((f) => f.affectedClassFeatureId);\n      if (choiceOptionalFeature && choiceOptionalFeature.length > 0) {\n        return choiceOptionalFeature[0];\n      }\n    } else if (optionalFeatureReplacement && optionalFeatureReplacement.length > 0) {\n      logger.debug(`Feature ${featureId} is replacing ${optionalFeatureReplacement[0]}`);\n      return optionalFeatureReplacement[0];\n    }\n    return featureId;\n  },\n\n  findClassByFeatureId: (ddb, featureId) => {\n    // optional class features need this filter, as they replace existing features\n    const featId = DDBHelper.determineActualFeatureId(ddb, featureId);\n    logger.debug(`Finding featureId ${featureId} with featId ${featId}`);\n\n    let klass = ddb.character.classes.find((cls) => {\n      let classFeatures = cls.classFeatures;\n      let featureMatch = classFeatures.find((feature) => feature.definition.id === featId);\n\n      if (featureMatch) {\n        return true;\n      } else {\n        // if not in global class feature list lets dig down\n        classFeatures = cls.definition.classFeatures;\n        if (cls.subclassDefinition && cls.subclassDefinition.classFeatures) {\n          classFeatures = classFeatures.concat(cls.subclassDefinition.classFeatures);\n        }\n        return classFeatures.some((feature) => feature.id === featId);\n      }\n    });\n    // try class option lookup\n    if (!klass) {\n      const option = ddb.character.options.class.find((option) => option.definition.id == featureId);\n      if (option) {\n        klass = ddb.character.classes.find((cls) => cls.classFeatures.find((feature) => feature.definition.id == option.componentId));\n      }\n      if (option && !klass && ddb.classOptions) {\n        const classOption = ddb.classOptions.find((cOption) => cOption.id == option.componentId);\n        if (classOption) {\n          klass = ddb.character.classes.find((cls) => cls.definition.id === classOption.classId);\n        }\n      }\n    }\n    // class option lookups\n    if (!klass && ddb.classOptions) {\n      const classOption = ddb.classOptions.find((option) => option.id == featureId);\n      if (classOption) {\n        klass = ddb.character.classes.find((cls) => cls.definition.id == classOption.classId);\n      }\n    }\n    if (klass) {\n      logger.debug(`Class ${klass.definition.name} found for ${featureId} with featId ${featId}`);\n    } else {\n      logger.debug(`Class not found for ${featureId}`);\n    }\n\n    return klass;\n  },\n\n  getCustomValueFromCharacter(ddbItem, character, type) {\n    if (!character) return null;\n    const characterValues = character.flags.ddbimporter.dndbeyond.characterValues;\n    const customValue = characterValues.filter((value) =>\n      value.valueId == ddbItem.id\n      && value.valueTypeId == ddbItem.entityTypeId\n    );\n\n    if (customValue) {\n      const value = customValue.find((value) => value.typeId == type);\n      if (value) return value.value;\n    }\n    return null;\n  },\n\n  getCustomValue(foundryItem, ddb, type) {\n    const characterValues = ddb.character?.characterValues;\n    if (!characterValues) return null;\n    const customValue = characterValues.filter(\n      (value) =>\n        (value.valueId == foundryItem.flags.ddbimporter.dndbeyond?.id\n          && value.valueTypeId == foundryItem.flags.ddbimporter.dndbeyond?.entityTypeId)\n        || (value.valueId == foundryItem.flags.ddbimporter.id\n          && value.valueTypeId == foundryItem.flags.ddbimporter.entityTypeId)\n    );\n\n    if (customValue) {\n      const customName = customValue.find((value) => value.typeId == type);\n      if (customName) return customName.value;\n    }\n    return null;\n  },\n\n  addCustomValues(ddb, foundryItem) {\n    // to hit override requires a lot of crunching\n    // const toHitOverride = DDBHelper.getCustomValue(item, character, 13);\n    const toHitBonus = DDBHelper.getCustomValue(foundryItem, ddb, 12);\n    const damageBonus = DDBHelper.getCustomValue(foundryItem, ddb, 10);\n    // const displayAsAttack = DDBHelper.getCustomValue(item, character, 16);\n    const costOverride = DDBHelper.getCustomValue(foundryItem, ddb, 19);\n    const weightOverride = DDBHelper.getCustomValue(foundryItem, ddb, 22);\n    // dual wield 18\n    // silvered\n    const silvered = DDBHelper.getCustomValue(foundryItem, ddb, 20);\n    // adamantine\n    const adamantine = DDBHelper.getCustomValue(foundryItem, ddb, 21);\n    // off-hand\n    // const offHand = DDBHelper.getCustomValue(ddbItem, character, 18);\n    const dcOverride = DDBHelper.getCustomValue(foundryItem, ddb, 15);\n    const dcBonus = DDBHelper.getCustomValue(foundryItem, ddb, 14);\n\n    if (toHitBonus) {\n      if (hasProperty(foundryItem, \"system.attackBonus\") && parseInt(foundryItem.system.attackBonus) === 0) {\n        foundryItem.system.attackBonus = toHitBonus;\n      } else {\n        foundryItem.system.attackBonus += ` + ${toHitBonus}`;\n      }\n    }\n    if (damageBonus && foundryItem.system?.damage?.parts && foundryItem.system?.damage?.parts.length !== 0) {\n      foundryItem.system.damage.parts[0][0] = foundryItem.system.damage.parts[0][0].concat(` +${damageBonus}`);\n    } else if (damageBonus && foundryItem.system?.damage?.parts) {\n      const part = [`+${damageBonus}`, \"\"];\n      foundryItem.system.damage.parts.push(part);\n    }\n    if (costOverride) foundryItem.system.cost = costOverride;\n    if (weightOverride) foundryItem.system.weight = weightOverride;\n    if (silvered) foundryItem.system.properties['sil'] = true;\n    if (adamantine) foundryItem.system.properties['ada'] = true;\n    if (dcBonus) {\n      if (foundryItem.flags.ddbimporter.dndbeyond.dc) {\n        foundryItem.system.save.dc = parseInt(foundryItem.flags.ddbimporter.dndbeyond.dc) + dcBonus;\n        foundryItem.system.save.scaling = \"flat\";\n      }\n    }\n    if (dcOverride) {\n      foundryItem.system.save.dc = dcOverride;\n      foundryItem.system.save.scaling = \"flat\";\n    }\n    return foundryItem;\n  },\n\n  getName(ddb, item, character = null, allowCustom = true) {\n    // spell name\n    const customName = character\n      ? DDBHelper.getCustomValueFromCharacter(item, character, 8)\n      : DDBHelper.getCustomValue(item, ddb, 8);\n    if (customName && allowCustom) {\n      return customName.replace(\"’\", \"'\").trim();\n    } else if (item.definition?.name) {\n      return item.definition.name.replace(\"’\", \"'\").trim();\n    } else if (item.name) {\n      return item.name.replace(\"’\", \"'\").trim();\n    } else {\n      logger.error(\"Unable to determine name for:\", item);\n      return \"Unknown thing.\";\n    }\n  },\n\n  displayAsAttack(ddb, item, character = null) {\n    const customDisplay = character\n      ? DDBHelper.getCustomValueFromCharacter(item, character, 16)\n      : DDBHelper.getCustomValue(item, ddb, 16);\n    if (typeof customDisplay == \"boolean\") {\n      return customDisplay;\n    } else if (hasProperty(item, \"displayAsAttack\")) {\n      return item.displayAsAttack;\n    } else {\n      return false;\n    }\n  },\n\n};\n\nexport default DDBHelper;\n","import SETTINGS from \"../settings.js\";\n\nconst DDBProxy = {\n\n  isCustom: () => {\n    return game.settings.get(SETTINGS.MODULE_ID, \"custom-proxy\");\n  },\n\n  resetProxy: () => {\n    game.settings.set(SETTINGS.MODULE_ID, \"api-endpoint\", SETTINGS.DEFAULT_SETTINGS.READY.PROXY[\"api-endpoint\"].default);\n    game.settings.set(SETTINGS.MODULE_ID, \"custom-proxy\", false);\n  },\n\n  getProxy: () => {\n    if (DDBProxy.isCustom() || CONFIG.DDBI.DEV.enabled) return game.settings.get(SETTINGS.MODULE_ID, \"api-endpoint\");\n    else return SETTINGS.URLS.PROXY;\n  },\n\n  getDynamicProxy: () => {\n    if (CONFIG.DDBI.DEV.enabled) return game.settings.get(SETTINGS.MODULE_ID, \"dynamic-api-endpoint\");\n    else return SETTINGS.URLS.DYNAMIC;\n  },\n\n  getCORSProxy: () => {\n    if (DDBProxy.isCustom() || CONFIG.DDBI.DEV.enabled) return game.settings.get(SETTINGS.MODULE_ID, \"cors-endpoint\");\n    return SETTINGS.URLS.CORS;\n  },\n\n\n};\n\nexport default DDBProxy;\n","import DDBMuncher from \"../muncher/DDBMuncher.js\";\n\nexport default class DDBSources extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-sources\";\n    options.template = \"modules/ddb-importer/handlebars/sources.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  static getSourcesLookups(selected) {\n    const selections = CONFIG.DDB.sources\n      .filter((source) => source.isReleased && source.sourceCategoryId !== 9 && source.sourceCategoryId !== 3)\n      .map((source) => {\n        const details = {\n          id: source.id,\n          acronym: source.name,\n          label: source.description,\n          selected: selected.includes(source.id),\n        };\n        return details;\n      });\n\n    return selections;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"Monster Muncher Sauce Selection\";\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(\"#toggle-sources\").click(async (event) => {\n      event.preventDefault();\n      if ($('.munching-sources input:checked').length && $('.munching-sources input').not(':checked').length) {\n        $('.munching-sources input').prop('checked', false);\n      } else {\n        $('.munching-sources input').each(function() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).prop('checked', !$(this).prop('checked'));\n        });\n      }\n    });\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const existingSelection = game.settings.get(\"ddb-importer\", \"munching-policy-muncher-sources\").flat();\n    const sources = DDBSources.getSourcesLookups(existingSelection);\n\n    return {\n      sources: sources.sort((a, b) => {\n        return (a.label > b.label) ? 1 : ((b.label > a.label) ? -1 : 0);\n      }),\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async _updateObject(event, formData) {\n    event.preventDefault();\n    let sources = [];\n    for (const [key, value] of Object.entries(formData)) {\n      if (value) sources.push(parseInt(key));\n    }\n    await game.settings.set(\"ddb-importer\", \"munching-policy-muncher-sources\", sources);\n    // eslint-disable-next-line no-use-before-define\n    new DDBMuncher().render(true);\n  }\n}\n","import utils from \"./utils.js\";\nimport DDBHelper from \"./DDBHelper.js\";\nimport logger from \"../logger.js\";\nimport CompendiumHelper from \"./CompendiumHelper.js\";\nimport { generateAdventureConfig } from \"../muncher/adventure.js\";\n\nconst INDEX_COMPENDIUMS = [\n  \"spell\",\n  \"item\",\n  \"magicitem\",\n];\n\nfunction evaluateMath(obj) {\n  // eslint-disable-next-line no-new-func\n  return Function('\"use strict\";return ' + obj.replace(/\\+\\s*\\+/g, \"+\"))();\n}\n\nexport async function loadDDBCompendiumIndexes() {\n  for (const i of INDEX_COMPENDIUMS) {\n    // eslint-disable-next-line no-await-in-loop\n    await CompendiumHelper.loadCompendiumIndex(i);\n  }\n}\n\nexport async function loadSRDRules() {\n  if (hasProperty(CONFIG, \"DDBI.SRD_LOOKUP.index\")) return;\n  try {\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.SRD_LOOKUP = await generateAdventureConfig(false, false, true);\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.SRD_LOOKUP.linkMap = {};\n    for (const [key, value] of Object.entries(CONFIG.DDBI.SRD_LOOKUP.lookups)) {\n      value.forEach((thing) => {\n        thing.type = key;\n        CONFIG.DDBI.SRD_LOOKUP.linkMap[thing.name] = thing;\n      });\n    }\n  } catch (err) {\n    logger.error(\"5e SRD Rules compendium failed to load\", err);\n    // eslint-disable-next-line require-atomic-updates\n    // setProperty(CONFIG, \"DDBI.SRD_LOOKUP.index\", {});\n  }\n}\n\nexport async function importCacheLoad() {\n  await loadDDBCompendiumIndexes();\n  await loadSRDRules();\n}\n\n/**\n * Parse a match and replace template values ready for evaluation\n * @param {*} ddb\n * @param {*} character\n * @param {*} match\n * @param {*} feature\n */\n// eslint-disable-next-line complexity\nfunction parseMatch(ddb, character, match, feature) {\n  const useScaleAll = foundry.utils.isNewerVersion(game.system.version, \"2.0.3\");\n  const splitMatchAt = match.split(\"@\");\n  let result = splitMatchAt[0];\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n  const classOption = [ddb.character.options.race, ddb.character.options.class, ddb.character.options.feat]\n    .flat()\n    .find((option) => option.definition.id === feature.componentId);\n  let linktext = `${result}`;\n\n  // scalevalue\n  if (result.includes(\"scalevalue\")) {\n    let scaleValue = DDBHelper.getScaleValueString(ddb, feature);\n    // if (scaleValue.value.startsWith(\"@\")) scaleValue.value = `[[${scaleValue.value}]]{${scaleValue.name}}`;\n    result = result.replace(\"scalevalue\", scaleValue.value);\n    linktext = result.replace(\"scalevalue\", \" (Scaled Value) \");\n  }\n\n  // savedc:int\n  // savedc:str,dex\n  if (result.includes(\"savedc\")) {\n    const regexp = /savedc:([a-z]{3})(?:,)?([a-z]{3})?/g;\n    const matches = [...result.matchAll(regexp)];\n\n    matches.forEach((match) => {\n      const saves = match.slice(1);\n      const saveDCs = saves\n        .filter((save) => save)\n        .map((save) => {\n          const abilityModifier = utils.calculateModifier(characterAbilities[save].value);\n          // not sure if we should add this, probably not.\n          // const bonus = DDBHelper.getModifierSum(DDBHelper.filterBaseModifiers(ddb, \"bonus\", \"spell-save-dc\"), character);\n          const dc = 8 + character.system.attributes.prof + abilityModifier;\n          return useScaleAll\n            ? `8 + @abilities.${save}.mod + @prof`\n            : dc;\n        });\n      const saveRegexp = RegExp(match[0], \"g\");\n      result = result.replace(saveRegexp, useScaleAll ? `max(${saveDCs.join(\", \")})` : Math.max(...saveDCs));\n      linktext = result.replace(saveRegexp, \" (Save DC) \");\n    });\n  }\n\n  // modifier:int@min:1\n  // (modifier:cha)+1\n  if (result.includes(\"modifier\")) {\n    const regexp = /modifier:([a-z]{3})/g;\n    // creates array from match groups and dedups\n    const ability = [...new Set(Array.from(result.matchAll(regexp), (m) => m[1]))];\n\n    ability.forEach((ab) => {\n      const abilityModifier = useScaleAll ? ` + @abilities.${ab}.mod` : `+ ${characterAbilities[ab].mod}`;\n      const abRegexp = RegExp(`modifier:${ab}`, \"g\");\n      result = result.replace(abRegexp, abilityModifier);\n      linktext = result.replace(abRegexp, ` (${utils.capitalize(ab)} Modifier) `);\n    });\n  }\n\n  // classlevel*5\n  // (classlevel/2)@roundup\n  if (result.includes(\"classlevel\")) {\n    const cls = feature.classId\n      ? ddb.character.classes.find((cls) => cls.definition.id == feature.classId)\n      : DDBHelper.findClassByFeatureId(ddb, feature.componentId);\n    if (cls) {\n      const clsLevel = useScaleAll ? ` + @classes.${cls.definition.name.toLowerCase()}.levels` : cls.level;\n      result = result.replace(\"classlevel\", clsLevel);\n      linktext = result.replace(\"classlevel\", ` (${cls.definition.name} Level) `);\n    } else if (classOption) {\n      // still not found a cls? could be an option\n      const optionCls = DDBHelper.findClassByFeatureId(ddb, classOption.componentId);\n      if (optionCls) {\n        const clsLevel = useScaleAll ? ` + @classes.${optionCls.definition.name.toLowerCase()}.levels` : optionCls.level;\n        result = result.replace(\"classlevel\", clsLevel);\n        linktext = result.replace(\"classlevel\", ` (${optionCls.definition.name} Level) `);\n      } else {\n        logger.error(\n          `Unable to parse option class info. classOption ComponentId is: ${classOption.componentId}.  ComponentId is ${feature.componentId}`\n        );\n      }\n    } else {\n      if (!feature.componentId) {\n        logger.debug(\"Feature failed componentID parse\", feature);\n      }\n      logger.error(`Unable to parse option class info. ComponentId is ${feature.componentId}`);\n    }\n  }\n\n  if (result.includes(\"characterlevel\")) {\n    const characterLevel = useScaleAll ? \" + @details.level\" : character.flags.ddbimporter.dndbeyond.totalLevels;\n    result = result.replace(\"characterlevel\", characterLevel);\n    linktext = result.replace(\"characterlevel\", ` (Character Level) `);\n  }\n\n  if (result.includes(\"proficiency\")) {\n    const profBonus = useScaleAll ? \" + @prof\" : character.system.attributes.prof;\n    result = result.replace(\"proficiency\", profBonus);\n    linktext = result.replace(\"proficiency\", ` (Proficiency Bonus) `);\n  }\n\n  // abilityscore:int\n  if (result.includes(\"spellattack\")) {\n    const regexp = /spellattack:([a-z]{3})/g;\n    // creates array from match groups and dedups\n    const ability = [...new Set(Array.from(result.matchAll(regexp), (m) => m[1]))];\n\n    ability.forEach((ab) => {\n      const rollString = useScaleAll\n        ? ` + @abilities.${ab}.mod + @prof + @bonus.rsak.attack`\n        : `${characterAbilities[ab].mod} + ${character.system.attributes.prof}`;\n      const abRegexp = RegExp(`spellattack:${ab}`, \"g\");\n      result = result.replace(abRegexp, rollString);\n      linktext = result.replace(abRegexp, ` (${utils.capitalize(ab)} Spell Attack) `);\n    });\n  }\n\n  // abilityscore:int\n  if (result.includes(\"abilityscore\")) {\n    const regexp = /abilityscore:([a-z]{3})/g;\n    // creates array from match groups and dedups\n    const ability = [...new Set(Array.from(result.matchAll(regexp), (m) => m[1]))];\n\n    ability.forEach((ab) => {\n      const abilityScore = useScaleAll ? ` + @abilities.${ab}.value` : characterAbilities[ab].value;\n      const abRegexp = RegExp(`abilityscore:${ab}`, \"g\");\n      result = result.replace(abRegexp, abilityScore);\n      linktext = result.replace(abRegexp, ` (${utils.capitalize(ab)} Score) `);\n    });\n  }\n\n  // limiteduse\n  if (result.includes(\"limiteduse\")) {\n    const limitedUse = feature.limitedUse?.maxUses || \"\";\n    result = result.replace(\"limiteduse\", limitedUse);\n    linktext = result.replace(\"limiteduse\", ` (Has limited uses) `);\n  }\n\n  return {\n    parsed: result,\n    linktext,\n  };\n}\n\n/**\n * Apply the expression constraint\n * @param {*} value\n * @param {*} constraint\n */\nconst applyConstraint = (value, constraint) => {\n  // {{(classlevel/2)@rounddown#unsigned}}\n  // @ features\n  // @roundup\n  // @roundown\n  // min:1\n  // max:3\n  const splitConstraint = constraint.split(\":\");\n  const multiConstraint = splitConstraint[0].split(\"*\");\n  const match = multiConstraint[0];\n\n  let result = value;\n\n  switch (match) {\n    case \"max\": {\n      result = Math.min(splitConstraint[1], result);\n      break;\n    }\n    case \"min\": {\n      result = Math.max(splitConstraint[1], result);\n      break;\n    }\n    case \"roundup\": {\n      result = Math.ceil(result);\n      break;\n    }\n    case \"rounddown\":\n    case \"roundown\": {\n      result = Math.floor(result);\n      break;\n    }\n    default: {\n      logger.debug(`Missed match is ${match}`);\n      logger.warn(`ddb-importer does not know about template constraint {{@${constraint}}}. Please log a bug.`); // eslint-disable-line no-console\n    }\n  }\n\n  if (multiConstraint.length > 1) {\n    const evalStatement = `${result}*${multiConstraint[1]}`;\n    result = evaluateMath(evalStatement.replace(\")\", \"\"));\n  }\n\n  if (match == \"unsigned\") {\n    result = `${result}`.trim().replace(/^\\+\\s*/, \"\");\n  } else if (match == \"signed\") {\n    if (!`${result}`.trim().startsWith(\"+\") && !`${result}`.trim().startsWith(\"-\")) {\n      result = `+ ${result}`;\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Apply the expression constraint\n * @param {*} value\n * @param {*} constraint\n */\nconst addConstraintEvaluations = (value, constraint) => {\n  // {{(classlevel/2)@rounddown#unsigned}}\n  // @ features\n  // @roundup\n  // @roundown\n  // min:1\n  // max:3\n  const splitConstraint = constraint.split(\":\");\n  const multiConstraint = splitConstraint[0].split(\"*\");\n  const match = multiConstraint[0];\n\n  let result = value;\n\n  switch (match) {\n    case \"max\": {\n      result = `min(${value}, ${splitConstraint[1]})`;\n      break;\n    }\n    case \"min\": {\n      result = `max(${value}, ${splitConstraint[1]})`;\n      break;\n    }\n    case \"roundup\": {\n      result = `ceil(${value})`;\n      break;\n    }\n    case \"rounddown\":\n    case \"roundown\": {\n      result = `floor(${value})`;\n      break;\n    }\n    default: {\n      logger.debug(`Missed match is ${match}`);\n      logger.warn(`ddb-importer does not know about template constraint {{@${constraint}}}. Please log a bug.`); // eslint-disable-line no-console\n    }\n  }\n\n  if (multiConstraint.length > 1) {\n    result = `${result}*${multiConstraint[1].replace(\")\", \"\")}`;\n  }\n\n  if (typeof result === 'string') result = result.trim().replace(/^\\+\\s*/, \"\");\n\n  return result;\n};\n\nconst escapeRegExp = (string) => {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\n\nconst getNumber = (theNumber, signed) => {\n  if (signed == \"unsigned\") {\n    theNumber = `${theNumber}`.trim().replace(/^\\+\\s*/, \"\");\n  } else if (signed == \"signed\" && !`${theNumber}`.trim().startsWith(\"+\") && !`${theNumber}`.trim().startsWith(\"-\")) {\n    theNumber = `+ ${theNumber}`;\n  }\n\n  return theNumber.toString();\n};\n\nfunction findMatchingTagInIndex(type, tag) {\n  const index = hasProperty(CONFIG.DDBI, `compendium.index.${type}`)\n    ? getProperty(CONFIG.DDBI, `compendium.index.${type}`)\n    : undefined;\n  if (!index) {\n    logger.warn(`Unable to load compendium ${type}s`);\n    return tag;\n  }\n  const strippedTag = utils.stripHtml(tag);\n  const match = index.find((entry) => entry.name.replace(\"’\", \"'\").toLowerCase() === strippedTag.replace(\"’\", \"'\").replace(\"&nbsp;\", \" \").toLowerCase());\n  if (match) {\n    const label = getProperty(CONFIG.DDBI, `compendium.label.${type}`);\n    return `@Compendium[${label}.${match._id}]{${tag}}`;\n  } else if (strippedTag.includes(\";\")) {\n    const tagSplit = strippedTag.replace(\"&nbsp;\", \" \").replace(\"’\", \"'\").split(\";\")[0];\n    const splitMatch = index.find((entry) => entry.name.replace(\"’\", \"'\").toLowerCase() === tagSplit.toLowerCase());\n    if (splitMatch) {\n      const label = getProperty(CONFIG.DDBI, `compendium.label.${type}`);\n      return `@Compendium[${label}.${splitMatch._id}]{${tagSplit}}`;\n    }\n  }\n  logger.info(`Unable to find tag parse compendium match in ${type} for ${tag}`);\n  return tag;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction replaceTag(match, p1, p2, p3, offset, string) {\n  if (!p2) {\n    logger.warn(`Unable to tag parse ${match}`);\n    return match;\n  }\n  const strippedP2 = utils.stripHtml(p2);\n\n  if (INDEX_COMPENDIUMS.includes(p1)) {\n    return findMatchingTagInIndex(p1, p2);\n  } else if ([\"total cover\", \"half cover\", \"three-quaters cover\"].includes(strippedP2.toLowerCase())) {\n    const coverMatch = CONFIG.DDBI.SRD_LOOKUP.fullPageMap.find((entry) => entry.name === \"Cover\");\n    if (coverMatch) {\n      return `@Compendium[dnd5e.rules.${coverMatch._id}.JournalEntryPage.${coverMatch.pageId}]{${p2}}`;\n    }\n  } else if (hasProperty(CONFIG.DDBI.SRD_LOOKUP, strippedP2.split(\";\")[0])) {\n    const lookup = getProperty(CONFIG.DDBI.SRD_LOOKUP, strippedP2);\n    const pageLink = lookup.pageId ? `.JournalEntryPage.${lookup.pageId}` : \"\";\n    const linkStub = lookup.headerLink ? `#${lookup.headerLink}` : \"\";\n    return `@Compendium[dnd5e.rules.${lookup._id}${pageLink}${linkStub}]{${p2}}`;\n  } else {\n    const srdMatch = CONFIG.DDBI.SRD_LOOKUP.fullPageMap.find((page) => page.name.toLowerCase() === strippedP2.toLowerCase().split(\";\")[0]\n      || page.name.replace(\"’\", \"'\").toLowerCase() === strippedP2.replace(\"’\", \"'\").toLowerCase().split(\"ing\")[0].split(\";\")[0]\n    );\n    if (srdMatch) {\n      const pageLink = srdMatch.pageId ? `.JournalEntryPage.${srdMatch.pageId}` : \"\";\n      const linkStub = srdMatch.headerLink ? `#${srdMatch.headerLink}` : \"\";\n      return `@Compendium[dnd5e.rules.${srdMatch._id}${pageLink}${linkStub}]{${p2}}`;\n    } else {\n      logger.info(`Unable to tag parse compendium match for ${match}`);\n    }\n  }\n\n  return p2;\n}\n\nfunction parseSRDLinks(text) {\n  if (!CONFIG.DDBI.SRD_LOOKUP?.lookups) return text;\n  [\n    CONFIG.DDBI.SRD_LOOKUP.lookups.conditions,\n    CONFIG.DDBI.SRD_LOOKUP.lookups.skills,\n    CONFIG.DDBI.SRD_LOOKUP.lookups.senses,\n    // CONFIG.DDBI.SRD_LOOKUP.lookups.weaponproperties,\n  ]\n    .flat()\n    .forEach((entry) => {\n      const linkRegEx = new RegExp(`(^| |\\\\(|\\\\[|>)(${entry.name})( |\\\\)|\\\\]|\\\\.|,|$|\\n|<)`, \"ig\");\n      function replaceRule(match, p1, p2, p3) {\n        return `${p1}@Compendium[${entry.compendium}.${entry._id}]{${p2}}${p3}`;\n      }\n      text = text.replaceAll(linkRegEx, replaceRule);\n    });\n  return text;\n}\n\nexport function parseTags(text) {\n  // if (!CONFIG.DDBI.SRD_LOOKUP.index || !CONFIG.DDBI.SRD_LOOKUP.lookups) return text;\n  const tagRegEx = /\\[([^\\]]+)]([^[]+)\\[\\/([^\\]]+)]/g;\n  const matches = text.match(tagRegEx);\n  if (matches) {\n    return text.replaceAll(tagRegEx, replaceTag);\n  }\n  text = parseSRDLinks(text);\n  return text;\n}\n\nfunction replaceRoll(match, p1, p2) {\n  if (!p2) {\n    logger.warn(`Unable to roll parse ${match}`);\n    return match;\n  }\n  const isRollRegex = /([0-9]*d[0-9]+)|(@scale\\.)/g;\n  const isRollMatches = p2.match(isRollRegex);\n  if (isRollMatches) {\n    return match;\n  } else if (Number.isInteger(parseInt(p2))) {\n    return p2;\n  } else {\n    const prefix = p2.trim().startsWith(\"+\") ? \"+ \" : \"\";\n    return `${prefix}[[${p2}]]`;\n  }\n}\n\nfunction fixRollables(text) {\n  const diceMatchRegex = /<strong>\\+*\\s*(\\d*d\\d\\d*\\s*\\+*)\\s*<\\/strong>\\+*\\s*\\[\\[\\/roll/g;\n  const matches = text.match(diceMatchRegex);\n  if (matches) {\n    text = text.replaceAll(diceMatchRegex, \"[[/roll $1 \");\n  }\n\n  const noRollRegex = /(\\[\\[\\/roll)([\\w\\s.,@\\d+\\\\*/()]*(?![0-9]*d[0-9]+)(?!@scale\\.)[\\w\\s.,@\\d+\\\\*/()]*)(\\]\\](?:{Scaled Roll})*)/g;\n  // const noRollMatches = text.match(noRollRegex);\n  // console.warn(\"noRollMatches\", {text: duplicate(text), noRollMatches});\n  text = text.replaceAll(noRollRegex, replaceRoll);\n\n  return text;\n}\n\n/**\n * This will parse a snippet/description with template boilerplate in from DDB.\n * e.g. Each creature in the area must make a DC {{savedc:con}} saving throw.\n * @param {*} ddb\n * @param {*} text\n */\nexport default function parseTemplateString(ddb, character, text, feature) {\n  if (!text) return text;\n\n  text = text.replace(/\\r\\n•/g, \"</p>\\r\\n<p>&bull;\");\n  let result = {\n    id: feature.id,\n    entityTypeId: feature.entityTypeId,\n    componentId: feature.componentId ? feature.componentId : null,\n    componentTypeId: feature.componentTypeId ? feature.componentTypeId : null,\n    damageTypeId: feature.damageTypeId ? feature.damageTypeId : null,\n    text: text,\n    resultStrings: [],\n    displayStrings: [],\n    definitions: [],\n  };\n\n  const useScaleAll = foundry.utils.isNewerVersion(game.system.version, \"2.0.3\");\n  const useScaleText = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue-description\") && !useScaleAll\n    ? \"{Scaled Roll}\"\n    : \"\";\n  const fullMatchRegex = /(?:^|[ \"'(+>])(\\d*d\\d\\d*\\s)?({{.*?}})(?:$|[., \"')+<])/g;\n  const fullMatches = [...new Set(Array.from(result.text.matchAll(fullMatchRegex), (m) => `${m[1] !== undefined ? m[1] : \"\"}${m[2]}`))];\n  fullMatches.forEach((match) => {\n    const scaledText = match.includes(\"scalevalue\") ? useScaleText : \"\";\n    result.text = result.text.replace(match, `[[/roll ${match}]]${scaledText}`);\n  });\n\n  const regexp = /{{(.*?)}}/g;\n  // creates array from match groups and dedups\n  const matches = [...new Set(Array.from(result.text.matchAll(regexp), (m) => m[1]))];\n\n  // eslint-disable-next-line complexity\n  matches.forEach((match) => {\n    let entry = {\n      parsed: null,\n      match: match,\n      replacePattern: new RegExp(`{{${escapeRegExp(match)}}}`, \"g\"),\n      type: null,\n      subType: null,\n    };\n\n    const splitSigned = match.split(\"#\");\n    const splitRemoveUnsigned = splitSigned[0];\n    const signed = splitSigned.length > 1\n      ? splitSigned[1]\n      : match.includes(\"modifier\")\n        ? \"signed\"\n        : null;\n    const splitMatchAt = splitRemoveUnsigned.split(\"@\");\n    const parsedMatchData = parseMatch(ddb, character, splitRemoveUnsigned, feature);\n    const parsedMatch = parsedMatchData.parsed;\n    result.displayStrings.push(parsedMatchData.displayString);\n    const dicePattern = /\\d*d\\d\\d*/;\n    const typeSplit = splitMatchAt[0].split(\":\");\n    entry.type = typeSplit[0];\n\n    if (typeSplit.length > 1) entry.subType = typeSplit[1];\n    // do we have a dice string, e.g. sneak attack?\n    if (parsedMatch.match(dicePattern) || parsedMatch.includes(\"@scale\")) {\n      if (parsedMatch.match(dicePattern)) entry.type = \"dice\";\n      entry.parsed = parsedMatch;\n      if (splitMatchAt.length > 1) {\n        for (let i = 1; i < splitMatchAt.length; i++) {\n          if (splitMatchAt[i].includes(\")\")) entry.parsed = entry.parsed.replace(\"(\", \"\");\n          entry.parsed = addConstraintEvaluations(entry.parsed, splitMatchAt[i]);\n        }\n      }\n      result.text = result.text.replace(entry.replacePattern, entry.parsed);\n    } else {\n      // we try and eval the expression!\n      try {\n        const openExpression = (parsedMatch.match(/\\(/g) || []).length;\n        const closeExpression = (parsedMatch.match(/\\)/g) || []).length;\n\n        let evalString = parsedMatch;\n        if (openExpression != closeExpression) {\n          for (let i = 0; i < openExpression - closeExpression; i++) {\n            evalString = evalString.replace(\"(\", \"\").trim();\n          }\n        }\n\n        for (let start = evalString.startsWith(\"(\"), end = evalString.endsWith(\")\"); start && end; start = evalString.startsWith(\"(\"), end = evalString.endsWith(\")\")) {\n          evalString = evalString.replace(/^\\(/, \"\").replace(/\\)$/, \"\");\n        }\n        const evalMatch = useScaleAll ? evalString : evaluateMath(evalString);\n        if (splitMatchAt.length > 1) {\n          let evalConstraint = evalMatch;\n          for (let i = 1; i < splitMatchAt.length; i++) {\n            evalConstraint = Number.isInteger(Number.parseInt(evalConstraint))\n              ? applyConstraint(evalConstraint, splitMatchAt[i])\n              : addConstraintEvaluations(evalConstraint, splitMatchAt[i]);\n          }\n          entry.parsed = getNumber(evalConstraint, signed);\n        } else {\n          entry.parsed = getNumber(evalMatch, signed);\n        }\n        entry.parsed = entry.parsed.replace(\"+ +\", \"+\");\n        const isRoll = result.text.includes(\"[[/roll\");\n        // there are some edge cases here where some template string matches do not get the correct [[]] boxes because\n        // they are not all [[/roll ]] boxes\n        // I need to move the [[]] box addition to outside this process loop\n        if (useScaleAll && !isRoll && (/^\\+\\s/).test(entry.parsed.trim())) {\n          entry.parsed = `${entry.parsed.trim().replace(/^\\+\\s/, \"+ [[\")}]]`;\n        } else if (useScaleAll && !isRoll && [undefined, \"unsigned\"].includes(signed)) {\n          entry.parsed = `[[${entry.parsed.trim()}]]`;\n        }\n        result.text = result.text.replace(entry.replacePattern, entry.parsed);\n      } catch (err) {\n        result.text = result.text.replace(entry.replacePattern, `{{${match}}}`);\n        logger.warn(`ddb-importer does not know about template value {{${match}}}. Please log a bug.`, err);\n        logger.warn(err.stack);\n      }\n    }\n    if (entry.parsed) result.resultStrings.push(entry.parsed);\n    result.definitions.push(entry);\n  });\n\n  result.text = fixRollables(result.text);\n  result.text = result.text.replace(/\\+\\s*\\+/g, \"+\").replace(/\\+\\s*\\+/g, \"+\");\n  result.text = result.text.replace(/\\+<\\/strong>\\+/g, \"+</strong>\");\n\n  result.text = parseTags(result.text);\n  character.flags.ddbimporter.dndbeyond.templateStrings.push(result);\n\n  return result;\n}\n","/**\n * Game Settings: Directory\n */\n\nimport logger from \"../logger.js\";\n\nexport class DirectoryPicker extends FilePicker {\n  constructor(options = {}) {\n    super(options);\n  }\n\n  _onSubmit(event) {\n    event.preventDefault();\n    const path = event.target.target.value;\n    const activeSource = this.activeSource;\n    const bucket = event.target.bucket ? event.target.bucket.value : null;\n    this.field.value = DirectoryPicker.format({\n      activeSource,\n      bucket,\n      path,\n    });\n    this.close();\n  }\n\n  static async uploadToPath(path, file) {\n    const options = DirectoryPicker.parse(path);\n    return FilePicker.upload(options.activeSource, options.current, file, { bucket: options.bucket }, { notify: false });\n  }\n\n  // returns the type \"Directory\" for rendering the SettingsConfig\n  static Directory(val) {\n    return val;\n  }\n\n  // formats the data into a string for saving it as a GameSetting\n  static format(value) {\n    return value.bucket !== null\n      ? `[${value.activeSource}:${value.bucket}] ${value.path}`\n      : `[${value.activeSource}] ${value.path}`;\n  }\n\n  // parses the string back to something the FilePicker can understand as an option\n  static parse(str) {\n    let matches = str.match(/\\[(.+)\\]\\s*(.+)/);\n    if (matches) {\n      let source = matches[1];\n      const current = matches[2].trim();\n      const [s3, bucket] = source.split(\":\");\n      if (bucket !== undefined) {\n        return {\n          activeSource: s3,\n          bucket: bucket,\n          current: current,\n        };\n      } else {\n        return {\n          activeSource: s3,\n          bucket: null,\n          current: current,\n        };\n      }\n    }\n    // failsave, try it at least\n    return {\n      activeSource: \"data\",\n      bucket: null,\n      current: str,\n    };\n  }\n\n  // Adds a FilePicker-Simulator-Button next to the input fields\n  static processHtml(html) {\n    $(html)\n      .find(`input[data-dtype=\"Directory\"], .ddb-directory`)\n      .each((index, element) => {\n        // disable the input field raw editing\n        $(element).prop(\"readonly\", true);\n\n        // if there is no button next to this input element yet, we add it\n        if (!$(element).next().length) {\n          let picker = new DirectoryPicker({\n            field: $(element)[0],\n            ...DirectoryPicker.parse($(element).val()),\n          });\n          let pickerButton = $(\n            '<button type=\"button\" class=\"file-picker\" data-type=\"imagevideo\" data-target=\"img\" title=\"Pick directory\"><i class=\"fas fa-file-import fa-fw\"></i></button>'\n          );\n          pickerButton.on(\"click\", () => {\n            picker.render(true);\n          });\n          $(element).parent().append(pickerButton);\n        }\n      });\n  }\n\n  /** @override */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    // remove unnecessary elements\n    $(html).find(\"ol.files-list\").remove();\n    $(html).find(\"footer div\").remove();\n    $(html).find(\"footer button\").text(\"Select Directory\");\n  }\n\n  static async forgeCreateDirectory(target) {\n    if (!target) return undefined;\n    const response = await ForgeAPI.call('assets/new-folder', { path: target });\n    if (!response || response.error) {\n      throw new Error(response ? response.error : \"Unknown error while creating directory.\");\n    }\n    return response;\n  }\n\n  /**\n   * @param  {string} source\n   * @param  {string} target\n   * @param  {object} options={}\n   */\n  static async createDirectory(source, target, options = {}) {\n    if (!target) {\n      throw new Error(\"No directory name provided\");\n    }\n    if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n      return DirectoryPicker.forgeCreateDirectory(target);\n    }\n    return FilePicker.createDirectory(source, target, options);\n  }\n\n  /**\n   * Verifies server path exists, and if it doesn't creates it.\n   *\n   * @param  {object} parsedPath - output from DirectoryPicker,parse\n   * @param  {string} targetPath - if set will check this path, else check parsedPath.current\n   * @returns {boolean} - true if verfied, false if unable to create/verify\n   */\n  static async verifyPath(parsedPath, targetPath = null) {\n    try {\n      const paths = (targetPath) ? targetPath.split(\"/\") : parsedPath.current.split(\"/\");\n      let currentSource = paths[0];\n\n      for (let i = 0; i < paths.length; i += 1) {\n        try {\n          if (currentSource !== paths[i]) {\n            currentSource = `${currentSource}/${paths[i]}`;\n          }\n          // eslint-disable-next-line no-await-in-loop\n          await DirectoryPicker.createDirectory(parsedPath.activeSource, `${currentSource}`, { bucket: parsedPath.bucket });\n\n        } catch (err) {\n          if (!err.startsWith(\"EEXIST\") && !err.startsWith(\"The S3 key\")) {\n            logger.error(`Error trying to verify path [${parsedPath.activeSource}], ${parsedPath.current}`, err);\n            logger.error(\"parsedPath\", parsedPath);\n            logger.error(\"targetPath\", targetPath);\n          }\n        }\n      }\n    } catch (err) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n// this s hooked in, we don't use all the data, so lets stop eslint complaining\n// eslint-disable-next-line no-unused-vars\n// Hooks.on(\"renderSettingsConfig\", (app, html, user) => {\n//   DirectoryPicker.processHtml(html);\n// });\n","import { DirectoryPicker } from \"../lib/DirectoryPicker.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"./DDBProxy.js\";\nimport utils from \"./utils.js\";\n\nconst FileHelper = {\n  BAD_DIRS: [\"[data]\", \"[data] \", \"\", null],\n\n  removeFileExtension: (name) => {\n    let nameArray = name.split(\".\");\n    nameArray.pop();\n    return nameArray.join(\".\");\n  },\n\n\n  /**\n   * Read data from a user provided File object\n   * @param {File} file           A File object\n   * @return {Promise.<String>}   A Promise which resolves to the loaded text data\n   */\n  readBlobFromFile: (file) => {\n    const reader = new FileReader();\n    return new Promise((resolve, reject) => {\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.onerror = () => {\n        reader.abort();\n        reject();\n      };\n      reader.readAsBinaryString(file);\n    });\n  },\n\n  download: (content, fileName, contentType) => {\n    let a = document.createElement(\"a\");\n    let file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  },\n\n  fileExistsUpdate: (fileList) => {\n    const targetFiles = fileList.filter((f) => !CONFIG.DDBI.KNOWN.FILES.has(f));\n    for (const file of targetFiles) {\n      CONFIG.DDBI.KNOWN.FILES.add(file);\n    }\n  },\n\n  generateCurrentFiles: async (directoryPath) => {\n    if (!CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(directoryPath)) {\n      logger.debug(`Checking for files in ${directoryPath}...`);\n      const dir = DirectoryPicker.parse(directoryPath);\n      const fileList = await DirectoryPicker.browse(dir.activeSource, dir.current, {\n        bucket: dir.bucket,\n      });\n      FileHelper.fileExistsUpdate(fileList.files);\n      // lets do some forge fun because\n      if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n        if (fileList.bazaar) {\n          // eslint-disable-next-line require-atomic-updates\n          CONFIG.DDBI.KNOWN.FORGE.TARGETS[directoryPath] = {};\n          fileList.files.forEach((file) => {\n            const fileName = file.split(\"/\").pop();\n            CONFIG.DDBI.KNOWN.FORGE.TARGETS[directoryPath][fileName] = file;\n            CONFIG.DDBI.KNOWN.FILES.add(file);\n          });\n        } else {\n          const status = ForgeAPI.lastStatus || (await ForgeAPI.status());\n          const userId = status.user;\n          // eslint-disable-next-line require-atomic-updates\n          CONFIG.DDBI.KNOWN.FORGE.TARGET_URL_PREFIX[directoryPath] = `https://assets.forge-vtt.com/${userId}/${dir.current}`;\n        }\n      }\n\n      CONFIG.DDBI.KNOWN.CHECKED_DIRS.add(directoryPath);\n    } else {\n      logger.debug(`Skipping full dir scan for ${directoryPath}...`);\n    }\n  },\n\n  fileExists: async (directoryPath, filename) => {\n    const fileUrl = await FileHelper.getFileUrl(directoryPath, filename);\n    let existingFile = CONFIG.DDBI.KNOWN.FILES.has(fileUrl);\n    if (existingFile) return true;\n\n    logger.debug(`Checking for ${filename} at ${fileUrl}...`);\n    await FileHelper.generateCurrentFiles(directoryPath);\n\n    const filePresent = CONFIG.DDBI.KNOWN.FILES.has(fileUrl);\n\n    if (filePresent) {\n      logger.debug(`Found ${fileUrl} after directory scan.`);\n    } else {\n      logger.debug(`Could not find ${fileUrl}`, {\n        directoryPath,\n        filename,\n        fileUrl,\n      });\n    }\n\n    return filePresent;\n  },\n\n  convertImageToWebp: async function (file, filename) {\n    logger.info(`Converting file ${filename} to webp`);\n\n    // Load the data into an image\n    const result = new Promise((resolve) => {\n      let rawImage = new Image();\n\n      rawImage.addEventListener(\"load\", () => {\n        resolve(rawImage);\n      });\n\n      rawImage.src = URL.createObjectURL(file);\n    })\n      .then((rawImage) => {\n        // Convert image to webp ObjectURL via a canvas blob\n        return new Promise((resolve) => {\n          let canvas = document.createElement(\"canvas\");\n          let ctx = canvas.getContext(\"2d\");\n          const quality = game.settings.get(SETTINGS.MODULE_ID, \"webp-quality\");\n\n          canvas.width = rawImage.width;\n          canvas.height = rawImage.height;\n          ctx.drawImage(rawImage, 0, 0);\n\n          canvas.toBlob((blob) => {\n            resolve(blob);\n          }, \"image/webp\", quality);\n        });\n      }).then((blob) => {\n        return blob;\n      });\n\n    return result;\n  },\n\n  uploadFile: async function (data, path, filename, forceWebp = false) {\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n    const file = new File([data], filename, { type: data.type });\n    const imageType = data.type.startsWith(\"image\") && data.type !== \"image/webp\";\n    const uploadFile = useWebP && (imageType || forceWebp)\n      ? new File([await FileHelper.convertImageToWebp(file, filename)], filename, { type: \"image/webp\" })\n      : file;\n\n    const result = await DirectoryPicker.uploadToPath(path, uploadFile);\n    return result;\n  },\n\n  uploadImage: async function (data, path, filename, forceWebp = false) {\n    return new Promise((resolve, reject) => {\n      FileHelper.uploadFile(data, path, filename, forceWebp)\n        .then((result) => {\n          resolve(result.path);\n        })\n        .catch((error) => {\n          logger.error(\"error uploading file: \", error);\n          reject(error);\n        });\n    });\n  },\n\n  downloadImage: async function (url) {\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"x-requested-with\": \"foundry\"\n        },\n      })\n        .then((response) => {\n          if (!response.ok) {\n            reject(\"Could not retrieve image\");\n          }\n          return response.blob();\n        })\n        .then((blob) => resolve(blob))\n        .catch((error) => reject(error.message));\n    });\n  },\n\n  uploadRemoteImage: async function (url, targetDirectory, baseFilename, useProxy = true) {\n    // prepare filenames\n    const filename = baseFilename;\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n    const ext = useWebP\n      ? \"webp\"\n      : url\n        .split(\".\")\n        .pop()\n        .split(/#|\\?|&/)[0];\n\n    try {\n      const proxyEndpoint = DDBProxy.getCORSProxy();\n      const urlEncode = game.settings.get(SETTINGS.MODULE_ID, \"cors-encode\");\n      const target = urlEncode ? encodeURIComponent(url) : url;\n      url = useProxy ? proxyEndpoint + target : url;\n      const data = await FileHelper.downloadImage(url);\n      // hack as proxy returns ddb access denied as application/xml\n      if (data.type === \"application/xml\") return null;\n      const result = await FileHelper.uploadImage(data, targetDirectory, filename + \".\" + ext);\n      CONFIG.DDBI.KNOWN.FILES.add(result);\n      return result;\n    } catch (error) {\n      logger.error(\"Image upload error\", error);\n      ui.notifications.warn(`Image upload failed. Please check your ddb-importer upload folder setting. ${url}`);\n      return null;\n    }\n  },\n\n  getForgeUrl: async (directoryPath, filename) => {\n    let uri;\n    if (!CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(directoryPath)) {\n      await FileHelper.generateCurrentFiles(directoryPath);\n    }\n    const prefix = CONFIG.DDBI.KNOWN.FORGE.TARGET_URL_PREFIX[directoryPath];\n    const bazaarTargetPath = CONFIG.DDBI.KNOWN.FORGE.TARGETS[directoryPath];\n    const bazaarTarget = bazaarTargetPath ? bazaarTargetPath[filename] : undefined;\n    if (bazaarTarget) {\n      uri = bazaarTarget;\n    } else if (prefix) {\n      uri = `${prefix}/${filename}`;\n    } else {\n      // we can't find the directory path for some reason, final fallback, try and guess the url\n      const dir = DirectoryPicker.parse(directoryPath);\n      if (dir.activeSource == \"data\") {\n        // Local on-server file system\n        uri = `https://assets.forge-vtt.com/bazaar/${dir.current}/${filename}`;\n      } else if (dir.activeSource == \"forgevtt\") {\n        const status = ForgeAPI.lastStatus || (await ForgeAPI.status());\n        const userId = status.user;\n        uri = `https://assets.forge-vtt.com/${userId}/${dir.current}/${filename}`;\n      }\n    }\n    return uri;\n  },\n\n  getFileUrl: async (directoryPath, filename) => {\n    let uri;\n    try {\n      if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n        uri = await FileHelper.getForgeUrl(directoryPath, filename);\n        return uri;\n      } else {\n        const dir = DirectoryPicker.parse(directoryPath);\n        if (dir.activeSource == \"data\") {\n          // Local on-server file system\n          uri = dir.current + \"/\" + filename;\n        } else if (dir.activeSource == \"forgevtt\") {\n          const status = ForgeAPI.lastStatus || (await ForgeAPI.status());\n          const userId = status.user;\n          uri = `https://assets.forge-vtt.com/${userId}/${dir.current}/${filename}`;\n        } else if (dir.activeSource == \"s3\") {\n          // S3 Bucket\n          uri = `https://${dir.bucket}.${game.data.files.s3.endpoint.hostname}/${dir.current}/${filename}`;\n        } else {\n          logger.error(\"DDB Importer cannot handle files stored in that location\", dir);\n        }\n      }\n    } catch (exception) {\n      throw new Error(\n        'Unable to determine file URL for directoryPath\"' + directoryPath + '\" and filename\"' + filename + '\"'\n      );\n    }\n    return encodeURI(uri);\n  },\n\n  // const options = { type: \"frame\", name: `DDB ${frame.name}`, download: true, remoteImages: false, force: false };\n  getImagePath: async (imageUrl, { type = \"ddb\", name = \"\", download = false, remoteImages = false, force = false } = {}) => {\n    const frameDirectory = game.settings.get(SETTINGS.MODULE_ID, \"frame-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const otherDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const uploadDirectory = type === \"frame\" ? frameDirectory : otherDirectory;\n    const downloadImage = (download) ? download : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-download-images\");\n    const remoteImage = (remoteImages) ? remoteImages : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-remote-images\");\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n\n    if (imageUrl && downloadImage) {\n      const ext = useWebP\n        ? \"webp\"\n        : imageUrl.split(\".\").pop().split(/#|\\?|&/)[0];\n      if (!name) name = imageUrl.split(\"/\").pop();\n\n      // image upload\n      const filename = type + \"-\" + utils.referenceNameString(name);\n      const imageExists = await FileHelper.fileExists(uploadDirectory, filename + \".\" + ext);\n\n      if (imageExists && !force) {\n        // eslint-disable-next-line require-atomic-updates\n        const image = await FileHelper.getFileUrl(uploadDirectory, filename + \".\" + ext);\n        return image.trim();\n      } else {\n        // eslint-disable-next-line require-atomic-updates\n        const image = await FileHelper.uploadRemoteImage(imageUrl, uploadDirectory, filename);\n        // did upload succeed? if not fall back to remote image path\n        if (image) {\n          return image.trim();\n        } else {\n          return null;\n        }\n\n      }\n    } else if (imageUrl && remoteImage) {\n      try {\n        return imageUrl.trim();\n      } catch (ignored) {\n        return null;\n      }\n    }\n    return null;\n  },\n\n};\n\nexport default FileHelper;\n","import DDBMuncher from \"../muncher/DDBMuncher.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"./DDBProxy.js\";\n\nconst PatreonHelper = {\n\n  getPatreonTier: async () => {\n    if (DDBProxy.isCustom()) return { success: true, message: \"custom proxy\", data: \"CUSTOM\" };\n    const key = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    const parsingApi = DDBProxy.getProxy();\n    const body = { betaKey: key };\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/patreon/tier`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            DDBMuncher.munchNote(`API Failure: ${data.message}`);\n            reject(data.message);\n          }\n          let currentEmail = game.settings.get(SETTINGS.MODULE_ID, \"patreon-user\");\n          if (data.email !== currentEmail) {\n            game.settings.set(\"ddb-importer\", \"patreon-user\", data.email).then(() => {\n              resolve(data.data);\n            });\n          } else {\n            resolve(data.data);\n          }\n        })\n        .catch((error) => reject(error));\n    });\n  },\n\n  getPatreonValidity: async (betaKey) => {\n    if (DDBProxy.isCustom()) return { success: true, message: \"custom proxy\", data: true };\n    const parsingApi = DDBProxy.getProxy();\n    const body = { betaKey: betaKey };\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/patreon/valid`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          resolve(data);\n        })\n        .catch((error) => reject(error));\n    });\n  },\n\n  getPatreonTiers: (tier) => {\n    const godTier = tier === \"GOD\";\n    const undyingTier = tier === \"UNDYING\";\n    const coffeeTier = tier === \"COFFEE\";\n    const custom = tier === \"CUSTOM\" || DDBProxy.isCustom();\n\n    const tiers = {\n      god: godTier,\n      undying: undyingTier,\n      custom: custom,\n      coffee: coffeeTier,\n      source: godTier || undyingTier || coffeeTier || custom,\n      experimentalMid: godTier || undyingTier,\n      homebrew: godTier || undyingTier || coffeeTier || custom,\n      all: godTier || undyingTier || coffeeTier || custom,\n      supporter: godTier || undyingTier || coffeeTier,\n      not: !godTier && !undyingTier && !coffeeTier && !custom,\n    };\n\n    return tiers;\n  },\n\n  checkPatreon: async () => {\n    const tier = await PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.getPatreonTiers(tier);\n    return tiers;\n  },\n\n  setPatreonTier: async () => {\n    const tier = await PatreonHelper.getPatreonTier();\n    game.settings.set(SETTINGS.MODULE_ID, \"patreon-tier\", tier);\n  },\n\n};\n\nexport default PatreonHelper;\n","import logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"./DDBProxy.js\";\n\nfunction isJSON(str) {\n  try {\n    return (JSON.parse(str) && !!str && str !== null);\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isLocalCobalt(keyPostfix) {\n  return keyPostfix && keyPostfix !== \"\" && localStorage.getItem(`ddb-cobalt-cookie-${keyPostfix}`) !== null;\n}\n\nexport function getCobalt(keyPostfix = \"\") {\n  let cobalt;\n  const localCookie = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n  const characterCookie = isLocalCobalt(keyPostfix);\n\n  logger.debug(`Getting Cookie: Key postfix? \"${keyPostfix}\" -  Local? ${localCookie} - Character? ${characterCookie}`);\n  if (characterCookie) {\n    cobalt = localStorage.getItem(`ddb-cobalt-cookie-${keyPostfix}`);\n  } else if (localCookie) {\n    cobalt = localStorage.getItem(\"ddb-cobalt-cookie\");\n  } else {\n    cobalt = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie\");\n  }\n\n  return cobalt;\n}\n\nexport async function setCobalt(value, keyPostfix = \"\") {\n  const localCookie = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n  const characterCookie = keyPostfix && keyPostfix !== \"\";\n\n  let cobaltValue = value;\n  if (isJSON(value)) {\n    cobaltValue = JSON.parse(value).cbt;\n  }\n\n  logger.debug(`Setting Cookie: Key postfix? \"${keyPostfix}\" -  Local? ${localCookie} - Character? ${characterCookie}`);\n  if (characterCookie) {\n    localStorage.setItem(`ddb-cobalt-cookie-${keyPostfix}`, cobaltValue);\n  } else if (localCookie) {\n    localStorage.setItem(\"ddb-cobalt-cookie\", cobaltValue);\n  } else {\n    await game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie\", cobaltValue);\n  }\n}\n\nexport function deleteLocalCobalt(keyPostfix) {\n  const localCookie = isLocalCobalt(keyPostfix);\n\n  if (localCookie) {\n    localStorage.removeItem(`ddb-cobalt-cookie-${keyPostfix}`);\n  }\n}\n\nexport async function moveCobaltToLocal() {\n  localStorage.setItem('ddb-cobalt-cookie', game.settings.get(\"ddb-importer\", \"cobalt-cookie\"));\n  await game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie\", \"\");\n  game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", true);\n}\n\nexport async function moveCobaltToSettings() {\n  game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie\", localStorage.getItem('ddb-cobalt-cookie'));\n  game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", false);\n}\n\nexport async function checkCobalt(keyPostfix = \"\", alternativeKey = null) {\n  const cobaltCookie = alternativeKey\n    ? isJSON(alternativeKey)\n      ? JSON.parse(alternativeKey).cbt\n      : alternativeKey\n    : getCobalt(keyPostfix);\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, betaKey: betaKey };\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/auth`, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => resolve(data))\n      .catch((error) => {\n        logger.error(`Cobalt cookie check error`);\n        logger.error(error);\n        logger.error(error.stack);\n        reject(error);\n      });\n  });\n}\n","import { DirectoryPicker } from \"./DirectoryPicker.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport DDBMuncher from \"../muncher/DDBMuncher.js\";\nimport { getCobalt, setCobalt, moveCobaltToLocal, moveCobaltToSettings, checkCobalt } from \"./Secrets.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport DDBProxy from \"./DDBProxy.js\";\n\nconst POPUPS = {\n  json: null,\n  web: null,\n};\n\nexport function getCampaignId() {\n  const campaignId = game.settings.get(\"ddb-importer\", \"campaign-id\").split(\"/\").pop();\n\n  if (campaignId && campaignId !== \"\" && !Number.isInteger(parseInt(campaignId))) {\n    DDBMuncher.munchNote(`Campaign Id is invalid! Set to \"${campaignId}\", using empty string`, true);\n    logger.error(`Campaign Id is invalid! Set to \"${campaignId}\", using empty string`);\n    return \"\";\n  } else if (campaignId.includes(\"join\")) {\n    DDBMuncher.munchNote(`Campaign URL is a join campaign link, using empty string! Set to \"${campaignId}\"`, true);\n    logger.error(`Campaign URL is a join campaign link, using empty string! Set to \"${campaignId}\"`);\n    return \"\";\n  }\n  return campaignId;\n}\n\n\nfunction renderPopup(type, url) {\n  if (POPUPS[type] && !POPUPS[type].close) {\n    POPUPS[type].focus();\n    POPUPS[type].location.href = url;\n  } else {\n    const ratio = window.innerWidth / window.innerHeight;\n    const width = Math.round(window.innerWidth * 0.5);\n    const height = Math.round(window.innerWidth * 0.5 * ratio);\n    POPUPS[type] = window.open(\n      url,\n      \"ddb_sheet_popup\",\n      `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n    );\n  }\n  return true;\n}\n\nexport function isSetupComplete(needsCobalt = true) {\n  const uploadDir = game.settings.get(SETTINGS.MODULE_ID, \"image-upload-directory\");\n  const dataDirSet = !FileHelper.BAD_DIRS.includes(uploadDir);\n  const cobalt = getCobalt() != \"\";\n  const setupComplete = dataDirSet && (cobalt || !needsCobalt);\n  return setupComplete;\n}\n\nasync function linkToPatreon() {\n\n  const proxy = DDBProxy.getProxy();\n  const patreonId = \"oXQUxnRAbV6mq2DXlsXY2uDYQpU-Ea2ds0G_5hIdi0Bou33ZRJgvV8Ub3zsEQcHp\";\n  const patreonAuthUrl = `${proxy}/patreon/auth`;\n  const patreonScopes = encodeURI(\"identity identity[email]\");\n\n  const socketOptions = {\n    transports: ['websocket', 'polling', 'flashsocket'],\n    // reconnection: false,\n    // reconnectionAttempts: 10,\n  };\n  const socket = io(`${proxy}/`, socketOptions);\n\n  socket.on(\"connect\", () => {\n    logger.debug(\"DDB Muncher socketID\", socket.id);\n    const serverDetails = {\n      id: socket.id,\n      world: game.world.title,\n      userId: game.userId,\n    };\n    socket.emit(\"register\", serverDetails);\n\n  });\n\n  socket.on('registered', (data) => {\n    logger.info(`Foundry instance registered with DDB Muncher Proxy`);\n    logger.debug(data);\n    renderPopup(\"web\", `https://www.patreon.com/oauth2/authorize?response_type=code&client_id=${patreonId}&redirect_uri=${patreonAuthUrl}&state=${data.userHash}&scope=${patreonScopes}`);\n  });\n\n  socket.on('auth', (data) => {\n    logger.debug(`Response from auth socket!`, data);\n\n    POPUPS[\"web\"].close();\n\n    game.settings.set(SETTINGS.MODULE_ID, \"beta-key\", data.key);\n    game.settings.set(SETTINGS.MODULE_ID, \"patreon-user\", data.email);\n    game.settings.set(SETTINGS.MODULE_ID, \"patreon-tier\", data.tier);\n\n    $('#ddb-patreon-user').text(data.email);\n    $('#ddb-patreon-tier').text(data.tier);\n    $('#ddb-patreon-valid').text(\"True\");\n    $('#ddb-beta-key').val(data.key);\n\n    socket.disconnect();\n  });\n\n  socket.on('error', (data) => {\n    logger.error(`Error Response from socket!`, data);\n    socket.disconnect();\n  });\n}\n\nfunction getDDBCampaigns(cobalt = null) {\n  const cobaltCookie = cobalt ? cobalt : getCobalt();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, betaKey: betaKey };\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/campaigns`, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => resolve(data.data))\n      .catch((error) => {\n        logger.error(`Cobalt cookie check error`);\n        logger.error(error);\n        logger.error(error.stack);\n        reject(error);\n      });\n  });\n\n}\n\nasync function checkCobaltCookie(value) {\n  const cookieStatus = await checkCobalt(\"\", value);\n  if (value !== \"\" && !cookieStatus.success) {\n    $('#munching-task-setup').text(`Your Cobalt Cookie is invalid, please check that you pasted the right information.`);\n    $('#ddb-importer-settings').css(\"height\", \"auto\");\n    throw new Error(`Your Cobalt Cookie is invalid, please check that you pasted the right information.`);\n  }\n  return cookieStatus;\n}\n\nasync function refreshCampaigns(cobalt = null) {\n  await checkCobaltCookie(cobalt);\n  CONFIG.DDBI.CAMPAIGNS = await getDDBCampaigns(cobalt);\n  return CONFIG.DDBI.CAMPAIGNS;\n}\n\nexport async function getAvailableCampaigns() {\n  if (CONFIG.DDBI.CAMPAIGNS) return CONFIG.DDBI.CAMPAIGNS;\n  const campaignId = getCampaignId();\n  // eslint-disable-next-line require-atomic-updates\n  CONFIG.DDBI.CAMPAIGNS = await getDDBCampaigns();\n\n  if (!CONFIG.DDBI.CAMPAIGNS) return [];\n\n  CONFIG.DDBI.CAMPAIGNS.forEach((campaign) => {\n    const selected = campaign.id == campaignId;\n    campaign.selected = selected;\n  });\n  return CONFIG.DDBI.CAMPAIGNS;\n}\n\nasync function setCobaltCookie(value, local) {\n  await checkCobaltCookie(value);\n  await setCobalt(value);\n  await game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", local);\n  const runCookieMigrate = local != game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n  if (runCookieMigrate && local) {\n    moveCobaltToLocal();\n  } else if (runCookieMigrate && !local) {\n    moveCobaltToSettings();\n  }\n\n}\n\nexport class DDBKeyChange extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-key-change\";\n    options.template = \"modules/ddb-importer/handlebars/key-change.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Key Expiry\";\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\"#patreon-button\").click(async (event) => {\n      event.preventDefault();\n      linkToPatreon();\n    });\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const key = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    const setupConfig = {\n      \"beta-key\": key,\n    };\n    const patreonUser = game.settings.get(SETTINGS.MODULE_ID, \"patreon-user\");\n    const check = await PatreonHelper.getPatreonValidity(key);\n\n    return {\n      success: (check && check.success) ? check.success : false,\n      message: (check && check.message) ? check.message : \"Unable to check patreon key status\",\n      setupConfig: setupConfig,\n      patreonLinked: patreonUser && patreonUser != \"\",\n      patreonUser: patreonUser,\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n    const currentKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    if (currentKey !== formData['beta-key']) {\n      await game.settings.set(SETTINGS.MODULE_ID, \"beta-key\", formData['beta-key']);\n      await PatreonHelper.setPatreonTier();\n    }\n\n    const callMuncher = game.settings.get(SETTINGS.MODULE_ID, \"settings-call-muncher\");\n\n    if (callMuncher) {\n      game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", false);\n      new DDBMuncher().render(true);\n    }\n\n  }\n}\n\nexport async function isValidKey() {\n  let validKey = false;\n\n  const key = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  if (key === \"\") {\n    validKey = true;\n  } else {\n    const check = await PatreonHelper.getPatreonValidity(key);\n    if (check.success && check.data) {\n      validKey = true;\n    } else {\n      validKey = false;\n      game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", true);\n      new DDBKeyChange().render(true);\n    }\n  }\n  return validKey;\n}\n\nexport class DDBCookie extends FormApplication {\n\n  constructor(options, actor = null, localCobalt = false) {\n    super(options);\n    this.localCobalt = localCobalt;\n    this.actor = actor;\n  }\n\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-cobalt-change\";\n    options.template = \"modules/ddb-importer/handlebars/cobalt.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Cobalt Cookie\";\n  }\n\n  /** @override */\n  async getData() {\n    const keyPostFix = this.localCobalt && this.actor ? this.actor.id : null;\n    const cobalt = getCobalt(keyPostFix);\n    const cobaltStatus = cobalt == \"\" ? { success: true } : await checkCobalt();\n    const expired = !cobaltStatus.success;\n\n    return {\n      expired: expired,\n      cobaltCookie: cobalt,\n      localCobalt: this.localCobalt && this.actor,\n      actor: this.actor,\n    };\n  }\n\n  /** @override */\n  async _updateObject(event, formData) {\n    event.preventDefault();\n    const keyPostFix = this.localCobalt && this.actor ? this.actor.id : null;\n    await setCobalt(formData['cobalt-cookie'], keyPostFix);\n\n    const cobaltStatus = await checkCobalt();\n    if (!cobaltStatus.success) {\n      new DDBCookie().render(true);\n    } else {\n      const callMuncher = game.settings.get(SETTINGS.MODULE_ID, \"settings-call-muncher\");\n\n      if (callMuncher) {\n        game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", false);\n        new DDBMuncher().render(true);\n      }\n    }\n  }\n}\n\n\n// eslint-disable-next-line no-unused-vars\nHooks.on(\"renderma\", (app, html, user) => {\n  DirectoryPicker.processHtml(html);\n});\n\nexport class DDBSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-settings\";\n    options.template = \"modules/ddb-importer/handlebars/settings.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Settings\";\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const cobalt = getCobalt();\n    const isCobalt = cobalt != \"\";\n    const cobaltStatus = await checkCobalt(\"\", cobalt);\n    const cobaltLocal = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n    const hasKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\") != \"\";\n    const key = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    const campaignId = getCampaignId();\n    const tier = game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n    const patreonUser = game.settings.get(SETTINGS.MODULE_ID, \"patreon-user\");\n    const validKeyObject = hasKey ? await PatreonHelper.getPatreonValidity(key) : false;\n    const validKey = validKeyObject && validKeyObject.success && validKeyObject.data;\n    const availableCampaigns = isCobalt && cobaltStatus.success ? await getAvailableCampaigns() : [];\n\n    availableCampaigns.forEach((campaign) => {\n      const selected = campaign.id == campaignId;\n      campaign.selected = selected;\n    });\n\n    const setupConfig = {\n      \"cobalt-cookie\": cobalt,\n      \"available-campaigns\": availableCampaigns,\n      \"campaign-id\": campaignId,\n      \"beta-key\": key,\n    };\n\n    const setupComplete = isCobalt;\n\n    return {\n      cobalt: isCobalt,\n      cobaltLocal,\n      setupConfig,\n      setupComplete,\n      tier,\n      patreonLinked: patreonUser && patreonUser != \"\",\n      patreonUser,\n      validKey,\n    };\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\"#patreon-button\").click(async (event) => {\n      event.preventDefault();\n      linkToPatreon();\n    });\n    html.find(\"#campaign-button\").click(async (event) => {\n      event.preventDefault();\n      const cookie = html.find(\"#cobalt-cookie-input\");\n      const campaigns = await refreshCampaigns(cookie[0].value);\n      let campaignList = `<option value=\"\">Select campaign:</option>`;\n      if (Array.isArray(campaigns)) {\n        campaigns.forEach((campaign) => {\n          campaignList += `<option value=\"${campaign.id}\">${campaign.name} (${campaign.dmUsername}) - ${campaign.id}</option>\\n`;\n        });\n      } else {\n        logger.warn(\"Unable to fetch campaigns\", campaigns);\n      }\n      const list = html.find(\"#campaign-select\");\n      list[0].innerHTML = campaignList;\n    });\n    html.find(\"#check-cobalt-button\").click(async (event) => {\n      event.preventDefault();\n      const cookie = html.find(\"#cobalt-cookie-input\");\n      if (cookie[0].value === undefined) throw new Error(\"undefined\");\n      const cobaltStatus = await checkCobalt(\"\", cookie[0].value);\n      const button = html.find(\"#check-cobalt-button\");\n      if (cobaltStatus.success) {\n        button[0].innerHTML = \"Check Cobalt Cookie - Success!\";\n      } else {\n        button[0].innerHTML = \"Check Cobalt Cookie - Failure!\";\n      }\n    });\n\n\n  }\n\n  /** @override */\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n    const campaignSelect = formData['campaign-select'];\n    const campaignId = campaignSelect == 0 ? \"\" : campaignSelect;\n    const cobaltCookie = formData['cobalt-cookie'];\n    const cobaltCookieLocal = formData['cobalt-cookie-local'];\n    const currentKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n\n    if (currentKey !== formData['beta-key']) {\n      await game.settings.set(SETTINGS.MODULE_ID, \"beta-key\", formData['beta-key']);\n      await PatreonHelper.setPatreonTier();\n    }\n\n    await game.settings.set(SETTINGS.MODULE_ID, \"campaign-id\", campaignId);\n    await setCobaltCookie(cobaltCookie, cobaltCookieLocal);\n\n    const callMuncher = game.settings.get(SETTINGS.MODULE_ID, \"settings-call-muncher\");\n\n    if (callMuncher && cobaltCookie === \"\") {\n      $('#munching-task-setup').text(`To use Muncher you need to set a Cobalt Cookie value!`);\n      $('#ddb-importer-settings').css(\"height\", \"auto\");\n      throw new Error(`To use Muncher you need to set a Cobalt Cookie value!`);\n    } else if (callMuncher) {\n      game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", false);\n      new DDBMuncher().render(true);\n    }\n  }\n}\n\nfunction getCompendiumLookups(type, selected) {\n  const excludedCompendiumPackages = [\n    \"dnd5e\", \"dae\", \"midiqol\", \"magicitems\", \"midi-srd\", \"dae-srd\", \"midi-qol\",\n  ];\n\n  const selections = game.packs\n    .filter((pack) =>\n      pack.documentName === type\n    && !excludedCompendiumPackages.includes(pack.metadata.packageName)\n    )\n    .reduce((choices, pack) => {\n      choices[pack.collection] = {\n        label: `[${pack.metadata.packageName}] ${pack.metadata.label}`,\n        selected: pack.collection === selected,\n      };\n      return choices;\n    }, {});\n\n  return selections;\n}\n\n\nexport class DDBCompendiumSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-settings-compendium\";\n    options.template = \"modules/ddb-importer/handlebars/compendium.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Compendium Settings\";\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const settings = [\n      {\n        name: \"auto-create-compendium\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"auto-create-compendium\"),\n        description: \"Create default compendiums if missing?\",\n        enabled: true,\n      },\n    ];\n\n    const compendiums = SETTINGS.COMPENDIUMS.map((comp) => ({\n      setting: comp.setting,\n      name: comp.title,\n      current: game.settings.get(SETTINGS.MODULE_ID, comp.setting),\n      compendiums: getCompendiumLookups(comp.type, game.settings.get(SETTINGS.MODULE_ID, comp.setting)),\n    }));\n\n    return {\n      settings,\n      compendiums,\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n    for (const [key, value] of Object.entries(formData)) {\n      game.settings.set(SETTINGS.MODULE_ID, key, value);\n    }\n  }\n}\n\n\nfunction getGMUsers() {\n  const updateUser = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-user\");\n\n  const gmUsers = game.users\n    .filter((user) => user.isGM)\n    .reduce((choices, user) => {\n      choices.push({\n        userId: user.id,\n        userName: user.name,\n        selected: user.id === updateUser,\n      });\n      return choices;\n    }, []);\n\n  return gmUsers;\n}\n\n\nexport class DDBDynamicUpdateSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-settings-dynamic-updates\";\n    options.template = \"modules/ddb-importer/handlebars/dynamic-updates.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Dynamic Update Settings\";\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const tier = game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n    const tiers = PatreonHelper.getPatreonTiers(tier);\n    const enabled = tiers.experimentalMid;\n\n    const policySettings = Object.keys(SETTINGS.DEFAULT_SETTINGS.READY.CHARACTER.DYNAMIC_SYNC)\n      .map((key) => {\n        return {\n          name: key,\n          isChecked: enabled && game.settings.get(SETTINGS.MODULE_ID, key),\n          description: game.i18n.localize(`${SETTINGS.MODULE_ID}.settings.dynamic-sync.${key}`),\n          enabled,\n        };\n      });\n    const settings = [\n      {\n        name: \"dynamic-sync\",\n        isChecked: enabled && game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync\"),\n        description: game.i18n.localize(`${SETTINGS.MODULE_ID}.settings.dynamic-sync.dynamic-sync`),\n        enabled,\n      },\n    ].concat(policySettings);\n    const gmUsers = getGMUsers();\n\n    return {\n      settings,\n      gmUsers,\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async _updateObject(event, formData) {\n    event.preventDefault();\n    const initial = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync\");\n    for (const [key, value] of Object.entries(formData)) {\n      // eslint-disable-next-line no-await-in-loop\n      await game.settings.set(SETTINGS.MODULE_ID, key, value);\n    }\n    const post = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync\");\n\n    if (initial != post) {\n      logger.warn(\"RELOADING!\");\n      foundry.utils.debounce(window.location.reload(), 100);\n    }\n  }\n}\n\nexport class DDBLocationSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-folders\";\n    options.template = \"modules/ddb-importer/handlebars/filePaths.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Location Settings\";\n  }\n\n  // in foundry v10 we no longer get read only form elements back\n  /** @override */\n  _getSubmitData(updateData = {}) {\n    let data = super._getSubmitData(updateData);\n\n    for (const element of this.form.elements) {\n      if (element.readOnly) {\n        const name = element.name;\n        const field = this.form.elements[name];\n        setProperty(data, name, field.value);\n      }\n    }\n\n    return data;\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n    const directories = [];\n\n    for (const [key, value] of Object.entries(SETTINGS.DEFAULT_SETTINGS.READY.DIRECTORIES)) {\n      directories.push({\n        key,\n        value: game.settings.get(SETTINGS.MODULE_ID, key),\n        name: game.i18n.localize(value.name),\n        description: game.i18n.localize(value.hint),\n      });\n    }\n\n    return {\n      directories,\n      useWebP,\n    };\n  }\n\n  /** @override */\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n\n    const useWebP = formData['image-use-webp'];\n\n    await game.settings.set(SETTINGS.MODULE_ID, \"use-webp\", useWebP);\n\n    const directoryStatus = [];\n\n    for (const key of Object.keys(SETTINGS.DEFAULT_SETTINGS.READY.DIRECTORIES)) {\n      const value = formData[key];\n      // eslint-disable-next-line no-await-in-loop\n      await game.settings.set(SETTINGS.MODULE_ID, key, value);\n      directoryStatus.push({\n        key,\n        value,\n        isBad: FileHelper.BAD_DIRS.includes(value),\n        // eslint-disable-next-line no-await-in-loop\n        isValid: await DirectoryPicker.verifyPath(DirectoryPicker.parse(value)),\n      });\n    }\n\n    if (directoryStatus.some((dir) => dir.isBad)) {\n      $('#munching-folder-setup').text(`Please set the image upload directory(s) to something other than the root.`);\n      $('#ddb-importer-folders').css(\"height\", \"auto\");\n      logger.error(\"Error setting Image directory\", {\n        directoryStatus,\n      });\n      throw new Error(`Please set the image upload directory to something other than the root.`);\n    } else if (directoryStatus.some((dir) => !dir.isValid)) {\n      $('#munching-folder-setup').text(`Directory Validation Failed.`);\n      $('#ddb-importer-folders').css(\"height\", \"auto\");\n      logger.error(\"Error validating Image directory\", {\n        directoryStatus,\n      });\n      throw new Error(`Directory Validation Failed.`);\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nHooks.on(\"renderDDBLocationSetup\", (app, html, user) => {\n  DirectoryPicker.processHtml(html);\n});\n","import logger from \"../logger.js\";\n\nfunction occurrences(string, subString, allowOverlapping) {\n  string += \"\";\n  subString += \"\";\n  if (subString.length <= 0) return (string.length + 1);\n\n  let n = 0,\n    pos = 0,\n    step = allowOverlapping ? 1 : subString.length;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    pos = string.indexOf(subString, pos);\n    if (pos >= 0) {\n      ++n;\n      pos += step;\n    } else break;\n  }\n  return n;\n}\n\nfunction checkBase64(string) {\n  let count = occurrences(JSON.stringify(string), \"base64\");\n\n  return count > 0;\n}\n\nexport function checkScenes() {\n  let fixedScenes = [];\n  let badScenes = [];\n  game.scenes.forEach((scene) => {\n    if (checkBase64(scene.thumb)) {\n      logger.warn(`Scene ${scene.name} has base 64 thumb data - fixing!`);\n      scene.createThumbnail().then((data) => {\n        scene.update({ thumb: data.thumb }, { diff: false });\n        ui.notifications.info(`Regenerated thumbnail image for ${scene.name} background image`);\n      });\n      fixedScenes.push(scene.name);\n    }\n    if (checkBase64(scene.img)) {\n      logger.warn(`Scene ${scene.name} has base 64 Image data!`);\n      ui.notifications.warn(`${scene.name} has a base64 encoded scene image - please fix`);\n      badScenes.push(scene.name);\n    } else if (checkBase64(scene) && !checkBase64(scene.thumb)) {\n      logger.warn(`Scene ${scene.name} has unknown location base 64 data!`);\n      logger.warn(scene);\n      badScenes.push(scene.name);\n    }\n  });\n  if (badScenes.length > 0) logger.warn(\"Please fix the following scenes with base64 data:\", badScenes);\n  return {\n    fixedScenes,\n    badScenes,\n  };\n}\n\nexport function base64Check() {\n  return checkScenes();\n}\n","import logger from \"../logger.js\";\nimport AdventureMunchHelpers from \"../muncher/adventure/AdventureMunchHelpers.js\";\n\nconst STUBS = {\n  1: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"300\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n  2: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"230\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n  3: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"170\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n  4: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"140\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n};\n\nexport async function generateIcon(adventure, title) {\n  // default path\n  let iconPath = \"icons/svg/book.svg\";\n  let stub = title.trim().split(\".\")[0].split(\" \")[0];\n  stub = stub.replace(/(\\d+)/, AdventureMunchHelpers.unPad);\n  if (stub.length <= 4) {\n    iconPath = `assets/icons/${stub}.svg`;\n    logger.info(stub);\n    let content = STUBS[stub.length];\n    content = content.replace(\"REPLACEME\", stub);\n    const uploadPath = await adventure.importRawFile(iconPath, content, \"text/plain\", true);\n    return uploadPath;\n  }\n  return iconPath;\n}\n","const utils = {\n  debug: () => {\n    return true;\n  },\n\n  capitalize: (s) => {\n    if (typeof s !== \"string\") return \"\";\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  },\n\n  normalizeString: (str) => {\n    return str.toLowerCase().replace(/\\W/g, \"\");\n  },\n\n  referenceNameString: (str) => {\n    return str.replace(/[^a-zA-Z0-9]/g, \"-\")\n      .replace(/-+/g, \"-\")\n      .trim();\n  },\n\n  stripHtml: (html) => {\n    let tmp = document.createElement(\"DIV\");\n    tmp.innerHTML = html;\n    return tmp.textContent || tmp.innerText || \"\";\n  },\n\n  htmlToElement: (html) => {\n    const template = document.createElement('template');\n    html = html.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = html;\n    return template.content.firstChild;\n  },\n\n  htmlToDoc: (text) => {\n    const parser = new DOMParser();\n    return parser.parseFromString(text, \"text/html\");\n  },\n\n  replaceHtmlSpaces: (str) => {\n    return str.replace(/&nbsp;/g, ' ').replace(/\\xA0/g, ' ').replace(/\\s\\s+/g, ' ').trim();\n  },\n\n  renderLesserString: (str) => {\n    return utils.replaceHtmlSpaces(utils.stripHtml(str)).trim().toLowerCase();\n  },\n\n  stringKindaEqual(a, b) {\n    return utils.renderLesserString(a) === utils.renderLesserString(b);\n  },\n\n  findByProperty: (arr, property, searchString) => {\n    function levenshtein(a, b) {\n      let tmp;\n      if (a.length === 0) {\n        return b.length;\n      }\n      if (b.length === 0) {\n        return a.length;\n      }\n      if (a.length > b.length) {\n        tmp = a;\n        a = b;\n        b = tmp;\n      }\n\n      let i,\n        j,\n        res,\n        alen = a.length,\n        blen = b.length,\n        row = Array(alen);\n      for (i = 0; i <= alen; i++) {\n        row[i] = i;\n      }\n\n      for (i = 1; i <= blen; i++) {\n        res = i;\n        for (j = 1; j <= alen; j++) {\n          tmp = row[j - 1];\n          row[j - 1] = res;\n          res = b[i - 1] === a[j - 1] ? tmp : Math.min(tmp + 1, Math.min(res + 1, row[j] + 1));\n        }\n      }\n      return res;\n    }\n\n    const maxDistance = 3;\n    let minDistance = 100;\n    let nearestHit = undefined;\n    let nearestDistance = minDistance;\n\n    if (!Array.isArray(arr)) return undefined;\n    arr\n      .filter((entry) => Object.prototype.hasOwnProperty.call(entry, property))\n      .forEach((entry) => {\n        let distance = levenshtein(searchString, entry[property]);\n        if (distance < nearestDistance && distance <= maxDistance && distance < minDistance) {\n          nearestHit = entry;\n          nearestDistance = distance;\n        }\n      });\n\n    return nearestHit;\n  },\n\n  calculateModifier: (val) => {\n    return Math.floor((val - 10) / 2);\n  },\n\n  diceStringResultBuild: (diceMap, dice, bonus = \"\", mods = \"\", diceHint = \"\", specialFlags = \"\") => {\n    const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n    const resultBonus = bonus === 0 ? \"\" : `${bonus > 0 ? ' +' : ' '} ${bonus}`;\n    const diceHintAdd = globalDamageHints && diceHint && diceMap;\n    const hintString = diceHintAdd ? diceHint : \"\";\n    const diceHintString = diceMap.map(({ sign, count, die }, index) =>\n      `${index ? `${sign} ` : ''}${count}d${die}${specialFlags}${hintString}`\n    ).join(' ');\n\n    const result = {\n      dice,\n      diceMap,\n      diceHintString,\n      bonus,\n      diceString: [\n        diceHintString,\n        mods,\n        resultBonus\n      ].join('').trim(),\n    };\n    return result;\n  },\n\n  parseDiceString: (inStr, mods = \"\", diceHint = \"\", specialFlags = \"\") => {\n    // sanitizing possible inputs a bit\n    const str = `${inStr}`.toLowerCase().replace(/[–-–−]/gu, \"-\").replace(/\\s+/gu, \"\");\n\n    // all found dice strings, e.g. 1d8, 4d6\n    let dice = [];\n    // all bonuses, e.g. -1+8\n    let bonuses = [];\n\n    const diceRegex = /(?<rawSign>[+-]*)(?<count>\\d+)(?:d(?<die>\\d+))?/gu;\n\n    for (const { groups } of str.matchAll(diceRegex)) {\n      const {\n        rawSign = '+',\n        count,\n        die\n      } = groups;\n\n      // sign. We only take the sign standing exactly in front of the dice string\n      // so +-1d8 => -1d8. Just as a failsave\n      const sign = rawSign === \"\" ? \"+\" : rawSign.slice(-1);\n\n      if (die) {\n        dice.push({\n          sign,\n          count: parseInt(sign + count),\n          die: parseInt(die)\n        });\n      } else {\n        bonuses.push({\n          sign,\n          count: parseInt(sign + count)\n        });\n      }\n    }\n\n    // sum up the bonus\n    const bonus = bonuses.reduce((prev, cur) => prev + cur.count, 0);\n\n    // group the dice, so that all the same dice are summed up if they have the same sign\n    // e.g.\n    // +1d8+2d8 => 3d8\n    // +1d8-2d8 => +1d8 -2d8 will remain as-is\n    const diceMap = [];\n\n    const groupBySign = utils.groupBy(dice, 'sign');\n    for (const group of groupBySign.values()) {\n      const groupByDie = utils.groupBy(group, 'die');\n\n      for (const dieGroup of groupByDie.values()) {\n        diceMap.push(\n          dieGroup.reduce((acc, item) => ({\n            ...acc,\n            count: acc.count + item.count\n          }))\n        );\n      }\n    }\n\n    diceMap.sort((a, b) => {\n      if (a.die < b.die) return -1;\n      if (a.die > b.die) return 1;\n      if (a.sign === b.sign) {\n        if (a.count < b.count) return -1;\n        if (a.count > b.count) return 1;\n        return 0;\n      } else {\n        return a.sign === \"+\" ? -1 : 1;\n      }\n    });\n\n    const result = utils.diceStringResultBuild(diceMap, dice, bonus, mods, diceHint, specialFlags);\n    return result;\n  },\n\n  isObject: (item) => {\n    return item && typeof item === \"object\" && !Array.isArray(item);\n  },\n\n  mergeDeep: (target, source) => {\n    let output = Object.assign({}, target);\n    if (utils.isObject(target) && utils.isObject(source)) {\n      Object.keys(source).forEach((key) => {\n        if (utils.isObject(source[key])) {\n          if (!(key in target)) Object.assign(output, { [key]: source[key] });\n          else output[key] = utils.mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(output, { [key]: source[key] });\n        }\n      });\n    }\n    return output;\n  },\n\n  filterDeprecated: (data) => {\n    for (let prop in data) {\n      if (\n        data[prop]\n        && Object.prototype.hasOwnProperty.call(data[prop], \"_deprecated\")\n        && data[prop][\"_deprecated\"] === true\n      ) {\n        delete data[prop];\n      }\n      if (prop === \"_deprecated\" && data[prop] === true) {\n        delete data[prop];\n      }\n    }\n    return data;\n  },\n\n  getTemplate: (type) => {\n    const templates = game.data.template;\n    for (let entityType in templates) {\n      if (\n        templates[entityType].types\n        && Array.isArray(templates[entityType].types)\n        && templates[entityType].types.includes(type)\n      ) {\n        let obj = utils.mergeDeep({}, utils.filterDeprecated(templates[entityType][type]));\n        if (obj.templates) {\n          obj.templates.forEach((tpl) => {\n            obj = utils.mergeDeep(obj, utils.filterDeprecated(templates[entityType].templates[tpl]));\n          });\n          delete obj.templates;\n        }\n        // store the result as JSON for easy cloning\n        return JSON.stringify(obj);\n      }\n    }\n    return undefined;\n  },\n\n  getOrCreateFolder: async (root, entityType, folderName, folderColor = \"\") => {\n    let folder = game.folders.contents.find((f) =>\n      f.type === entityType && f.name === folderName\n      // if a root folder we want to match the root id for the parent folder\n      && (root ? root.id : null) === (f.folder?.id ?? null)\n    );\n    // console.warn(`Looking for ${root} ${entityType} ${folderName}`);\n    // console.warn(folder);\n    if (folder) return folder;\n    folder = await Folder.create(\n      {\n        name: folderName,\n        type: entityType,\n        color: folderColor,\n        parent: (root) ? root.id : null,\n      },\n      { displaySheet: false }\n    );\n    return folder;\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  getFolder: async (kind, subFolder = \"\", baseFolderName = \"D&D Beyond Import\", baseColor = \"#6f0006\", subColor = \"#98020a\", typeFolder = true) => {\n    let entityTypes = new Map();\n    entityTypes.set(\"spell\", \"Item\");\n    entityTypes.set(\"equipment\", \"Item\");\n    entityTypes.set(\"consumable\", \"Item\");\n    entityTypes.set(\"tool\", \"Item\");\n    entityTypes.set(\"loot\", \"Item\");\n    entityTypes.set(\"class\", \"Item\");\n    entityTypes.set(\"backpack\", \"Item\");\n    entityTypes.set(\"magic-items\", \"Item\");\n    entityTypes.set(\"magic-item-spells\", \"Item\");\n    entityTypes.set(\"npc\", \"Actor\");\n    entityTypes.set(\"character\", \"Actor\");\n    entityTypes.set(\"extras\", \"Actor\");\n    entityTypes.set(\"scene\", \"Scene\");\n    entityTypes.set(\"page\", \"JournalEntry\");\n    entityTypes.set(\"journal\", \"JournalEntry\");\n    entityTypes.set(\"journalEntry\", \"JournalEntry\");\n    entityTypes.set(\"background\", \"Item\");\n\n    const folderName = game.i18n.localize(`ddb-importer.item-type.${kind}`);\n    const entityType = entityTypes.get(kind);\n    const baseFolder = await utils.getOrCreateFolder(null, entityType, baseFolderName, baseColor);\n    const entityFolder = typeFolder ? await utils.getOrCreateFolder(baseFolder, entityType, folderName, subColor) : baseFolder;\n    if (subFolder !== \"\") {\n      const subFolderName = subFolder.charAt(0).toUpperCase() + subFolder.slice(1);\n      const typeFolder = await utils.getOrCreateFolder(entityFolder, entityType, subFolderName, subColor);\n      return typeFolder;\n    } else {\n      return entityFolder;\n    }\n  },\n\n  versionCompare: (v1, v2, options) => {\n    let lexicographical = options && options.lexicographical,\n      zeroExtend = options && options.zeroExtend,\n      v1parts = v1.split(\".\"),\n      v2parts = v2.split(\".\");\n\n    function isValidPart(x) {\n      return (lexicographical ? /^\\d+[A-Za-z]*$/ : /^\\d+$/).test(x);\n    }\n\n    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {\n      return NaN;\n    }\n\n    if (zeroExtend) {\n      while (v1parts.length < v2parts.length) v1parts.push(\"0\");\n      while (v2parts.length < v1parts.length) v2parts.push(\"0\");\n    }\n\n    if (!lexicographical) {\n      v1parts = v1parts.map(Number);\n      v2parts = v2parts.map(Number);\n    }\n\n    for (let i = 0; i < v1parts.length; ++i) {\n      if (v2parts.length == i) {\n        return 1;\n      }\n\n      if (v1parts[i] > v2parts[i]) {\n        return 1;\n      }\n      if (v1parts[i] < v2parts[i]) {\n        return -1;\n      }\n    }\n\n    if (v1parts.length != v2parts.length) {\n      return -1;\n    }\n\n    return 0;\n  },\n\n  groupBy(arr, property) {\n    const map = new Map();\n\n    for (const item of arr) {\n      const prop = item[property];\n      const group = map.get(prop) ?? [];\n\n      group.push(item);\n      map.set(prop, group);\n    }\n\n    return map;\n  },\n\n  async namePrompt(question) {\n    const content = `\n    <label class=\"text-label\">\n      <input type=\"text\" name=\"name\"/>\n    </label>\n  `;\n    const name = await new Promise((resolve) => {\n      new Dialog({\n        title: question,\n        content,\n        buttons: {\n          ok: {\n            label: \"Okay\",\n            callback: async (html) => {\n              const value = html.find(\"input[type='text'][name='name']\").val();\n              resolve(value);\n            },\n          },\n          cancel: {\n            label: \"Cancel\",\n            callback: () => {\n              resolve(\"\");\n            },\n          }\n        },\n        default: \"ok\",\n        close: () => {\n          resolve(\"\");\n        },\n      }).render(true);\n    });\n    return name;\n  }\n};\n\nexport default utils;\n","const logger = {\n\n  LOG_PREFIX: \"DDB Importer\",\n  LOG_MSG_DEFAULT: \"No logging message provided.  Please see the payload for more information.\",\n\n  _showMessage: (logLevel, data) => {\n    if (!logLevel || !data || typeof (logLevel) !== 'string') {\n      return false;\n    }\n\n    try {\n      const setting = game.settings.get(\"ddb-importer\", \"log-level\");\n      const logLevels = [\"DEBUG\", \"TIME\", \"TIMEEND\", \"TIMELOG\", \"INFO\", \"WARN\", \"ERR\", \"OFF\"];\n      const logLevelIndex = logLevels.indexOf(logLevel.toUpperCase());\n      if (setting == \"OFF\"\n              || logLevelIndex === -1\n              || logLevelIndex < logLevels.indexOf(setting)) {\n        return false;\n      }\n      return true;\n    } catch (err) {\n      return true;\n    }\n\n  },\n  _addToLogFile: (logLevel, data) => {\n    if (getProperty(CONFIG.debug, \"ddbimporter.record\") === true) {\n      CONFIG.debug.ddbimporter.log.push({\n        level: logLevel,\n        data: data,\n      });\n    }\n  },\n  // eslint-disable-next-line complexity\n  log: (logLevel, ...data) => {\n    logger._addToLogFile(logLevel, data);\n    if (!logger._showMessage(logLevel, data)) {\n      return;\n    }\n\n    const logLevelType = logLevel.startsWith(\"TIME\")\n      ? \"DEBUG\"\n      : logLevel.toUpperCase();\n\n    const msgContent = data[0] && typeof (data[0] == 'string')\n      ? data[0]\n      : logger.LOG_MSG_DEFAULT;\n    const payload = data[0] && typeof (data[0] == 'string')\n      ? data.length > 1\n        ? data.slice(1)\n        : null\n      : data.slice();\n    const msg = `${logger.LOG_PREFIX} | ${logLevelType} > ${msgContent}`;\n\n    switch (logLevel.toUpperCase()) {\n      case \"DEBUG\":\n        if (payload) {\n          console.debug(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.debug(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"INFO\":\n        if (payload) {\n          console.info(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.info(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"WARN\":\n        if (payload) {\n          console.warn(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.warn(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"ERR\":\n        if (payload) {\n          console.error(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.error(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"TIME\":\n        if (payload) {\n          console.time(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.time(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"TIMEEND\":\n        if (payload) {\n          console.timeEnd(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.timeEnd(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"TIMELOG\":\n        if (payload) {\n          console.timeLog(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.timeLog(msg);// eslint-disable-line no-console\n        }\n        break;\n      default: break;\n    }\n  },\n\n  debug: (...data) => {\n    logger.log(\"DEBUG\", ...data);\n  },\n\n  info: (...data) => {\n    logger.log(\"INFO\", ...data);\n  },\n\n  warn: (...data) => {\n    logger.log(\"WARN\", ...data);\n  },\n\n  error: (...data) => {\n    logger.log(\"ERR\", ...data);\n  },\n\n  time: (...data) => {\n    logger.log(\"TIME\", ...data);\n  },\n\n  timeEnd: (...data) => {\n    logger.log(\"TIMEEND\", ...data);\n  },\n\n  timeLog: (...data) => {\n    logger.log(\"TIMELOG\", ...data);\n  },\n\n};\nexport default logger;\n","import logger from \"../logger.js\";\nimport DDBMonster from \"../parser/DDBMonster.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport SETTINGS from \"../settings.js\";\n\nimport { srdFiddling, getCompendiumItems, removeItems } from \"./import.js\";\nimport { createCompendiumFolderStructure } from \"./compendiumFolders.js\";\n\n// targets for migration\nimport { addNPC, generateIconMap, copyExistingMonsterImages, addNPCsToCompendium } from \"./importMonster.js\";\n\nexport default class DDBMonsterFactory {\n\n  static #noteStub(note, nameField = false, monsterNote = false) {\n    logger.info(note, { nameField, monsterNote });\n  }\n\n  static defaultFetchOptions(ids, searchTerm = null) {\n    const searchFilter = $(\"#monster-munch-filter\")[0];\n    const finalSearchTerm = searchTerm ?? (searchFilter?.value ?? \"\");\n    const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n    const sources = enableSources\n      ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n      : [];\n    const homebrew = sources.length > 0\n      ? false\n      : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\");\n    const homebrewOnly = sources.length > 0\n      ? false\n      : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\");\n    const exactMatch = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-exact-match\");\n    const excludeLegacy = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-exclude-legacy\");\n\n    const options = {\n      ids,\n      searchTerm: finalSearchTerm.trim(),\n      sources,\n      homebrew,\n      homebrewOnly,\n      exactMatch,\n      excludeLegacy,\n    };\n    logger.debug(\"Generated monster fetch options\", options);\n    return options;\n  }\n\n  constructor ({ ddbData = null, extra = false, munchNote = null } = {}) {\n    this.extra = extra;\n    this.npcs = [];\n    this.source = ddbData;\n    this.munchNote = munchNote ?? DDBMonsterFactory.#noteStub;\n  }\n\n  /**\n   * Fetch monsters from DDB\n   * @param {*} ids limit monsters fetched to specific ids\n   * @returns\n   */\n  async fetchDDBMonsterSourceData({ ids = [], searchTerm = \"\", sources = [], homebrew = false,\n    homebrewOnly = false, exactMatch = false, excludeLegacy = false }\n  ) {\n    const cobaltCookie = getCobalt();\n    const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    const parsingApi = DDBProxy.getProxy();\n\n    const body = {\n      cobalt: cobaltCookie,\n      betaKey: betaKey,\n    };\n\n    if (ids && !Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    if (ids && ids.length > 0) {\n      body.ids = [...new Set(ids)];\n    } else {\n      body.sources = sources;\n      body.search = searchTerm;\n      body.homebrew = homebrew;\n      body.homebrewOnly = homebrewOnly;\n      body.searchTerm = encodeURIComponent(searchTerm);\n      body.exactMatch = exactMatch;\n      body.excludeLegacy = excludeLegacy;\n    }\n\n    const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n    const url = ids && ids.length > 0\n      ? `${parsingApi}/proxy/monsters/ids`\n      : `${parsingApi}/proxy/monster`;\n\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            this.munchNote(`API Failure: ${data.message}`);\n            logger.error(`API Failure:`, data.message);\n            reject(data.message);\n          }\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(data), `monsters-raw.json`, \"application/json\");\n          }\n          return data;\n        })\n        .then((data) => {\n          this.munchNote(`Retrieved ${data.data.length} monsters, starting parse...`, true, false);\n          logger.info(`Retrieved ${data.data.length} monsters`);\n          this.source = data.data;\n          resolve(this.source);\n        })\n        .catch((error) => reject(error));\n    });\n  }\n\n  /**\n   * Processes the downloaded (or provided) DDB Source data for monsters and generates actors\n   * Use this.fetchDDBMonsterSourceData() if you need to get monster data from ddb\n   * @returns\n   */\n  async parse() {\n    let foundryActors = [];\n    let failedMonsterNames = [];\n\n    const useItemAC = game.settings.get(\"ddb-importer\", \"munching-policy-monster-use-item-ac\");\n    const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    const addMonsterEffects = game.settings.get(\"ddb-importer\", \"munching-policy-add-monster-effects\");\n\n    logger.time(\"Monster Parsing\");\n    for (const monster of this.source) {\n      try {\n        logger.debug(`Attempting to parse ${monster.name}`);\n        logger.time(`Monster Parse ${monster.name}`);\n        const ddbMonster = new DDBMonster(monster, { extra: this.extra, useItemAC, legacyName, addMonsterEffects });\n        // eslint-disable-next-line no-await-in-loop\n        await ddbMonster.parse();\n        foundryActors.push(duplicate(ddbMonster.npc));\n        logger.timeEnd(`Monster Parse ${monster.name}`);\n        // logger.timeLog(\"Monster Parsing\", monster.name);\n      } catch (err) {\n        logger.error(`Failed parsing ${monster.name}`);\n        logger.error(err);\n        logger.error(err.stack);\n        failedMonsterNames.push(monster.name);\n      }\n    }\n\n    const result = {\n      actors: await Promise.all(foundryActors),\n      failedMonsterNames: failedMonsterNames,\n    };\n\n    logger.timeEnd(\"Monster Parsing\");\n\n    this.munchNote(\n      `Parsed ${result.actors.length} monsters, failed ${result.failedMonsterNames.length} monsters`,\n      false,\n      true\n    );\n    logger.info(`Parsed ${result.actors.length} monsters, failed ${result.failedMonsterNames.length} monsters`);\n    if (result.failedMonsterNames && result.failedMonsterNames.length !== 0) {\n      logger.error(`Failed to parse`, result.failedMonsterNames);\n    }\n\n    this.npcs = result.actors;\n    return result;\n  }\n\n  /**\n   * Downloads, parces and imports monsters into a compendium\n   */\n  async processIntoCompendium(ids = null) {\n    logger.time(\"Monster Import Time\");\n    setProperty(CONFIG.DDBI, \"MUNCHER.TEMPORARY\", {});\n    const updateBool = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n    const updateImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\");\n    const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    // const bulkImport = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-bulk-import\");\n    // bulk import is disabled for now de to entry duplication\n    const bulkImport = false;\n\n    // to speed up file checking we pregenerate existing files now.\n    logger.info(\"Checking for existing files...\");\n    this.munchNote(`Checking existing image files...`);\n    await FileHelper.generateCurrentFiles(uploadDirectory);\n    await FileHelper.generateCurrentFiles(\"[data] modules/ddb-importer/data\");\n    logger.info(\"Check complete getting monster data...\");\n    this.munchNote(`Getting monster data from DDB...`);\n    await this.fetchDDBMonsterSourceData(DDBMonsterFactory.defaultFetchOptions(ids));\n    let monsterResults = await this.parse();\n    let monsters = monsterResults.actors;\n\n    if (!updateBool || !updateImages) {\n      this.munchNote(`Calculating which monsters to update...`, true);\n      const existingMonsters = await getCompendiumItems(monsters, \"npc\", { keepDDBId: true });\n      const existingMonstersTotal = existingMonsters.length + 1;\n      if (!updateBool) {\n        logger.debug(\"Removing existing monsters from import list\");\n        logger.debug(`Matched ${existingMonstersTotal}`);\n        this.munchNote(`Removing ${existingMonstersTotal} from update...`);\n        monsters = await removeItems(monsters, existingMonsters, true);\n      }\n      if (!updateImages) {\n        logger.debug(\"Copying monster images across...\");\n        this.munchNote(`Copying images for ${existingMonstersTotal} monsters...`);\n        monsters = copyExistingMonsterImages(monsters, existingMonsters);\n      }\n    }\n    this.munchNote(\"\");\n    this.munchNote(`Fiddling with the SRD data...`, true);\n    const finalMonsters = await srdFiddling(monsters, \"monsters\");\n\n    this.munchNote(`Generating Icon Map..`, true);\n    await generateIconMap(finalMonsters);\n\n    const addToCompendiumFolder = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-compendium-folders\");\n    const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n    if (addToCompendiumFolder && compendiumFoldersInstalled) {\n      this.munchNote(`Checking compendium folders..`, true);\n      await createCompendiumFolderStructure(\"monsters\");\n      this.munchNote(\"\", true);\n    }\n\n    let monstersParsed = [];\n    let currentMonster = 1;\n    const monsterCount = finalMonsters.length;\n    this.munchNote(`Preparing dinner for ${monsterCount} monsters!`, true);\n    for (const monster of finalMonsters) {\n      if (bulkImport) {\n        this.munchNote(`[${currentMonster}/${monsterCount}] Checking dietary requirements for ${monster.name}`, false, true);\n      } else {\n        this.munchNote(`[${currentMonster}/${monsterCount}] Importing ${monster.name} to compendium`, false, true);\n      }\n      logger.debug(`Preparing ${monster.name} data for import`);\n      // eslint-disable-next-line no-await-in-loop\n      const munched = await addNPC(monster, bulkImport, \"monster\");\n      monstersParsed.push(munched);\n      currentMonster += 1;\n    }\n    logger.debug(\"Monsters Parsed\", monstersParsed);\n    if (bulkImport) {\n      this.munchNote(`Importing ${monstersParsed.length} monsters`, false, true);\n      logger.debug(`Importing ${monstersParsed.length} monsters`);\n      await addNPCsToCompendium(monstersParsed, \"monster\");\n    }\n    this.munchNote(\"\", false, true);\n    setProperty(CONFIG.DDBI, \"MUNCHER.TEMPORARY\", {});\n\n    logger.timeEnd(\"Monster Import Time\");\n    if (ids !== null) {\n      return Promise.all(monstersParsed);\n    }\n    return monsterCount;\n  }\n}\n","import logger from \"../../logger.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\nimport { updateCompendium, srdFiddling } from \"../import.js\";\nimport DDBMuncher from \"../DDBMuncher.js\";\nimport DDBRace from \"../../parser/race/DDBRace.js\";\n\nconst FEATURE_DUP = [\n  \"Breath Weapon\",\n  \"Natural Armor\",\n  \"Darkvision\",\n  \"Flight\",\n  \"Hunter's Lore\",\n  \"Claws\",\n  \"Beak\",\n  \"Spells of the Mark\",\n  \"Shifting Feature\",\n  \"Creature Type\",\n  \"Aggressive\",\n  \"Amphibious\",\n  \"Ancestral Legacy\",\n  \"Bite\",\n  \"Cantrip\",\n  \"Celestial Resistance\",\n  \"Charge\",\n  \"Child of the Sea\",\n  \"Draconic Resistance\",\n  \"Fey Ancestry\",\n  \"Hold Breath\",\n  \"Hooves\",\n  \"Horns\",\n  \"Magic Resistance\",\n  \"Mental Discipline\",\n  \"Natural Athlete\",\n  \"Powerful Build\",\n  \"Sunlight Sensitivity\",\n  \"Superior Darkvision\",\n];\n\nfunction getRacialTrait(trait, fullName, isLegacy) {\n  logger.debug(\"Race trait build started\");\n\n  const traitBase = new DDBRace(trait, null);\n  let result = traitBase.buildBase();\n\n  const duplicateFeature = FEATURE_DUP.includes(result.name.replace(\"’\", \"'\"));\n  result.name = (duplicateFeature) ? `${result.name} (${fullName})` : result.name;\n\n  const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n  if (legacyName && isLegacy) {\n    // result.name += \" (Legacy)\";\n    logger.debug(`Trait name ${result.name} is legacy`);\n  }\n\n\n  result.flags.ddbimporter['spellListIds'] = trait.spellListIds;\n  result.flags.ddbimporter['definitionKey'] = trait.definitionKey;\n  result.flags.ddbimporter['race'] = fullName;\n  result.system.requirements = fullName;\n\n  result.system.type = {\n    value: \"race\",\n  };\n\n  result.system.description.value = parseTags(result.system.description.value);\n\n  return result;\n}\n\nconst NO_TRAITS = [\n  \"Speed\",\n  \"Ability Score Increase\",\n  \"Ability Score Increases\",\n  \"Size\",\n  \"Feat\",\n  \"Languages\",\n  \"Extra Language\",\n  \"Age\",\n  \"Alignment\",\n];\n\nexport async function getRaces(data) {\n  logger.debug(\"get races started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let results = [];\n  let races = [];\n  let racialFeatures = [];\n\n  // const legacyRaces =\n  // setProperty(CONFIG, \"DDBI.MUNCHER.RACES.LEGACY\", duplicateRaces);\n\n  const excludeLegacy = game.settings.get(\"ddb-importer\", \"munching-policy-exclude-legacy\");\n  data\n    .filter((race) => !excludeLegacy || (excludeLegacy && !race.isLegacy))\n    .forEach((race) => {\n      logger.debug(`${race.fullName} features parsing started...`);\n      race.racialTraits.forEach((trait) => {\n        logger.debug(`${trait.definition.name} trait starting...`);\n        if (!trait.definition.hideInSheet && !NO_TRAITS.includes(trait.definition.name)) {\n          const parsedTrait = getRacialTrait(trait.definition, race.fullName, race.isLegacy);\n          racialFeatures.push(parsedTrait);\n          results.push({ race: race.fullName, trait: trait.definition.name });\n        }\n      });\n    });\n\n  const fiddledRacialFeatures = await srdFiddling(racialFeatures, \"traits\");\n  DDBMuncher.munchNote(`Importing ${fiddledRacialFeatures.length} traits!`, true);\n  logger.debug(\"Generated Racial Traits\", fiddledRacialFeatures);\n  await updateCompendium(\"traits\", { traits: fiddledRacialFeatures }, updateBool, [\"entityRaceId\"]);\n\n  const compendiumRacialTraits = await DDBRace.getRacialTraitsLookup(fiddledRacialFeatures);\n\n  await Promise.allSettled(data\n    .filter((race) => !excludeLegacy || (excludeLegacy && !race.isLegacy))\n    .map(async (race) => {\n      logger.debug(`${race.fullName} race parsing started...`);\n      const ddbRace = new DDBRace(race, compendiumRacialTraits);\n      const builtRace = await ddbRace.buildRace();\n      races.push(builtRace);\n    })\n  );\n\n  logger.debug(\"Pre-fiddled races\", duplicate(races));\n\n  const fiddledRaces = await srdFiddling(races, \"races\");\n  DDBMuncher.munchNote(`Importing ${fiddledRaces.length} races!`, true);\n\n  logger.debug(\"Fiddled races\", fiddledRaces);\n\n  await updateCompendium(\"races\", { races: fiddledRaces }, updateBool, [\"entityRaceId\"]);\n\n  return results;\n}\n","// Main module class\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { getRaces } from \"./races/races.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nfunction getRaceData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/races`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `races-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getRaces(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseRaces() {\n  const results = await getRaceData();\n\n  // FileHelper.download(JSON.stringify(results), `races-icon.json`, \"application/json\");\n\n  return results;\n}\n\n\n","// Main module class\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { getFeats } from \"./feats/feats.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nfunction getFeatData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/feats`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `feats-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getFeats(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseFeats() {\n  const results = await getFeatData();\n\n  return results;\n}\n\n\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport logger from \"../../logger.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport { generateTable } from \"../table.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\nimport utils from \"../../lib/utils.js\";\n\nconst CLASS_TEMPLATE = {\n  \"name\": \"\",\n  \"type\": \"feat\",\n  \"system\": {\n    \"description\": {\n      \"value\": \"\",\n      \"chat\": \"\",\n      \"unidentified\": \"\"\n    },\n    \"source\": \"\",\n  },\n  \"sort\": 2600000,\n  \"flags\": {\n    \"ddbimporter\": {\n      \"type\": \"class\",\n    },\n    \"obsidian\": {\n      \"source\": {\n        \"type\": \"class\",\n        \"text\": \"\"\n      }\n    },\n  },\n  \"img\": null\n};\n\nexport const NO_TRAITS = [\n  \"Speed\",\n  \"Size\",\n  \"Feat\",\n  \"Languages\",\n  \"Hit Points\",\n  \"Proficiencies\",\n];\n\nexport const FEATURE_DUP = [\n  \"Ability Score Increase\",\n  \"Ability Score Improvement\",\n  \"Expertise\",\n  \"Fighting Style\",\n  \"Land's Stride\",\n  \"Otherworldly Patron\",\n  \"Pact Magic\",\n  \"Potent Spellcasting\",\n  \"Timeless Body\",\n  \"Unarmored Defense\",\n  \"Circle Spells\",\n  \"Divine Strike\",\n  \"Evasion\",\n  \"Channel Divinity\",\n  \"Expanded Spell List\",\n  \"Oath Spells\",\n  \"Psionic Power\",\n  \"Psychic Blades\",\n  \"Spellcasting\",\n  \"Primal Companion\",\n  \"Domain Spells\",\n  \"Bonus Cantrip\",\n  \"Bonus Cantrips\",\n  \"Bonus Proficiencies\",\n  \"Bonus Proficiency\",\n  \"Extra Attack\",\n  \"Tool Proficiency\",\n];\n\nfunction buildBase(data) {\n  let result = duplicate(CLASS_TEMPLATE);\n  const updateExisting = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  result.name = data.name;\n  const tableDescription = generateTable(data.name, data.description, updateExisting);\n  result.system.description.value += `${tableDescription}\\n\\n`;\n\n  result.flags.ddbimporter = {\n    id: data.id,\n    data: data,\n    version: CONFIG.DDBI.version,\n  };\n\n  if (data.moreDetailsUrl) {\n    result.flags.ddbimporter['moreDetailsUrl'] = data.moreDetailsUrl;\n  }\n\n  result.system.source = DDBHelper.parseSource(data);\n\n  return result;\n}\n\nexport async function generateFeatureAdvancements(klass, compendiumClassFeatures, ignoreIds = []) {\n  logger.debug(`Parsing ${klass.name} features for advancement`);\n  const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"features\");\n\n  let advancements = [];\n  klass.classFeatures\n    .filter((feature) => !ignoreIds.includes(feature.id))\n    .forEach((feature) => {\n      const featureMatch = compendiumClassFeatures.find((match) => {\n        const matchName = hasProperty(match, \"flags.ddbimporter.featureName\")\n          ? getProperty(match, \"flags.ddbimporter.featureName\").trim().toLowerCase()\n          : match.name.trim().toLowerCase();\n        return feature.name.trim().toLowerCase() == matchName\n          && hasProperty(match, \"flags.ddbimporter\")\n          && (match.flags.ddbimporter.class == klass.name\n            || match.flags.ddbimporter.parentClassId == klass.id\n            || match.flags.ddbimporter.classId == klass.id);\n      });\n\n      if (featureMatch) {\n        const levelAdvancement = advancements.findIndex((advancement) => advancement.level === feature.requiredLevel);\n\n        if (levelAdvancement == -1) {\n          const advancement = {\n            _id: foundry.utils.randomID(),\n            type: \"ItemGrant\",\n            configuration: {\n              items: [\n                `Compendium.${compendiumLabel}.${featureMatch._id}`\n              ]\n            },\n            value: {},\n            level: feature.requiredLevel,\n            title: \"Features\",\n            icon: \"\",\n            classRestriction: \"\"\n          };\n          advancements.push(advancement);\n        } else {\n          advancements[levelAdvancement].configuration.items.push(`Compendium.${compendiumLabel}.${featureMatch._id}`);\n        }\n      }\n    });\n\n  return advancements;\n}\n\nexport async function buildClassFeatures(klass, compendiumClassFeatures, ignoreIds = []) {\n  logger.debug(`Parsing ${klass.name} features`);\n  let description = \"<h1>Class Features</h1>\\n\\n\";\n  let classFeatures = [];\n\n  const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"features\");\n\n  klass.classFeatures.forEach((feature) => {\n    const classFeaturesAdded = classFeatures.some((f) => f === feature.name);\n\n    // sort by level?\n    if (!classFeaturesAdded && !ignoreIds.includes(feature.id)) {\n      const featureMatch = compendiumClassFeatures.find((match) => {\n        const matchName = hasProperty(match, \"flags.ddbimporter.featureName\")\n          ? getProperty(match, \"flags.ddbimporter.featureName\").trim().toLowerCase()\n          : match.name.trim().toLowerCase();\n        return feature.name.trim().toLowerCase() == matchName\n          && hasProperty(match, \"flags.ddbimporter\")\n          && (match.flags.ddbimporter.class == klass.name\n            || match.flags.ddbimporter.parentClassId == klass.id\n            || match.flags.ddbimporter.classId == klass.id);\n      });\n      const title = (featureMatch)\n        ? `<p><b>@Compendium[${compendiumLabel}.${featureMatch._id}]{${feature.name}}</b></p>`\n        : `<p><b>${feature.name}</b></p>`;\n\n      // eslint-disable-next-line require-atomic-updates\n      description += `${title}\\n${feature.description}\\n\\n`;\n      classFeatures.push(feature.name);\n    }\n  });\n\n  return description;\n}\n\nexport function getClassFeature(feature, klass, subClassName = \"\") {\n  logger.debug(\"Class feature build started\");\n\n  let result = buildBase(feature);\n  result.flags.obsidian.source.text = klass.name;\n\n  const duplicateFeature = FEATURE_DUP.includes(feature.name);\n  result.name = (duplicateFeature) ? `${feature.name} (${klass.name})` : feature.name;\n\n  result.flags.ddbimporter['featureId'] = feature.id;\n  result.flags.ddbimporter['featureName'] = feature.name;\n  result.flags.ddbimporter['requiredLevel'] = feature.requiredLevel;\n  result.flags.ddbimporter['prerequisite'] = feature.prerequisite;\n  result.flags.ddbimporter['class'] = klass.name;\n  result.flags.ddbimporter['classId'] = klass.id;\n  result.flags.ddbimporter['subClass'] = subClassName;\n  result.flags.ddbimporter['parentClassId'] = klass.parentClassId;\n  const requiredLevel = feature.requiredLevel ? ` ${feature.requiredLevel}` : \"\";\n  result.system.requirements = `${klass.name}${requiredLevel}`;\n\n  result.system.description.value = parseTags(result.system.description.value);\n\n  result.system.type = {\n    value: \"class\",\n  };\n\n  return result;\n}\n\nexport async function buildBaseClass(klass) {\n  let result = buildBase(klass);\n  logger.debug(`Parsing ${klass.name}`);\n  result.flags.obsidian.source.text = klass.name;\n  result.type = \"class\";\n  result.system.identifier = utils.referenceNameString(klass.name).toLowerCase();\n  result.system.advancement = [];\n\n  let avatarUrl;\n  let largeAvatarUrl;\n  let portraitAvatarUrl;\n\n  if (klass.portraitAvatarUrl) {\n    const downloadOptions = { type: \"class-portrait\", name: klass.fullName };\n    portraitAvatarUrl = await FileHelper.getImagePath(klass.portraitAvatarUrl, downloadOptions);\n    result.img = portraitAvatarUrl;\n    result.flags.ddbimporter['portraitAvatarUrl'] = klass.portraitAvatarUrl;\n  }\n\n  if (klass.avatarUrl) {\n    const downloadOptions = { type: \"class-avatar\", name: klass.fullName };\n    avatarUrl = await FileHelper.getImagePath(klass.avatarUrl, downloadOptions);\n    result.flags.ddbimporter['avatarUrl'] = klass.avatarUrl;\n    if (!result.img) {\n      result.img = avatarUrl;\n    }\n  }\n\n  if (klass.largeAvatarUrl) {\n    const downloadOptions = { type: \"class-large\", name: klass.fullName };\n    largeAvatarUrl = await FileHelper.getImagePath(klass.largeAvatarUrl, downloadOptions);\n    // eslint-disable-next-line require-atomic-updates\n    result.flags.ddbimporter['largeAvatarUrl'] = klass.largeAvatarUrl;\n    if (!result.img) {\n      // eslint-disable-next-line require-atomic-updates\n      result.img = largeAvatarUrl;\n    }\n  }\n\n  const image = (avatarUrl)\n    ? `<img class=\"ddb-class-image\" src=\"${avatarUrl}\">\\n\\n`\n    : `<img class=\"ddb-class-image\" src=\"${largeAvatarUrl}\">\\n\\n`;\n\n  // eslint-disable-next-line require-atomic-updates\n  result.system.description.value += image;\n\n  // eslint-disable-next-line require-atomic-updates\n  result.flags.ddbimporter['parentClassId'] = klass.parentClassId;\n  // eslint-disable-next-line require-atomic-updates\n  result.flags.ddbimporter['hitDice'] = klass.hitDice;\n  // eslint-disable-next-line require-atomic-updates\n  result.flags.ddbimporter['spellCastingAbilityId'] = klass.spellCastingAbilityId;\n  // eslint-disable-next-line require-atomic-updates\n  result.flags.ddbimporter['canCastSpells'] = klass.canCastSpells;\n\n  // setup data\n  // eslint-disable-next-line require-atomic-updates\n  result.system.levels = 1;\n  // eslint-disable-next-line require-atomic-updates\n  result.system.hitDice = `d${klass.hitDice}`;\n\n  let spellcasting = {};\n  if (klass.canCastSpells) {\n    const spellProgression = DICTIONARY.spell.progression.find((cls) => cls.name == klass.name);\n    const spellCastingAbility = klass.spellCastingAbilityId\n      ? DICTIONARY.character.abilities.find((a) => a.id == klass.spellCastingAbilityId).value\n      : null;\n    if (spellProgression) {\n      spellcasting = {\n        progression: spellProgression.value,\n        ability: spellCastingAbility,\n      };\n    }\n  }\n  // eslint-disable-next-line require-atomic-updates\n  result.system.spellcasting = spellcasting;\n\n  // this can be used with the add class response\n  // const classSkillSubType = `choose-a-${klass.name.toLowerCase()}-skill`;\n  // const skillCount = .filter((mod) => mod.subType === classSkillSubType && mod.type === \"proficiency\"));\n\n  const proficiencyOption = klass.classFeatures.find((feature) =>\n    feature.name === \"Proficiencies\"\n    && feature.requiredLevel === 1\n  );\n\n  let dom = new DocumentFragment();\n  $.parseHTML(proficiencyOption.description).forEach((element) => {\n    dom.appendChild(element);\n  });\n\n  // Choose any three\n  // Skills: Choose two from Arcana, Animal Handling, Insight, Medicine, Nature, Perception, Religion, and Survival\n  const skillText = dom.textContent.toLowerCase().split(\"skills:\").pop().split(\"\\n\")[0].split(\"The\")[0].split(\".\")[0].trim();\n  const allSkillRegex = /Skills: Choose any (\\w+)(.*)($|\\.$|\\w+:)/im;\n  const allMatch = dom.textContent.match(allSkillRegex);\n  const skillRegex = /choose (\\w+)(?:\\sskills)* from (.*)($|The|\\.$|\\w+:)/im;\n  const skillMatch = skillText.match(skillRegex);\n\n  if (allMatch) {\n    const skills = DICTIONARY.character.skills.map((skill) => skill.name);\n    const numberSkills = DICTIONARY.numbers.find((num) => allMatch[1].toLowerCase() === num.natural);\n    // eslint-disable-next-line require-atomic-updates\n    result.system.skills = {\n      number: numberSkills ? numberSkills.num : 2,\n      choices: skills,\n      value: [],\n    };\n  } else if (skillMatch) {\n    const skillNames = skillMatch[2].replace('and', ',').split(',').map((skill) => skill.trim());\n    const skills = skillNames.filter((name) => DICTIONARY.character.skills.some((skill) => skill.label.toLowerCase() === name.toLowerCase()))\n      .map((name) => {\n        const dictSkill = DICTIONARY.character.skills.find((skill) => skill.label.toLowerCase() === name.toLowerCase());\n        return dictSkill.name;\n      });\n    const numberSkills = DICTIONARY.numbers.find((num) => skillMatch[1].toLowerCase() === num.natural);\n    // eslint-disable-next-line require-atomic-updates\n    result.system.skills = {\n      number: numberSkills ? numberSkills.num : 2,\n      choices: skills,\n      value: [],\n    };\n  }\n\n  // get class saves\n  const savingText = dom.textContent.toLowerCase().split(\"saving throws:\").pop().split(\"\\n\")[0].split(\"The\")[0].split(\".\")[0].split(\"skills:\")[0].trim();\n  const saveRegex = /(.*)(?:$|The|\\.$|\\w+:)/im;\n  const saveMatch = savingText.match(saveRegex);\n\n  if (saveMatch) {\n    const saveNames = saveMatch[1].replace('and', ',').split(',').map((ab) => ab.trim());\n    const saves = saveNames\n      .filter((name) => DICTIONARY.character.abilities.some((ab) => ab.long.toLowerCase() === name.toLowerCase()))\n      .map((name) => {\n        const dictAbility = DICTIONARY.character.abilities.find((ab) => ab.long.toLowerCase() === name.toLowerCase());\n        return dictAbility.value;\n      });\n    // eslint-disable-next-line require-atomic-updates\n    result.system.saves = saves;\n  }\n\n  // \"moreDetailsUrl\": \"/characters/classes/rogue\",\n\n  if (klass.equipmentDescription) {\n    // eslint-disable-next-line require-atomic-updates\n    result.system.description.value += `<p><b>Starting Equipment</b></p>\\n${klass.equipmentDescription}\\n\\n`;\n  }\n\n  return result;\n}\n","import logger from \"../../logger.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport { buildBaseClass, getClassFeature, NO_TRAITS, buildClassFeatures, generateFeatureAdvancements } from \"./shared.js\";\nimport { updateCompendium, srdFiddling } from \"../import.js\";\nimport DDBMuncher from \"../DDBMuncher.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\n// import { buildClassFeatures } from \"../../parser/classes/index.js\";\nimport { getHPAdvancement, addSRDAdvancements } from \"../../parser/classes/index.js\";\n\nasync function buildClass(klass, compendiumClassFeatures) {\n  let result = await buildBaseClass(klass);\n  result.system.description.value += await buildClassFeatures(klass, compendiumClassFeatures);\n  result.system.description.value = parseTags(result.system.description.value);\n  result.system.advancement.push(getHPAdvancement(), ...await generateFeatureAdvancements(klass, compendiumClassFeatures));\n  result.system.advancement = await addSRDAdvancements(result.system.advancement, result);\n  return result;\n}\n\nexport async function getClasses(data) {\n  let results = [];\n  logger.debug(\"get clases started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let klasses = [];\n  let classFeatures = [];\n\n  data.forEach((klass) => {\n    logger.debug(`${klass.name} feature parsing started...`);\n    klass.classFeatures\n      .sort((a, b) => a.requiredLevel - b.requiredLevel)\n      .forEach((feature) => {\n        const existingFeature = classFeatures.some((f) =>\n          f.flags.ddbimporter.featureName === feature.name\n          && f.flags.ddbimporter.classId === klass.id\n        );\n        logger.debug(`${feature.name} feature starting...`);\n        if (!NO_TRAITS.includes(feature.name) && !existingFeature) {\n          const parsedFeature = getClassFeature(feature, klass);\n          classFeatures.push(parsedFeature);\n          results.push({ class: klass.name, subClass: \"\", feature: feature.name });\n        }\n      });\n  });\n\n  const fiddledClassFeatures = await srdFiddling(classFeatures, \"features\");\n  DDBMuncher.munchNote(`Importing ${fiddledClassFeatures.length} features!`, true);\n  logger.debug(`Importing ${fiddledClassFeatures.length} features!`, classFeatures);\n  await updateCompendium(\"features\", { features: fiddledClassFeatures }, updateBool);\n\n  const compendium = CompendiumHelper.getCompendiumType(\"features\");\n  const index = await compendium.getIndex();\n  const firstPassFeatures = await index.filter((i) => fiddledClassFeatures.some((orig) => i.name === orig.name));\n  let compendiumClassFeatures = [];\n\n  await Promise.all(firstPassFeatures.map(async (f) => {\n    const feature = await compendium.getDocument(f._id);\n    compendiumClassFeatures.push(feature.toJSON());\n  }));\n\n  await Promise.all(data.map(async (klass) => {\n    logger.debug(`${klass.name} class parsing started...`);\n    const builtClass = await buildClass(klass, compendiumClassFeatures);\n    klasses.push(builtClass);\n  }));\n\n  logger.debug(\"Class build finished\", klasses);\n\n  const fiddledClasses = await srdFiddling(klasses, \"classes\");\n  DDBMuncher.munchNote(`Importing ${fiddledClasses.length} classes!`, true);\n\n  await updateCompendium(\"classes\", { classes: fiddledClasses }, updateBool);\n\n  // return fiddledClasses.concat(fiddledClassFeatures);\n  return results;\n}\n","import logger from \"../../logger.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\nimport { buildBaseClass, getClassFeature, NO_TRAITS, buildClassFeatures, generateFeatureAdvancements } from \"./shared.js\";\nimport { updateCompendium, srdFiddling } from \"../import.js\";\nimport DDBMuncher from \"../DDBMuncher.js\";\nimport utils from \"../../lib/utils.js\";\n// import { buildClassFeatures } from \"../../parser/classes/index.js\";\n\nasync function buildSubClassBase(klass, subClass) {\n  delete klass['_id'];\n\n  let avatarUrl;\n  let largeAvatarUrl;\n  let portraitAvatarUrl;\n\n  if (subClass.portraitAvatarUrl) {\n    const downloadOptions = { type: \"class-portrait\", name: subClass.fullName };\n    portraitAvatarUrl = await FileHelper.getImagePath(subClass.portraitAvatarUrl, downloadOptions);\n    // eslint-disable-next-line require-atomic-updates\n    klass.img = portraitAvatarUrl;\n    // eslint-disable-next-line require-atomic-updates\n    klass.flags.ddbimporter['portraitAvatarUrl'] = subClass.portraitAvatarUrl;\n  }\n\n  if (subClass.avatarUrl) {\n    const downloadOptions = { type: \"class-avatar\", name: subClass.fullName };\n    avatarUrl = await FileHelper.getImagePath(subClass.avatarUrl, downloadOptions);\n    // eslint-disable-next-line require-atomic-updates\n    klass.flags.ddbimporter['avatarUrl'] = subClass.avatarUrl;\n    if (!klass.img) {\n      // eslint-disable-next-line require-atomic-updates\n      klass.img = avatarUrl;\n    }\n  }\n\n  if (subClass.largeAvatarUrl) {\n    const downloadOptions = { type: \"class-large\", name: subClass.fullName };\n    largeAvatarUrl = await FileHelper.getImagePath(subClass.largeAvatarUrl, downloadOptions);\n    // eslint-disable-next-line require-atomic-updates\n    klass.flags.ddbimporter['largeAvatarUrl'] = subClass.largeAvatarUrl;\n    if (!klass.img) {\n      // eslint-disable-next-line require-atomic-updates\n      klass.img = largeAvatarUrl;\n    }\n  }\n\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['parentClassId'] = subClass.parentClassId;\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['spellCastingAbilityId'] = subClass.spellCastingAbilityId;\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['canCastSpells'] = subClass.canCastSpells;\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['moreDetailsUrl'] = subClass.moreDetailsUrl;\n\n  if (avatarUrl || largeAvatarUrl) {\n    const imageMatch = /$<img class=\"ddb-class-image\"(.*)$/;\n    const image = (avatarUrl)\n      ? `<img class=\"ddb-class-image\" src=\"${avatarUrl}\">\\n\\n`\n      : `<img class=\"ddb-class-image\" src=\"${largeAvatarUrl}\">\\n\\n`;\n    klass.system.description.value.replace(imageMatch, image);\n  }\n\n  klass.system.classIdentifier = utils.referenceNameString(klass.name).toLowerCase();\n  klass.system.identifier = utils.referenceNameString(subClass.name).toLowerCase();\n  klass.type = \"subclass\";\n  klass.name = `${subClass.name} (${klass.name})`;\n\n  // eslint-disable-next-line require-atomic-updates\n  klass.system.description.value += `<h3>${subClass.name}</h3>\\n${subClass.description}\\n\\n`;\n\n  // spell caster now?\n  // if canCastSpells but now canCastSpells then set to third\n  if (klass.system.spellcasting === \"\" && subClass.canCastSpells) {\n    // eslint-disable-next-line require-atomic-updates\n    klass.system.spellcasting = \"third\";\n  }\n\n  return klass;\n\n}\n\nasync function buildSubClass(klass, subclass, compendiumSubClassFeatures) {\n  let baseClass = await buildBaseClass(klass.flags.ddbimporter.data);\n  let result = await buildSubClassBase(baseClass, subclass);\n  const ignoreIds = klass.flags.ddbimporter.data.classFeatures.map((f) => f.id);\n  result.system.description.value += await buildClassFeatures(subclass, compendiumSubClassFeatures, ignoreIds);\n  result.system.description.value = parseTags(result.system.description.value);\n  result.system.advancement.push(...await generateFeatureAdvancements(subclass, compendiumSubClassFeatures, ignoreIds));\n  return result;\n}\n\nexport async function getSubClasses(data) {\n  logger.debug(\"get subclasses started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  const classCompendium = CompendiumHelper.getCompendiumType(\"class\");\n  const featureCompendium = CompendiumHelper.getCompendiumType(\"features\");\n  const content = await classCompendium.getDocuments();\n  const fields = [\"name\", \"flags.ddbimporter.classId\", \"flags.ddbimporter.class\", \"flags.ddbimporter.featureName\", \"flags.ddbimporter.subClass\", \"flags.ddbimporter.parentClassId\"];\n  const classFeatureIndex = await featureCompendium.getIndex({ fields });\n\n  let subClasses = [];\n  let classFeatures = [];\n  let results = [];\n\n  data.forEach((subClass) => {\n    const classMatch = CONFIG.DDB.classConfigurations.find((k) => k.id === subClass.parentClassId);\n    logger.debug(`${subClass.name} feature parsing started...`);\n    subClass.classFeatures\n      .filter((feature) =>\n        !classFeatureIndex.some((i) => hasProperty(i, \"flags.ddbimporter.classId\")\n        && hasProperty(i, \"flags.ddbimporter.featureName\")\n        && feature.name === i.flags.ddbimporter.featureName\n        && subClass.parentClassId === i.flags.ddbimporter.classId)\n      )\n      .forEach((feature) => {\n        const existingFeature = classFeatures.some((f) => f.name === feature.name);\n        logger.debug(`${feature.name} feature starting...`);\n        if (!NO_TRAITS.includes(feature.name.trim()) && !existingFeature) {\n          const parsedFeature = getClassFeature(feature, subClass, subClass.name);\n          classFeatures.push(parsedFeature);\n          results.push({ class: classMatch.name, subClass: subClass.name, feature: feature.name });\n        }\n      });\n  });\n\n  const fiddledClassFeatures = await srdFiddling(classFeatures, \"features\");\n  DDBMuncher.munchNote(`Importing ${fiddledClassFeatures.length} features!`, true);\n  logger.debug(`Importing ${fiddledClassFeatures.length} features!`, classFeatures);\n  await updateCompendium(\"features\", { features: fiddledClassFeatures }, updateBool);\n\n  const importedIndex = await featureCompendium.getIndex({ fields });\n  const firstPassFeatures = await importedIndex.filter((i) => fiddledClassFeatures.some((orig) => i.name === orig.name));\n  let compendiumClassFeatures = [];\n\n  await Promise.allSettled(firstPassFeatures.map(async (f) => {\n    const feature = await featureCompendium.getDocument(f._id);\n    compendiumClassFeatures.push(feature.toJSON());\n  }));\n\n  logger.debug(\"Features fetched\", compendiumClassFeatures);\n\n  await Promise.all(data.map(async (subClass) => {\n    const classMatch = content.find((i) => i.flags.ddbimporter['id'] == subClass.parentClassId);\n    const builtClass = await buildSubClass(classMatch, subClass, compendiumClassFeatures);\n    subClasses.push(builtClass);\n  }));\n\n  logger.debug(\"Subclass build finished\", subClasses);\n\n  const fiddledClasses = await srdFiddling(subClasses, \"subclasses\");\n  DDBMuncher.munchNote(`Importing ${fiddledClasses.length} subclasses!`, true);\n\n  await updateCompendium(\"subclasses\", { subclasses: fiddledClasses }, updateBool);\n\n  // return fiddledClasses.concat(fiddledClassFeatures);\n  return results;\n}\n","import logger from \"../../logger.js\";\n\nimport { getClassFeature, NO_TRAITS } from \"./shared.js\";\nimport { updateCompendium, srdFiddling } from \"../import.js\";\nimport DDBMuncher from \"../DDBMuncher.js\";\n\nexport async function getClassOptions(data, className) {\n  logger.debug(\"get options started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n  let results = [];\n\n  let classFeatures = [];\n  const classMatch = CONFIG.DDB.classConfigurations.find((k) => k.name === className);\n\n  const klass = {\n    name: className,\n    id: classMatch.id,\n  };\n\n  data.forEach((feature) => {\n    const existingFeature = classFeatures.some((f) => f.name === feature.name);\n    logger.debug(`${feature.name} feature starting...`);\n    if (!NO_TRAITS.includes(feature.name.trim()) && !existingFeature) {\n      const parsedFeature = getClassFeature(feature, klass);\n      classFeatures.push(parsedFeature);\n      results.push({ class: className, subClass: \"\", feature: feature.name });\n    }\n  });\n\n  const fiddledClassFeatures = await srdFiddling(classFeatures, \"features\");\n  DDBMuncher.munchNote(`Importing ${fiddledClassFeatures.length} options!`, true);\n  await updateCompendium(\"features\", { features: fiddledClassFeatures }, updateBool);\n\n  // return fiddledClassFeatures;\n  return results;\n}\n","// Main module class\nimport { getClasses } from \"./classes/classes.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { getSubClasses } from \"./classes/subclasses.js\";\nimport { getClassOptions } from \"./classes/options.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nfunction getSubClassesData(className) {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey, className: className };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/subclass`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `subclass-${className}-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getSubClasses(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nfunction getClassOptionsData(className) {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey, className: className };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/v5/classes/options`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `subclass-${className}-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getClassOptions(data.data, className))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nfunction getClassesData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/classes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `classes-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getClasses(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseClasses() {\n  const classesResults = await getClassesData();\n\n  const subClassResults = await Promise.all([\n    getSubClassesData(\"Cleric\"),\n    getSubClassesData(\"Druid\"),\n    getSubClassesData(\"Sorcerer\"),\n    getSubClassesData(\"Warlock\"),\n    getSubClassesData(\"Wizard\"),\n    getSubClassesData(\"Paladin\"),\n    getSubClassesData(\"Ranger\"),\n    getSubClassesData(\"Bard\"),\n    getSubClassesData(\"Barbarian\"),\n    getSubClassesData(\"Fighter\"),\n    getSubClassesData(\"Artificer\"),\n    getSubClassesData(\"Rogue\"),\n    getSubClassesData(\"Monk\"),\n    getSubClassesData(\"Blood Hunter\"),\n  ]);\n\n  const classOptionsResults = await Promise.all([\n    getClassOptionsData(\"Cleric\"),\n    getClassOptionsData(\"Druid\"),\n    getClassOptionsData(\"Sorcerer\"),\n    getClassOptionsData(\"Warlock\"),\n    getClassOptionsData(\"Wizard\"),\n    getClassOptionsData(\"Paladin\"),\n    getClassOptionsData(\"Ranger\"),\n    getClassOptionsData(\"Bard\"),\n    getClassOptionsData(\"Barbarian\"),\n    getClassOptionsData(\"Fighter\"),\n    getClassOptionsData(\"Rogue\"),\n    getClassOptionsData(\"Monk\"),\n    getClassOptionsData(\"Blood Hunter\"),\n    getClassOptionsData(\"Artificer\"),\n  ]);\n\n  const results = classesResults.concat(subClassResults.flat(), classOptionsResults.flat());\n\n  // FileHelper.download(JSON.stringify(results), `classes-icon.json`, \"application/json\");\n  return results;\n}\n\n\n","// Main module class\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport logger from \"../logger.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nasync function getFrameData() {\n  const cobaltCookie = getCobalt();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const parsingApi = DDBProxy.getProxy();\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  const body = {\n    cobalt: cobaltCookie,\n    betaKey: betaKey,\n  };\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/frames`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data.success) {\n          DDBMuncher.munchNote(`API Failure: ${data.message}`);\n          reject(data.message);\n        }\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `frames-raw.json`, \"application/json\");\n        }\n        return data;\n      })\n      .then((data) => {\n        DDBMuncher.munchNote(`Retrieved ${data.data.length} frames, starting parse...`, true, false);\n        logger.info(`Retrieved ${data.data.length} frames`);\n        resolve(data.data);\n      })\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseFrames() {\n  const frames = await getFrameData();\n  logger.debug(\"Importing frames\", frames);\n\n  DDBMuncher.munchNote(`Fetching DDB Frames`);\n  frames.forEach(async (frame) => {\n    const options = { type: \"frame\", name: `DDB ${frame.name}`, download: true };\n    await FileHelper.getImagePath(frame.frameAvatarUrl, options);\n  });\n\n  DDBMuncher.munchNote(\"\");\n\n  return frames.length;\n}\n","\nexport class PageFinder {\n\n  generateContentLinks() {\n    for (const page of this.journal.pages.filter((p) => p.type === \"text\")) {\n      const dom = new DocumentFragment();\n      $.parseHTML(page.text.content).forEach((element) => {\n        dom.appendChild(element);\n      });\n      const chunkElements = dom.querySelectorAll(\"[data-content-chunk-id]\");\n      const chunkIds = new Set();\n      chunkElements.forEach((chunk) => {\n        chunkIds.add(chunk.dataset[\"contentChunkId\"]);\n      });\n      this.contentChunkIds[page._id] = chunkIds;\n\n      const idElements = dom.querySelectorAll(\"[id]\");\n      const elementIds = new Set();\n      idElements.forEach((chunk) => {\n        elementIds.add(chunk.id);\n      });\n      this.elementIds[page._id] = elementIds;\n    }\n  }\n\n  constructor(journal) {\n    this.journal = journal;\n    this.contentChunkIds = {};\n    this.elementIds = {};\n    this.generateContentLinks();\n  }\n\n\n  // returns page Id if content chunk id known in contents\n  getPageIdForContentChunkId(chunkId) {\n    for (const [key, value] of Object.entries(this.contentChunkIds)) {\n      if (value.has(chunkId)) return key;\n    }\n    return undefined;\n  }\n\n  // returns page Id if element id known in contents\n  getPageIdForElementId(elementId) {\n    for (const [key, value] of Object.entries(this.elementIds)) {\n      if (value.has(elementId)) return key;\n      // if (value.has(elementId.replace(/^0+/, \"\"))) return key;\n    }\n    return undefined;\n  }\n\n}\n","import AdventureMunchHelpers from \"./AdventureMunchHelpers.js\";\nimport logger from \"../../logger.js\";\nimport { generateAdventureConfig } from \"../adventure.js\";\nimport { generateIcon } from \"../../lib/icons.js\";\nimport AdventureMunch from \"./AdventureMunch.js\";\nimport { PageFinder } from \"./PageFinder.js\";\nimport SETTINGS from \"../../settings.js\";\n\nconst MR_PRIMATES_THIRD_PARTY_REPO = \"MrPrimate/ddb-third-party-scenes\";\nconst RAW_BASE_URL = `https://raw.githubusercontent.com/${MR_PRIMATES_THIRD_PARTY_REPO}`;\nconst RAW_MODULES_URL = `${RAW_BASE_URL}/main/modules.json`;\n\nexport default class ThirdPartyMunch extends FormApplication {\n  /** @override */\n  constructor(object = {}, options = {}) {\n    super(object, options);\n    this._itemsToRevisit = [];\n    this._adventure = {};\n    this._scenePackage = {};\n    this._packageName = \"\";\n    this._description = \"\";\n    this._pageFinders = {};\n    this.adventureMunch = new AdventureMunch();\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    this.pattern = /(@[a-z]*)(\\[)([a-z0-9]*|[a-z0-9.]*)(\\])(\\{)(.*?)(\\})/gmi;\n    this.altpattern = /((data-entity)=\\\\?[\"']?([a-zA-Z]*)\\\\?[\"']?|(data-pack)=\\\\?[\"']?([[\\S.]*)\\\\?[\"']?) data-id=\\\\?[\"']?([a-zA-Z0-9]*)\\\\?[\"']?.*?>(.*?)<\\/a>/gmi;\n\n    return mergeObject(super.defaultOptions, {\n      id: \"ddb-adventure-import\",\n      classes: [\"ddb-adventure-import\"],\n      title: \"Third Party Munch\",\n      template: \"modules/ddb-importer/handlebars/adventure/import-third.hbs\",\n      width: 400,\n      height: \"auto\",\n    });\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async getData() {\n    let data;\n    let packages = [];\n\n    try {\n      data = await $.getJSON(RAW_MODULES_URL);\n      this._defaultRepoData = data;\n      for (const [key, value] of Object.entries(data.packages)) {\n        logger.debug(`${key}: ${value}`);\n        packages.push(value);\n      }\n      const partialScenes = game.settings.get(SETTINGS.MODULE_ID, \"third-party-scenes-partial\");\n      packages = packages\n        .filter((p) => p.released || partialScenes)\n        .sort((a, b) => a.name.localeCompare(b.last_nom));\n      logger.debug(\"_defaultRepoData\", this._defaultRepoData);\n    } catch (err) {\n      logger.error(err);\n      logger.warn(`Unable to generate package list.`);\n    }\n\n    return {\n      data,\n      packages,\n      cssClass: \"ddb-importer-third-party-window\"\n    };\n\n  }\n\n  /** @override */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(\".dialog-button\").on(\"click\", this._dialogButton.bind(this));\n    html.find(\"#select-package\").on(\"change\", this._selectPackage.bind(this, null, html));\n  }\n\n  async _selectPackage(event, html) {\n    const packageSelectionElement = html.find(\"#select-package\");\n\n    // get selected campaign from html selection\n    const packageSelection = packageSelectionElement[0].selectedOptions[0]\n      ? packageSelectionElement[0].selectedOptions[0].value\n      : undefined;\n\n    const moduleMessage = html.find(\"#ddb-message\");\n\n    if (packageSelection) {\n      const missingModules = [this._defaultRepoData.packages[packageSelection].module].filter((module) => {\n        return !game.modules.get(module)?.active;\n      });\n\n      this._packageName = packageSelectionElement[0].selectedOptions[0].text;\n      this._description = this._defaultRepoData.packages[packageSelection].description;\n\n\n      let message = \"\";\n      if (missingModules.length > 0) {\n        const missingModulesString = missingModules.join(\", \");\n        message += `<p>You need to install the modules: ${missingModulesString}</p>`;\n      }\n\n      const missingBooks = this._defaultRepoData.packages[packageSelection].books.filter((book) => {\n        const matchingJournals = game.journal.some((j) => j.flags.ddb?.bookCode === book);\n        if (matchingJournals) {\n          logger.info(`Found journals for ${book}`);\n          return false;\n        } else {\n          logger.warn(`Missing journals for ${book}`);\n          return true;\n        }\n      });\n\n      if (missingBooks.length > 0) {\n        const bookString = missingBooks.map((bookCode) => ThirdPartyMunch._getDDBBookName(bookCode)).join(\", \");\n        message += `<p>You need to use Adventure Muncher to load the following books first: ${bookString}</p>`;\n      }\n\n      if (this._description && this.description !== \"\") {\n        message += `<p><b>Details</b>: ${this._description}</p>`;\n      }\n\n      if (message !== \"\") {\n        moduleMessage[0].innerHTML = message;\n        $(\".ddb-message\").removeClass(\"import-hidden\");\n      }\n\n      if (missingBooks.length === 0 && missingModules.length === 0) {\n        $(\".dialog-button\").prop('disabled', false);\n      }\n\n    } else {\n      moduleMessage[0].innerHTML = \"\";\n      $(\".ddb-message\").addClass(\"import-hidden\");\n    }\n    $('#ddb-adventure-import').css(\"height\", \"auto\");\n  }\n\n  async _createFolders(adventure, folders) {\n    if (folders) {\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.folders[\"null\"] = null;\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.lookups = null;\n\n      // the folder list could be out of order, we need to create all folders with parent null first\n      const firstLevelFolders = folders.filter((folder) => folder.parent === null);\n      await this.adventureMunch.importFolder(firstLevelFolders, adventure, folders);\n    }\n  }\n\n  async _checkForMissingData(adventure, folders) {\n    await this._createFolders(adventure, folders);\n\n    if (adventure.required?.spells && adventure.required.spells.length > 0) {\n      logger.debug(`${adventure.name} - spells required`, adventure.required.spells);\n      ThirdPartyMunch._progressNote(`Checking for missing spells from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"spell\", adventure.required.spells);\n    }\n    if (adventure.required?.items && adventure.required.items.length > 0) {\n      logger.debug(`${adventure.name} - items required`, adventure.required.items);\n      ThirdPartyMunch._progressNote(`Checking for missing items from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"item\", adventure.required.items);\n    }\n    if (adventure.required?.monsters && adventure.required.monsters.length > 0) {\n      logger.debug(`${adventure.name} - monsters required`, adventure.required.monsters);\n      ThirdPartyMunch._progressNote(`Checking for missing monsters from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"monster\", adventure.required.monsters);\n    }\n  }\n\n  static _renderCompleteDialog(title, adventure) {\n    new Dialog(\n      {\n        title: title,\n        content: { adventure },\n        buttons: { two: { label: \"OK\" } },\n      },\n      {\n        classes: [\"dialog\", \"adventure-import-export\"],\n        template: \"modules/ddb-importer/handlebars/adventure/import-complete.hbs\",\n      }\n    ).render(true);\n  }\n\n  static async _fixupScenes(scenes) {\n    try {\n      if (scenes.length > 0) {\n        let totalCount = scenes.length;\n        let currentCount = 0;\n\n        await AdventureMunchHelpers.asyncForEach(scenes, async (obj) => {\n          try {\n            let updatedData = {};\n            switch (obj.documentName) {\n              case \"Scene\": {\n                // In 0.8.x the thumbs don't seem to be auto generated anymore\n                // This code would embed the thumbnail.\n                // Remove once/if resolved\n                if (!obj.thumb) {\n                  const thumbData = await obj.createThumbnail();\n                  updatedData[\"thumb\"] = thumbData.thumb;\n                }\n                await obj.update(updatedData);\n                break;\n              }\n              // no default\n            }\n          } catch (err) {\n            logger.warn(`Error updating references for scene ${obj}`, err);\n          }\n          currentCount += 1;\n          ThirdPartyMunch._updateProgress(totalCount, currentCount, \"References\");\n        });\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-undef\n      logger.warn(`Error during reference update for object ${item}`, err);\n    }\n  }\n\n  static async _createFolder(label, type) {\n    const folderData = {\n      \"name\": label,\n      \"type\": type,\n      \"parent\": null,\n      \"sorting\": \"m\",\n    };\n    const newFolder = await Folder.create(folderData);\n    logger.debug(`Created new folder ${newFolder._id} with data:`, folderData, newFolder);\n    return newFolder;\n  }\n\n  static async _findFolder(label, type) {\n    const folder = game.folders.find((f) =>\n      f.type === type\n      && f.parentFolder === undefined\n      && f.name === label\n    );\n\n    return folder ? folder : ThirdPartyMunch._createFolder(label, type);\n  }\n\n  static _getDDBBookName(bookCode) {\n    const selection = CONFIG.DDB.sources.find((source) => bookCode.toLowerCase() === source.name.toLowerCase());\n    return selection.description;\n  }\n\n  static _generateMockAdventure(scene) {\n    const monsters = scene.flags?.ddbimporter?.export?.actors && scene.flags?.ddb?.tokens\n      ? scene.flags.ddb.tokens\n        .filter((token) => token.flags?.ddbActorFlags?.id)\n        .map((token) => token.flags.ddbActorFlags.id)\n      : [];\n    return {\n      id: randomID(),\n      name: ThirdPartyMunch._getDDBBookName(scene.flags.ddb.bookCode),\n      description: \"\",\n      system: \"dnd5e\",\n      modules: [],\n      version: \"2.5\",\n      options: {\n        folders: true\n      },\n      folderColour: \"FF0000\",\n      required: {\n        monsters,\n      }\n    };\n  }\n\n  static _generateActorId(token) {\n    if (!hasProperty(token, \"flags.ddbActorFlags.id\")) logger.warn(\"Token does not link to DDB Actor\", token);\n    const ddbId = token.flags.ddbActorFlags?.id;\n    const folderId = token.flags.actorFolderId;\n    const key = `${ddbId}-${folderId}`;\n    if (CONFIG.DDBI.ADVENTURE.TEMPORARY.mockActors[key]) {\n      return CONFIG.DDBI.ADVENTURE.TEMPORARY.mockActors[key];\n    } else {\n      const existingActor = game.actors.find((actor) => actor.folder?.id == folderId && actor.flags.ddbimporter.id == ddbId);\n      const actorId = existingActor ? existingActor.id : randomID();\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.mockActors[key] = actorId;\n      return actorId;\n    }\n  }\n\n  static async _linkSceneTokens(scene) {\n    logger.info(`Updating ${scene.name}, ${scene.tokens.length} tokens`);\n    const tokens = await Promise.all(scene.tokens.map(async (token) => {\n      if (token.actorId) {\n        const worldActor = game.actors.get(token.actorId);\n        if (worldActor) {\n          // we merge the override data provided by the token to the actor to get\n          // world specific things like img paths and scales etc\n          const sceneToken = scene.flags.ddb.tokens.find((t) => t._id === token._id);\n          delete sceneToken.scale;\n          const tokenData = await worldActor.getTokenDocument();\n          delete tokenData.y;\n          delete tokenData.x;\n          const jsonTokenData = duplicate(tokenData);\n          const newToken = mergeObject(jsonTokenData, sceneToken);\n          logger.debug(`${token.name} token data for id ${token.actorId}`, newToken);\n          return newToken;\n        }\n      }\n      return token;\n    }));\n    return tokens;\n  }\n\n  async _linkSceneNotes(scene, adventure) {\n    const journalNotes = game.journal.filter((journal) => journal?.flags?.ddb?.bookCode === scene.flags.ddb.bookCode);\n    this.adventureMunch.adventure = deepClone(adventure);\n\n    const noJournalPinNotes = game.settings.get(SETTINGS.MODULE_ID, \"third-party-scenes-notes-merged\");\n\n    const notes = await Promise.all([scene]\n      .filter((scene) => scene.flags?.ddb?.notes)\n      .map((scene) => scene.flags.ddb.notes)\n      .flat()\n      .map(async (note) => {\n        const noteJournal = noJournalPinNotes\n          ? journalNotes.find((journal) => journal.flags.ddb.cobaltId == note.flags.ddb.parentId)\n          : journalNotes.find((journal) => {\n            const contentChunkIdMatch = note.flags.ddb.contentChunkId\n              ? journal.flags.ddb && note.flags.ddb\n                && journal.flags.ddb.contentChunkId == note.flags.ddb.contentChunkId\n              : false;\n\n            const noContentChunk = !note.flags.ddb.contentChunkId\n              && note.flags.ddb.originalLink && note.flags.ddb.ddbId && note.flags.ddb.parentId\n              && note.flags.ddb.slug && note.flags.ddb.linkName;\n            const originMatch = noContentChunk\n              ? journal.flags.ddb.slug == note.flags.ddb.slug\n                && journal.flags.ddb.ddbId == note.flags.ddbId\n                && journal.flags.ddb.parentId == note.flags.ddb.parentId\n                && journal.flags.ddb.cobaltId == note.flags.ddb.cobaltId\n                && journal.flags.ddb.originalLink == note.flags.ddb.originalLink\n                && journal.flags.ddb.linkName == note.flags.ddb.linkName\n              : false;\n            const journalNameMatch = !contentChunkIdMatch && !originMatch\n              ? journal.name.trim() == note.label.trim() // ||\n              //  journal.pages.some((page) => page.name.trim() === note.label.trim())\n              : false;\n            return contentChunkIdMatch || originMatch || journalNameMatch;\n\n          });\n\n        if (noteJournal) {\n          logger.info(`Found note \"${note.label}\" matched to Journal with ID \"${noteJournal.id}\" (${noteJournal.name})`);\n          note.flags.ddb.journalId = noteJournal.id;\n          // eslint-disable-next-line require-atomic-updates\n          note.icon = await generateIcon(this.adventureMunch, note.label);\n          if (noJournalPinNotes) {\n            note.flags.ddb.labelName = `${note.label}`;\n            note.flags.ddb.slugLink = note.label.replace(/[^\\w\\d]+/g, \"\").replace(/^([a-zA-Z]?)0+/, \"$1\");\n            note.flags.anchor = {\n              slug: note.flags.ddb.slugLink\n            };\n            note.text = note.label;\n\n            if (!this._pageFinders[noteJournal._id]) {\n              this._pageFinders[noteJournal._id] = new PageFinder(noteJournal);\n            }\n            const contentChunkIdPageId = hasProperty(note, \"flags.ddb.contentChunkId\")\n              ? this._pageFinders[noteJournal._id].getPageIdForContentChunkId(note.flags.ddb.contentChunkId)\n              : undefined;\n            const slugLinkPageId = hasProperty(note, \"flags.ddb.slugLink\")\n              ? this._pageFinders[noteJournal._id].getPageIdForElementId(note.flags.ddb.slugLink)\n              : undefined;\n\n            // console.warn(\"MATCHES\", { slugLinkPageId, contentChunkIdPageId, noteFlags: note.flags.ddb });\n            // console.warn(\"PageIds\", noteJournal.pages.map((p) => {return {id: p._id, flags: p.flags.ddb}}));\n            const journalPage = noteJournal.pages.find((page) =>\n              page.flags.ddb.parentId == note.flags.ddb.parentId\n              && (page.flags.ddb.slug == note.flags.ddb.slug\n              || page.flags.ddb.slug.replace(/^([a-zA-Z]?)0+/, \"$1\") == note.flags.ddb.slug\n              || page.flags.ddb.slug.startsWith(note.flags.ddb.slug)\n              || note.flags.ddb.slug.startsWith(page.flags.ddb.slug))\n              && (page._id === contentChunkIdPageId || page._id === slugLinkPageId)\n            );\n\n            if (journalPage) {\n              note.pageId = journalPage._id;\n            }\n          }\n        }\n        return note;\n      }));\n\n    const positionedNotes = [];\n    notes.forEach((note) => {\n      if (note.flags?.ddb?.journalId) {\n        note.positions.forEach((position) => {\n          logger.info(`Matching ${note.label} to position ${position.x}/${position.y}`);\n          const noteId = randomID();\n          const n = {\n            \"_id\": noteId,\n            \"flags\": {\n              \"ddb\": note.flags.ddb,\n              \"importid\": noteId,\n              \"anchor\": note.flags.anchor ?? {},\n            },\n            \"entryId\": note.flags.ddb.journalId,\n            \"x\": position.x,\n            \"y\": position.y,\n            \"icon\": note.icon, // \"assets/icons/1.svg\",\n            \"iconSize\": note.iconSize ? note.iconSize : 40,\n            \"iconTint\": \"\",\n            \"text\": note.text ? note.text : \"\",\n            \"fontFamily\": note.fontFamily ? note.fontFamily : \"Signika\",\n            \"fontSize\": note.fontSize ? note.fontSize : 48,\n            \"textAnchor\": 1,\n            \"textColor\": note.textColor ? note.textColor : \"\",\n            \"pageId\": note.pageId ? note.pageId : undefined,\n          };\n          positionedNotes.push(n);\n        });\n      }\n    });\n\n    return positionedNotes;\n  }\n\n  async _getAdjustedScenes() {\n    const adjustedScenes = this._scenePackage.scenes\n      .filter((scene) => scene.flags?.ddbimporter?.export?.actors && scene.flags?.ddb?.tokens);\n\n    await AdventureMunchHelpers.asyncForEach(adjustedScenes, async(scene) => {\n      logger.debug(`Adjusting scene ${scene.name}`);\n      const mockAdventure = ThirdPartyMunch._generateMockAdventure(scene);\n      if (scene.flags?.ddbimporter?.export?.actors && scene.flags?.ddb?.tokens) {\n        await this._checkForMissingData(mockAdventure, []);\n        const bookName = ThirdPartyMunch._getDDBBookName(scene.flags.ddb.bookCode);\n        const actorFolder = await ThirdPartyMunch._findFolder(bookName, \"Actor\");\n        scene.tokens = scene.flags.ddb.tokens.map((token) => {\n          token.flags.actorFolderId = actorFolder.id;\n          token.actorId = ThirdPartyMunch._generateActorId(token);\n          return token;\n        });\n\n      }\n      // eslint-disable-next-line require-atomic-updates\n      scene.notes = await this._linkSceneNotes(scene, mockAdventure);\n      logger.debug(`Finished scene adjustment for ${scene.name}`);\n    });\n\n    return adjustedScenes;\n  }\n\n  async _updateScenes(scenes) {\n    logger.debug(\"Processing scenes!\", scenes);\n    const filteredScenes = scenes\n      .filter((scene) => scene.flags?.ddbimporter?.export?.compendium)\n      // does the scene match a compendium scene\n      .filter(async (scene) => {\n        const compendium = game.packs.get(scene.flags.ddbimporter.export.compendium);\n        const compendiumScene = compendium.index.find((s) => s.name === scene.name);\n        if (compendiumScene) return true;\n        else return false;\n      });\n\n    const processedScenes = [];\n\n    await AdventureMunchHelpers.asyncForEach(filteredScenes, async(scene) => {\n      logger.debug(`Processing scene ${scene.name} with DDB Updates`);\n      const compendiumId = scene.flags.ddbimporter.export.compendium;\n      const compendium = game.packs.get(compendiumId);\n      const folderName = this._scenePackage.folder ? this._scenePackage.folder : compendium.metadata.label;\n      const folder = await ThirdPartyMunch._findFolder(folderName, \"Scene\");\n      const compendiumScene = compendium.index.find((s) => s.name === scene.name);\n\n      const existingScene = game.scenes.find((s) =>\n        s.name === scene.name\n        && (s.folder?.id === folder.id || s.folder?.ancestors?.some((f) => f.id === folder.id))\n      );\n\n      logger.debug(\"Third Party Scene Processing\", {\n        existingScene,\n        scene,\n        folder,\n        folderName,\n        compendiumScene\n      });\n\n      // if scene already exists, update\n      if (existingScene) {\n        logger.info(`Updating ${scene.name}`);\n        logger.debug(`${scene.name}update data`, { scene, existingScene });\n        await existingScene.update(scene);\n        processedScenes.push(existingScene);\n      } else {\n        scene.folder = folder.id;\n        const worldScene = await game.scenes.importFromCompendium(compendium, compendiumScene._id, scene, { keepId: true });\n        logger.info(`Scene: ${scene.name} folder:`, folder);\n        logger.debug(\"worldScene:\", worldScene);\n        processedScenes.push(worldScene);\n      }\n      logger.debug(`Finished scene DDB update ${scene.name}`);\n    });\n    return processedScenes;\n  }\n\n  async _dialogButton(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const a = event.currentTarget;\n    const action = a.dataset.button;\n    const packageName = this._packageName;\n\n    if (action === \"import\") {\n      $(\".import-progress\").toggleClass(\"import-hidden\");\n      $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n      const selectedPackage = $(\"#select-package\").val();\n      const packageURL = `${RAW_BASE_URL}/main/${selectedPackage}/module.json`;\n\n      this._scenePackage = await fetch(packageURL)\n        .then((response) => {\n          if (response.status === 200 || response.status === 0) {\n            return Promise.resolve(response.json());\n          } else {\n            return Promise.reject(new Error(response.statusText));\n          }\n        });\n\n      // check for valid json object?\n\n      logger.debug(\"_scenePackage\", this._scenePackage);\n\n      CONFIG.DDBI.ADVENTURE.TEMPORARY = {\n        folders: {},\n        import: {},\n        actors: {},\n        sceneTokens: {},\n        mockActors: {},\n      };\n\n      this.folderNames = this._scenePackage.folder\n        ? [this._scenePackage.folder]\n        : [...new Set(this._scenePackage.scenes\n          .filter((scene) => scene.flags?.ddbimporter?.export?.compendium)\n          .map((scene) => {\n            const compendiumId = scene.flags.ddbimporter.export.compendium;\n            const compendium = game.packs.get(compendiumId);\n            return compendium.metadata.label;\n          }))];\n\n      // We need to check for potential Scene Folders and Create if missing\n      const compendiumLabels = this.folderNames\n        .map((label) => {\n          return ThirdPartyMunch._findFolder(label, \"Scene\");\n        });\n\n      await Promise.all(compendiumLabels);\n\n      const adventureLabels = [...new Set(this._scenePackage.scenes\n        .filter((scene) => scene.flags?.ddb?.bookCode)\n        .map((scene) => {\n          return ThirdPartyMunch._getDDBBookName(scene.flags.ddb.bookCode);\n        }))]\n        .map((label) => {\n          return ThirdPartyMunch._findFolder(label, \"Actor\");\n        });\n      await Promise.all(adventureLabels);\n\n      logger.debug(\"Competed folder creation\");\n\n      // import any missing monsters into the compendium\n      // add tokens to scene\n      // add notes to scene\n      const adjustedScenes = await this._getAdjustedScenes(this._scenePackage.scenes);\n\n      logger.debug(\"adjustedScenes\", duplicate(adjustedScenes));\n\n      logger.debug(\"About to generate Token Actors\");\n      // load token actors into world\n      await AdventureMunchHelpers.asyncForEach(adjustedScenes, async(scene) => {\n        logger.debug(`Generating scene actors for ${scene.name}`);\n        await this.adventureMunch.generateTokenActors(scene);\n        logger.debug(`Finished scene actors for ${scene.name}`);\n      });\n\n      // link tokens on scene to imported actors\n      const tokenAdjustedScenes = await Promise.all(adjustedScenes\n        .map(async (scene) => {\n          logger.debug(`Updating scene tokens for ${scene.name}`);\n          const newScene = duplicate(scene);\n          newScene.tokens = await ThirdPartyMunch._linkSceneTokens(scene);\n          return newScene;\n        })\n      );\n\n      logger.debug(\"tokenAdjustedScenes\", tokenAdjustedScenes);\n\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.lookups = await generateAdventureConfig(true);\n      logger.debug(\"Lookups loaded\", CONFIG.DDBI.ADVENTURE.TEMPORARY.lookups.lookups);\n\n      const scenes = await this._updateScenes(tokenAdjustedScenes);\n      // logger.debug(\"finalScenes\", scenes);\n\n      const toTimer = setTimeout(() => {\n        logger.warn(`Reference update timed out.`);\n        ThirdPartyMunch._renderCompleteDialog(`Un-Successful Import of ${packageName}`, { name: packageName });\n        this.close();\n      }, 120000);\n\n      // clearup remaining scene things\n      await ThirdPartyMunch._fixupScenes(scenes);\n      clearTimeout(toTimer);\n\n      $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n\n      ThirdPartyMunch._renderCompleteDialog(`Successful Import of ${packageName}`, { name: packageName });\n\n      // eslint-disable-next-line require-atomic-updates\n      CONFIG.DDBI.ADVENTURE.TEMPORARY = {};\n      this.close();\n    }\n  }\n\n  static _updateProgress(total, count, type) {\n    const localizedType = `ddb-importer.label.${type}`;\n    $(\".import-progress-bar\")\n      .width(`${Math.trunc((count / total) * 100)}%`)\n      .html(`<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${game.i18n.localize(localizedType)})...</span>`);\n  }\n\n  static _progressNote(note) {\n    $(\".import-progress-bar\")\n      .html(`<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${note})...</span>`);\n  }\n}\n","import logger from \"../../logger.js\";\nimport { generateBackground } from \"../../parser/character/bio.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { updateCompendium, srdFiddling, daeFiddling } from \"../import.js\";\nimport DDBMuncher from \"../DDBMuncher.js\";\nimport { generateTable } from \"../table.js\";\n\nconst BACKGROUND_TEMPLATE = {\n  \"name\": \"\",\n  \"type\": \"background\",\n  \"system\": {\n    \"description\": {\n      \"value\": \"\",\n      \"chat\": \"\",\n      \"unidentified\": \"\"\n    },\n    \"type\": {\n      \"value\": \"background\",\n    },\n    \"source\": \"\",\n  },\n  \"sort\": 2600000,\n  \"flags\": {\n    \"ddbimporter\": {},\n    \"obsidian\": {\n      \"source\": {\n        \"type\": \"background\"\n      }\n    },\n  },\n  \"img\": \"icons/skills/trades/academics-book-study-purple.webp\",\n};\n\nfunction buildBase(data) {\n  let result = duplicate(BACKGROUND_TEMPLATE);\n  const bgData = generateBackground(data);\n  result.name = data.name;\n  result.system.description.value += `${bgData.description}\\n\\n`;\n\n  result.flags.ddbimporter = {\n    featId: data.id,\n    version: CONFIG.DDBI.version,\n  };\n\n  result.system.source = DDBHelper.parseSource(data);\n  result.system.description.value = parseTags(result.system.description.value);\n  result.system.description.value = generateTable(result.name, result.system.description.value, true, \"background\");\n\n  return result;\n}\n\n\nfunction buildBackground(background) {\n  let result = buildBase(background);\n\n  return result;\n}\n\n\nexport async function getBackgrounds(data) {\n  logger.debug(\"get backgrounds started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let backgrounds = [];\n\n  // console.warn(data);\n\n  data.forEach((background) => {\n    logger.debug(`${background.name} background parsing started...`);\n    const parsedBackground = buildBackground(background);\n    backgrounds.push(parsedBackground);\n  });\n\n  // console.warn(\"backgrounds\", backgrounds);\n\n  const fiddledBackgrounds = await srdFiddling(backgrounds, \"backgrounds\");\n  const finalBackgrounds = await daeFiddling(fiddledBackgrounds);\n\n  DDBMuncher.munchNote(`Importing ${finalBackgrounds.length} backgrounds!`, true);\n  await updateCompendium(\"backgrounds\", { backgrounds: finalBackgrounds }, updateBool);\n\n  return finalBackgrounds;\n}\n","// Main module class\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { getBackgrounds } from \"./backgrounds/backgrounds.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nfunction getBackgroundData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/backgrounds`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `backgrounds-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getBackgrounds(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseBackgrounds() {\n  const results = await getBackgroundData();\n\n  return results;\n}\n","// Main module class\nimport logger from \"../logger.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { parseItems } from \"./items.js\";\nimport { parseSpells } from \"./spells.js\";\nimport { parseRaces } from \"./races.js\";\nimport { parseFeats } from \"./feats.js\";\nimport { parseClasses } from \"./classes.js\";\nimport { parseFrames } from \"./frames.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { base64Check } from \"../lib/base64Check.js\";\nimport { downloadAdventureConfig } from \"./adventure.js\";\nimport AdventureMunch from \"./adventure/AdventureMunch.js\";\nimport ThirdPartyMunch from \"./adventure/ThirdPartyMunch.js\";\nimport MuncherSettings from \"./MuncherSettings.js\";\nimport { migrateExistingCompendium } from \"./compendiumFolders.js\";\nimport { createGMMacros } from \"../effects/macros.js\";\nimport { importCacheLoad } from \"../lib/DDBTemplateStrings.js\";\nimport { updateWorldMonsters, resetCompendiumActorImages } from \"./tools.js\";\nimport { parseBackgrounds } from \"./backgrounds.js\";\nimport { parseTransports } from \"./vehicles.js\";\nimport DDBSources from \"../lib/DDBSources.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBMonsterFactory from \"./DDBMonsterFactory.js\";\n\nexport default class DDBMuncher extends Application {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-monsters\";\n    options.template = \"modules/ddb-importer/handlebars/munch.hbs\";\n    options.resizable = false;\n    options.height = \"auto\";\n    options.width = 800;\n    options.title = \"MrPrimate's Muncher\";\n    options.classes = [\"ddb-muncher\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"div\", initial: \"settings\" }];\n    return options;\n  }\n\n  /**\n   * Display information when Munching\n   * @param {*} note\n   * @param {*} nameField\n   * @param {*} monsterNote\n   */\n  static munchNote(note, nameField = false, monsterNote = false) {\n    if (nameField) {\n      $(\"#munching-task-name\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else if (monsterNote) {\n      $(\"#munching-task-monster\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else {\n      $(\"#munching-task-notes\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    }\n  }\n\n  static munchMonsters() {\n    DDBMuncher.munchNote(`Downloading monsters...`, true);\n    $('button[id^=\"munch-\"]').prop('disabled', true);\n    $('button[id^=\"adventure-config-start\"]').prop('disabled', true);\n    DDBMuncher.parseCritters();\n  }\n\n  static munchVehicles() {\n    DDBMuncher.munchNote(`Downloading vehicles...`, true);\n    $('button[id^=\"munch-\"]').prop('disabled', true);\n    $('button[id^=\"adventure-config-start\"]').prop('disabled', true);\n    DDBMuncher.parseTransports();\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\"#munch-monsters-start\").click(async () => {\n      DDBMuncher.munchMonsters();\n    });\n    html.find(\"#munch-vehicles-start\").click(async () => {\n      DDBMuncher.munchVehicles();\n    });\n    html.find(\"#munch-source-select\").click(async () => {\n      new DDBSources().render(true);\n    });\n\n    html.find(\"#munch-spells-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading spells...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseSpells();\n    });\n    html.find(\"#munch-items-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading items...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseItems();\n    });\n    html.find(\"#munch-races-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading races...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseRaces();\n    });\n    html.find(\"#munch-feats-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading feats...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseFeats();\n    });\n    html.find(\"#munch-backgrounds-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading backgrounds...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseBackgrounds();\n    });\n    html.find(\"#munch-classes-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading classes...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseClasses();\n    });\n    html.find(\"#munch-frames-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading frames...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseFrames();\n    });\n    html.find(\"#munch-adventure-config-start\").click(async () => {\n      DDBMuncher.munchNote(`Generating config file...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.generateAdventureConfig();\n    });\n    html.find(\"#munch-adventure-import-start\").click(async () => {\n      new AdventureMunch().render(true);\n    });\n    html.find(\"#munch-adventure-third-party-start\").click(async () => {\n      new ThirdPartyMunch().render(true);\n    });\n    html.find(\"#munch-migrate-compendium-monster\").click(async () => {\n      DDBMuncher.munchNote(`Migrating monster compendium...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.migrateCompendiumFolders(\"monsters\");\n    });\n    html.find(\"#munch-migrate-compendium-spell\").click(async () => {\n      DDBMuncher.munchNote(`Migrating spell compendium...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.migrateCompendiumFolders(\"spells\");\n    });\n    html.find(\"#munch-migrate-compendium-item\").click(async () => {\n      DDBMuncher.munchNote(`Migrating item compendium...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.migrateCompendiumFolders(\"items\");\n    });\n    html.find(\"#munch-fix-base64\").click(async () => {\n      DDBMuncher.munchNote(`Checking Scenes for base64 data...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.base64Check();\n    });\n    html.find(\"#munch-world-monster-update\").click(async () => {\n      DDBMuncher.munchNote(`Updating world actors...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.updateWorldMonsters();\n    });\n    html.find(\"#munch-reset-images\").click(async () => {\n      DDBMuncher.munchNote(`Resetting images...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.resetCompendiumActorImages();\n    });\n\n    // watch the change of the import-policy-selector checkboxes\n    $(html)\n      .find(\n        [\n          '.munching-generic-config input[type=\"checkbox\"]',\n          '.munching-spell-config input[type=\"checkbox\"]',\n          '.munching-item-config input[type=\"checkbox\"]',\n          '.munching-monster-config input[type=\"checkbox\"]',\n          '.munching-monster-world-update-config input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        MuncherSettings.updateMuncherSettings(html, event, this);\n      });\n\n\n    html.find(\"#monster-munch-filter\").on(\"keyup\", (event) => {\n      event.preventDefault();\n      if (event.key !== \"Enter\") return; // Use `.key` instead.\n      DDBMuncher.munchMonsters();\n    });\n\n    // compendium style migrations\n    html.find(\"#compendium-folder-style-monster\").on(\"change\", async () => {\n      const style = html.find(\"#compendium-folder-style-monster\");\n      const importStyle = style[0].selectedOptions[0] ? style[0].selectedOptions[0].value : \"TYPE\";\n      game.settings.set(\"ddb-importer\", \"munching-selection-compendium-folders-monster\", importStyle);\n    });\n    html.find(\"#compendium-folder-style-spell\").on(\"change\", async () => {\n      const style = html.find(\"#compendium-folder-style-spell\");\n      const importStyle = style[0].selectedOptions[0] ? style[0].selectedOptions[0].value : \"SCHOOL\";\n      game.settings.set(\"ddb-importer\", \"munching-selection-compendium-folders-spell\", importStyle);\n    });\n    html.find(\"#compendium-folder-style-item\").on(\"change\", async () => {\n      const style = html.find(\"#compendium-folder-style-item\");\n      const importStyle = style[0].selectedOptions[0] ? style[0].selectedOptions[0].value : \"TYPE\";\n      game.settings.set(\"ddb-importer\", \"munching-selection-compendium-folders-item\", importStyle);\n    });\n\n    this.close();\n  }\n\n  static enableButtons() {\n    const cobalt = getCobalt() != \"\";\n    const tier = game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n    const tiers = PatreonHelper.getPatreonTiers(tier);\n\n    if (cobalt) {\n      $('button[id^=\"munch-spells-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-items-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-adventure-config-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-adventure-import-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-adventure-third-party-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-migrate-compendium-monster\"]').prop('disabled', false);\n      $('button[id^=\"munch-migrate-compendium-spell\"]').prop('disabled', false);\n      $('button[id^=\"munch-migrate-compendium-item\"]').prop('disabled', false);\n      $('button[id^=\"munch-fix-base64\"]').prop('disabled', false);\n      $('button[id^=\"munch-reset-images\"]').prop('disabled', false);\n\n      if (tiers.all) {\n        $('button[id^=\"munch-monsters-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-source-select\"]').prop('disabled', false);\n      }\n      if (tiers.supporter) {\n        $('button[id^=\"munch-races-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-feats-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-frames-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-classes-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-backgrounds-start\"]').prop('disabled', false);\n      }\n      if (tiers.experimentalMid) {\n        $('button[id^=\"munch-vehicles-start\"]').prop('disabled', false);\n      }\n    }\n  }\n\n  static async parseCritters() {\n    try {\n      logger.info(\"Munching monsters!\");\n      const monsterFactory = new DDBMonsterFactory({ munchNote: DDBMuncher.munchNote });\n      const result = await monsterFactory.processIntoCompendium();\n      DDBMuncher.munchNote(`Finished importing ${result} monsters!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseTransports() {\n    try {\n      logger.info(\"Munching vehicles!\");\n      const result = await parseTransports();\n      DDBMuncher.munchNote(`Finished importing ${result} vehicles!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseSpells() {\n    try {\n      logger.info(\"Munching spells!\");\n      if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-spell-effects\")) await createGMMacros(\"spells\");\n      await parseSpells();\n      DDBMuncher.munchNote(`Finished importing spells!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseItems() {\n    try {\n      logger.info(\"Munching items!\");\n      await parseItems();\n      DDBMuncher.munchNote(`Finished importing items!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseRaces() {\n    try {\n      logger.info(\"Munching races!\");\n      const result = await parseRaces();\n      DDBMuncher.munchNote(`Finished importing ${result.length} races and features!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseFeats() {\n    try {\n      logger.info(\"Munching feats!\");\n      const result = await parseFeats();\n      DDBMuncher.munchNote(`Finished importing ${result.length} feats!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseBackgrounds() {\n    try {\n      logger.info(\"Munching backgrounds!\");\n      const result = await parseBackgrounds();\n      DDBMuncher.munchNote(`Finished importing ${result.length} backgrounds!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseClasses() {\n    try {\n      logger.info(\"Munching classes!\");\n      const result = await parseClasses();\n      DDBMuncher.munchNote(`Finished importing ${result.length} classes and features!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseFrames() {\n    try {\n      logger.info(\"Munching frames!\");\n      const result = await parseFrames();\n      DDBMuncher.munchNote(`Finished importing ${result.length} frames!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async generateAdventureConfig() {\n    try {\n      logger.info(\"Generating adventure config!\");\n      await downloadAdventureConfig();\n      DDBMuncher.munchNote(`Downloading config file`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async updateWorldMonsters() {\n    try {\n      logger.info(\"Updating world monsters!\");\n      await updateWorldMonsters();\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async migrateCompendiumFolders(type) {\n    logger.info(`Migrating ${type} compendium`);\n    await migrateExistingCompendium(type);\n    DDBMuncher.munchNote(`Migrating complete.`, true);\n    DDBMuncher.enableButtons();\n  }\n\n  static async base64Check() {\n    logger.info(\"Checking base64 in scenes\");\n    const results = base64Check();\n    let notifyString = `Check complete.`;\n    if (results.fixedScenes.length === 0 && results.badScenes.length === 0) {\n      notifyString += \" No problems found.\";\n    } else {\n      if (results.fixedScenes.length > 0) notifyString += ` Fixing ${results.fixedScenes.length} scenes (wait untill uploads complete).`;\n      if (results.badScenes.length > 0) notifyString += ` Found ${results.badScenes.length} scenes that I couldn't fix.`;\n    }\n    DDBMuncher.munchNote(notifyString, true);\n    DDBMuncher.enableButtons();\n  }\n\n  static async resetCompendiumActorImages() {\n    logger.info(\"Resetting compendium actor images\");\n    const results = await resetCompendiumActorImages();\n    const notifyString = `Reset ${results.length} compendium actors.`;\n    DDBMuncher.munchNote(notifyString, true);\n    DDBMuncher.enableButtons();\n  }\n\n  async getData() { // eslint-disable-line class-methods-use-this\n    const resultData = MuncherSettings.getMuncherSettings();\n    await importCacheLoad();\n    return resultData;\n  }\n}\n","// import logger from \"../logger.js\";\nimport logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBSources from \"../lib/DDBSources.js\";\nimport { spellEffectModules } from \"../effects/specialSpells.js\";\nimport SETTINGS from \"../settings.js\";\n\nconst MuncherSettings = {\n\n  setRecommendedCharacterActiveEffectSettings: (html) => {\n    $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", !spellEffectModules().hasCore);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", !spellEffectModules().hasCore);\n    $(html).find(\"#character-import-policy-add-spell-effects\").prop(\"checked\", spellEffectModules().hasCore);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\", spellEffectModules().hasCore);\n    $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", false);\n    $(html).find(\"#character-import-policy-add-item-effects\").prop(\"checked\", true);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-item-effects\", true);\n    $(html).find(\"#character-import-policy-add-character-effects\").prop(\"checked\", true);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-character-effects\", true);\n    $(html).find(\"#character-import-policy-generate-ac-feature-effects\").prop(\"checked\", true);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-generate-ac-feature-effects\", true);\n    $(html).find(\"#character-import-policy-active-effect-copy\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-active-effect-copy\", false);\n\n    [\"class\", \"race\", \"background\", \"feat\"].forEach((type) => {\n      $(html).find(`#character-import-policy-effect-${type}-spell-bonus`).prop(\"checked\", true);\n      game.settings.set(SETTINGS.MODULE_ID, `character-update-policy-effect-${type}-spell-bonus`, true);\n      $(html).find(`#character-import-policy-effect-${type}-speed`).prop(\"checked\", false);\n      game.settings.set(SETTINGS.MODULE_ID, `character-update-policy-effect-${type}-speed`, false);\n      $(html).find(`#character-import-policy-effect-${type}-senses`).prop(\"checked\", false);\n      game.settings.set(SETTINGS.MODULE_ID, `character-update-policy-effect-${type}-senses`, false);\n      $(html).find(`#character-import-policy-effect-${type}-hp`).prop(\"checked\", false);\n      game.settings.set(SETTINGS.MODULE_ID, `character-update-policy-effect-${type}-hp`, false);\n      $(html).find(`#character-import-policy-effect-${type}-damages`).prop(\"checked\", false);\n      game.settings.set(SETTINGS.MODULE_ID, `character-update-policy-effect-${type}-damages`, false);\n    });\n  },\n\n  getInstalledIcon: (name) => {\n    return spellEffectModules()[name] ? \"<i class='fas fa-check-circle' style='color: green'></i>\" : \"<i class='fas fa-times-circle' style='color: red'></i> \";\n  },\n\n  getCharacterImportSettings: () => {\n    const importPolicies1 = [\n      {\n        name: \"name\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-name\"),\n        description: \"Name\",\n      },\n      {\n        name: \"hp\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-hp\"),\n        description: \"HP\",\n      },\n      {\n        name: \"hit-die\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-hit-die\"),\n        description: \"Hit Die\",\n      },\n      {\n        name: \"image\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-image\"),\n        description: \"Image\",\n      },\n      {\n        name: \"bio\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-bio\"),\n        description: \"Bio\",\n      },\n      {\n        name: \"languages\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-languages\"),\n        description: \"Languages\",\n      },\n      {\n        name: \"spell-use\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-spell-use\"),\n        description: \"Spell Slots\",\n      }\n    ];\n    const importPolicies2 = [\n      {\n        name: \"class\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-class\"),\n        description: \"Classes\",\n      },\n      {\n        name: \"feat\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-feat\"),\n        description: \"Features\",\n      },\n      {\n        name: \"weapon\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-weapon\"),\n        description: \"Weapons\",\n      },\n      {\n        name: \"equipment\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-equipment\"),\n        description: \"Other Equipment\",\n      },\n      {\n        name: \"currency\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-currency\"),\n        description: \"Currency\",\n      },\n      {\n        name: \"spell\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-spell\"),\n        description: \"Spells\",\n      },\n    ];\n\n    const spellEffectModulesAvailable = spellEffectModules();\n    const generateSpellEffects = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\");\n    if (generateSpellEffects && !spellEffectModulesAvailable.hasCore) {\n      game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\", false);\n    }\n    const daeInstalled = spellEffectModulesAvailable.daeInstalled;\n    // disable srd/midi srd copy as v10 does not work\n    // const daeSRDInstalled = game.modules.get(\"Dynamic-Effects-SRD\")?.active;\n    // const midiSRDInstalled = game.modules.get(\"midi-srd\")?.active;\n    // const daeSRDContentAvailable = (daeSRDInstalled || midiSRDInstalled);\n    const featureEffectText = `Generate effects for a character. Some effects are always generated, some are optional (see below). These require DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")}. For best results Midi-QOL${MuncherSettings.getInstalledIcon(\"midiQolInstalled\")}, Advanced Macros${MuncherSettings.getInstalledIcon(\"advancedMacrosInstalled\")}, Item Macro${MuncherSettings.getInstalledIcon(\"itemMacroInstalled\")}, Times Up${MuncherSettings.getInstalledIcon(\"timesUp\")}, and Convenient Effects${MuncherSettings.getInstalledIcon(\"convenientEffectsInstalled\")} are strongly recommended.`;\n    const spellEffectText = `Generate effects for spells. These require DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")}, Midi-QOL${MuncherSettings.getInstalledIcon(\"midiQolInstalled\")}, Advanced Macros${MuncherSettings.getInstalledIcon(\"advancedMacrosInstalled\")}, Item Macro${MuncherSettings.getInstalledIcon(\"itemMacroInstalled\")}, Times Up${MuncherSettings.getInstalledIcon(\"timesUp\")}, and Convenient Effects${MuncherSettings.getInstalledIcon(\"convenientEffectsInstalled\")} as a minimum. Also recommened is Active Auras${MuncherSettings.getInstalledIcon(\"activeAurasInstalled\")}, Active Token Effects${MuncherSettings.getInstalledIcon(\"atlInstalled\")}, Token Magic FX${MuncherSettings.getInstalledIcon(\"tokenMagicInstalled\")}, and Automated Animations${MuncherSettings.getInstalledIcon(\"autoAnimationsInstalled\")}`;\n\n    // const importExtras = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-import-extras\");\n\n    const importConfig = [\n      {\n        name: \"use-inbuilt-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-inbuilt-icons\"),\n        description: \"Use icons from the inbuilt dictionary. (High coverage of items, feats, and spells).\",\n        enabled: true,\n      },\n      {\n        name: \"use-srd-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-srd-icons\"),\n        description: \"Use icons from the SRD compendium. (This can take a while).\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-spell-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-spell-icons\"),\n        description: \"Use spell school icons from D&DBeyond.\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-item-icons\"),\n        description: \"Use equipment icons from D&DBeyond (where they exist).\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-generic-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-generic-item-icons\"),\n        description: \"Use D&D Beyond generic item type images, if available (final fallback)\",\n        enabled: true,\n      },\n      {\n        name: \"use-full-description\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-full-description\"),\n        description: \"For actions use full description and snippets, else use snippets only.\",\n        enabled: true,\n      },\n      {\n        name: \"use-actions-as-features\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-actions-as-features\"),\n        description:\n          \"Import D&D Beyond Actions as Features, not weapons.\",\n        enabled: true,\n      },\n      {\n        name: \"use-action-and-feature\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-action-and-feature\"),\n        description:\n          \"[CAUTION] If a feature is marked as an action, import both the action and the feature. This might lead to some weird behaviour.\",\n        enabled: true,\n      },\n      {\n        name: \"ignore-non-ddb-items\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-ignore-non-ddb-items\"),\n        description:\n          \"Ignore items on character sheet that have not been imported from D&D Beyond. This will remove items that have been removed from the DDB character since the last import, but will keep items added to the character within Foundry.\",\n        enabled: true,\n      },\n      {\n        name: \"use-item-containers\",\n        isChecked: game.modules.get(\"itemcollection\")?.active && game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-item-containers\"),\n        description: \"If Item Collection/Containers module is installed, put items in containers to match DDB layout\",\n        enabled: game.modules.get(\"itemcollection\")?.active,\n      },\n      {\n        name: \"create-companions\",\n        isChecked: game.modules.get(\"arbron-summoner\")?.active && game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-create-companions\"),\n        description: \"[Experimental] Generate summon monster actors? (Requires item create permissions and Arbron Summoner module)\",\n        enabled: game.modules.get(\"arbron-summoner\")?.active,\n      },\n    ];\n\n    const advancedImportConfig = [\n      {\n        name: \"use-scalevalue\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-scalevalue\"),\n        title: \"Generate Scale Value links in damage fields\",\n        description:\n          \"If not enabled will use fixed value for the current level.\",\n        enabled: true,\n      },\n      {\n        name: \"use-scalevalue-description\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-scalevalue-description\"),\n        title: \"Generate Scale Value links in descriptions\",\n        description:\n          \"If not enabled will use fixed value for the current level.\",\n        enabled: true,\n      },\n      {\n        name: \"use-override\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-override\"),\n        title: \"Replace Items using those in your Override compendium\",\n        description:\n          \"Use existing items from <i>ddb-import Override compendium</i>, rather than parsing from DDB. This is useful if you want to place customised items into the compendium for use by characters.\",\n        enabled: true,\n      },\n      {\n        name: \"use-existing\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-existing\"),\n        title: \"[Caution] Replace Items using ddb-importer compendiums\",\n        description:\n          \"Use existing items from <i>ddb-import compendiums</i>, rather than parsing from DDB. This is useful if you have customised the items in the compendium, although you will lose any custom effects applied by this module e.g. Improved Divine Smite. Please consider marking the item you wish to keep as ignored by import instead.\",\n        enabled: true,\n      },\n      {\n        name: \"use-srd\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-srd\"),\n        title: \"[Caution] Replace Items using SRD compendiums\",\n        description:\n          \"Use the <i>SRD compendiums</i>, rather than DDB. Importing using SRD will not include features like fighting style and divine smite in damage calculations. Please consider marking the item you wish to keep as ignored by import instead.\",\n        enabled: true,\n      },\n    ];\n\n    const effectImportConfig = [\n      {\n        name: \"add-item-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-add-item-effects\") && daeInstalled,\n        title: \"Generate Effects for Equipment\",\n        description: \"Generate effects for a characters equipment, doesn't include AC effects on armor, but will for things like the Ring of Protection.\",\n        enabled: daeInstalled,\n      },\n      {\n        name: \"add-spell-effects\",\n        isChecked: generateSpellEffects && spellEffectModulesAvailable.hasCore,\n        title: \"Generate Active Effects for Spells\",\n        description: spellEffectText,\n        enabled: spellEffectModulesAvailable.hasCore,\n      },\n      {\n        name: \"add-character-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-add-character-effects\") && daeInstalled,\n        title: \"Generate Effects for Character Features/Racial Traits/Feats/Backgrounds\",\n        description: featureEffectText,\n        enabled: daeInstalled,\n      },\n      {\n        name: \"generate-ac-feature-effects\",\n        isChecked:\n          game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-generate-ac-feature-effects\") && daeInstalled,\n        title: \"Generate Effects ACs for Character Features & Racial Traits\",\n        description: \"Add AC values as effects to features, this might not work as expected for some AC calculations. If unticked some ac bonuses will still be generated.\",\n        enabled: daeInstalled,\n      },\n      // {\n      //   name: \"dae-effect-copy\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\") && daeSRDContentAvailable,\n      //   title: \"Copy Active Effect from DAE Compendiums\",\n      //   description:\n      //     \"<i>Transfer</i> the <i>Dynamic Active Effects Compendiums</i> effect for matching items/features/spells (requires DAE SRD and/or Midi SRD module). This may result in odd character AC's, HP etc. especially if the generate item and character effect options above are unticked. Please try importing the character with this option disabled before logging a bug. This will overwrite effects generated with the above options.\",\n      //   enabled: daeInstalled && daeSRDContentAvailable,\n      // },\n      {\n        name: \"active-effect-copy\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-active-effect-copy\"),\n        title: \"Retain Active Effects\",\n        description:\n          \"Retain existing Effects, this will try and transfer any existing effects on the actor such as custom effects, effects from conditions or existing spells. Untick this option if you experience <i>odd</i> behaviour.\",\n        enabled: true,\n      },\n    ];\n\n    const effectSelectionConfig = {\n      class: [\n        {\n          name: \"effect-class-spell-bonus\",\n          title: \"Spell Bonuses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-class-spell-bonus\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-class-speed\",\n          title: \"Movement\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-class-speed\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-class-senses\",\n          title: \"Senses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-class-senses\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-class-hp\",\n          title: \"HP\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-class-hp\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-class-damages\",\n          title: \"Imm/Res/Vuln\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-class-damages\"),\n          enabled: true,\n        },\n      ],\n      race: [\n        {\n          name: \"effect-race-spell-bonus\",\n          title: \"Spell Bonuses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-race-spell-bonus\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-race-speed\",\n          title: \"Movement\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-race-speed\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-race-senses\",\n          title: \"Senses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-race-senses\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-race-hp\",\n          title: \"HP\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-race-hp\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-race-damages\",\n          title: \"Imm/Res/Vuln\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-race-damages\"),\n          enabled: true,\n        },\n      ],\n      background: [\n        {\n          name: \"effect-background-spell-bonus\",\n          title: \"Spell Bonuses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-background-spell-bonus\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-background-speed\",\n          title: \"Movement\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-background-speed\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-background-senses\",\n          title: \"Senses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-background-senses\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-background-hp\",\n          title: \"HP\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-background-hp\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-background-damages\",\n          title: \"Imm/Res/Vuln\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-background-damages\"),\n          enabled: true,\n        },\n      ],\n      feat: [\n        {\n          name: \"effect-feat-spell-bonus\",\n          title: \"Spell Bonuses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-feat-spell-bonus\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-feat-speed\",\n          title: \"Movement\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-feat-speed\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-feat-senses\",\n          title: \"Senses\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-feat-senses\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-feat-hp\",\n          title: \"HP\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-feat-hp\"),\n          enabled: true,\n        },\n        {\n          name: \"effect-feat-damages\",\n          title: \"Imm/Res/Vuln\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-effect-feat-damages\"),\n          enabled: true,\n        },\n      ],\n    };\n\n    const syncConfig = [\n      {\n        name: \"action-use\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-action-use\"),\n        description: \"Action Uses\",\n        enabled: true,\n      },\n      {\n        name: \"currency\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-currency\"),\n        description: \"Currency\",\n        enabled: true,\n      },\n      {\n        name: \"deathsaves\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-deathsaves\"),\n        description: \"Death Saves\",\n        enabled: true,\n      },\n      {\n        name: \"equipment\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\"),\n        description: \"Equipment\",\n        enabled: true,\n      },\n      {\n        name: \"condition\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-condition\"),\n        description: \"Exhaustion\",\n        enabled: true,\n      },\n      {\n        name: \"hitdice\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitdice\"),\n        description: \"Hit Dice/Short Rest\",\n        enabled: true,\n      },\n      {\n        name: \"hitpoints\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitpoints\"),\n        description: \"Hit Points\",\n        enabled: true,\n      },\n      {\n        name: \"inspiration\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-inspiration\"),\n        description: \"Inspiration\",\n        enabled: true,\n      },\n      {\n        name: \"spells-prepared\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-prepared\"),\n        description: \"Spells Prepared\",\n        enabled: true,\n      },\n      {\n        name: \"spells-slots\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-slots\"),\n        description: \"Spell Slots\",\n        enabled: true,\n      },\n      {\n        name: \"spells-sync\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-sync\"),\n        description: \"Spells Known\",\n        enabled: false,\n      },\n      {\n        name: \"xp\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-xp\"),\n        description: \"XP\",\n        enabled: true,\n      },\n    ];\n\n    const extrasConfig = [\n      // {\n      //   name: \"update-existing\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\"),\n      //   description: \"Update existing things.\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"use-srd\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd\"),\n      //   description: \"Use SRD compendium things instead of importing.\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"use-inbuilt-icons\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-inbuilt-icons\"),\n      //   description: \"Use icons from the inbuilt dictionary. (High coverage of items, feats, and spells).\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"use-srd-icons\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-icons\"),\n      //   description: \"Use icons from the SRD compendiums.\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"download-images\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-download-images\"),\n      //   description: \"Download D&D Beyond images (takes longer and needs space).\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"remote-images\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-remote-images\"),\n      //   description: \"Use D&D Beyond remote images (a lot quicker)\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"use-dae-effects\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-dae-effects\"),\n      //   description: \"Copy effects from DAE (items and spells only). (Requires DAE and SRD module)\",\n      //   enabled: daeInstalled,\n      // },\n      // {\n      //   name: \"hide-description\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-hide-description\"),\n      //   description: \"Hide description from players?\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"monster-items\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-items\"),\n      //   description: \"[Experimental] Load items from DDB compendium instead of parsing action/attack?\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"update-images\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\"),\n      //   description: \"Update images on existing items?\",\n      //   enabled: true,\n      // },\n      // {\n      //   name: \"dae-copy\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-dae-copy\"),\n      //   description: \"Use Dynamic Active Effects Compendiums for matching items/features (requires DAE and SRD module).\",\n      //   enabled: daeInstalled,\n      // },\n    ];\n\n    const uploadDir = game.settings.get(SETTINGS.MODULE_ID, \"image-upload-directory\");\n    const dataDirSet = !FileHelper.BAD_DIRS.includes(uploadDir);\n    const tier = game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n    const tiers = PatreonHelper.getPatreonTiers(tier);\n\n    const result = {\n      importPolicies1,\n      importPolicies2,\n      importConfig,\n      extrasConfig,\n      advancedImportConfig,\n      effectImportConfig,\n      effectSelectionConfig,\n      dataDirSet,\n      syncConfig,\n      tiers,\n    };\n\n    return result;\n  },\n\n  updateActorSettings: (html, event) => {\n    const selection = event.currentTarget.dataset.section;\n    const checked = event.currentTarget.checked;\n\n    logger.debug(`Updating munching-policy-${selection} to ${checked}`);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-\" + selection, checked);\n\n    if (selection === \"dae-copy\" && checked) {\n      $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", false);\n      game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", false);\n    } else if (selection === \"dae-effect-copy\" && checked) {\n      $(html).find(\"#character-import-policy-add-item-effects\").prop(\"checked\", true);\n      game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-item-effects\", true);\n      $(html).find(\"#character-import-policy-add-character-effects\").prop(\"checked\", true);\n      game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-character-effects\", true);\n    }\n  },\n\n  getCompendiumFolderLookups: (type) => {\n    const compendiumFolderSetting = game.settings.settings.get(`ddb-importer.munching-selection-compendium-folders-${type}`);\n    const settingValue = game.settings.get(SETTINGS.MODULE_ID, `munching-selection-compendium-folders-${type}`);\n\n    let selections = [];\n    for (const [key, value] of Object.entries(compendiumFolderSetting.choices)) {\n      selections.push({\n        key: key,\n        label: value,\n        selected: key === settingValue,\n      });\n    }\n\n    return selections;\n  },\n\n  getMuncherSettings: (includeHomebrew = true) => {\n    const cobalt = getCobalt() != \"\";\n    const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\") != \"\";\n    const tier = game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n    const tiers = PatreonHelper.getPatreonTiers(tier);\n    const spellEffectModulesAvailable = spellEffectModules();\n    const daeInstalled = spellEffectModulesAvailable.daeInstalled;\n    // disable srd/midi srd copy as v10 does not work\n    // const daeSRDInstalled = game.modules.get(\"Dynamic-Effects-SRD\")?.active;\n    // const midiSRDInstalled = game.modules.get(\"midi-srd\")?.active;\n    // const daeSRDContentAvailable = (daeSRDInstalled || midiSRDInstalled);\n    const compendiumFolderAdd = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-compendium-folders\");\n    const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n    const compendiumFolderMonsterStyles = MuncherSettings.getCompendiumFolderLookups(\"monster\");\n    const compendiumFolderSpellStyles = MuncherSettings.getCompendiumFolderLookups(\"spell\");\n    const compendiumFolderItemStyles = MuncherSettings.getCompendiumFolderLookups(\"item\");\n    const spellEffectText = `Create active effects. These require DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")}, Midi-QOL${MuncherSettings.getInstalledIcon(\"midiQolInstalled\")}, Advanced Macros${MuncherSettings.getInstalledIcon(\"advancedMacrosInstalled\")}, Item Macro${MuncherSettings.getInstalledIcon(\"itemMacroInstalled\")}, Times Up${MuncherSettings.getInstalledIcon(\"timesUp\")}, and Convenient Effects${MuncherSettings.getInstalledIcon(\"convenientEffectsInstalled\")} as a minimum. Also recommened is Active Auras${MuncherSettings.getInstalledIcon(\"activeAurasInstalled\")}, Active Token Effects${MuncherSettings.getInstalledIcon(\"atlInstalled\")}, Token Magic FX${MuncherSettings.getInstalledIcon(\"tokenMagicInstalled\")}, and Automated Animations${MuncherSettings.getInstalledIcon(\"autoAnimationsInstalled\")}. Copying from MidiSRD will override these spells.`;\n\n    const generateSpellEffects = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-spell-effects\");\n    if (generateSpellEffects && !spellEffectModulesAvailable.hasCore) {\n      game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-add-spell-effects\", false);\n    }\n\n    const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n    const sourceArray = enableSources\n      ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n      : [];\n    const sourcesSelected = enableSources && sourceArray.length > 0;\n    const sourceNames = DDBSources.getSourcesLookups(sourceArray).filter((source) => source.selected).map((source) => source.label);\n    const homebrewDescription = sourcesSelected\n      ? \"Include homebrew? SOURCES SELECTED! You can't import homebrew with a source filter selected\"\n      : \"Include homebrew?\";\n    const sourceDescription = `Importing from the following sources only: ${sourceNames.join(\", \")}`;\n\n    const itemConfig = [\n      {\n        name: \"use-ddb-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-item-icons\"),\n        description: \"Use D&D Beyond item images, if available\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-generic-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-generic-item-icons\"),\n        description: \"Use D&D Beyond generic item type images, if available (final fallback)\",\n        enabled: true,\n      },\n      {\n        name: \"add-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-effects\"),\n        description: \"Dynamically generate effects (equipment only). (Requires DAE)\",\n        enabled: daeInstalled,\n      },\n      // {\n      //   name: \"add-ac-armor-effects\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-ac-armor-effects\"),\n      //   description: \"[Caution] Dynamically generate DAE AC effects on armor equipment. (Requires DAE). Probably not required.\",\n      //   enabled: daeInstalled,\n      // },\n      {\n        name: \"item-homebrew\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew\"),\n        description: homebrewDescription,\n        enabled: !sourcesSelected,\n      },\n      {\n        name: \"item-homebrew-only\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew-only\"),\n        description: \"Only homebrew items?\",\n        enabled: !sourcesSelected,\n      },\n    ];\n\n    const spellConfig = [\n      {\n        name: \"use-ddb-spell-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-spell-icons\"),\n        description: \"If no other icon, use the D&DBeyond spell school icon.\",\n        enabled: true,\n      },\n      {\n        name: \"add-spell-effects\",\n        isChecked: generateSpellEffects && spellEffectModulesAvailable.hasCore,\n        description: spellEffectText,\n        enabled: spellEffectModulesAvailable.hasCore,\n      },\n      {\n        name: \"spell-homebrew\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew\"),\n        description: homebrewDescription,\n        enabled: !sourcesSelected,\n      },\n      {\n        name: \"spell-homebrew-only\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew-only\"),\n        description: \"Only homebrew spells?\",\n        enabled: !sourcesSelected,\n      },\n    ];\n\n    const tokenizerReady = game.modules.get(\"vtta-tokenizer\")?.active;\n\n    const basicMonsterConfig = [\n      {\n        name: \"hide-description\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-hide-description\"),\n        description: \"Hide monster action description from players?\",\n        enabled: true,\n      },\n      {\n        name: \"monster-items\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-items\"),\n        description: \"[Experimental] Load attack/weapon items from DDB compendium instead of parsing action/attack? (Poor success rate)\",\n        enabled: true,\n      },\n      {\n        name: \"monster-use-item-ac\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-use-item-ac\"),\n        description: \"Use AC items instead of setting a flat AC? (Recommended if using spell effects like shield on NPC's).\",\n        enabled: true,\n      },\n      {\n        name: \"use-full-token-image\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-full-token-image\"),\n        description: \"Use avatar image for token rather than token image (full art)\",\n        enabled: true,\n      },\n      {\n        name: \"use-token-avatar-image\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-token-avatar-image\"),\n        description: \"Use token image for avatar rather than avatar image (close up)\",\n        enabled: true,\n      },\n      {\n        name: \"update-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\"),\n        description: \"[CAUTION] Update Monster images on existing npcs? (This will dramatically slow down re-munching).\",\n        enabled: true,\n      },\n      {\n        name: \"monster-tokenize\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-tokenize\"),\n        description: \"Auto-Tokenize monsters token image? (Adds Tokenizer default token ring)\",\n        enabled: tokenizerReady,\n      },\n      {\n        name: \"monster-retain-biography\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-retain-biography\"),\n        description: \"Should monsters retain existing biography?\",\n        enabled: true,\n      },\n      {\n        name: \"monster-strip-name\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-strip-name\"),\n        description: \"Strip uses and recharge information from action names?\",\n        enabled: true,\n      },\n      {\n        name: \"munching-policy-monster-set-legendary-resource-bar\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-set-legendary-resource-bar\"),\n        description: \"Monsters display legendary resources on bar2? (Like the SRD Monsters)\",\n        enabled: true,\n      },\n      {\n        name: \"add-monster-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-monster-effects\"),\n        description: \"[Experimental] Attempt to generate Midi-QOL effects on monster attacks/features?\",\n        enabled: spellEffectModulesAvailable.hasCore,\n      },\n      // {\n      //   name: \"dae-copy\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-dae-copy\"),\n      //   description: \"Use Dynamic Active Effects Compendiums for matching items/features (requires DAE SRD/Midi SRD module).\",\n      //   enabled: daeInstalled && daeSRDContentAvailable,\n      // },\n      // {\n      //   name: \"monster-bulk-import\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-bulk-import\"),\n      //   description: \"Use bulk import mode? Experimental, potentially faster. Does not preserve excluded items.\",\n      //   enabled: true,\n      // },\n    ];\n\n    const homebrewMonsterConfig = includeHomebrew\n      ? [\n        {\n          name: \"monster-homebrew\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\") && !sourcesSelected,\n          description: homebrewDescription,\n          enabled: tiers.homebrew && !sourcesSelected,\n        },\n        {\n          name: \"monster-homebrew-only\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\") && !sourcesSelected,\n          description: \"Homebrew monsters only? (Otherwise both)\",\n          enabled: tiers.homebrew && !sourcesSelected,\n        },\n        {\n          name: \"monster-exact-match\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-exact-match\"),\n          description: \"Exact name match?\",\n          enabled: tiers.homebrew,\n        }\n      ]\n      : [];\n\n    const monsterConfig = basicMonsterConfig.concat(homebrewMonsterConfig);\n\n    const genericConfig = [\n      {\n        name: \"update-existing\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\"),\n        description: \"Update existing things.\",\n        enabled: true,\n      },\n      {\n        name: \"use-inbuilt-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-inbuilt-icons\"),\n        description: \"Use icons from the inbuilt dictionary. (High coverage, recommended, fast).\",\n        enabled: true,\n      },\n      {\n        name: \"use-srd-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-icons\"),\n        description: \"Use icons from the SRD compendiums.\",\n        enabled: true,\n      },\n      {\n        name: \"download-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-download-images\"),\n        description: \"Download D&D Beyond images (takes longer and needs space).\",\n        enabled: true,\n      },\n      {\n        name: \"remote-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-remote-images\"),\n        description: \"Use D&D Beyond remote images (a lot quicker)\",\n        enabled: true,\n      },\n      // {\n      //   name: \"use-dae-effects\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-dae-effects\"),\n      //   description: \"Copy effects from DAE (items and spells only). (Requires DAE and SRD or Midi content module). Will replace dynamically generated effects.\",\n      //   enabled: daeInstalled && daeSRDContentAvailable,\n      // },\n      {\n        name: \"use-compendium-folders\",\n        isChecked: compendiumFoldersInstalled ? compendiumFolderAdd : false,\n        description: \"Generate compendium folders. You can migrate an existing import in the Tools tab.\",\n        enabled: compendiumFoldersInstalled,\n      },\n      {\n        name: \"use-srd\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd\"),\n        description:\n          \"[CAUTION] Use SRD compendium things instead of importing. This is not recommended, and may break adventure munching functionality.\",\n        enabled: true,\n      },\n      {\n        name: \"exclude-legacy\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-exclude-legacy\"),\n        description: \"Exclude legacy monsters/races from import? These are replaced by newer versions e.g. in Monsters of the Multiverse.\",\n        enabled: true,\n      },\n      {\n        name: \"legacy-postfix\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-legacy-postfix\"),\n        description: \"Append (Legacy) to Legacy monster/race names? These are replaced by newer versions e.g. in Monsters of the Multiverse.\",\n        enabled: true,\n      },\n      {\n        name: \"use-source-filter\",\n        isChecked: enableSources,\n        description: \"Restrict import to specific source book(s)? (DDB sets this as the <i>first</i> book a monster appears in).\",\n        enabled: true,\n      }\n    ];\n\n    const worldUpdateConfig = [\n      {\n        name: \"update-world-monster-update-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-world-monster-update-images\"),\n        description: \"Update Monster images?\",\n        enabled: true,\n      },\n      {\n        name: \"update-world-monster-retain-biography\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-world-monster-retain-biography\"),\n        description: \"Retain existing biography?\",\n        enabled: true,\n      },\n    ];\n\n    const resultData = {\n      cobalt,\n      genericConfig,\n      monsterConfig,\n      spellConfig,\n      itemConfig,\n      worldUpdateConfig,\n      beta: betaKey && cobalt,\n      tiers,\n      compendiumFoldersInstalled,\n      compendiumFolderMonsterStyles,\n      compendiumFolderItemStyles,\n      compendiumFolderSpellStyles,\n      sourcesSelected,\n      sourceDescription,\n      enableSources,\n      version: CONFIG.DDBI.version,\n    };\n\n    // console.warn(resultData);\n\n    return resultData;\n  },\n\n  // eslint-disable-next-line complexity\n  updateMuncherSettings: (html, event, dialog) => {\n    const selection = event.currentTarget.dataset.section;\n    const checked = event.currentTarget.checked;\n\n    logger.debug(`Updating munching-policy-${selection} to ${checked}`);\n\n    game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-\" + selection, checked);\n\n    switch (selection) {\n      case \"use-full-token-image\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-use-token-avatar-image\", false);\n          $(\"#munching-policy-use-token-avatar-image\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"use-token-avatar-image\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-use-full-token-image\", false);\n          $(\"#munching-policy-use-full-token-image\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"monster-homebrew\": {\n        if (!checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\", false);\n          $(\"#munching-policy-monster-homebrew-only\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"monster-homebrew-only\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\", true);\n          $(\"#munching-policy-monster-homebrew\").prop(\"checked\", true);\n        }\n        break;\n      }\n      case \"spell-homebrew\": {\n        if (!checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew-only\", false);\n          $(\"#munching-policy-spell-homebrew-only\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"spell-homebrew-only\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew\", true);\n          $(\"#munching-policy-spell-homebrew\").prop(\"checked\", true);\n        }\n        break;\n      }\n      case \"item-homebrew\": {\n        if (!checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew-only\", false);\n          $(\"#munching-policy-item-homebrew-only\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"item-homebrew-only\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew\", true);\n          $(\"#munching-policy-item-homebrew\").prop(\"checked\", true);\n        }\n        break;\n      }\n      case \"remote-images\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-download-images\", false);\n          $(\"#munching-generic-policy-download-images\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"download-images\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-remote-images\", false);\n          $(\"#munching-generic-policy-remote-images\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"use-source-filter\": {\n        $(\"#munch-source-select\").prop(\"disabled\", !checked);\n        $(\"#munch-source-div\").toggleClass(\"ddbimporter-hidden\");\n        dialog.render(true);\n        break;\n      }\n      // no default\n    }\n  },\n};\n\nexport default MuncherSettings;\n","import { getCampaignId } from \"../lib/Settings.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getVehicleData } from \"./vehicles.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nasync function getMonsterMap () {\n  // ddb://monsters\n  const monsterCompendiumLabel = CompendiumHelper.getCompendiumLabel(\"monster\");\n  const monsterCompendium = CompendiumHelper.getCompendium(monsterCompendiumLabel);\n  const monsterIndices = [\"name\", \"flags.ddbimporter.id\"];\n  const monsterIndex = await monsterCompendium.getIndex({ fields: monsterIndices });\n\n  const results = monsterIndex\n    .filter((monster) => monster.flags?.ddbimporter?.id)\n    .map((monster) => {\n      return {\n        id: monster.flags.ddbimporter.id,\n        _id: monster._id,\n        compendium: monsterCompendiumLabel,\n        name: monster.name,\n        documentName: monster.name,\n      };\n    });\n\n  return Promise.all(results);\n}\n\nasync function getSpellMap() {\n  // ddb://spells\n  // mm 2176\n  const spellCompendiumLabel = await game.settings.get(\"ddb-importer\", \"entity-spell-compendium\");\n  const spellCompendium = await game.packs.find((pack) => pack.collection === spellCompendiumLabel);\n  const spellIndices = [\"name\", \"flags.ddbimporter.definitionId\"];\n  const spellIndex = await spellCompendium.getIndex({ fields: spellIndices });\n\n  const results = spellIndex\n    .filter((spell) => spell.flags?.ddbimporter?.definitionId)\n    .map((spell) => {\n      return {\n        id: spell.flags.ddbimporter.definitionId,\n        _id: spell._id,\n        compendium: spellCompendiumLabel,\n        name: spell.name,\n        documentName: spell.name,\n      };\n    });\n\n  return Promise.all(results);\n}\n\nasync function getItemMap() {\n  // ddb://magicitems\n  const itemCompendiumLabel = await game.settings.get(\"ddb-importer\", \"entity-item-compendium\");\n  const itemCompendium = await game.packs.find((pack) => pack.collection === itemCompendiumLabel);\n  const itemIndices = [\"name\", \"flags.ddbimporter.definitionId\"];\n  const itemIndex = await itemCompendium.getIndex({ fields: itemIndices });\n\n  const results = itemIndex\n    .filter((item) => item.flags?.ddbimporter?.definitionId)\n    .map((item) => {\n      return {\n        id: item.flags.ddbimporter.definitionId,\n        _id: item._id,\n        compendium: itemCompendiumLabel,\n        name: item.name,\n        documentName: item.name,\n      };\n    });\n\n  return Promise.all(results);\n}\n\nconst ATTACK_ACTION_MAP = {\n  \"Opportunity Attack\": {\n    hint: \"Opportunity Attacks\",\n    page: \"Making an Attack\"\n  },\n  Grapple: {\n    hint: \"Grappling\",\n    page: \"Making an Attack\"\n  },\n  Shove: {\n    hint: \"Shoving a Creature\",\n    page: \"Making an Attack\"\n  },\n  \"Two-Weapon Fighting\": {\n    hint: \"Two-Weapon Fighting\",\n    page: \"Making an Attack\"\n  },\n  \"Interact with an Object\": {\n    hint: \"Use an Object\",\n    page: \"Actions in Combat\",\n  },\n};\n\nexport async function generateAdventureConfig(full = false, cobalt = true, fullPageMap = false) {\n  const result = {\n    generateTokens: true,\n    schemaVersion: CONFIG.DDBI.schemaVersion,\n    createPinJournals: false,\n    createPlayerHandouts: false,\n    createHandouts: false,\n    debug: false,\n    observeAll: false,\n    version: game.modules.get(\"ddb-importer\").version,\n    lookups: {\n      monsters: [],\n      items: [],\n      spells: [],\n      skills: [],\n      senses: [],\n      conditions: [],\n      actions: [],\n      weaponproperties: [],\n      vehicles: [],\n      rule: [],\n    },\n    fullPageMap: [],\n  };\n\n  if (cobalt) {\n    result.cobalt = getCobalt();\n    result.campaignId = getCampaignId();\n  }\n\n  // @Compendium[${compendiumLabel}.${featureMatch._id}]{${feature.name}}\n\n  if (full) {\n    result.lookups.monsters = await getMonsterMap();\n    result.lookups.spells = await getSpellMap();\n    result.lookups.items = await getItemMap();\n  }\n\n  // vehicles\n  if (!DDBProxy.isCustom() && cobalt) {\n    const vehicleData = await getVehicleData();\n\n    result.lookups.vehicles = vehicleData.map((v) => {\n      return {\n        id: v.id,\n        url: v.url,\n        name: v.name,\n      };\n    });\n  }\n\n  const rulesCompendium = \"dnd5e.rules\";\n  const srdCompendium = CompendiumHelper.getCompendium(rulesCompendium);\n  if (!srdCompendium) return result;\n\n  const srdIndex = await srdCompendium.getIndex();\n  const srdDocuments = await srdCompendium.getDocuments();\n  result.index = srdIndex;\n\n  const skillEntryDocument = srdDocuments.find((d) => d.name === \"Chapter 7: Using Ability Scores\");\n  if (skillEntryDocument) {\n    result.lookups.skills = CONFIG.DDB.abilitySkills.map((skill) => {\n      const skillEntryPage = skillEntryDocument.pages.find((p) => p.name === \"Using Each Ability\");\n      const stat = CONFIG.DDB.stats.find((s) => s.id === skill.stat);\n      const headerLink = `${stat.name} Checks`;\n      return {\n        id: skill.id,\n        _id: skillEntryDocument._id,\n        name: skill.name,\n        compendium: rulesCompendium,\n        documentName: skillEntryDocument.name,\n        pageId: skillEntryPage._id,\n        headerLink,\n      };\n    });\n  }\n\n  const senseEntryDocument = srdDocuments.find((d) => d.name === \"Appendix D: Senses and Speeds\");\n  if (senseEntryDocument) {\n    result.lookups.senses = CONFIG.DDB.senses\n      .filter((sense) => senseEntryDocument.pages.some((p) => p.name === sense.name))\n      .map((sense) => {\n        const senseEntryPage = senseEntryDocument.pages.find((p) => p.name === sense.name);\n        return {\n          id: sense.id,\n          _id: senseEntryDocument._id,\n          name: sense.name,\n          compendium: rulesCompendium,\n          documentName: senseEntryDocument.name,\n          pageId: senseEntryPage._id,\n          headerLink: null,\n        };\n      });\n  }\n\n  const conditionEntryDocument = srdDocuments.find((d) => d.name === \"Appendix A: Conditions\");\n  if (conditionEntryDocument) {\n    result.lookups.conditions = CONFIG.DDB.conditions\n      .filter((condition) => conditionEntryDocument.pages.some((p) => p.name.trim() === condition.definition.name.trim()))\n      .map((condition) => {\n        const conditionEntryPage = conditionEntryDocument.pages.find((p) => p.name.trim() === condition.definition.name.trim());\n        return {\n          id: condition.definition.id,\n          _id: conditionEntryDocument.id,\n          name: condition.definition.name,\n          compendium: rulesCompendium,\n          slug: condition.definition.slug,\n          documentName: conditionEntryDocument.name,\n          pageId: conditionEntryPage._id,\n          headerLink: null,\n        };\n      });\n  }\n\n  const actionEntryDocument = srdDocuments.find((d) => d.name === \"Chapter 9: Combat\");\n  if (actionEntryDocument) {\n    const actionEntryPage = actionEntryDocument.pages.find((p) => p.name === \"Actions in Combat\");\n    CONFIG.DDB.basicActions.forEach((action) => {\n      if (ATTACK_ACTION_MAP[action.name]) {\n        const attackEntryPage = actionEntryDocument.pages.find((p) => p.name === ATTACK_ACTION_MAP[action.name].page);\n        result.lookups.actions.push({\n          id: action.id,\n          _id: actionEntryDocument._id,\n          name: action.name,\n          compendium: rulesCompendium,\n          documentName: actionEntryDocument.name,\n          pageId: attackEntryPage._id,\n          headerLink: ATTACK_ACTION_MAP[action.name].hint,\n        });\n      } else if (action.id < 100) {\n        result.lookups.actions.push({\n          id: action.id,\n          _id: actionEntryDocument.id,\n          name: action.name,\n          compendium: rulesCompendium,\n          documentName: actionEntryDocument.name,\n          pageId: actionEntryPage._id,\n          headerLink: action.name,\n        });\n      }\n    });\n  }\n\n  const equipmentDocument = srdDocuments.find((d) => d.name === \"Chapter 5: Equipment\");\n  if (equipmentDocument) {\n    const weaponPropertiesPage = equipmentDocument.pages.find((p) => p.name === \"Weapons\");\n    result.lookups.weaponproperties = CONFIG.DDB.weaponProperties.map((prop) => {\n      return {\n        id: prop.id,\n        _id: equipmentDocument._id,\n        name: prop.name,\n        compendium: rulesCompendium,\n        documentName: equipmentDocument.name,\n        pageId: weaponPropertiesPage._id,\n        headerLink: \"Weapon Properties\",\n      };\n    });\n  }\n\n  if (fullPageMap) {\n    srdDocuments.forEach((document) => {\n      document.pages.forEach((page) => {\n        result.fullPageMap.push({\n          id: null,\n          _id: document.id,\n          name: page.name,\n          compendium: rulesCompendium,\n          documentName: document.name,\n          pageId: page._id,\n          headerLink: null,\n        });\n      });\n    });\n  }\n\n  return result;\n\n}\n\nexport async function downloadAdventureConfig() {\n  const fullConfig = game.settings.get(\"ddb-importer\", \"adventure-muncher-full-config\");\n  const result = await generateAdventureConfig(fullConfig);\n  FileHelper.download(JSON.stringify(result, null, 4), `adventure-config.json`, \"application/json\");\n  return result;\n}\n","import AdventureMunchHelpers from \"./AdventureMunchHelpers.js\";\nimport logger from \"../../logger.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport { generateAdventureConfig } from \"../adventure.js\";\nimport { DirectoryPicker } from \"../../lib/DirectoryPicker.js\";\nimport SETTINGS from \"../../settings.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport utils from \"../../lib/utils.js\";\n\nexport default class AdventureMunch extends FormApplication {\n\n  static COMPENDIUM_MAP = {\n    \"spells\": \"spells\",\n    \"magicitems\": \"items\",\n    \"weapons\": \"items\",\n    \"armor\": \"items\",\n    \"adventuring-gear\": \"items\",\n    \"monsters\": \"monsters\",\n    \"vehicles\": \"vehicles\",\n  };\n\n  static DDB_MAP = {\n    \"spells\": \"spells\",\n    \"magicitems\": \"magic-items\",\n    \"weapons\": \"equipment\",\n    \"armor\": \"equipment\",\n    \"adventuring-gear\": \"equipment\",\n    \"monsters\": \"monsters\",\n    \"vehicles\": \"vehicles\",\n  };\n\n\n  /** @override */\n  constructor(object = {}, options = {}) {\n    super(object, options);\n    this._itemsToRevisit = [];\n    const importPathData = game.settings.get(SETTINGS.MODULE_ID, \"adventure-import-path\");\n    this._importPathData = DirectoryPicker.parse(importPathData);\n    this.adventure = null;\n    this.folders = null;\n    this.raw = {\n      scene: [],\n      journal: [],\n      actor: [],\n      item: [],\n      table: [],\n      playlist: [],\n      macro: [],\n      folder: [],\n    };\n    this.temporary = {\n      scenes: [],\n      journals: [],\n      actors: [],\n      items: [],\n      tables: [],\n      playlists: [],\n      macros: [],\n      folders: [],\n    };\n    this.remove = {\n      folderIds: new Set(),\n    };\n    this.zip = null;\n    this.allMonsters = false;\n    this.journalWorldActors = false;\n    this.importFilename = null;\n    this.importToAdventureCompendium = false;\n    this.lookups = {\n      folders: {},\n      import: {},\n      actors: {},\n      sceneTokens: {},\n      adventureConfig: {},\n    };\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    this.pattern = /(@[a-z]*)(\\[)([a-z0-9]*|[a-z0-9.]*)(\\])(\\{)(.*?)(\\})/gim;\n    this.altpattern\n      = /((data-entity)=\\\\?[\"']?([a-zA-Z]*)\\\\?[\"']?|(data-pack)=\\\\?[\"']?([[\\S.]*)\\\\?[\"']?) data-id=\\\\?[\"']?([a-zA-Z0-9]*)\\\\?[\"']?.*?>(.*?)<\\/a>/gim;\n\n    return mergeObject(super.defaultOptions, {\n      id: \"ddb-adventure-import\",\n      classes: [\"ddb-adventure-import\"],\n      title: \"Adventure Munch\",\n      template: \"modules/ddb-importer/handlebars/adventure/import.hbs\",\n      width: 350,\n    });\n  }\n\n  /**\n   * @param  {String} path\n   * @param  {Boolean} misc Miscellaneous import type/location?\n   * @returns {Object} An object detailing various file path\n   */\n  getImportFilePaths(path, misc) {\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\") && !path.endsWith(\"svg\") && !path.endsWith(\"pdf\");\n    const adventurePath = this.adventure.name.replace(/[^a-z0-9]/gi, \"_\");\n    const targetPath = path.replace(/[\\\\/][^\\\\/]+$/, \"\");\n    const baseFilename = path.replace(/^.*[\\\\/]/, \"\").replace(/\\?(.*)/, \"\");\n    const filename\n      = useWebP && !baseFilename.endsWith(\".webp\")\n        ? `${FileHelper.removeFileExtension(baseFilename)}.webp`\n        : baseFilename;\n    const baseUploadPath = misc\n      ? game.settings.get(SETTINGS.MODULE_ID, \"adventure-misc-path\")\n      : game.settings.get(SETTINGS.MODULE_ID, \"adventure-upload-path\");\n    const parsedBaseUploadPath = DirectoryPicker.parse(baseUploadPath);\n    const uploadPath = misc\n      ? `${parsedBaseUploadPath.current}/${targetPath}`\n      : `${parsedBaseUploadPath.current}/${adventurePath}/${targetPath}`;\n    const fullUploadPath = misc\n      ? `${baseUploadPath}/${targetPath}`\n      : `${baseUploadPath}/${adventurePath}/${targetPath}`;\n    const returnFilePath = misc ? `${targetPath}/${filename}` : `${adventurePath}/${targetPath}/${filename}`;\n    return {\n      adventurePath,\n      targetPath,\n      filename,\n      baseUploadPath,\n      parsedBaseUploadPath,\n      uploadPath,\n      returnFilePath,\n      baseFilename,\n      fullUploadPath,\n      forcingWebp: useWebP && baseFilename !== filename,\n    };\n  }\n\n  /**\n   * Import a non-image file\n   * @param {String} path\n   * @param {Blob} content\n   * @param {String} mimeType\n   * @param {Boolean} misc Miscellaneous import type/location?\n   * @returns {Promise<String>} file path\n   */\n  async importRawFile(path, content, mimeType, misc) {\n    try {\n      if (path[0] === \"*\") {\n        // this file was flagged as core data, just replace name.\n        return path.replace(/\\*/g, \"\");\n      } else if (path.startsWith(\"icons/\") || path.startsWith(\"systems/dnd5e/icons/\") || path.startsWith(\"ddb://\")) {\n        // these are core icons, ignore\n        // or are ddb:// paths that will be replaced by muncher\n        return path;\n      } else {\n        const paths = this.getImportFilePaths(path, misc);\n        const returnPath = await FileHelper.getFileUrl(paths.baseUploadPath, paths.returnFilePath);\n\n        if (paths.uploadPath && !CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(paths.uploadPath)) {\n          logger.debug(`Checking dir path ${paths.uploadPath}`, paths);\n          await DirectoryPicker.verifyPath(paths.parsedBaseUploadPath, `${paths.uploadPath}`);\n          FileHelper.generateCurrentFiles(paths.uploadPath);\n          CONFIG.DDBI.KNOWN.CHECKED_DIRS.add(paths.uploadPath);\n        }\n\n        if (!CONFIG.DDBI.KNOWN.FILES.has(returnPath)) {\n          logger.debug(`Importing raw file from ${path}`, paths);\n          const fileData = new File([content], paths.filename, { type: mimeType });\n          await AdventureMunchHelpers.UploadFile(paths.parsedBaseUploadPath.activeSource, `${paths.uploadPath}`, fileData, {\n            bucket: paths.parsedBaseUploadPath.bucket,\n          });\n          CONFIG.DDBI.KNOWN.FILES.add(returnPath);\n        } else {\n          logger.debug(`File already imported ${path}`);\n        }\n\n        return `${returnPath}`;\n      }\n    } catch (err) {\n      logger.error(`Error importing image file ${path} : ${err.message}`);\n    }\n\n    return path;\n  }\n\n  /**\n   * Imports binary file, by extracting from zip file and uploading to path.\n   *\n   * @param  {String} path - Path to image within zip file\n   * @returns {Promise<String>} - Path to file within VTT\n   */\n  async importImage(path, misc = false) {\n    try {\n      if (path[0] === \"*\") {\n        // this file was flagged as core data, just replace name.\n        return path.replace(/\\*/g, \"\");\n      } else if (path.startsWith(\"icons/\") || path.startsWith(\"systems/dnd5e/icons/\") || path.startsWith(\"ddb://\")) {\n        // these are core icons, ignore\n        // or are ddb:// paths that will be replaced by muncher\n        return path;\n      } else {\n        const paths = this.getImportFilePaths(path, misc);\n        const returnPath = await FileHelper.getFileUrl(paths.baseUploadPath, paths.returnFilePath);\n\n        if (paths.uploadPath && !CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(paths.uploadPath)) {\n          logger.debug(`Checking dir path ${paths.uploadPath}`, paths);\n          await DirectoryPicker.verifyPath(paths.parsedBaseUploadPath, `${paths.uploadPath}`);\n          FileHelper.generateCurrentFiles(paths.uploadPath);\n          CONFIG.DDBI.KNOWN.CHECKED_DIRS.add(paths.uploadPath);\n        }\n\n        if (!CONFIG.DDBI.KNOWN.FILES.has(returnPath)) {\n          logger.debug(`Importing image from ${path}`, paths);\n          const img = await this.zip.file(path).async(\"blob\");\n          await FileHelper.uploadImage(img, paths.fullUploadPath, paths.filename, paths.forcingWebp);\n          CONFIG.DDBI.KNOWN.FILES.add(returnPath);\n        } else {\n          logger.debug(`File already imported ${path}`);\n        }\n\n        return `${returnPath}`;\n      }\n    } catch (err) {\n      logger.error(`Error importing image file ${path} : ${err.message}`);\n    }\n\n    return path;\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async getData() {\n    let data;\n    let files = [];\n\n    try {\n      const verifiedDirectory = await DirectoryPicker.verifyPath(this._importPathData);\n      if (verifiedDirectory) {\n        const options = {\n          bucket: this._importPathData.bucket,\n          extensions: [\".fvttadv\", \".FVTTADV\", \".zip\"],\n          wildcard: false,\n        };\n        data = await AdventureMunchHelpers.BrowseFiles(this._importPathData.activeSource, this._importPathData.current, options);\n        files = data.files.map((file) => {\n          const filename = decodeURIComponent(file).replace(/^.*[\\\\/]/, \"\");\n\n          return { path: decodeURIComponent(file), name: filename };\n        });\n      }\n    } catch (err) {\n      logger.error(err);\n      logger.warn(\n        `Unable to verify import path, this may be due to permissions on the server. You may be able to ignore this message.`\n      );\n    }\n\n    return {\n      data,\n      allScenes: game.settings.get(SETTINGS.MODULE_ID, \"adventure-policy-all-scenes\"),\n      allMonsters: game.settings.get(SETTINGS.MODULE_ID, \"adventure-policy-all-actors-into-world\"),\n      journalWorldActors: game.settings.get(SETTINGS.MODULE_ID, \"adventure-policy-journal-world-actors\"),\n      files,\n      cssClass: \"ddb-importer-window\",\n    };\n  }\n\n  async importFolder(folders, folderList) {\n    await AdventureMunchHelpers.asyncForEach(folders, async (f) => {\n      let folderData = f;\n\n      let newFolder = game.folders.find((folder) =>\n        (folder._id === folderData._id || folder.flags.importid === folderData._id)\n        && folder.type === folderData.type\n      );\n\n      if (newFolder) {\n        if (!this.temporary.folders.some((f) => f._id === newFolder._id)) {\n          this.temporary.folders.push(newFolder);\n        }\n        logger.debug(`Found existing folder ${newFolder._id} with data:`, folderData, newFolder);\n      } else {\n        if (folderData.parent === null) {\n          folderData.parent = this.lookups.folders[folderData.type];\n        } else {\n          folderData.parent = this.lookups.folders[folderData.parent];\n        }\n\n        // eslint-disable-next-line require-atomic-updates\n        newFolder = await Folder.create(folderData, { keepId: true });\n        this.temporary.folders.push(newFolder);\n        if (this.importToAdventureCompendium) this.remove.folderIds.add(newFolder._id);\n        logger.debug(`Created new folder ${newFolder._id} with data:`, folderData, newFolder);\n      }\n\n      // eslint-disable-next-line require-atomic-updates\n      this.lookups.folders[folderData.flags.importid] = newFolder._id;\n\n      let childFolders = folderList.filter((folder) => {\n        return folder.parent === folderData._id;\n      });\n\n      if (childFolders.length > 0) {\n        await this.importFolder(childFolders, folderList);\n      }\n    });\n  }\n\n  /**\n   * Create missing folder structures in the world\n   */\n  async _createFolders() {\n    this.lookups.folders[\"null\"] = null;\n\n    // the folder list could be out of order, we need to create all folders with parent null first\n    const firstLevelFolders = this.folders.filter((folder) => folder.parent === null);\n    await this.importFolder(firstLevelFolders, this.folders);\n  }\n\n  /** @override */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(\".world-button\").on(\"click\", this._importAdventure.bind(this));\n    html.find(\".compendium-button\").on(\"click\", this._importAdventure.bind(this));\n  }\n\n  /**\n   * Checks for any missing data from DDB in the compendiums, spells, items, monsters that have been referenced by the\n   * adventure and imports them using DDB Importer.\n   */\n  async _checkForMissingData() {\n    if (this.adventure.required?.spells && this.adventure.required.spells.length > 0) {\n      logger.debug(`${this.adventure.name} - spells required`, this.adventure.required.spells);\n      AdventureMunch._progressNote(`Checking for missing spells from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"spell\", this.adventure.required.spells);\n    }\n    if (this.adventure.required?.items && this.adventure.required.items.length > 0) {\n      logger.debug(`${this.adventure.name} - items required`, this.adventure.required.items);\n      AdventureMunch._progressNote(`Checking for missing items from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"item\", this.adventure.required.items);\n    }\n    if (this.adventure.required?.monsters && this.adventure.required.monsters.length > 0) {\n      logger.debug(`${this.adventure.name} - monsters required`, this.adventure.required.monsters);\n      AdventureMunch._progressNote(`Checking for missing monsters from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"monster\", this.adventure.required.monsters);\n    }\n    if (parseFloat(this.adventure.version) < 4.1 && this.allMonsters) {\n      ui.notifications.warn(`Unable to add all monsters from this adventure, please re-munch adventure with Adventure Muncher v1.0.9 or higher`);\n    } else if (parseFloat(this.adventure.version) >= 4.1 && this.allMonsters && this.adventure.required?.monsterData\n      && this.adventure.required?.monsterData?.length > 0\n    ) {\n      logger.debug(`${this.adventure.name} - Importing Remaining Actors`);\n      AdventureMunch._progressNote(`Checking for missing world actors (${this.adventure.required.monsterData}) from compendium...`);\n      await this.importRemainingActors(this.adventure.required.monsterData);\n    }\n    logger.debug(\"Missing data check complete\");\n  }\n\n  /**\n   * Work through the different types in the adventure and import them\n   * @returns {Promise<>}\n   */\n  async _importFiles() {\n    if (AdventureMunchHelpers.folderExists(\"scene\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading scenes`);\n      await this._checkForDataUpdates(\"scene\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"actor\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading actors`);\n      await this._importFile(\"actor\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"item\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading item`);\n      await this._importFile(\"item\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"journal\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading journal`);\n      await this._importFile(\"journal\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"table\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading table`);\n      await this._importFile(\"table\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"playlist\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading playlist`);\n      await this._importFile(\"playlist\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"macro\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading macro`);\n      await this._importFile(\"macro\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"compendium\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading compendium`);\n      await this._importCompendium();\n    }\n  }\n\n  _renderCompleteDialog() {\n    new Dialog(\n      {\n        title: `Successful Import of ${this.adventure.name}`,\n        content: { adventure: this.adventure },\n        buttons: { two: { label: \"OK\" } },\n      },\n      {\n        classes: [\"dialog\", \"adventure-import-export\"],\n        template: \"modules/ddb-importer/handlebars/adventure/import-complete.hbs\",\n      }\n    ).render(true);\n  }\n\n  /**\n   * Search temporary items and return a match\n   *\n   * @param  {String} uuid - Item id or uuid\n   * @returns {Object} - Document\n   */\n  fetchTemporaryItem(uuid) {\n    const id = uuid.split(\".\").pop();\n    for (const [key, itemArray] of Object.entries(this.temporary)) {\n      logger.debug(`Checking temporary ${key} for ${uuid}`, itemArray);\n      const match = itemArray.find((i) => i._id === id);\n      if (match) {\n        logger.debug(`Found ${key} match for ${uuid}`, match);\n        return match;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the world actor, or actor that represents the world actor for adventure compendium build\n   *\n   * @param  {String} actorId - Actor Id\n   * @returns {Object} - Actor\n   */\n  _getWorldActor(actorId) {\n    return this.importToAdventureCompendium\n      ? this.temporary.actors.find((a) => a._id === actorId)\n      : game.actors.get(actorId);\n  }\n\n  static async _getTokenUpdateData(worldActor, sceneToken, token) {\n    const tokenData = await worldActor.getTokenDocument();\n    delete tokenData.y;\n    delete tokenData.x;\n    const jsonTokenData = duplicate(tokenData);\n    const items = [];\n    const ddbItems = sceneToken.flags.ddbItems ?? [];\n    for (const item of ddbItems) {\n      if (item.customItem) {\n        items.push(item.data);\n      } else {\n        const ddbId = getProperty(item, \"ddbId\");\n        if (Number.isInteger(ddbId)) {\n          // fetch ddbItem\n          const compendium = CompendiumHelper.getCompendiumType(item.type);\n          const itemRef = compendium.index.find((i) => i.name === item.name && i.type === item.type);\n          if (itemRef) {\n            // eslint-disable-next-line no-await-in-loop\n            const compendiumItem = await compendium.getDocument(itemRef._id);\n            const jsonItem = compendiumItem.toObject();\n            delete jsonItem._id;\n            items.push(jsonItem);\n          } else {\n            logger.error(`Unable to find compendium item ${item.name}`, { item, sceneToken });\n          }\n        } else {\n          // fetch actor item here\n          const actorItem = worldActor.items.find((i) => i.name === item.name && i.type === item.type);\n          if (actorItem) {\n            const jsonItem = actorItem.toObject();\n            delete jsonItem._id;\n            items.push(jsonItem);\n          } else {\n            logger.error(`Unable to find monster feature/item ${item.name}`, { item, sceneToken, worldActor });\n          }\n        }\n      }\n    }\n\n    if (items.length > 0) {\n      jsonTokenData.actorData = {\n        items,\n      };\n    }\n\n    if (sceneToken.flags.ddbImages?.keepToken)\n      setProperty(jsonTokenData, \"texture.src\", sceneToken.flags.ddbImages.tokenImage);\n    if (sceneToken.flags.ddbImages?.keepAvatar)\n      setProperty(jsonTokenData, \"actorData.img\", sceneToken.flags.ddbImages.avatarImage);\n\n    const updateData = mergeObject(jsonTokenData, sceneToken);\n    logger.debug(`${token.name} token data for id ${token.actorId}`, updateData);\n    return updateData;\n  }\n\n  async _revisitScene(document) {\n    let updatedData = {};\n    let tokenUpdates = [];\n    const scene = duplicate(document);\n    // this is a scene we need to update links to all items\n    logger.info(`Updating ${scene.name}, ${scene.tokens.length} tokens`);\n    let deadTokenIds = [];\n    await AdventureMunchHelpers.asyncForEach(scene.tokens, async (token) => {\n      if (token.actorId) {\n        const sceneToken = scene.flags.ddb.tokens.find((t) => t._id === token._id);\n        delete sceneToken.scale;\n        const worldActor = this._getWorldActor(token.actorId);\n        if (worldActor) {\n          const updateData = await AdventureMunch._getTokenUpdateData(worldActor, sceneToken, token);\n          if (this.importToAdventureCompendium) {\n            await document.updateSource({ tokens: updateData });\n            tokenUpdates.push(updateData);\n          } else {\n            await document.updateEmbeddedDocuments(\"Token\", [updateData], { keepId: true, keepEmbeddedIds: true });\n          }\n        } else {\n          deadTokenIds.push(token._id);\n        }\n      } else {\n        deadTokenIds.push(token._id);\n      }\n    });\n\n    if (this.importToAdventureCompendium) {\n      await document.updateSource({ tokens: tokenUpdates }, { recursive: false });\n    }\n\n    // remove a token from the scene if we have not been able to link it\n    if (!this.importToAdventureCompendium && deadTokenIds.length > 0) {\n      logger.warn(`Removing ${scene.name} tokens with no world actors`, deadTokenIds);\n      await document.deleteEmbeddedDocuments(\"Token\", deadTokenIds);\n    }\n\n    if (!this.importToAdventureCompendium) {\n      // In 0.8.x the thumbs don't seem to be generated.\n      // This code would embed the thumbnail.\n      // Consider writing this out.\n      if (!document.thumb) {\n        const thumbData = await document.createThumbnail();\n        updatedData[\"thumb\"] = thumbData.thumb;\n      }\n      await document.update(updatedData);\n    }\n  }\n\n  /**\n   * Some items need linking up or tweaking post import.\n   * @returns {Promise<>}\n   */\n  async _revisitItems() {\n    try {\n      if (this._itemsToRevisit.length > 0) {\n        let totalCount = this._itemsToRevisit.length;\n        let currentCount = 0;\n\n        await AdventureMunchHelpers.asyncForEach(this._itemsToRevisit, async (itemUuid) => {\n          const toTimer = setTimeout(() => {\n            logger.warn(`Reference update timed out.`);\n            this._renderCompleteDialog();\n            this.close();\n          }, 180000);\n          try {\n            const document = this.importToAdventureCompendium\n              ? this.fetchTemporaryItem(itemUuid)\n              : await fromUuid(itemUuid);\n            // let rawData;\n            switch (document.documentName) {\n              case \"Scene\": {\n                await this._revisitScene(document);\n                break;\n              }\n              // no default\n            }\n          } catch (err) {\n            logger.warn(`Error updating references for object ${itemUuid}`, err);\n          }\n          currentCount += 1;\n          AdventureMunch._updateProgress(totalCount, currentCount, \"References\");\n          clearTimeout(toTimer);\n        });\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-undef\n      logger.warn(`Error during reference update for object ${item}`, err);\n    }\n    logger.info(\"Revisit data complete\");\n  }\n\n  async _loadZip() {\n    const form = document.querySelector(`form[class=\"ddb-importer-window\"]`);\n    if (form.data.files.length) {\n      this.importFilename = form.data.files[0].name;\n      this.zip = await FileHelper.readBlobFromFile(form.data.files[0]).then(JSZip.loadAsync);\n    } else {\n      const selectedFile = document.querySelector(`[name=\"import-file\"]`).value;\n      this.importFilename = selectedFile;\n      this.zip = await fetch(`/${selectedFile}`)\n        .then((response) => {\n          if (response.status === 200 || response.status === 0) {\n            return Promise.resolve(response.blob());\n          } else {\n            return Promise.reject(new Error(response.statusText));\n          }\n        })\n        .then(JSZip.loadAsync);\n    }\n  }\n\n  async _importAdventureToWorld() {\n    await this._importFiles();\n    await this._revisitItems();\n  }\n\n  async _importAdventureToCompendium() {\n    try {\n      const adventureData = await this._createAdventure();\n      await this._importAdventureCompendium(adventureData);\n    } finally {\n      const folderIds = [...this.remove.folderIds];\n      if (folderIds.length > 0) {\n        logger.debug(\"Removing folders\", folderIds);\n        const results = await Folder.deleteDocuments(folderIds);\n        logger.debug(\"Delete results\", results);\n      }\n    }\n\n  }\n\n  _unpackZip() {\n    for (const key of Object.keys(this.raw)) {\n      this.raw[key] = AdventureMunchHelpers.getFiles(key, this.zip);\n    }\n  }\n\n  async _chooseScenes() {\n    const dataFiles = this.raw[\"scene\"];\n\n    logger.info(`Selecting Scenes for ${this.adventure.name} - (${dataFiles.length} possible scenes for import)`);\n\n    let fileData = [];\n\n    await AdventureMunchHelpers.asyncForEach(dataFiles, async (file) => {\n      const raw = await this.zip.file(file.name).async(\"text\");\n      const json = JSON.parse(raw);\n      const existingScene = await game.scenes.find((item) => item.id === json._id);\n      const scene = AdventureMunchHelpers.extractDocumentVersionData(json, existingScene);\n      fileData.push(scene);\n    });\n\n    return new Promise((resolve) => {\n      new Dialog(\n        {\n          title: \"Choose Scenes to Import\",\n          content: {\n            fileData: fileData,\n            cssClass: \"import-data-selection\",\n          },\n          buttons: {\n            selection: {\n              label: \"Selected\",\n              callback: async () => {\n                const formData = $(\".import-data-selection\").serializeArray();\n                const scenes = [];\n                for (let i = 0; i < formData.length; i++) {\n                  const key = formData[i].name;\n                  scenes.push(this.raw.scene.find((s) => s.name.includes(key)));\n                }\n                logger.debug(\"scenes to import\", scenes);\n                this.raw.scene = scenes;\n                resolve(this);\n              },\n            },\n            all: {\n              label: \"All\",\n              callback: async () => {\n                resolve(this);\n              },\n            },\n          },\n          default: \"all\",\n          close: async () => {\n            resolve(this);\n          },\n        },\n        {\n          width: 700,\n          classes: [\"dialog\", \"adventure-import-selection\"],\n          template: \"modules/ddb-importer/handlebars/adventure/choose-scenes.hbs\",\n        }\n      ).render(true);\n    });\n\n  }\n\n  async _importAdventure(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    const a = event.currentTarget;\n    const action = a.dataset.button;\n\n    if (action === \"world\" || action === \"compendium\") {\n      try {\n        $(\".import-progress\").toggleClass(\"import-hidden\");\n        $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n\n        this.allScenes = document.querySelector(`[name=\"all-scenes\"]`).checked;\n        game.settings.set(SETTINGS.MODULE_ID, \"adventure-policy-all-scenes\", this.allScenes);\n        this.allMonsters = document.querySelector(`[name=\"all-monsters\"]`).checked;\n        game.settings.set(SETTINGS.MODULE_ID, \"adventure-policy-all-actors-into-world\", this.allMonsters);\n        this.journalWorldActors = document.querySelector(`[name=\"journal-world-actors\"]`).checked;\n        game.settings.set(SETTINGS.MODULE_ID, \"adventure-policy-journal-world-actors\", this.journalWorldActors);\n\n        await this._loadZip();\n        this._unpackZip();\n\n        this.adventure = JSON.parse(await this.zip.file(\"adventure.json\").async(\"text\"));\n        logger.debug(\"Loaded adventure data\", { adventure: this.adventure });\n        try {\n          this.folders = JSON.parse(await this.zip.file(\"folders.json\").async(\"text\"));\n          logger.debug(\"Adventure folders\", { folders: this.folders });\n        } catch (err) {\n          logger.warn(`Folder structure file not found.`);\n        }\n\n        if (this.adventure.system !== game.data.system.id) {\n          ui.notifications.error(\n            `Invalid system for Adventure ${this.adventure.name}.  Expects ${this.adventure.system}`,\n            { permanent: true }\n          );\n          throw new Error(`Invalid system for Adventure ${this.adventure.name}.  Expects ${this.adventure.system}`);\n        }\n\n        if (parseFloat(this.adventure.version) < 4.0) {\n          ui.notifications.error(\n            `This Adventure (${this.adventure.name}) was generated for v9.  Please regenerate your config file for Adventure Muncher.`,\n            { permanent: true }\n          );\n          throw new Error(\n            `This Adventure (${this.adventure.name}) was generated for v9.  Please regenerate your config file for Adventure Muncher.`\n          );\n        }\n\n        if (action === \"compendium\") this.importToAdventureCompendium = true;\n\n        await this._createFolders();\n        if (!this.allScenes) await this._chooseScenes();\n        await this._checkForMissingData();\n        this.lookups.adventureConfig = await generateAdventureConfig(true);\n\n        if (action === \"world\") await this._importAdventureToWorld();\n        else if (action === \"compendium\") await this._importAdventureToCompendium();\n\n        $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n\n        this._renderCompleteDialog();\n\n        this.close();\n      } catch (err) {\n        $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n        ui.notifications.error(`There was an error importing ${this.importFilename}`);\n        logger.error(`Error importing file ${this.importFilename}`, err);\n        this.close();\n      } finally {\n        // eslint-disable-next-line require-atomic-updates\n        this.lookups = {};\n      }\n    }\n  }\n\n  /**\n   * Import actors from compendium into world\n   * @param {Array<Objects>} neededActors array of needed actors\n   * @returns {Promise<Array>} array of world actors\n   */\n  async ensureWorldActors(neededActors) {\n    logger.debug(\"Trying to import actors from compendium\", neededActors);\n    const monsterCompendium = CompendiumHelper.getCompendiumType(\"monster\", false);\n    const results = [];\n    await AdventureMunchHelpers.asyncForEach(neededActors, async (actor) => {\n      let worldActor = this._getWorldActor(actor.actorId);\n      if (!worldActor) {\n        logger.info(`Importing actor ${actor.name} with DDB ID ${actor.ddbId} from ${monsterCompendium.metadata.name} with compendium id ${actor.compendiumId}`);\n        try {\n          const options = { keepId: true, keepEmbeddedIds: true, temporary: this.importToAdventureCompendium };\n          worldActor = await game.actors.importFromCompendium(monsterCompendium, actor.compendiumId, { _id: actor.actorId, folder: actor.folderId }, options);\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to import actor ${actor.name} with id ${actor.compendiumId} from DDB Compendium`);\n          logger.debug(`Failed on: game.actors.importFromCompendium(monsterCompendium, \"${actor.compendiumId}\", { _id: \"${actor.actorId}\", folder: \"${actor.folderId}\" }, { keepId: true });`);\n        }\n      }\n      if (worldActor) results.push(worldActor);\n      if (this.importToAdventureCompendium && !this.temporary.actors.some((a) => a._id === actor.actorId)) {\n        this.temporary.actors.push(worldActor);\n      }\n    });\n    logger.debug(\"Actors transferred from compendium to world.\", results);\n    return results;\n  }\n\n  static async linkDDBActors(tokens) {\n    const linkedExistingTokens = await AdventureMunchHelpers.linkExistingActorTokens(tokens);\n    const newTokens = linkedExistingTokens\n      .filter((token) => token.flags.ddbActorFlags?.id && token.flags.compendiumActorId);\n\n    return Promise.all(newTokens);\n  }\n\n  /**\n   * Import actors, matching up import ids and actor ids for scene token linking\n   * @param {object} data array of actor data objects\n   * @param {boolean} temporary create the items in the world?\n   * @returns {Promise<Array>} array of world actors\n   */\n  async importRemainingActors(data) {\n    const results = [];\n    const monsterCompendium = CompendiumHelper.getCompendiumType(\"monster\", false);\n    const monsterIndex = await AdventureMunchHelpers.getCompendiumIndex(\"monster\");\n\n    logger.debug(\"Checking for the following actors in world\", data);\n    await AdventureMunchHelpers.asyncForEach(data, async (actorData) => {\n      logger.debug(`Checking for ${actorData.ddbId}`, actorData);\n      let worldActor = this._getWorldActor(actorData.actorId);\n\n      if (worldActor) {\n        logger.debug(`Actor found for ${actorData.actorId}, with name ${worldActor.name}`);\n      } else {\n        const monsterHit = monsterIndex.find((monster) =>\n          monster.flags?.ddbimporter?.id && monster.flags.ddbimporter.id == actorData.ddbId\n        );\n        if (monsterHit) {\n          logger.info(`Importing actor ${monsterHit.name} with DDB ID ${actorData.ddbId} from ${monsterCompendium.metadata.name} with compendium id ${monsterHit._id} (temporary? ${this.importToAdventureCompendium})`);\n          try {\n            const actorOverride = { _id: actorData.actorId, folder: actorData.folderId };\n            const options = { keepId: true, keepEmbeddedIds: true, temporary: this.importToAdventureCompendium };\n            // eslint-disable-next-line require-atomic-updates\n            worldActor = await game.actors.importFromCompendium(monsterCompendium, monsterHit._id, actorOverride, options);\n          } catch (err) {\n            logger.error(err);\n            logger.warn(`Unable to import actor ${monsterHit.name} with id ${monsterHit._id} from DDB Compendium`);\n            logger.debug(`Failed on: game.actors.importFromCompendium(monsterCompendium, \"${monsterHit._id}\", { _id: \"${actorData.actorId}\", folder: \"${actorData.folderId}\" }, { keepId: true });`);\n          }\n        } else {\n          logger.error(\"Actor not found in compendium\", actorData);\n        }\n      }\n      if (worldActor) results.push(worldActor);\n      if (worldActor && this.importToAdventureCompendium && !this.temporary.actors.some((a) => worldActor.flags.ddbimporter.id == a.flags.ddbimporter.id)) {\n        this.temporary.actors.push(worldActor);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Generates actors for tokens on a scene\n   * @param {object} scene the scene to generate actors for\n   * @returns {Promise<Array>} array of world actors\n   */\n  async generateTokenActors(scene) {\n    logger.debug(`Token Actor generation for ${scene.name} starting`);\n    const tokens = await AdventureMunch.linkDDBActors(scene.tokens);\n    const neededActors = tokens\n      .map((token) => {\n        return {\n          name: token.name,\n          ddbId: token.flags.ddbActorFlags.id,\n          actorId: token.actorId,\n          compendiumId: token.flags.compendiumActorId,\n          folderId: token.flags.actorFolderId\n        };\n      })\n      .filter((obj, pos, arr) => {\n        // we only need to create 1 actor per actorId\n        return arr.map((mapObj) => mapObj[\"actorId\"]).indexOf(obj[\"actorId\"]) === pos;\n      });\n\n    const results = await this.ensureWorldActors(neededActors);\n    logger.debug(`Token Actor generation for ${scene.name} complete`, results);\n    return results;\n  }\n\n  async _loadDocumentAssets(data, importType) {\n\n    data.flags.importid = data._id;\n\n    if (data.img) {\n      // eslint-disable-next-line require-atomic-updates\n      data.img = await this.importImage(data.img);\n    }\n    if (data.thumb) {\n      // eslint-disable-next-line require-atomic-updates\n      data.thumb = await this.importImage(data.thumb);\n    }\n    if (data?.token?.img) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"token\", data, { img: true, texture: false });\n    }\n    if (data.toke?.texture?.src) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"token\", data);\n    }\n    if (data?.prototypeToken?.img) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"prototypeToken\", data, { img: true, texture: false });\n    }\n    if (data.prototypeToken?.texture?.src) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"prototypeToken\", data);\n    }\n\n    if (data?.items?.length) {\n      await AdventureMunchHelpers.asyncForEach(data.items, async (item) => {\n        if (item.img) {\n          // eslint-disable-next-line require-atomic-updates\n          item.img = await this.importImage(item.img);\n        }\n      });\n    }\n\n    if (data?.pages?.length) {\n      await AdventureMunchHelpers.asyncForEach(data.pages, async (page) => {\n        if (page.src) {\n          // eslint-disable-next-line require-atomic-updates\n          page.src = await this.importImage(page.src);\n        }\n      });\n    }\n\n    if (importType === \"Scene\") {\n      if (data.tokens) {\n        await this.generateTokenActors(data);\n      }\n      if (data.flags[\"perfect-vision\"] && Array.isArray(data.flags[\"perfect-vision\"])) {\n        data.flags[\"perfect-vision\"] = {};\n      }\n    } else if (importType === \"Playlist\") {\n      await AdventureMunchHelpers.asyncForEach(data.sounds, async (sound) => {\n        if (sound.path) {\n          // eslint-disable-next-line require-atomic-updates\n          sound.path = await this.importImage(sound.path);\n        }\n      });\n    } else if (importType === \"RollTable\") {\n      await AdventureMunchHelpers.asyncForEach(data.results, async (result) => {\n        if (result.img) {\n          // eslint-disable-next-line require-atomic-updates\n          result.img = await this.importImage(result.img);\n        }\n        if (result.resultId) {\n          data.flags.ddb.needRevisit = true;\n        }\n        logger.debug(`Updating DDB links for ${data.name}`);\n        // eslint-disable-next-line require-atomic-updates\n        data.text = this.foundryCompendiumReplace(data.text);\n      });\n    } else if (importType === \"JournalEntry\" && data.pages) {\n      await AdventureMunchHelpers.asyncForEach(data.pages, async (page) => {\n        if (page.text.content) {\n          const journalImages = AdventureMunchHelpers.reMatchAll(\n            /(src|href)=\"(?!http(?:s*):\\/\\/)([\\w0-9\\-._~%!$&'()*+,;=:@/]*)\"/,\n            page.text.content\n          );\n          if (journalImages) {\n            logger.debug(`Updating Image links for ${page.name}`);\n            await AdventureMunchHelpers.asyncForEach(journalImages, async (result) => {\n              const path = await this.importImage(result[2]);\n              page.text.content = page.text.content.replace(result[0], `${result[1]}=\"${path}\"`);\n            });\n          }\n          logger.debug(`Updating DDB links for ${page.name}`);\n          page.text.content = this.foundryCompendiumReplace(page.text.content);\n        }\n      });\n    }\n\n    return data;\n\n  }\n\n\n  async _createAdventure() {\n    logger.debug(\"Packing up adventure\");\n    if (this.allMonsters) await this.importRemainingActors(this.adventure.required.monsterData, true);\n    const itemData = await AdventureMunchHelpers.getDocuments(\"items\", this.adventure.required.items ?? [], {}, true);\n    const spellData = await AdventureMunchHelpers.getDocuments(\"spells\", this.adventure.required.spells ?? [], {}, true);\n\n    await this._importFile(\"journal\", [], true);\n    await this._importFile(\"scene\", [], true);\n    await this._importFile(\"table\", [], true);\n    // await this._importFile(\"Macro\", [], true);\n    // await this._importFile(\"Card\", [], true);\n    // await this._importFile(\"Playlist\", [], true);\n    // await this._importFile(\"Combat\", [], true);\n    // await this._importFile(\"Actor\", [], true);\n    // await this._importFile(\"Item\", [], true);\n\n    const ddbSource = CONFIG.DDB.sources.find((source) => source.description === this.adventure.name);\n    const image = ddbSource?.avatarURL\n      ? ddbSource.avatarURL\n      : await this.importImage(\"assets/images/cover.jpg\");\n\n    await this._revisitItems();\n\n    const data = {\n      img: image,\n      name: this.adventure.name,\n      description: this.adventure.description,\n      folders: this.temporary.folders.map((doc) => doc.toObject()),\n      combats: [],\n      items: itemData.concat(spellData).map((doc) => doc.toObject()),\n      // actors: actorData.map((doc) => doc.toObject()),\n      actors: this.temporary.actors.map((doc) => doc.toObject()),\n      journal: this.temporary.journals.map((doc) => doc.toObject()),\n      scenes: this.temporary.scenes.map((doc) => doc.toObject()),\n      tables: this.temporary.tables.map((doc) => doc.toObject()),\n      macros: [],\n      cards: [],\n      playlists: [],\n\n      flags: {\n        ddbimporter: {\n          isDDBAdventure: true,\n          adventure: {\n            required: this.adventure.required,\n            revisitUuids: this._itemsToRevisit,\n          },\n        },\n        core: { sheetClass: \"ddb-importer.DDBAdventureImporter\" },\n      },\n    };\n\n    return data;\n  }\n\n\n  async _importAdventureCompendium(adventureData) {\n    try {\n      const pack = CompendiumHelper.getCompendiumType(\"adventure\");\n      const existingAdventure = pack.index.find((i) => i.name === adventureData.name);\n\n      let adventure;\n      if (existingAdventure) {\n        logger.debug(\"Deleting existing adventure\", existingAdventure._id);\n        adventureData._id = existingAdventure._id;\n        const loadedAdventure = await pack.getDocument(existingAdventure._id);\n        adventure = await loadedAdventure.update(adventureData, { diff: false, recursive: false });\n        ui.notifications.info(game.i18n.format(\"ADVENTURE.UpdateSuccess\", { name: adventureData.name }));\n      } else {\n        adventure = await Adventure.createDocuments([adventureData], {\n          pack: pack.metadata.id,\n          keepId: true,\n          keepEmbeddedIds: true\n        });\n        ui.notifications.info(game.i18n.format(\"ADVENTURE.CreateSuccess\", { name: adventureData.name }));\n\n      }\n\n      // console.warn(\"Adventure!\", {\n      //   pack,\n      //   item: adventureData,\n      //   adventure,\n      //   temp: this.temporary,\n      //   thisAdventure: this.adventure,\n      // });\n      return adventure;\n    } catch (err) {\n      logger.error(\"error building adventure\", { err, this: this });\n      throw err;\n    }\n  }\n\n  async _importCompendium(folderName) {\n    let totalCount = 0;\n    let currentCount = 0;\n    const dataFiles = AdventureMunchHelpers.getFiles(folderName, this.zip);\n    logger.info(`Importing ${this.adventure.name} - Compendium (${dataFiles.length} items)`);\n    totalCount = dataFiles.length;\n\n    await AdventureMunchHelpers.asyncForEach(dataFiles, async (file) => {\n      const rawData = await this.zip.file(file.name).async(\"text\");\n      const data = JSON.parse(rawData);\n\n      const pack = CompendiumHelper.createIfNotExists({ type: data.info.entity, label: data.info.label }).compendium;\n      await pack.getIndex();\n\n      totalCount += data.items.length;\n      await AdventureMunchHelpers.asyncForEach(data.items, async (item) => {\n        let obj;\n        let entry = pack.index.find((e) => e.name === item.name);\n\n        // eslint-disable-next-line require-atomic-updates\n        item = await this._loadDocumentAssets(item, data.info.entity, true);\n\n        switch (data.info.entity) {\n          case \"Adventure\":\n            obj = this._importAdventureCompendium(item);\n            break;\n          case \"Item\":\n            obj = new Item(item, { temporary: true, keepId: true, keepEmbeddedIds: true });\n            break;\n          case \"Actor\":\n            obj = new Actor(item, { temporary: true, keepId: true, keepEmbeddedIds: true });\n            break;\n          case \"Scene\":\n            obj = new Scene(item, { temporary: true, keepId: true, keepEmbeddedIds: true });\n            break;\n          case \"JournalEntry\":\n            obj = new JournalEntry(item, { temporary: true, keepId: true, keepEmbeddedIds: true });\n            break;\n          case \"Macro\":\n            obj = new Macro(item, { temporary: true, keepId: true, keepEmbeddedIds: true });\n            break;\n          case \"RollTable\":\n            obj = new RollTable(item, { temporary: true, keepId: true, keepEmbeddedIds: true });\n            break;\n          case \"Playlist\":\n            obj = new Playlist(item, { temporary: true, keepId: true, keepEmbeddedIds: true });\n            break;\n          // no default\n        }\n\n        if (!entry && obj && data.info.entity !== \"Adventure\") {\n          const compendiumItem = await pack.importDocument(obj, { keepId: true, keepEmbeddedIds: true });\n\n          if (JSON.stringify(item).match(this.pattern) || JSON.stringify(item).match(this.altpattern)) {\n            this._itemsToRevisit.push(`Compendium.${pack.metadata.package}.${pack.metadata.name}.${compendiumItem.id}`);\n          }\n        }\n        currentCount += 1;\n        AdventureMunch._updateProgress(totalCount, currentCount, \"Compendium\");\n      });\n      currentCount += 1;\n      AdventureMunch._updateProgress(totalCount, currentCount, \"Compendium\");\n    });\n  }\n\n  // import a scene file\n  async _importRenderedSceneFile(data, overwriteEntity) {\n    if (!AdventureMunchHelpers.findEntityByImportId(\"scenes\", data._id) || overwriteEntity || this.importToAdventureCompendium) {\n      await AdventureMunchHelpers.asyncForEach(data.tokens, async (token) => {\n        // eslint-disable-next-line require-atomic-updates\n        if (token.img) token.img = await this.importImage(token.img);\n        if (token.prototypeToken?.texture?.src) {\n          // eslint-disable-next-line require-atomic-updates\n          token.prototypeToken.texture.src = await this.importImage(token.prototypeToken.texture.src);\n        }\n      });\n\n      await AdventureMunchHelpers.asyncForEach(data.sounds, async (sound) => {\n        // eslint-disable-next-line require-atomic-updates\n        sound.path = await this.importImage(sound.path);\n      });\n\n      await AdventureMunchHelpers.asyncForEach(data.notes, async (note) => {\n        // eslint-disable-next-line require-atomic-updates\n        if (note.icon) note.icon = await this.importImage(note.icon, true);\n        // eslint-disable-next-line require-atomic-updates\n        if (note.texture?.src) note.texture.src = await this.importImage(note.texture.src, true);\n      });\n\n      await AdventureMunchHelpers.asyncForEach(data.tiles, async (tile) => {\n        // eslint-disable-next-line require-atomic-updates\n        tile.img = await this.importImage(tile.img);\n      });\n\n      if (overwriteEntity) await Scene.deleteDocuments([data._id]);\n      const options = { keepId: true, keepEmbeddedIds: true, temporary: this.importToAdventureCompendium };\n      const scene = await Scene.create(data, options);\n      this._itemsToRevisit.push(`Scene.${scene.id}`);\n      if (this.importToAdventureCompendium) this.temporary.scenes.push(scene);\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  async _importRenderedFile(typeName, data, needRevisit, overwriteIds) {\n    const overwriteEntity = overwriteIds.includes(data._id);\n    const options = { keepId: true, keepEmbeddedIds: true, temporary: this.importToAdventureCompendium };\n    switch (typeName) {\n      case \"Scene\": {\n        await this._importRenderedSceneFile(data, overwriteEntity);\n        break;\n      }\n      case \"Actor\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"actors\", data._id)) {\n          let actor = await Actor.create(data, options);\n          await actor.update({ [`prototypeToken.actorId`]: actor.id });\n          if (needRevisit) this._itemsToRevisit.push(`Actor.${actor.id}`);\n          if (this.importToAdventureCompendium) this.temporary.actors.push(actor);\n        }\n        break;\n      case \"Item\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"items\", data._id)) {\n          let item = await Item.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`Item.${item.id}`);\n          if (this.importToAdventureCompendium) this.temporary.items.push(item);\n        }\n        break;\n      case \"JournalEntry\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"journal\", data._id)) {\n          let journal = await JournalEntry.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`JournalEntry.${journal.id}`);\n          if (this.importToAdventureCompendium) this.temporary.journals.push(journal);\n        }\n        break;\n      case \"RollTable\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"tables\", data._id)) {\n          let rolltable = await RollTable.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`RollTable.${rolltable.id}`);\n          if (this.importToAdventureCompendium) this.temporary.tables.push(rolltable);\n        }\n        break;\n      case \"Playlist\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"playlists\", data._id)) {\n          data.name = `${this.adventure.name}.${data.name}`;\n          let playlist = await Playlist.create(data, options);\n          if (this.importToAdventureCompendium) this.temporary.playlists.push(playlist);\n        }\n        break;\n      case \"Macro\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"macros\", data._id)) {\n          let macro = await Macro.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`Macro.${macro.id}`);\n          if (this.importToAdventureCompendium) this.temporary.macros.push(macro);\n        }\n        break;\n      // no default\n    }\n  }\n\n  async _checkForDataUpdates(type) {\n    const importType = AdventureMunchHelpers.getImportType(type);\n    const dataFiles = this.raw[type];\n\n    logger.info(`Checking ${this.adventure.name} - ${importType} (${dataFiles.length} for updates)`);\n\n    let fileData = [];\n    let hasVersions = false;\n\n    await AdventureMunchHelpers.asyncForEach(dataFiles, async (file) => {\n      const raw = await this.zip.file(file.name).async(\"text\");\n      const json = JSON.parse(raw);\n      if (!hasVersions && json?.flags?.ddb?.versions) {\n        hasVersions = true;\n      }\n      switch (importType) {\n        case \"Scene\": {\n          const existingScene = await game.scenes.find((item) => item.id === json._id);\n          const scene = AdventureMunchHelpers.extractDocumentVersionData(json, existingScene);\n          const sceneVersions = scene.flags?.ddb?.versions?.importer;\n          if (existingScene) {\n            if (\n              sceneVersions\n              && (sceneVersions.metaVersionChanged\n                || sceneVersions.muncherVersionChanged\n                || sceneVersions.foundryVersionNewer)\n            ) {\n              fileData.push(scene);\n            }\n          } else if (sceneVersions && sceneVersions.foundryVersionNewer) {\n            fileData.push(scene);\n          }\n          break;\n        }\n        // no default\n      }\n    });\n\n    return new Promise((resolve) => {\n      if (hasVersions && fileData.length > 0) {\n        new Dialog(\n          {\n            title: `${importType} updates`,\n            content: {\n              dataType: type,\n              dataTypeDisplay: importType,\n              fileData: fileData,\n              cssClass: \"import-data-updates\",\n            },\n            buttons: {\n              confirm: {\n                label: \"Confirm\",\n                callback: async () => {\n                  const formData = $(\".import-data-updates\").serializeArray();\n                  let ids = [];\n                  let dataType = \"\";\n                  for (let i = 0; i < formData.length; i++) {\n                    const key = formData[i].name;\n                    if (key.startsWith(\"new_\")) {\n                      ids.push(key.substr(4));\n                    } else if (key === \"type\") {\n                      dataType = formData[i].value;\n                    }\n                  }\n                  resolve(this._importFile(dataType, ids));\n                },\n              },\n            },\n            default: \"confirm\",\n            close: async () => {\n              resolve(this._importFile(type));\n            },\n          },\n          {\n            width: 700,\n            classes: [\"dialog\", \"adventure-import-updates\"],\n            template: \"modules/ddb-importer/handlebars/adventure/import-updates.hbs\",\n          }\n        ).render(true);\n      } else {\n        resolve(this._importFile(type));\n      }\n    });\n  }\n\n  async _importTokenImage(tokenType, data, { img = false, texture = true } = {}) {\n    if (data[tokenType]?.randomImg) {\n      const imgFilepaths = data[tokenType].img.split(\"/\");\n      const imgFilename = imgFilepaths.reverse()[0];\n      const imgFilepath = data[tokenType].img.replace(imgFilename, \"\");\n\n      const filesToUpload = Object.values(this.zip.files).filter((file) => {\n        return !file.dir && file.name.includes(imgFilepath);\n      });\n\n      let adventurePath = this.adventure.name.replace(/[^a-z0-9]/gi, \"_\");\n\n      if (img) {\n        const imgPath = `${this._importPathData.current}/${adventurePath}/${data[tokenType].img}`;\n        data[tokenType].img = imgPath;\n      }\n      if (texture) {\n        const imgPath = `${this._importPathData.current}/${adventurePath}/${data[tokenType].texture.src}`;\n        data[tokenType].texture.src = imgPath;\n      }\n\n      if (filesToUpload.length > 0) {\n        let currentCount = 1;\n\n        await AdventureMunchHelpers.asyncForEach(filesToUpload, async (file) => {\n          await this.importImage(file.name);\n          currentCount += 1;\n          AdventureMunch._updateProgress(filesToUpload.length, currentCount, \"Token Image\");\n        });\n      }\n    } else {\n\n      if (img) {\n        // eslint-disable-next-line require-atomic-updates\n        data[tokenType].img = await this.importImage(data[tokenType].img);\n      }\n      if (texture) {\n        // eslint-disable-next-line require-atomic-updates\n        data[tokenType].texture.src = await this.importImage(data[tokenType].texture.src);\n      }\n    }\n\n    return data;\n  }\n\n  async _importFile(type, overwriteIds = []) {\n    let totalCount = 0;\n    let currentCount = 0;\n\n    logger.info(`IDs to overwrite of type ${type}: ${JSON.stringify(overwriteIds)}`);\n\n    const importType = AdventureMunchHelpers.getImportType(type);\n    const dataFiles = this.raw[type];\n\n    logger.info(`Importing ${this.adventure.name} - ${importType} (${dataFiles.length} items)`);\n\n    totalCount = dataFiles.length;\n\n    // eslint-disable-next-line complexity\n    await AdventureMunchHelpers.asyncForEach(dataFiles, async (file) => {\n      const rawData = await this.zip.file(file.name).async(\"text\");\n      let data = JSON.parse(rawData);\n      let needRevisit = false;\n\n      // let pattern = /(\\@[a-z]*)(\\[)([a-z0-9]*|[a-z0-9\\.]*)(\\])/gmi\n      if (rawData.match(this.pattern) || rawData.match(this.altpattern)) needRevisit = true;\n\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._loadDocumentAssets(data, importType);\n\n      if (data.flags.ddb.needRevisit) needRevisit = true;\n\n      setProperty(data.flags, \"ddbimporter.version\", CONFIG.DDBI.version);\n\n      if (importType !== \"Playlist\" && importType !== \"Compendium\") {\n        if (this.lookups.folders[data.folder]) {\n          logger.debug(\n            `Adding data to subfolder importkey = ${data.folder}, folder = ${\n              this.lookups.folders[data.folder]\n            }`\n          );\n          data.folder = this.lookups.folders[data.folder];\n        } else {\n          logger.debug(\n            `Adding data to subfolder importkey = ${data.folder}, folder = ${this.lookups.folders[\"null\"]}`\n          );\n          if (this.adventure?.options?.folders) {\n            data.folder = this.lookups.folders[\"null\"];\n          } else {\n            data.folder = this.lookups.folders[importType];\n          }\n        }\n      }\n\n      await this._importRenderedFile(importType, data, needRevisit, overwriteIds);\n\n      currentCount += 1;\n      AdventureMunch._updateProgress(totalCount, currentCount, importType);\n    });\n  }\n\n  /**\n   * Replaced ddb links with compendium or world links\n   * @param {Document} doc HTML document to act on\n   * @param {Object} options provide journalWorldActors and actorData if linking to world actors\n   * @returns {Document} HTML document with modified links\n   */\n  replaceLookupLinks(doc) {\n    const lookups = this.lookups.adventureConfig.lookups;\n    const actorData = this.adventure.required?.monsterData ?? [];\n\n    for (const lookupKey in AdventureMunch.COMPENDIUM_MAP) {\n      const compendiumLinks = doc.querySelectorAll(`a[href*=\"ddb://${lookupKey}/\"]`);\n      const lookupRegExp = new RegExp(`ddb://${lookupKey}/([0-9]*)`);\n      compendiumLinks.forEach((node) => {\n        const lookupMatch = node.outerHTML.match(lookupRegExp);\n        const lookupValue = lookups[AdventureMunch.COMPENDIUM_MAP[lookupKey]];\n        if (lookupValue) {\n          const worldActorLink = this.journalWorldActors && [\"monsters\"].includes(lookupKey);\n          const lookupEntry = worldActorLink\n            ? actorData.find((a) => a.ddbId === parseInt(lookupMatch[1]))\n            : lookupValue.find((e) => e.id == lookupMatch[1]);\n\n          if (lookupEntry) {\n            const pageLink = lookupEntry.pageId ? `.JournalEntryPage.${lookupEntry.pageId}` : \"\";\n            const linkStub = lookupEntry.headerLink ? `#${lookupEntry.headerLink}` : \"\";\n            const linkType = worldActorLink ? \"UUID\" : \"Compendium\";\n            const linkBody = worldActorLink\n              ? `Actor.${lookupEntry.actorId}`\n              : `${lookupEntry.compendium}.${lookupEntry._id}${pageLink}${linkStub}`;\n            doc.body.innerHTML = doc.body.innerHTML.replace(node.outerHTML, `@${linkType}[${linkBody}]{${node.textContent}}`);\n          } else {\n            logger.warn(`NO Lookup Compendium Entry for ${node.outerHTML}`);\n          }\n        }\n      });\n    }\n\n    return doc;\n  }\n\n  /**\n   * Replaced ddb links with compendium or world links, or links back to DDB\n   * @param {Document} doc HTML document to act on\n   * @param {Object} options provide journalWorldActors and actorData if linking to world actors\n   * @returns {Document} HTML document with modified links\n   */\n  foundryCompendiumReplace(text) {\n    // replace the ddb:// entries with known compendium look ups if we have them\n    // ddb://spells\n    // ddb://magicitems || weapons || adventuring-gear || armor\n    // ddb://monsters\n\n    let doc = this.replaceLookupLinks(utils.htmlToDoc(text));\n\n    // vehicles - if not imported, link to DDB\n    const compendiumLinks = doc.querySelectorAll(\"a[href*=\\\"ddb://vehicles/\\\"]\");\n    const lookupRegExp = /ddb:\\/\\/vehicles\\/([0-9]*)/g;\n    compendiumLinks.forEach((node) => {\n      const target = node.outerHTML;\n      const lookupMatch = node.outerHTML.match(lookupRegExp);\n      const lookupValue = this.lookups.adventureConfig.lookups[\"vehicles\"];\n      if (lookupMatch) {\n        const lookupEntry = lookupValue.find((e) => e.id == lookupMatch[1]);\n        if (lookupEntry) {\n          node.setAttribute(\"href\", `https://www.dndbeyond.com${lookupEntry.url}`);\n          doc.body.innerHTML = doc.body.innerHTML.replace(target, node.outerHTML);\n        } else {\n          logger.warn(`NO Vehicle Lookup Entry for ${node.outerHTML}`);\n        }\n      } else {\n        logger.warn(`NO Vehicle Lookup Match for ${node.outerHTML}`);\n      }\n    });\n\n    // final replace in case of failure\n    // there is a chance that the adventure references items or monsters we don't have access to\n    // in this case attempt to link to DDB instead of compendium doc\n    for (const lookupKey in AdventureMunch.COMPENDIUM_MAP) {\n      const compendiumLinks = doc.querySelectorAll(`a[href*=\"ddb://${lookupKey}/\"]`);\n      // logger.debug(`final replace for missing ${lookupKey} references`, compendiumLinks);\n\n      compendiumLinks.forEach((node) => {\n        const target = node.outerHTML;\n        const ddbStub = AdventureMunch.DDB_MAP[lookupKey];\n        const ddbNameGuess = node.textContent.toLowerCase().replace(\" \", \"-\").replace(/[^0-9a-z-]/gi, '');\n        logger.warn(`No Compendium Entry for ${node.outerHTML} attempting to guess a link to DDB`);\n\n        node.setAttribute(\"href\", `https://www.dndbeyond.com/${ddbStub}/${ddbNameGuess}`);\n        doc.body.innerHTML = doc.body.innerHTML.replace(target, node.outerHTML);\n      });\n    }\n\n    return doc.body.innerHTML;\n  }\n\n  static _updateProgress(total, count, type) {\n    const localizedType = `ddb-importer.label.${type}`;\n    $(\".import-progress-bar\")\n      .width(`${Math.trunc((count / total) * 100)}%`)\n      .html(\n        `<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${game.i18n.localize(localizedType)})...</span>`\n      );\n  }\n\n  static _progressNote(note) {\n    $(\".import-progress-bar\").html(`<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${note})...</span>`);\n  }\n}\n","import logger from \"../../logger.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport { parseSpells } from \"../spells.js\";\nimport { parseItems } from \"../items.js\";\nimport AdventureMunch from \"./AdventureMunch.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBMonsterFactory from \"../DDBMonsterFactory.js\";\nimport DDBMuncher from \"../DDBMuncher.js\";\n\nexport default class AdventureMunchHelpers {\n\n  static unPad(match, p1) {\n    if (isNaN(parseInt(p1))) {\n      return p1;\n    } else {\n      return parseInt(p1);\n    }\n  }\n\n  /**\n   * Async for each loop\n   *\n   * @param  {array} array - Array to loop through\n   * @param  {function} callback - Function to apply to each array item loop\n   */\n  static async asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index += 1) {\n      // eslint-disable-next-line callback-return, no-await-in-loop\n      await callback(array[index], index, array);\n    }\n  }\n\n  /**\n   * Find an entity by the import key.\n   * @param  {string} type - Entity type to search for\n   * @param  {string} id - Entity Id\n   * @returns {object} - Entity Object Data\n   */\n  static findEntityByImportId(type, id) {\n    return game.data[type].find((item) => item._id === id);\n    // item.flags.importid === id\n  }\n\n\n  /**\n   * Async replace for all matching patterns\n   *\n   * @param  {string} str - Original string to replace values in\n   * @param  {string} regex - regex for matching\n   * @param  {function} asyncFn - async function to run on each match\n   * @returns {string}\n   */\n  static async replaceAsync(str, regex, asyncFn) {\n    const promises = [];\n    str.replace(regex, (match, ...args) => {\n      const promise = asyncFn(match, ...args);\n      promises.push(promise);\n    });\n    const data = await Promise.all(promises);\n    return str.replace(regex, () => data.shift());\n  }\n\n  /**\n   * Returns the difference between object 1 and 2\n   * @param  {object} obj1\n   * @param  {object} obj2\n   * @returns {object}\n   */\n  static diff(obj1, obj2) {\n    let result = {};\n    for (const key in obj1) {\n      if (obj2[key] != obj1[key]) result[key] = obj2[key];\n      // eslint-disable-next-line valid-typeof\n      if (typeof obj2[key] == 'array' && typeof obj1[key] == 'array')\n        result[key] = this.diff(obj1[key], obj2[key]);\n      if (typeof obj2[key] == 'object' && typeof obj1[key] == 'object')\n        result[key] = this.diff(obj1[key], obj2[key]);\n    }\n    return result;\n  }\n\n  /**\n   * Replaces matchAll as it's not yet available in Electron App\n   * @param   {string} regex  RegEx to use\n   * @param   {string} string String to match on\n   * @returns {Array}\n   */\n  static reMatchAll(regexp, string) {\n    const matches = string.match(new RegExp(regexp, \"gm\"));\n    if (matches) {\n      let start = 0;\n      return matches.map((group0) => {\n        const match = group0.match(regexp);\n        match.index = string.indexOf(group0, start);\n        start = match.index;\n        return match;\n      });\n    }\n    return matches;\n  }\n\n  /**\n   * Uploads a file to Foundry without the UI Notification\n   * @param  {string} source\n   * @param  {string} path\n   * @param  {blog} file\n   * @param  {object} options\n   */\n  static async UploadFile(source, path, file, options) {\n    if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n      return AdventureMunchHelpers.ForgeUploadFile(path, file);\n    }\n\n    const fd = new FormData();\n    fd.set(\"source\", source);\n    fd.set(\"target\", path);\n    fd.set(\"upload\", file);\n    Object.entries(options).forEach((o) => fd.set(...o));\n\n    const request = await fetch(FilePicker.uploadURL, { method: \"POST\", body: fd });\n    if (request.status === 413) {\n      return ui.notifications.error(game.i18n.localize(\"FILES.ErrorTooLarge\"));\n    } else if (request.status !== 200) {\n      return ui.notifications.error(game.i18n.localize(\"FILES.ErrorSomethingWrong\"));\n    }\n    return undefined;\n  }\n\n  /**\n   * Uploads a file to Forge Asset Library without the UI Notification\n   * @param  {string} source\n   * @param  {string} path\n   * @param  {blog} file\n   * @param  {object} options\n   */\n  static async ForgeUploadFile(path, file) {\n    const fd = new FormData();\n    fd.append(\"file\", file);\n    fd.append(\"path\", `${path}/${file.name}`);\n\n    const response = await ForgeAPI.call(\"assets/upload\", fd);\n    if (!response || response.error) {\n      ui.notifications.error(response ? response.error : \"An unknown error occured accessing The Forge API\");\n      return false;\n    } else {\n      return { path: response.url };\n    }\n  }\n\n  /**\n   * Browse files using FilePicker\n   * @param  {string} source\n   * @param  {string} target\n   * @param  {object} options={}\n   */\n  static async BrowseFiles(source, target, options = {}) {\n    if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n      if (target.startsWith(ForgeVTT.ASSETS_LIBRARY_URL_PREFIX)) source = \"forgevtt\";\n\n      if (source === \"forgevtt\") {\n        return AdventureMunchHelpers.BrowseForgeFiles(source, target, options);\n      }\n    }\n\n    return FilePicker.browse(source, target, options);\n  }\n\n  /**\n   * Browse files using Forge API\n   * @param  {string} source\n   * @param  {string} target\n   * @param  {object} options={}\n   */\n  static async BrowseForgeFiles(source, target, options = {}) {\n    if (target.startsWith(ForgeVTT.ASSETS_LIBRARY_URL_PREFIX)) {\n      if (options.wildcard)\n        options.wildcard = target;\n      target = target.slice(ForgeVTT.ASSETS_LIBRARY_URL_PREFIX.length);\n      target = target.split(\"/\").slice(1, -1).join(\"/\"); // Remove userid from url to get target path\n    }\n\n    const response = await ForgeAPI.call('assets/browse', { path: decodeURIComponent(target), options });\n    if (!response || response.error) {\n      ui.notifications.error(response ? response.error : \"An unknown error occured accessing The Forge API\");\n      return { target, dirs: [], files: [], gridSize: null, private: false, privateDirs: [], extensions: options.extensions };\n    }\n    // Should be decodeURIComponent but FilePicker's _onPick needs to do encodeURIComponent too, but on each separate path.\n    response.target = decodeURI(response.folder);\n    delete response.folder;\n    response.dirs = response.dirs.map((d) => d.path.slice(0, -1));\n    response.files = response.files.map((f) => f.url);\n    // 0.5.6 specific\n    response.private = true;\n    response.privateDirs = [];\n    response.gridSize = null;\n    response.extensions = options.extensions;\n    return response;\n  }\n\n  static async loadMissingDocuments(type, docIds) {\n    return new Promise((resolve) => {\n      if (docIds && docIds.length > 0) {\n        switch (type) {\n          case \"item\":\n            logger.debug(`Importing missing ${type}s from DDB`, docIds);\n            AdventureMunch._progressNote(`Importing ${docIds.length} missing ${type}s from DDB`);\n            resolve(parseItems(docIds));\n            break;\n          case \"monster\": {\n            try {\n              const tier = game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n              const tiers = PatreonHelper.getPatreonTiers(tier);\n              if (tiers.all) {\n                logger.debug(`Importing missing ${type}s from DDB`, docIds);\n                AdventureMunch._progressNote(`Importing ${docIds.length} missing ${type}s from DDB`);\n                const monsterFactory = new DDBMonsterFactory({ munchNote: DDBMuncher.munchNote });\n                resolve(monsterFactory.processIntoCompendium(docIds));\n              } else {\n                logger.warn(`Unable to import missing ${type}s from DDB - link to patreon or use your own proxy`, docIds);\n                ui.notifications.warn(`Unable to import missing ${type}s from DDB - link to patreon or use your own proxy`, { permanent: true });\n                resolve([]);\n              }\n            } catch (err) {\n              if (err instanceof SyntaxError) {\n                ui.notifications.error(\"Error fetching monsters, likely cause outdated ddb-proxy\", { permanent: true });\n              } else {\n                throw err;\n              }\n            }\n            break;\n          }\n          case \"spell\":\n            logger.debug(`Importing missing ${type}s from DDB`);\n            AdventureMunch._progressNote(`Missing spells detected, importing from DDB`);\n            // we actually want all spells, because monsters don't just use spells from a single source\n            resolve(parseSpells());\n            break;\n          // no default\n        }\n      } else {\n        resolve([]);\n      }\n    });\n  }\n\n  static async getCompendiumIndex(type) {\n    return new Promise((resolve) => {\n      const compendium = CompendiumHelper.getCompendiumType(type);\n      const fields = (type === \"monster\")\n        ? [\"flags.ddbimporter.id\"]\n        : [\"flags.ddbimporter.definitionId\"];\n\n      const compendiumIndex = compendium.getIndex({ fields: fields });\n      resolve(compendiumIndex);\n    });\n  }\n\n  static async checkForMissingDocuments(type, ids) {\n    const index = await AdventureMunchHelpers.getCompendiumIndex(type);\n    // console.warn(`${type} index`, index);\n\n    return new Promise((resolve) => {\n      const missingIds = ids.filter((id) => {\n        switch (type) {\n          case \"monster\":\n            return !index.some((i) => i.flags?.ddbimporter?.id && String(i.flags.ddbimporter.id) == String(id));\n          case \"spell\":\n          case \"item\":\n            return !index.some((i) => i.flags?.ddbimporter?.definitionId && String(i.flags.ddbimporter.definitionId) == String(id));\n          default:\n            return false;\n        }\n      });\n      logger.debug(`${type} missing ids`, missingIds);\n      const missingDocuments = AdventureMunchHelpers.loadMissingDocuments(type, missingIds);\n      logger.debug(`${type} missing`, missingDocuments);\n      resolve(missingDocuments);\n    });\n  }\n\n  /**\n   * Get documents for ids from compendium\n   * @param {string} type compendium type\n   * @param {Array} ids array of ddb ids\n   * @param {boolean} temporary create the items in the world?\n   * @returns {Promise<Array>} array of world actors\n   */\n  static async getDocuments(type, ids, overrides = {}, temporary = false) {\n    const compendium = CompendiumHelper.getCompendiumType(type);\n    const index = await AdventureMunchHelpers.getCompendiumIndex(type);\n    const ddbIds = ids.map((num) => {\n      return String(num);\n    });\n\n    return new Promise((resolve) => {\n      const documents = index\n        .filter((idx) => {\n          switch (type) {\n            case \"monster\":\n              return ddbIds.includes(String(getProperty(idx, \"flags.ddbimporter.id\")));\n            case \"spell\":\n            case \"item\":\n              return ddbIds.includes(String(getProperty(idx, \"flags.ddbimporter.definitionId\")));\n            default:\n              return false;\n          }\n        })\n        .map((i) => {\n          switch (type) {\n            case \"monster\":\n              return game.actors.importFromCompendium(compendium, i._id, overrides, { temporary, keepId: true, keepEmbeddedIds: true });\n            case \"spell\":\n            case \"item\":\n              return game.items.importFromCompendium(compendium, i._id, overrides, { temporary, keepId: true, keepEmbeddedIds: true });\n            default:\n              // this should never happen\n              return undefined;\n          }\n\n        });\n      logger.debug(`${type} documents loaded`, documents);\n      resolve(documents);\n    });\n  }\n\n\n  static async linkExistingActorTokens(tokens) {\n    const monsterIndex = await AdventureMunchHelpers.getCompendiumIndex(\"monster\");\n\n    const newTokens = tokens.map((token) => {\n      const monsterHit = monsterIndex.find((monster) =>\n        monster.flags?.ddbimporter?.id && token.flags.ddbActorFlags?.id\n        && monster.flags.ddbimporter.id === token.flags.ddbActorFlags.id);\n      if (monsterHit) {\n        token.flags.compendiumActorId = monsterHit._id;\n      }\n      return token;\n    });\n\n    return newTokens;\n  }\n\n  // check the document for version data and for update info to see if we can replace it\n  static extractDocumentVersionData(newDoc, existingDoc) {\n    const ddbIVersion = game.modules.get(SETTINGS.MODULE_ID).version;\n    if (!existingDoc) existingDoc = {};\n    // do we have versioned metadata?\n    setProperty(newDoc, \"flags.ddb.versions.importer\", {});\n    if (newDoc?.flags?.ddb?.versions?.ddbMetaData?.lastUpdate) {\n      // check old data, it might not exist\n      const oldDDBMetaDataVersions = existingDoc.flags?.ddb?.versions?.ddbMetaData?.lastUpdate\n        ? existingDoc.flags.ddb.versions.ddbMetaData\n        : {\n          lastUpdate: \"0.0.1\",\n          drawings: \"0.0.1\",\n          notes: \"0.0.1\",\n          tokens: \"0.0.1\",\n          walls: \"0.0.1\",\n          lights: \"0.0.1\",\n          foundry: \"0.8.9\",\n        };\n      const oldDDBImporterVersion = existingDoc?.flags?.ddb?.versions?.ddbImporter\n        ? existingDoc.flags.ddb.versions.ddbImporter\n        : \"2.0.1\";\n      const oldAdventureMuncherVersion = existingDoc?.flags?.ddb?.versions?.adventureMuncher\n        ? existingDoc.flags.ddb.versions.adventureMuncher\n        : \"0.3.0\";\n      const oldVersions = { ddbImporter: oldDDBImporterVersion, ddbMetaData: oldDDBMetaDataVersions, adventureMuncher: oldAdventureMuncherVersion };\n\n      const documentVersions = newDoc.flags.ddb.versions;\n      const documentFoundryVersion = documentVersions[\"ddbMetaData\"][\"foundry\"] !== undefined ? documentVersions[\"ddbMetaData\"][\"foundry\"] : \"0.8.9\";\n      const importerVersionChanged = isNewerVersion(ddbIVersion, oldVersions[\"ddbImporter\"]);\n      const metaVersionChanged = isNewerVersion(documentVersions[\"ddbMetaData\"][\"lastUpdate\"], oldVersions[\"ddbMetaData\"][\"lastUpdate\"]);\n      const muncherVersionChanged = isNewerVersion(documentVersions[\"adventureMuncher\"], oldVersions[\"adventureMuncher\"]);\n      const foundryVersionNewer = isNewerVersion(documentFoundryVersion, game.version);\n\n      let versionUpdates = {};\n\n      if (metaVersionChanged || muncherVersionChanged || foundryVersionNewer) {\n        versionUpdates.oldVersions = oldVersions;\n        versionUpdates.importerVersionChanged = importerVersionChanged;\n        versionUpdates.metaVersionChanged = metaVersionChanged;\n        versionUpdates.muncherVersionChanged = muncherVersionChanged;\n        versionUpdates.foundryVersionNewer = foundryVersionNewer;\n        versionUpdates.drawingVersionChanged = isNewerVersion(documentVersions[\"ddbMetaData\"][\"drawings\"], oldVersions[\"ddbMetaData\"][\"drawings\"]);\n        versionUpdates.noteVersionChanged = isNewerVersion(documentVersions[\"ddbMetaData\"][\"notes\"], oldVersions[\"ddbMetaData\"][\"notes\"]);\n        versionUpdates.tokenVersionChanged = isNewerVersion(documentVersions[\"ddbMetaData\"][\"tokens\"], oldVersions[\"ddbMetaData\"][\"tokens\"]);\n        versionUpdates.wallVersionChanged = isNewerVersion(documentVersions[\"ddbMetaData\"][\"walls\"], oldVersions[\"ddbMetaData\"][\"walls\"]);\n        versionUpdates.lightVersionChanged = isNewerVersion(documentVersions[\"ddbMetaData\"][\"lights\"], oldVersions[\"ddbMetaData\"][\"lights\"]);\n      }\n      setProperty(newDoc, \"flags.ddb.versions.importer\", versionUpdates);\n    }\n    return newDoc;\n  }\n\n  static getImportType(type) {\n    const typeName = type[0].toUpperCase() + type.slice(1);\n    let importType = typeName;\n\n    switch (type) {\n      case \"journal\":\n        importType = \"JournalEntry\";\n        break;\n      case \"table\":\n        importType = \"RollTable\";\n        break;\n      default:\n        importType = typeName;\n        break;\n    }\n\n    return importType;\n  }\n\n  /**\n   * Does the folder exist in the zip archive?\n   * @param {String} folder folder name\n   * @param {Zip} zip\n   * @returns {Boolean}\n   */\n  static folderExists(folder, zip) {\n    const files = Object.values(zip.files).filter((file) => {\n      return file.dir && file.name.toLowerCase().includes(folder);\n    });\n\n    return files.length > 0;\n  }\n\n  /**\n   * Get the files in the zip archive at the specified path\n   * @param {String} folder a folder path to start from\n   * @param {Zip} zip\n   * @returns {Array} list of files in zip\n   */\n  static getFiles(folder, zip) {\n    const files = Object.values(zip.files).filter((file) => {\n      return !file.dir && file.name.split('.').pop() === 'json' && file.name.includes(`${folder}/`);\n    });\n\n    return files;\n  }\n\n\n}\n","import utils from \"../lib/utils.js\";\nimport logger from \"../logger.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\n\nlet compendiumFolderTypeMonster;\nlet compendiumFolderTypeSpell;\nlet compendiumFolderTypeItem;\n\nlet rootItemFolders = {};\nlet equipmentFolders = {};\nlet weaponFolders = {};\nlet trinketFolders = {};\nlet consumableFolders = {};\nlet lootFolders = {};\nlet toolFolders = {};\nlet backpackFolders = {};\n\nconst spellLevelFolderNames = [\n  \"0th Level (Cantrip)\",\n  \"1st Level\",\n  \"2nd Level\",\n  \"3rd Level\",\n  \"4th Level\",\n  \"5th Level\",\n  \"6th Level\",\n  \"7th Level\",\n  \"8th Level\",\n  \"9th Level\",\n];\n\nconst itemRarityNames = [\n  \"Common\",\n  \"Uncommon\",\n  \"Rare\",\n  \"Very Rare\",\n  \"Legendary\",\n  \"Artifact\",\n  \"Varies\",\n  \"Unknown\",\n];\n\nconst rootItemFolderNames = {\n  equipment: \"Equipment\",\n  tool: \"Tools\",\n  loot: \"Loot\",\n  weapon: \"Weapon\",\n  backpack: \"Backpack\",\n  consumable: \"Consumable\",\n};\n\nconst equipmentFolderNames = {\n  heavy: \"Heavy Armor\",\n  medium: \"Medium Armor\",\n  light: \"Light Armor\",\n  trinket: \"Trinket\",\n  shield: \"Shield\",\n};\nconst weaponFolderNames = {\n  simpleM: \"Simple Melee\",\n  simpleR: \"Simple Ranged\",\n  martialM: \"Martial Melee\",\n  martialR: \"Martial Ranged\",\n};\nconst trinketFolderNames = [\"Wand\", \"Wondrous item\", \"Ring\", \"Rod\"];\nconst consumableFolderNames = [\"Ammunition\", \"Potion\", \"Scroll\", \"Poison\", \"Adventuring Gear\"];\nconst lootFolderNames = [\n  \"Adventuring Gear\",\n  \"Vehicle\",\n  \"Gemstone\",\n  \"Mount\",\n  \"Arcane Focus\",\n  \"Holy Symbol\",\n  \"Druidic Focus\",\n];\nconst toolFolderNames = {\n  art: \"Artisan's Tools\",\n  music: \"Musical Instrument\",\n  game: \"Gaming Set\",\n};\nconst backpackFolderNames = [\"Equipment Pack\", \"Adventuring Gear\", \"Vehicle\", \"Mount\"];\n\nasync function createCompendiumFolder(packName, folderName, color = \"#6f0006\") {\n  const existingFolder = game.customFolders.fic.folders.find((f) => f.packCode === packName && f.name == folderName);\n  return new Promise((resolve) => {\n    if (!existingFolder) {\n      logger.info(`Creating compendium folder ${folderName}`);\n      // createFolderAtRoot(packCode,name,color,fontColor)\n      resolve(game.CF.FICFolderAPI.createFolderAtRoot(packName, folderName, color));\n    } else {\n      resolve(existingFolder);\n    }\n  });\n}\n\nasync function createCompendiumFolderWithParent(packName, folderName, parentFolder, color = \"#6f0006\") {\n  const existingFolder = game.customFolders.fic.folders.find(\n    (f) => f.packCode === packName && f.name == folderName && f.parentId == parentFolder.id\n  );\n  return new Promise((resolve) => {\n    if (!existingFolder) {\n      logger.info(`Creating compendium folder ${folderName} in ${parentFolder.name}`);\n      resolve(game.CF.FICFolderAPI.createFolderWithParent(parentFolder, folderName, color));\n    } else {\n      resolve(existingFolder);\n    }\n  });\n}\n\n// assume type is monster compendium\nasync function createCreatureTypeCompendiumFolders(packName) {\n  return new Promise((resolve) => {\n    let promises = [];\n    CONFIG.DDB.monsterTypes.forEach(async (monsterType) => {\n      promises.push(createCompendiumFolder(packName, monsterType.name, \"#6f0006\"));\n    });\n    resolve(Promise.all(promises));\n  });\n}\n\n// challenge rating\nasync function createChallengeRatingCompendiumFolders(packName) {\n  return new Promise((resolve) => {\n    let promises = [];\n    CONFIG.DDB.challengeRatings.forEach((cr) => {\n      const paddedCR = String(cr.value).padStart(2, \"0\");\n      promises.push(createCompendiumFolder(packName, `CR ${paddedCR}`, \"#6f0006\"));\n    });\n    resolve(Promise.all(promises));\n  });\n}\n\n// alphabetical\nasync function createAlphabeticalCompendiumFolders(packName) {\n  return new Promise((resolve) => {\n    let promises = [];\n    for (let i = 9; ++i < 36;) {\n      const folderName = i.toString(36).toUpperCase();\n      createCompendiumFolder(packName, folderName, \"#6f0006\").then((folder) => {\n        promises.push(folder);\n      });\n    }\n    resolve(promises);\n  });\n}\n\n// spell level\nasync function createSpellLevelCompendiumFolders(packName) {\n  return new Promise((resolve) => {\n    let promises = [];\n    spellLevelFolderNames.forEach((levelName) => {\n      logger.info(`Creating folder '${levelName}'`);\n      promises.push(createCompendiumFolder(packName, levelName));\n    });\n    resolve(Promise.all(promises));\n  });\n}\n\n// spell school\nasync function createSpellSchoolCompendiumFolders(packName) {\n  return new Promise((resolve) => {\n    let promises = [];\n    DICTIONARY.spell.schools.forEach((school) => {\n      const schoolName = utils.capitalize(school.name);\n      logger.info(`Creating folder '${schoolName}'`);\n      promises.push(createCompendiumFolder(packName, schoolName));\n    });\n    resolve(Promise.all(promises));\n  });\n}\n\n// item rarity folder\nasync function createItemRarityCompendiumFolders(packName) {\n  return new Promise((resolve) => {\n    let promises = [];\n    itemRarityNames.forEach((rarityName) => {\n      logger.info(`Creating folder '${rarityName}'`);\n      promises.push(createCompendiumFolder(packName, rarityName));\n    });\n    resolve(promises);\n  });\n}\n\n// item type folder\nasync function createItemTypeCompendiumFolders(packName) {\n  let promises = [];\n\n  for (const [key, value] of Object.entries(rootItemFolderNames)) {\n    logger.info(`Creating root folder '${value}' with key '${key}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolder(packName, value);\n    rootItemFolders[key] = folder;\n    promises.push(folder);\n  }\n\n  for (const [key, value] of Object.entries(equipmentFolderNames)) {\n    logger.info(`Creating Equipment folder '${value}' with key '${key}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolderWithParent(packName, value, rootItemFolders[\"equipment\"], \"#222222\");\n    equipmentFolders[key] = folder;\n    promises.push(folder);\n  }\n\n  for (const [key, value] of Object.entries(weaponFolderNames)) {\n    logger.info(`Creating Weapon folder '${value}' with key '${key}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolderWithParent(packName, value, rootItemFolders[\"weapon\"], \"#222222\");\n    weaponFolders[key] = folder;\n    promises.push(folder);\n  }\n\n  for (const [key, value] of Object.entries(toolFolderNames)) {\n    logger.info(`Creating Tool folder '${value}' with key '${key}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolderWithParent(packName, value, rootItemFolders[\"tool\"], \"#222222\");\n    toolFolders[key] = folder;\n    promises.push(folder);\n  }\n\n  for (const folderName of trinketFolderNames) {\n    logger.info(`Creating Equipment\\\\Trinket folder '${folderName}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolderWithParent(packName, folderName, equipmentFolders[\"trinket\"], \"#444444\");\n    trinketFolders[folderName] = folder;\n    promises.push(folder);\n  }\n\n  for (const folderName of consumableFolderNames) {\n    logger.info(`Creating Consumable folder '${folderName}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolderWithParent(packName, folderName, rootItemFolders[\"consumable\"], \"#222222\");\n    consumableFolders[folderName] = folder;\n    promises.push(folder);\n  }\n\n  for (const folderName of lootFolderNames) {\n    logger.info(`Creating Loot folder '${folderName}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolderWithParent(packName, folderName, rootItemFolders[\"loot\"], \"#222222\");\n    lootFolders[folderName] = folder;\n    promises.push(folder);\n  }\n\n  for (const folderName of backpackFolderNames) {\n    logger.info(`Creating Backpack folder '${folderName}'`);\n    // eslint-disable-next-line no-await-in-loop\n    const folder = await createCompendiumFolderWithParent(packName, folderName, rootItemFolders[\"backpack\"], \"#222222\");\n    backpackFolders[folderName] = folder;\n    promises.push(folder);\n  }\n\n  return new Promise((resolve) => {\n    resolve(promises);\n  });\n}\n\n// create compendium folder structure\nexport async function createCompendiumFolderStructure(type) {\n  const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n\n  if (compendiumFoldersInstalled) {\n    compendiumFolderTypeMonster = game.settings.get(\"ddb-importer\", \"munching-selection-compendium-folders-monster\");\n    compendiumFolderTypeSpell = game.settings.get(\"ddb-importer\", \"munching-selection-compendium-folders-spell\");\n    compendiumFolderTypeItem = game.settings.get(\"ddb-importer\", \"munching-selection-compendium-folders-item\");\n    // generate compendium folders for type\n    const packName = await CompendiumHelper.getCompendiumLabel(type);\n    await game.CF.FICFolderAPI.loadFolders(packName);\n    logger.debug(`Creating Compendium folder structure for ${type}`);\n\n    switch (type) {\n      case \"monsters\":\n      case \"npc\":\n      case \"monster\": {\n        switch (compendiumFolderTypeMonster) {\n          case \"TYPE\": {\n            await createCreatureTypeCompendiumFolders(packName);\n            break;\n          }\n          case \"ALPHA\": {\n            await createAlphabeticalCompendiumFolders(packName);\n            break;\n          }\n          case \"CR\": {\n            await createChallengeRatingCompendiumFolders(packName);\n            break;\n          }\n          // no default\n        }\n        break;\n      }\n      case \"spell\":\n      case \"spells\": {\n        switch (compendiumFolderTypeSpell) {\n          case \"SCHOOL\":\n            await createSpellSchoolCompendiumFolders(packName);\n            break;\n          case \"LEVEL\":\n            await createSpellLevelCompendiumFolders(packName);\n            break;\n          // no default\n        }\n        break;\n      }\n      case \"inventory\":\n      case \"item\":\n      case \"items\": {\n        rootItemFolders = {};\n        equipmentFolders = {};\n        weaponFolders = {};\n        trinketFolders = {};\n        consumableFolders = {};\n        lootFolders = {};\n        toolFolders = {};\n        backpackFolders = {};\n        switch (compendiumFolderTypeItem) {\n          case \"TYPE\":\n            await createItemTypeCompendiumFolders(packName);\n            break;\n          case \"RARITY\":\n            await createItemRarityCompendiumFolders(packName);\n            break;\n          // no default\n        }\n        break;\n      }\n      // no default\n    }\n    // reload folders\n    return game.CF.FICFolderAPI.loadFolders(packName);\n  }\n\n  return undefined;\n}\n\nfunction getItemCompendiumFolderNameForRarity(document) {\n  let name;\n  const rarity = document.system.rarity;\n\n  if (rarity && rarity != \"\") {\n    switch (rarity.toLowerCase().trim()) {\n      case \"common\":\n        name = \"Common\";\n        break;\n      case \"uncommon\":\n        name = \"Uncommon\";\n        break;\n      case \"rare\":\n        name = \"Rare\";\n        break;\n      case \"very rare\":\n      case \"veryrare\":\n        name = \"Very Rare\";\n        break;\n      case \"legendary\":\n        name = \"Legendary\";\n        break;\n      case \"artifact\":\n        name = \"Artifact\";\n        break;\n      case \"varies\":\n        name = \"Varies\";\n        break;\n      case \"unknown\":\n      default:\n        name = \"Unknown\";\n        break;\n    }\n  } else {\n    name = \"Unknown\";\n  }\n  return name;\n}\n\nfunction getItemCompendiumFolderNameForType(document) {\n  let name;\n\n  switch (document.type) {\n    case \"equipment\": {\n      switch (document.system?.armor?.type) {\n        case \"trinket\": {\n          const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n          if (ddbType) {\n            name = trinketFolders[ddbType].name;\n          }\n          break;\n        }\n        default: {\n          name = equipmentFolders[document.system.armor.type].name;\n          break;\n        }\n      }\n      break;\n    }\n    case \"weapon\": {\n      name = weaponFolders[document.system.weaponType].name;\n      break;\n    }\n    case \"consumable\": {\n      const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n      if (ddbType) {\n        name = consumableFolders[ddbType].name;\n      }\n      break;\n    }\n    case \"loot\": {\n      const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n      if (ddbType) {\n        name = lootFolders[ddbType].name;\n      }\n      break;\n    }\n    case \"backpack\": {\n      const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n      if (ddbType) {\n        name = backpackFolders[ddbType].name;\n      }\n      break;\n    }\n    case \"tool\": {\n      const toolType = document.system.toolType;\n      const instrument = document.flags?.ddbimporter?.dndbeyond?.tags.includes(\"Instrument\");\n      const ddbType = [\"art\", \"music\", \"game\"].includes(toolType);\n      if (instrument) {\n        name = toolFolders[\"music\"].name;\n      } else if (ddbType) {\n        name = toolFolders[toolType].name;\n      } else {\n        name = rootItemFolders[document.type].name;\n      }\n      break;\n    }\n    default: {\n      name = rootItemFolders[document.type].name;\n      break;\n    }\n  }\n\n  return name;\n}\n\nfunction getItemCompendiumFolderName(document) {\n  let name;\n  switch (compendiumFolderTypeItem) {\n    case \"RARITY\": {\n      name = getItemCompendiumFolderNameForRarity(document);\n      break;\n    }\n    case \"TYPE\": {\n      name = getItemCompendiumFolderNameForType(document);\n      break;\n    }\n    // no default\n  }\n  return name;\n}\n\nfunction getCompendiumFolderName(type, document) {\n  let name;\n  switch (type) {\n    case \"monsters\":\n    case \"npc\":\n    case \"monster\": {\n      switch (compendiumFolderTypeMonster) {\n        case \"TYPE\": {\n          const creatureType = document.system?.details?.type?.value\n            ? document.system?.details?.type?.value\n            : \"Unknown\";\n          const ddbType = CONFIG.DDB.monsterTypes.find((c) => creatureType.toLowerCase() == c.name.toLowerCase());\n          if (ddbType) name = ddbType.name;\n          break;\n        }\n        case \"ALPHA\": {\n          name = document.name\n            .replace(/[^a-z]/gi, \"\")\n            .charAt(0)\n            .toUpperCase();\n          break;\n        }\n        case \"CR\": {\n          if (document.system.details.cr !== undefined || document.system.details.cr !== \"\") {\n            const paddedCR = String(document.system.details.cr).padStart(2, \"0\");\n            name = `CR ${paddedCR}`;\n          }\n        }\n        // no default\n      }\n      break;\n    }\n    case \"spell\":\n    case \"spells\": {\n      switch (compendiumFolderTypeSpell) {\n        case \"SCHOOL\": {\n          const school = document.system?.school;\n          if (school) {\n            name = utils.capitalize(DICTIONARY.spell.schools.find((sch) => school == sch.id).name);\n          }\n          break;\n        }\n        case \"LEVEL\": {\n          const levelFolder = spellLevelFolderNames[document.system?.level];\n          if (levelFolder) {\n            name = levelFolder;\n          }\n          break;\n        }\n        // no default\n      }\n      break;\n    }\n    case \"inventory\":\n    case \"item\":\n    case \"items\": {\n      name = getItemCompendiumFolderName(document);\n    }\n    // no default\n  }\n  return name;\n}\n\nexport async function addToCompendiumFolder(type, document, folders) {\n  const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n\n  if (compendiumFoldersInstalled && (folders || game.customFolders?.fic?.folders)) {\n    if (!folders) folders = game.customFolders.fic.folders;\n    const packName = await CompendiumHelper.getCompendiumLabel(type);\n    logger.debug(`Checking ${document.name} in ${packName}`);\n\n    switch (type) {\n      case \"inventory\":\n      case \"items\":\n      case \"item\":\n      case \"spells\":\n      case \"spell\":\n      case \"monsters\":\n      case \"npc\":\n      case \"monster\": {\n        const folderName = getCompendiumFolderName(type, document);\n        if (folderName) {\n          const folder = folders.find((f) => f.packCode === packName && f.name == folderName);\n          if (document?.flags?.cf?.id) setProperty(document, \"flags.cf.id\", undefined);\n          if (folder) {\n            logger.info(`Moving ${type} ${document.name} to folder ${folder.name}`);\n            await game.CF.FICFolderAPI.moveDocumentToFolder(packName, document, folder);\n          } else {\n            logger.error(`Unable to find folder \"${folderName}\" in \"${packName}\" for ${type}`);\n          }\n        }\n      }\n      // no default\n    }\n  }\n}\n\n// create compendium folders for existing things\nexport async function migrateExistingCompendium(type) {\n  const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n\n  if (!compendiumFoldersInstalled) {\n    logger.warn(\"Compendium Folders module is not installed\");\n    return new Promise((resolve) => {\n      resolve(false);\n    });\n  }\n  // loop through all existing monts/etc and generate a folder and move documents to it\n  const packName = await CompendiumHelper.getCompendiumLabel(type);\n\n  if (game.CF.cleanupCompendium) {\n    await game.CF.cleanupCompendium(packName);\n  }\n\n  const folders = await createCompendiumFolderStructure(type);\n\n  logger.debug(\"Compendium Folders\", folders);\n\n  const compendium = CompendiumHelper.getCompendium(packName);\n  if (!compendium) return undefined;\n  let indexFields = [\"name\"];\n  switch (type) {\n    case \"spells\":\n    case \"spell\": {\n      indexFields = [\"name\", \"flags.cf\", \"data.level\"];\n      break;\n    }\n    case \"inventory\":\n    case \"items\":\n    case \"item\": {\n      indexFields = [\n        \"name\",\n        \"type\",\n        \"flags.cf\",\n        \"flags.ddbimporter.dndbeyond.type\",\n        \"data.armor.type\",\n        \"data.weaponType\",\n        \"data.rarity\"\n      ];\n      break;\n    }\n    // no default\n  }\n\n  const index = await compendium.getIndex({ fields: indexFields });\n\n  switch (type) {\n    case \"inventory\":\n    case \"items\":\n    case \"item\":\n    case \"spells\":\n    case \"spell\":\n    case \"monsters\":\n    case \"npc\":\n    case \"monster\": {\n      // loop through all existing monsters and move them to their type\n      await index\n        .filter((i) => i.name !== game.CF.TEMP_ENTITY_NAME)\n        .forEach(async (i) => {\n          const existing = await compendium.getDocument(i._id);\n          await addToCompendiumFolder(type, existing, folders);\n        });\n      break;\n    }\n    // no default\n  }\n\n  const newFolders = await game.CF.FICFolderAPI.loadFolders(packName);\n\n  return new Promise((resolve) => {\n    resolve(newFolders);\n  });\n}\n","// Modified from https://gitlab.com/tposney/dae/-/blob/master/src/module/migration.ts\n\n// MIT License\n\n// Copyright (c) 2020 Tim Posney\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport logger from \"../logger.js\";\nimport { updateCharacterItemFlags } from \"./import.js\";\n\nvar packsLoaded = false;\nvar itemPack;\nvar spellPack;\nvar featsPack;\nvar midiPack;\nvar magicItemsPack;\nvar midiItemsPack;\nvar midiSpellsPack;\nvar midiFeatsPack;\n\n\nexport async function loadPacks() {\n  if (packsLoaded) return;\n  const items = game.packs.get(\"Dynamic-Effects-SRD.DAE SRD Items\");\n  itemPack = items ? await items.getDocuments() : [];\n\n  const spells = game.packs.get(\"Dynamic-Effects-SRD.DAE SRD Spells\");\n  spellPack = spells ? await spells.getDocuments() : [];\n\n  const magicItems = game.packs.get(\"Dynamic-Effects-SRD.DAE SRD Magic Items\");\n  magicItemsPack = magicItems ? await magicItems.getDocuments() : [];\n\n  const feats = game.packs.get(\"Dynamic-Effects-SRD.DAE SRD Feats\");\n  featsPack = feats ? await feats.getDocuments() : [];\n\n  const srdMidi = game.packs.get(\"Dynamic-Effects-SRD.DAE SRD Midi-collection\");\n  midiPack = srdMidi ? await srdMidi.getDocuments() : [];\n\n  const midiItems = game.packs.get(\"midi-srd.Midi SRD Items\");\n  midiItemsPack = midiItems ? await midiItems.getDocuments() : [];\n  const midiSpells = game.packs.get(\"midi-srd.Midi SRD Spells\");\n  midiSpellsPack = midiSpells ? await midiSpells.getDocuments() : [];\n  const midiFeats = game.packs.get(\"midi-srd.Midi SRD Feats\");\n  midiFeatsPack = midiFeats ? await midiFeats.getDocuments() : [];\n\n  // eslint-disable-next-line require-atomic-updates\n  packsLoaded = true;\n}\n\nfunction findDAEItem(itemData, packs) {\n  for (let pack of packs) {\n    let matchItem = pack.find((pd) =>\n      pd.name === itemData.name\n      && pd.type === itemData.type\n    );\n    // console.warn(itemData.name);\n    // console.warn(matchItem);\n    if (matchItem) {\n      matchItem = duplicate(matchItem);\n      delete matchItem._id;\n      return matchItem;\n    }\n\n  }\n  return undefined;\n}\n\nfunction dataSwap(itemData, replaceData) {\n  updateCharacterItemFlags(itemData, replaceData);\n  if (itemData._id) {\n    replaceData._id = itemData._id;\n  } else {\n    delete replaceData._id;\n  }\n  if (itemData.flags) replaceData.flags = { ...itemData.flags, ...replaceData.flags };\n  if (replaceData.effects.length > 0) {\n    replaceData.effects = replaceData.effects.map((effect) => {\n      delete effect._id;\n      return effect;\n    });\n  }\n  return replaceData;\n}\n\nfunction matchItem(itemData) {\n  // we only add the midi packs if midi is actually installed\n  let returnItem = null;\n  switch (itemData.type) {\n    case \"feat\": {\n      const featPacks = [midiFeatsPack, midiPack, featsPack];\n      returnItem = findDAEItem(itemData, featPacks);\n      break;\n    }\n    case \"spell\": {\n      const spellPacks = [midiSpellsPack, midiPack, spellPack];\n      returnItem = findDAEItem(itemData, spellPacks);\n      break;\n    }\n    case \"equipment\":\n    case \"weapon\":\n    case \"loot\":\n    case \"consumable\":\n    case \"tool\":\n    case \"backpack\": {\n      const equipmentPacks = [midiItemsPack, midiPack, itemPack, magicItemsPack];\n      returnItem = findDAEItem(itemData, equipmentPacks);\n      break;\n    }\n    default:\n      break;\n  }\n  return returnItem;\n}\n\n\n/**\n * Migrates items wholesale\n * @param {*} items\n */\nexport async function migrateItemsDAESRD(items) {\n  if (!packsLoaded) await loadPacks();\n\n  return new Promise((resolve) => {\n    resolve(\n      items.map((itemData) => {\n        let replaceData = matchItem(itemData);\n        if (replaceData) {\n          logger.debug(`migrating ${replaceData.name}`);\n          setProperty(replaceData, \"flags.dae.migrated\", true);\n          return dataSwap(itemData, replaceData);\n        }\n        return itemData;\n      })\n    );\n  });\n}\n\n/**\n * Adds dae effects to existing items\n * @param {*} items\n */\nexport async function addItemsDAESRD(items) {\n  // eslint-disable-next-line require-atomic-updates\n  if (!packsLoaded) await loadPacks();\n\n  return new Promise((resolve) => {\n    resolve(\n      items.map((itemData) => {\n        let replaceData = matchItem(itemData);\n        if (replaceData && !replaceData.name.startsWith(\"Unarmored Defense\")) {\n          logger.debug(`Adding effects for ${replaceData.name}`);\n          itemData.effects = replaceData.effects;\n          if (replaceData.flags.dae) itemData.flags.dae = replaceData.flags.dae;\n          if (replaceData.flags['midi-qol']) itemData.flags['midi-qol'] = replaceData.flags['midi-qol'];\n          if (replaceData.flags.itemacro) itemData.flags.itemacro = replaceData.flags.itemacro;\n          if (replaceData.flags.itemmacro) itemData.flags.itemmacro = replaceData.flags.itemmacro;\n        }\n        return itemData;\n      })\n    );\n  });\n}\n\n/**\n * Replaces matching items in an actor\n * @param {*} actor\n */\nexport async function migrateActorDAESRD(actor, includeSRD = false) {\n  await DAE.migrateActorDAESRD(actor, includeSRD);\n}\n","import logger from \"../../logger.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { updateCompendium, srdFiddling, daeFiddling } from \"../import.js\";\nimport DDBMuncher from \"../DDBMuncher.js\";\n\nconst FEAT_TEMPLATE = {\n  \"name\": \"\",\n  \"type\": \"feat\",\n  \"system\": {\n    \"description\": {\n      \"value\": \"\",\n      \"chat\": \"\",\n      \"unidentified\": \"\"\n    },\n    \"type\": {\n      \"value\": \"feat\",\n    },\n    \"source\": \"\",\n  },\n  \"sort\": 2600000,\n  \"flags\": {\n    \"ddbimporter\": {\n      \"type\": \"feat\",\n    },\n    \"obsidian\": {\n      \"source\": {\n        \"type\": \"feat\"\n      }\n    },\n  },\n  \"img\": null\n};\n\nfunction buildBase(data) {\n  let result = duplicate(FEAT_TEMPLATE);\n\n  result.name = data.name;\n  result.system.description.value += `${data.description}\\n\\n`;\n  result.system.description.chat += `${data.snippet}\\n\\n`;\n\n  result.flags.ddbimporter = {\n    featId: data.id,\n    version: CONFIG.DDBI.version,\n  };\n\n  result.flags.ddbimporter['prerequisites'] = data.prerequisites;\n  if (data.prerequisites.length > 0) {\n    const requirements = data.prerequisites.map((requirement) => requirement.description);\n    result.system.requirements = requirements.join(\", \");\n    result.system.description.value += `<h3>Requirements</h3>\\n\\n${requirements.join(\"\\n\\n\")}\\n\\n`;\n  }\n\n  result.system.source = DDBHelper.parseSource(data);\n\n  result.system.description.value = parseTags(result.system.description.value);\n\n  return result;\n}\n\n\nasync function buildFeat(feat,) {\n  let result = buildBase(feat);\n\n  return result;\n}\n\n\nexport async function getFeats(data) {\n  logger.debug(\"get feats started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let feats = [];\n\n  data.forEach((feat) => {\n    logger.debug(`${feat.name} feat parsing started...`);\n    const parsedFeat = buildFeat(feat);\n    feats.push(parsedFeat);\n  });\n\n  const fiddledFeats = await srdFiddling(feats, \"feats\");\n  const finalFeats = await daeFiddling(fiddledFeats);\n\n  DDBMuncher.munchNote(`Importing ${finalFeats.length} feats!`, true);\n  await updateCompendium(\"feats\", { feats: finalFeats }, updateBool);\n\n  return finalFeats;\n}\n","import utils from \"../lib/utils.js\";\nimport logger from \"../logger.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport SETTINGS from \"../settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { addItemsDAESRD } from \"./dae.js\";\nimport { copyInbuiltIcons } from \"../icons/index.js\";\nimport { addToCompendiumFolder } from \"./compendiumFolders.js\";\n\nasync function loadpacks(compendiumName) {\n  if (CONFIG.DDBI.SRD_LOAD.packsLoaded[compendiumName]) return;\n  const srdPack = CompendiumHelper.getCompendium(compendiumName);\n  if (!srdPack) {\n    logger.error(`Failed to load SRDPack ${compendiumName}`);\n  } else {\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.SRD_LOAD.packs[compendiumName] = await srdPack.getDocuments();\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.SRD_LOAD.packsLoaded[compendiumName] = true;\n  }\n}\n\n/**\n * Removes items\n * @param {*} items\n * @param {*} itemsToRemove\n */\nexport async function removeItems(items, itemsToRemove, matchDDBId = false) {\n  return new Promise((resolve) => {\n    resolve(\n      items.filter(\n        (item) =>\n          !itemsToRemove.some((originalItem) =>\n            (item.name === originalItem.name || item.flags?.ddbimporter?.originalName === originalItem.name)\n            && item.type === originalItem.type\n            && (!matchDDBId || (matchDDBId && item.flags?.ddbimporter?.id === originalItem.flags?.ddbimporter?.id))\n          )\n      )\n    );\n  });\n}\n\nfunction getCharacterUpdatePolicyTypes() {\n  let itemTypes = [];\n  itemTypes.push(\"class\");\n  if (game.settings.get(\"ddb-importer\", \"character-update-policy-feat\")) itemTypes.push(\"feat\");\n  if (game.settings.get(\"ddb-importer\", \"character-update-policy-weapon\")) itemTypes.push(\"weapon\");\n  if (game.settings.get(\"ddb-importer\", \"character-update-policy-equipment\"))\n    itemTypes = itemTypes.concat(DICTIONARY.types.equipment);\n  if (game.settings.get(\"ddb-importer\", \"character-update-policy-spell\")) itemTypes.push(\"spell\");\n  return itemTypes;\n}\n\n/**\n * Returns a combined array of all items to process, filtered by the user's selection on what to skip and what to include\n * @param {object} result object containing all character items sectioned as individual properties\n * @param {array[string]} sections an array of object properties which should be filtered\n */\nexport function filterItemsByUserSelection(result, sections) {\n  let items = [];\n  const validItemTypes = getCharacterUpdatePolicyTypes();\n\n  for (const section of sections) {\n    items = items.concat(result[section]).filter((item) => validItemTypes.includes(item.type));\n  }\n  return items;\n};\n\nasync function copyFlagGroup(flagGroup, originalItem, targetItem) {\n  if (targetItem.flags === undefined) targetItem.flags = {};\n  // if we have generated effects we dont want to copy some flag groups. mostly for AE on spells\n  const effectsProperty = getProperty(targetItem, \"flags.ddbimporter.effectsApplied\")\n    && SETTINGS.EFFECTS_IGNORE_FLAG_GROUPS.includes(flagGroup);\n  if (originalItem.flags && !!originalItem.flags[flagGroup] && !effectsProperty) {\n    logger.debug(`Copying ${flagGroup} for ${originalItem.name}`);\n    targetItem.flags[flagGroup] = originalItem.flags[flagGroup];\n  }\n}\n\n/**\n * Copies across some flags for existing item\n * @param {*} items\n */\nexport async function copySupportedItemFlags(originalItem, targetItem) {\n  SETTINGS.SUPPORTED_FLAG_GROUPS.forEach((flagGroup) => {\n    copyFlagGroup(flagGroup, originalItem, targetItem);\n  });\n}\n\nfunction getMonsterNames(name) {\n  let magicNames = [name, name.toLowerCase()];\n\n  // +2 sword\n  let frontPlus = name.match(/^(\\+\\d*)\\s*(.*)/);\n  if (frontPlus) {\n    magicNames.push(`${frontPlus[2].trim()}, ${frontPlus[1]}`.toLowerCase().trim());\n  }\n\n  // sword +2\n  let backPlus = name.match(/(.*)\\s*(\\+\\d*)$/);\n  if (backPlus) {\n    magicNames.push(`${backPlus[1].trim()}, ${backPlus[2]}`.toLowerCase().trim());\n  }\n\n  return magicNames;\n}\n\nfunction getLooseNames(name, extraNames = []) {\n  let looseNames = extraNames;\n  looseNames.push(name.toLowerCase());\n  let refactNameArray = name.split(\"(\")[0].trim().split(\", \");\n  refactNameArray.unshift(refactNameArray.pop());\n  const refactName = refactNameArray.join(\" \").trim();\n  looseNames.push(refactName, refactName.toLowerCase());\n  looseNames.push(refactName.replace(/\\+\\d*\\s*/, \"\").trim().toLowerCase());\n  looseNames.push(refactName.replace(/\\+\\d*\\s*/, \"\").trim().toLowerCase().replace(/s$/, \"\"));\n\n  let refactNamePlusArray = name.replace(/\\+\\d*\\s*/, \"\").trim().split(\"(\")[0].trim().split(\", \");\n  refactNamePlusArray.unshift(refactNamePlusArray.pop());\n  const refactNamePlus = refactNamePlusArray.join(\" \").trim();\n  looseNames.push(refactNamePlus.toLowerCase());\n\n  let deconNameArray = name.replace(\"(\", \"\").replace(\")\", \"\").trim().split(\",\");\n  deconNameArray.unshift(deconNameArray.pop());\n  const deconName = deconNameArray.join(\" \").trim();\n  looseNames.push(deconName, deconName.toLowerCase());\n\n  // word smart quotes are the worst\n  looseNames.push(name.replace(\"'\", \"’\").toLowerCase());\n  looseNames.push(name.replace(\"’\", \"'\").toLowerCase());\n  looseNames.push(name.replace(/s$/, \"\").toLowerCase()); // trim s, e.g. crossbow bolt(s)\n  looseNames.push(name.replace(\",\", \"\").toLowerCase()); // +1 weapons etc\n  looseNames.push(`${name} attack`.toLowerCase()); // Claw Attack\n  looseNames.push(name.split(\",\")[0].toLowerCase());\n\n  return looseNames;\n}\n\n// The monster setting is less vigorous!\nexport async function looseItemNameMatch(item, items, loose = false, monster = false, magicMatch = false) {\n  // first pass is a strict match\n  let matchingItem = items.find((matchItem) => {\n    let activationMatch = false;\n    const alternativeNames = matchItem.flags?.ddbimporter?.dndbeyond?.alternativeNames;\n    const extraNames = (alternativeNames) ? matchItem.flags.ddbimporter.dndbeyond.alternativeNames : [];\n\n    const itemActivationProperty = Object.prototype.hasOwnProperty.call(item.system, 'activation');\n    const matchItemActivationProperty = Object.prototype.hasOwnProperty.call(item.system, 'activation');\n\n    if (itemActivationProperty && item.system?.activation?.type == \"\") {\n      activationMatch = true;\n    } else if (matchItemActivationProperty && itemActivationProperty) {\n      // I can't remember why I added this. Maybe I was concerned about identical named items with\n      // different activation times?\n      // maybe I just want to check it exists?\n      // causing issues so changed.\n      // activationMatch = matchItem.system.activation.type === item.system.activation.type;\n      activationMatch = matchItemActivationProperty && itemActivationProperty;\n    } else if (!itemActivationProperty) {\n      activationMatch = true;\n    }\n\n    const nameMatch = item.name === matchItem.name || extraNames.includes(item.name);\n    const isMatch = nameMatch && item.type === matchItem.type && activationMatch;\n    return isMatch;\n  });\n\n  if (!matchingItem && monster) {\n    matchingItem = items.find(\n      (matchItem) => {\n        const monsterNames = getMonsterNames(matchItem.name);\n        const monsterMatch = (monsterNames.includes(item.name.toLowerCase()))\n          && DICTIONARY.types.monster.includes(matchItem.type)\n          && DICTIONARY.types.inventory.includes(item.type);\n        return monsterMatch;\n      });\n  }\n\n  if (!matchingItem && magicMatch) {\n    // is this an inverse match for updates?\n    // if so strip out the non-magic names, we want to match on the magic names\n    const magicName = item.name.replace(/(.*)\\s+(\\+\\d*)\\s*/, \"$1, $2\").trim().toLowerCase();\n    matchingItem = items.find(\n      (matchItem) => matchItem.name.trim().toLowerCase() == magicName\n    );\n  }\n\n  if (!matchingItem && loose) {\n    const looseNames = getLooseNames(item.name)\n      .filter((name) => {\n        if (!magicMatch) return true;\n        const removeMagicName = name.replace(/\\+\\d*\\s*/, \"\").trim();\n        if (name === removeMagicName) return false;\n        return true;\n      });\n    // lets go loosey goosey on matching equipment, we often get types wrong\n    matchingItem = items.find(\n      (matchItem) =>\n        (looseNames.includes(matchItem.name.toLowerCase()) || looseNames.includes(matchItem.name.toLowerCase().replace(\" armor\", \"\")))\n        && DICTIONARY.types.inventory.includes(item.type)\n        && DICTIONARY.types.inventory.includes(matchItem.type)\n    );\n\n    // super loose name match!\n    if (!matchingItem) {\n      // still no matching item, lets do a final pass\n      matchingItem = items.find(\n        (matchItem) => looseNames.includes(matchItem.name.split(\"(\")[0].trim().toLowerCase())\n      );\n    }\n  }\n  return matchingItem;\n}\n\nfunction flagMatch(item1, item2, matchFlags) {\n  // console.warn(\"flagMatch\", {item1, item2, matchFlags});\n  if (matchFlags.length === 0) return true;\n  const matched = matchFlags.some((flag) =>\n    item1.flags.ddbimporter[flag] && item2.flags.ddbimporter[flag]\n    && item1.flags.ddbimporter[flag] === item2.flags.ddbimporter[flag]\n  );\n  return matched;\n}\n\nasync function getFilteredItems(compendium, item, index, matchFlags) {\n  const indexEntries = index.filter((idx) => idx.name === item.name);\n\n  const mapped = await Promise.all(indexEntries.map((idx) => {\n    const entry = compendium.getDocument(idx._id).then((doc) => doc);\n    return entry;\n  }));\n\n  const flagFiltered = mapped.filter((idx) => {\n    const nameMatch = idx.name === item.name;\n    const flagMatched = flagMatch(idx, item, matchFlags);\n    return nameMatch && flagMatched;\n  });\n\n  return flagFiltered;\n}\n\n// async function getFlaggedItems(compendium, items, index, matchFlags) {\n//   let results = [];\n//   items.forEach((item) => {\n//     const flagged = getFilteredItems(compendium, item, index, matchFlags);\n//     results.push(flagged);\n//   });\n//   return Promise.all(results);\n// }\n\nasync function updateCompendiumItems(compendium, inputItems, index, matchFlags) {\n  let updates = [];\n  inputItems.forEach(async (item) => {\n    const existingItems = await getFilteredItems(compendium, item, index, matchFlags);\n    // we have a match, update first match\n    if (existingItems.length >= 1) {\n      const existing = existingItems[0];\n      // eslint-disable-next-line require-atomic-updates\n      item._id = existing._id;\n      DDBMuncher.munchNote(`Updating ${item.name} compendium entry`);\n      // purge existing active effects on this item\n      if (existing.results) await existing.deleteEmbeddedDocuments(\"TableResult\", [], { deleteAll: true });\n      if (existing.effects) await existing.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n      if (existing.flags) await copySupportedItemFlags(existing, item);\n\n      const tableUpdate = await existing.update(item, { pack: compendium.metadata.id });\n      // v10 bug - left in until fixed - tables don't update correctly\n      // if (tableUpdate === undefined) console.warn(\"Undefined table update\");\n      updates.push(tableUpdate);\n    }\n  });\n\n  // in v10 the table.update may not be returning all the updated items correctly\n\n  return updates;\n  // const results = await RollTable.updateDocuments(updates, { pack: compendium.metadata.id });\n  // console.warn(results);\n  // return results;\n}\n\nexport async function updateMidiFlags() {\n  const compendium = game.packs.get(\"midi-srd.Midi SRD Spells\");\n  const index = await compendium.getIndex();\n  const docs = await compendium.getDocuments();\n  const spells = docs.map((s) => s.toObject()).filter((s) => s.type === \"spell\");\n  const filteredSpells = spells.map((s) => {\n    delete s.flags.dynamiceffects;\n    delete s.flags.core;\n    if (s.flags.itemacro && s.flags.itemacro.macro.data.command == \"\") delete s.flags.itemacro;\n    if (s.flags.itemacro) {\n      delete s.flags.itemacro.macro._data;\n      delete s.flags.itemacro.macro.data.author;\n    }\n    const effects = s.effects.map((e) => {\n      if (e.flags) {\n        let flags = { };\n        if (e.flags.dae && e.flags.dae.macroRepeat !== \"none\") setProperty(flags, \"dae.macroRepeat\", e.flags.dae.macroRepeat);\n        if (e.flags[\"midi-qol\"]) flags[\"midi-qol\"] = e.flags[\"midi-qol\"];\n        e.flags = flags;\n      }\n      return e;\n    });\n    s.effects = effects;\n\n    return s;\n  });\n\n  updateCompendiumItems(compendium, filteredSpells, index, []);\n\n}\n\n// window.updateMidiFlags = updateMidiFlags;\n\nasync function createCompendiumItems(type, compendium, inputItems, index, matchFlags) {\n  let promises = [];\n  // compendiumItems.forEach(async (item) => {\n  for (const item of inputItems) {\n    // eslint-disable-next-line no-await-in-loop\n    const existingItems = await getFilteredItems(compendium, item, index, matchFlags);\n    // we have a single match\n    if (existingItems.length === 0) {\n      let newItem;\n      switch (type) {\n        case \"table\":\n        case \"tables\": {\n          newItem = new RollTable(item);\n          break;\n        }\n        default: {\n          try {\n            // eslint-disable-next-line no-await-in-loop\n            newItem = await Item.create(item, {\n              temporary: true,\n              displaySheet: false,\n            });\n          } catch (err) {\n            logger.error(`Error creating ${item.name}`, { item, err });\n            throw err;\n          }\n\n        }\n      }\n      if (!newItem) {\n        logger.error(`Item ${item.name} failed creation`, { item, newItem });\n      }\n      DDBMuncher.munchNote(`Creating ${item.name}`);\n      logger.debug(`Pushing ${item.name} to compendium`);\n      promises.push(compendium.importDocument(newItem));\n    }\n  };\n  return Promise.all(promises);\n}\n\nexport async function compendiumFolders(document, type) {\n  // using compendium folders?\n  const compendiumFolderAdd = game.settings.get(\"ddb-importer\", \"munching-policy-use-compendium-folders\");\n  const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n  if (compendiumFolderAdd && compendiumFoldersInstalled) {\n    // we create the compendium folder before import\n    DDBMuncher.munchNote(`Adding ${document.name} to compendium folder`);\n    logger.debug(`Adding ${document.name} to compendium folder`);\n    await addToCompendiumFolder(type, document);\n  }\n}\n\nexport async function updateCompendium(type, input, updateExisting = false, matchFlags = []) {\n  logger.debug(`Getting compendium for update of ${type} documents (checking ${input[type].length} docs)`);\n  const compendium = await CompendiumHelper.getCompendiumType(type);\n  compendium.configure({ locked: false });\n\n  if (game.user.isGM) {\n    const initialIndex = await compendium.getIndex();\n    // remove duplicate items based on name and type\n    const inputItems = [...new Map(input[type].map((item) => {\n      let filterItem = item[\"name\"] + item[\"type\"];\n      matchFlags.forEach((flag) => {\n        filterItem += item.flags.ddbimporter[flag];\n      });\n      return [filterItem, item];\n    })).values()];\n\n    let updateResults = [];\n    // update existing items\n    DDBMuncher.munchNote(`Creating and updating ${inputItems.length} new ${type} items in compendium...`, true);\n\n    if (updateExisting) {\n      updateResults = await updateCompendiumItems(compendium, inputItems, initialIndex, matchFlags);\n      logger.debug(`Updated ${updateResults.length} existing ${type} items in compendium`);\n    }\n\n    // create new items\n    const createResults = await createCompendiumItems(type, compendium, inputItems, initialIndex, matchFlags);\n    logger.debug(`Created ${createResults.length} new ${type} items in compendium`);\n    DDBMuncher.munchNote(\"\", true);\n\n    // compendium folders\n    createResults.forEach(async (document) => {\n      await compendiumFolders(document, type);\n    });\n\n    const results = createResults.concat(updateResults);\n    return new Promise((resolve) => resolve(results));\n  }\n  return [];\n}\n\nasync function getSRDIconMatch(type) {\n  const compendiumName = SETTINGS.SRD_COMPENDIUMS.find((c) => c.type == type).name;\n  if (!CONFIG.DDBI.SRD_LOAD.packsLoaded[compendiumName]) await loadpacks(compendiumName);\n\n  const items = CONFIG.DDBI.SRD_LOAD.packs[compendiumName].map((item) => {\n    let smallItem = {\n      name: item.name,\n      img: item.img,\n      type: item.type,\n      system: {},\n    };\n    if (item.system.activation) smallItem.system.activation = item.system.activation;\n    return smallItem;\n  });\n\n  return items;\n}\n\nexport async function getSRDIconLibrary() {\n  if (CONFIG.DDBI.SRD_LOAD.mapLoaded) return CONFIG.DDBI.SRD_LOAD.iconMap;\n  const compendiumFeatureItems = await getSRDIconMatch(\"features\");\n  const compendiumInventoryItems = await getSRDIconMatch(\"inventory\");\n  const compendiumSpellItems = await getSRDIconMatch(\"spells\");\n  const compendiumMonsterFeatures = await getSRDIconMatch(\"monsterfeatures\");\n\n  // eslint-disable-next-line require-atomic-updates\n  CONFIG.DDBI.SRD_LOAD.iconMap = compendiumInventoryItems.concat(\n    compendiumSpellItems,\n    compendiumFeatureItems,\n    compendiumMonsterFeatures,\n  );\n  return CONFIG.DDBI.SRD_LOAD.iconMap;\n}\n\nexport async function copySRDIcons(items, srdIconLibrary = null, nameMatchList = []) {\n  // eslint-disable-next-line require-atomic-updates\n  if (!srdIconLibrary) srdIconLibrary = await getSRDIconLibrary();\n\n  return new Promise((resolve) => {\n    const srdItems = items.map((item) => {\n      logger.debug(`Matching ${item.name}`);\n      const nameMatch = nameMatchList.find((m) => m.name === item.name);\n      if (nameMatch) {\n        item.img = nameMatch.img;\n      } else {\n        looseItemNameMatch(item, srdIconLibrary, true).then((match) => {\n          if (match) {\n            srdIconLibrary.push({ name: item.name, img: match.img });\n            item.img = match.img;\n          }\n        });\n      }\n      return item;\n\n    });\n    resolve(srdItems);\n  });\n}\n\nexport async function retainExistingIcons(items) {\n  return new Promise((resolve) => {\n    const newItems = items.map((item) => {\n      if (item.flags.ddbimporter?.ignoreIcon) {\n        logger.debug(`Retaining icon for ${item.name} to ${item.flags.ddbimporter.matchedImg}`);\n        item.img = item.flags.ddbimporter.matchedImg;\n      }\n      return item;\n    });\n    resolve(newItems);\n  });\n}\n\nasync function getDDBItemImages(items, download) {\n  DDBMuncher.munchNote(`Fetching DDB Item Images`);\n  const downloadImages = (download) ? true : game.settings.get(\"ddb-importer\", \"munching-policy-download-images\");\n  const remoteImages = game.settings.get(\"ddb-importer\", \"munching-policy-remote-images\");\n\n  const itemMap = items.map(async (item) => {\n    let itemImage = {\n      name: item.name,\n      type: item.type,\n      img: null,\n      large: null,\n    };\n\n    if (item.flags && item.flags.ddbimporter && item.flags.ddbimporter && item.flags.ddbimporter.dndbeyond) {\n      if (item.flags.ddbimporter.dndbeyond.avatarUrl) {\n        const avatarUrl = item.flags.ddbimporter.dndbeyond['avatarUrl'];\n        if (avatarUrl && avatarUrl != \"\") {\n          DDBMuncher.munchNote(`Downloading ${item.name} image`);\n          const downloadOptions = { type: \"item\", name: item.name, download: downloadImages, remoteImages };\n          const smallImage = await FileHelper.getImagePath(avatarUrl, downloadOptions);\n          logger.debug(`Final image ${smallImage}`);\n          itemImage.img = smallImage;\n        }\n      }\n      if (item.flags.ddbimporter.dndbeyond.largeAvatarUrl) {\n        const largeAvatarUrl = item.flags.ddbimporter.dndbeyond['largeAvatarUrl'];\n        if (largeAvatarUrl && largeAvatarUrl != \"\") {\n          const downloadOptions = { type: \"item-large\", name: item.name, download: downloadImages, remoteImages };\n          const largeImage = await FileHelper.getImagePath(largeAvatarUrl, downloadOptions);\n          itemImage.large = largeImage;\n          if (!itemImage.img) itemImage.img = largeImage;\n        }\n      }\n    }\n\n    DDBMuncher.munchNote(\"\");\n    return itemImage;\n  });\n\n  return Promise.all(itemMap);\n}\n\nasync function getDDBGenericItemImages(download) {\n  DDBMuncher.munchNote(`Fetching DDB Generic Item icons`);\n  const itemMap = DICTIONARY.items.map(async (item) => {\n    const downloadOptions = { type: \"item\", name: item.filterType, download };\n    const img = await FileHelper.getImagePath(item.img, downloadOptions);\n    let itemIcons = {\n      filterType: item.filterType,\n      img: img,\n    };\n    return itemIcons;\n  });\n\n  DDBMuncher.munchNote(\"\");\n  return Promise.all(itemMap);\n}\n\nasync function getDDBGenericLootImages(download) {\n  DDBMuncher.munchNote(`Fetching DDB Generic Loot icons`);\n  const itemMap = DICTIONARY.genericItemIcons.map(async (item) => {\n    const downloadOptions = { type: \"equipment\", name: item.name, download };\n    const img = await FileHelper.getImagePath(item.img, downloadOptions);\n    let itemIcons = {\n      name: item.name,\n      img: img,\n    };\n    return itemIcons;\n  });\n\n  DDBMuncher.munchNote(\"\");\n  return Promise.all(itemMap);\n}\n\nexport async function getDDBGenericItemIcons(items, download) {\n  const genericItems = await getDDBGenericItemImages(download);\n  const genericLoots = await getDDBGenericLootImages(download);\n\n  let updatedItems = items.map((item) => {\n    // logger.debug(item.name);\n    // logger.debug(item.flags.ddbimporter.dndbeyond.filterType);\n    const excludedItems = [\"spell\", \"feat\", \"class\"];\n    if (!excludedItems.includes(item.type)\n        && item.flags\n        && item.flags.ddbimporter\n        && item.flags.ddbimporter.dndbeyond) {\n      let generic = null;\n      if (item.flags.ddbimporter.dndbeyond.filterType) {\n        generic = genericItems.find((i) => i.filterType === item.flags.ddbimporter.dndbeyond.filterType);\n      } else if (item.flags.ddbimporter.dndbeyond.type) {\n        generic = genericLoots.find((i) => i.name === item.flags.ddbimporter.dndbeyond.type);\n      }\n      if (generic && (!item.img || item.img == \"\" || item.img == CONST.DEFAULT_TOKEN)) {\n        item.img = generic.img;\n      }\n    }\n    return item;\n  });\n  return Promise.all(updatedItems);\n}\n\nasync function getDDBSchoolSpellImages(download) {\n  DDBMuncher.munchNote(`Fetching spell school icons`);\n  const schoolMap = DICTIONARY.spell.schools.map(async (school) => {\n    const downloadOptions = { type: \"spell\", name: school.name, download };\n    const img = await FileHelper.getImagePath(school.img, downloadOptions);\n    let schoolIcons = {\n      name: school.name,\n      img: img,\n      id: school.id,\n    };\n    return schoolIcons;\n  });\n\n  DDBMuncher.munchNote(\"\");\n  return Promise.all(schoolMap);\n}\n\nexport async function getDDBSpellSchoolIcons(items, download) {\n  const schools = await getDDBSchoolSpellImages(download);\n\n  let updatedItems = items.map((item) => {\n    // logger.debug(item.name);\n    // logger.debug(item.flags.ddbimporter.dndbeyond);\n    if (item.type == \"spell\") {\n      const school = schools.find((school) => school.id === item.system.school);\n      if (school && (!item.img || item.img == \"\" || item.img == CONST.DEFAULT_TOKEN)) {\n        item.img = school.img;\n      }\n    }\n    return item;\n  });\n  return Promise.all(updatedItems);\n}\n\nexport async function getDDBEquipmentIcons(items, download) {\n  const itemImages = await getDDBItemImages(items.filter((item) => DICTIONARY.types.inventory.includes(item.type)), download);\n\n  let updatedItems = items.map((item) => {\n    // logger.debug(item.name);\n    // logger.debug(item.flags.ddbimporter.dndbeyond);\n    if (DICTIONARY.types.inventory.includes(item.type)) {\n      if (!item.img || item.img == \"\" || item.img == CONST.DEFAULT_TOKEN) {\n        const imageMatch = itemImages.find((m) => m.name == item.name && m.type == item.type);\n        if (imageMatch && imageMatch.img) {\n          item.img = imageMatch.img;\n        }\n        if (imageMatch && imageMatch.large) {\n          item.flags.ddbimporter.dndbeyond['pictureUrl'] = imageMatch.large;\n        }\n      }\n    }\n    return item;\n  });\n  return Promise.all(updatedItems);\n}\n\n\nexport async function updateMagicItemImages(items) {\n  const useSRDCompendiumIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-srd-icons\");\n  const ddbSpellIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-spell-icons\");\n  const inbuiltIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-inbuilt-icons\");\n  const ddbItemIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-item-icons\");\n\n  // if we still have items to add, add them\n  if (items.length > 0) {\n    if (ddbItemIcons) {\n      logger.debug(\"Magic items: adding equipment icons\");\n      items = await getDDBEquipmentIcons(items, true);\n    }\n\n    if (inbuiltIcons) {\n      logger.debug(\"Magic items: adding inbuilt icons\");\n      items = await copyInbuiltIcons(items);\n    }\n\n    if (useSRDCompendiumIcons) {\n      logger.debug(\"Magic items: adding srd compendium icons\");\n      items = await copySRDIcons(items);\n    }\n\n    if (ddbSpellIcons) {\n      logger.debug(\"Magic items: adding ddb spell school icons\");\n      items = await getDDBSpellSchoolIcons(items, true);\n    }\n  }\n  return items;\n}\n\n/**\n * Updates game folder items\n * @param {*} type\n */\nasync function updateFolderItems(type, input, update = true) {\n  if (type === \"itemSpells\") {\n    // eslint-disable-next-line require-atomic-updates\n    input[type] = await updateMagicItemImages(input[type]);\n  }\n\n  const folderLookup = SETTINGS.GAME_FOLDER_LOOKUPS.find((c) => c.type == type);\n  const itemFolderNames = [...new Set(input[type]\n    .filter((item) => item.flags?.ddbimporter?.dndbeyond?.lookupName)\n    .map((item) => item.flags.ddbimporter.dndbeyond.lookupName))];\n\n  const getSubFolders = async () => {\n    return Promise.all(\n      itemFolderNames.map((name) => {\n        return utils.getFolder(folderLookup.folder, name);\n      })\n    );\n  };\n\n  const subFolders = await getSubFolders();\n\n  const defaultItemsFolder = await utils.getFolder(folderLookup.folder);\n  const existingItems = await game.items.entities.filter((item) => {\n    const itemFolder = subFolders.find((folder) =>\n      item.flags?.ddbimporter?.dndbeyond?.lookupName\n      && folder.name === item.flags.ddbimporter.dndbeyond.lookupName\n    );\n    return itemFolder && item.type === folderLookup.itemType && item.folder === itemFolder._id;\n  });\n\n  // update or create folder items\n  const updateItems = async () => {\n    return Promise.all(\n      input[type]\n        .filter((item) => existingItems.some((idx) => idx.name === item.name))\n        .map(async (item) => {\n          const existingItem = await existingItems.find((existing) => item.name === existing.name);\n          item._id = existingItem._id;\n          logger.info(`Updating ${type} ${item.name}`);\n          await copySupportedItemFlags(existingItem, item);\n          await Item.update(item);\n          return item;\n        })\n    );\n  };\n\n  const createItems = async () => {\n    return Promise.all(\n      input[type]\n        .filter((item) => !existingItems.some((idx) => idx.name === item.name))\n        .map(async (item) => {\n          if (!game.user.can(\"ITEM_CREATE\")) {\n            ui.notifications.warn(`Cannot create ${folderLookup.type} ${item.name} for ${type}`);\n          } else {\n            logger.info(`Creating ${type} ${item.name}`);\n            const itemsFolder = subFolders.find((folder) =>\n              item.flags?.ddbimporter?.dndbeyond?.lookupName\n              && folder.name === item.flags.ddbimporter.dndbeyond.lookupName\n            );\n            item.folder = (itemsFolder) ? itemsFolder._id : defaultItemsFolder._id;\n            await Item.create(item);\n          }\n          return item;\n        })\n    );\n  };\n\n  if (update) await updateItems();\n  await createItems();\n\n  // lets generate our compendium info like id, pack and img for use\n  // by things like magicitems\n  const folderIds = [defaultItemsFolder._id, ...subFolders.map((f) => f._id)];\n  const items = Promise.all(\n    game.items.entities\n      .filter((item) => item.type === folderLookup.itemType && folderIds.includes(item.folder))\n      .map((result) => {\n        const subFolder = (result.flags.ddbimporter?.dndbeyond?.lookupName)\n          ? result.flags.ddbimporter.dndbeyond.lookupName\n          : null;\n        return {\n          magicItem: {\n            _id: result._id,\n            id: result._id,\n            pack: \"world\",\n            img: result.img,\n            name: result.name,\n            subFolder: subFolder,\n            flatDc: result.flags?.ddbimporter?.dndbeyond?.overrideDC,\n            dc: result.flags?.ddbimporter?.dndbeyond?.dc,\n          },\n          _id: result._id,\n          name: result.name,\n          compendium: false,\n        };\n      })\n  );\n  return items;\n}\n\nexport function updateCharacterItemFlags(itemData, replaceData) {\n  if (itemData.flags?.ddbimporter?.importId) setProperty(replaceData, \"flags.ddbimporter.importId\", itemData.flags.ddbimporter.importId);\n  if (itemData.system.quantity) replaceData.system.quantity = itemData.system.quantity;\n  if (itemData.system.attuned) replaceData.system.attuned = itemData.system.attuned;\n  if (itemData.system.attunement) replaceData.system.attunement = itemData.system.attunement;\n  if (itemData.system.equipped) replaceData.system.equipped = itemData.system.equipped;\n  if (itemData.system.uses) replaceData.system.uses = itemData.system.uses;\n  if (itemData.system.resources) replaceData.system.resources = itemData.system.resources;\n  if (itemData.system.consume) replaceData.system.consume = itemData.system.consume;\n  if (itemData.system.preparation) replaceData.system.preparation = itemData.system.preparation;\n  if (itemData.system.proficient) replaceData.system.proficient = itemData.system.proficient;\n  if (itemData.system.ability) replaceData.system.ability = itemData.system.ability;\n  return replaceData;\n}\n\nexport async function updateMatchingItems(oldItems, newItems, inOptions) {\n  let results = [];\n\n  const defaultOptions = {\n    looseMatch: false,\n    monster: false,\n    keepId: false,\n    keepDDBId: false,\n    overrideId: false,\n  };\n  const options = mergeObject(defaultOptions, inOptions);\n\n  for (let newItem of newItems) {\n    let item = duplicate(newItem);\n\n    const matched = options.overrideId\n      ? oldItems.find((oldItem) => getProperty(oldItem, \"flags.ddbimporter.overrideId\") == item._id)\n      : await looseItemNameMatch(item, oldItems, options.looseMatch, options.monster); // eslint-disable-line no-await-in-loop\n\n    if (matched) {\n      const match = duplicate(matched);\n      // in some instances we want to keep the ddb id\n      if (options.keepDDBId && hasProperty(item, \"flags.ddbimporter.id\")) {\n        setProperty(match, \"flags.ddbimporter.id\", duplicate(item.flags.ddbimporter.id));\n      }\n      if (!item.flags.ddbimporter) {\n        setProperty(item, \"flags.ddbimporter\", match.flags.ddbimporter);\n      } else if (match.flags.ddbimporter && item.flags.ddbimporter) {\n        const mergedFlags = mergeObject(item.flags.ddbimporter, match.flags.ddbimporter);\n        setProperty(item, \"flags.ddbimporter\", mergedFlags);\n      }\n      if (!item.flags.monsterMunch && match.flags.monsterMunch) {\n        setProperty(item, \"flags.monsterMunch\", match.flags.monsterMunch);\n      }\n      setProperty(item, \"flags.ddbimporter.originalItemName\", match.name);\n      setProperty(item, \"flags.ddbimporter.replaced\", true);\n      item = updateCharacterItemFlags(match, item);\n\n      if (!options.keepId) delete item[\"_id\"];\n      results.push(item);\n    }\n  }\n\n  return results;\n}\n\nexport async function getIndividualOverrideItems(overrideItems) {\n  const label = CompendiumHelper.getCompendiumLabel(\"custom\");\n  const compendium = CompendiumHelper.getCompendium(label);\n\n  const compendiumItems = await Promise.all(overrideItems.map(async (item) => {\n    const compendiumItem = duplicate(await compendium.getDocument(item.flags.ddbimporter.overrideId));\n    setProperty(compendiumItem, \"flags.ddbimporter.pack\", `${compendium.metadata.id}`);\n    if (hasProperty(item, \"flags.ddbimporter.overrideItem\")) {\n      setProperty(compendiumItem, \"flags.ddbimporter.overrideItem\", item.flags.ddbimporter.overrideItem);\n    } else {\n      setProperty(compendiumItem, \"flags.ddbimporter.overrideItem\", {\n        name: item.name,\n        type: item.type,\n        ddbId: item.flags.ddbimporter?.id\n      });\n    }\n\n    return compendiumItem;\n  }));\n\n  const matchingOptions = {\n    looseMatch: false,\n    monster: false,\n    keepId: true,\n    keepDDBId: true,\n    overrideId: true,\n  };\n\n  const remappedItems = await updateMatchingItems(overrideItems, compendiumItems, matchingOptions);\n\n  return remappedItems;\n}\n\n/**\n *\n */\nexport async function loadPassedItemsFromCompendium(compendium, items, type, inOptions) {\n  if (!compendium) return [];\n  const defaultOptions = {\n    looseMatch: false,\n    monsterMatch: false,\n    keepId: false,\n    deleteCompendiumId: true,\n    indexFilter: {}, // { fields: [\"name\", \"flags.ddbimporter.id\"] }\n    keepDDBId: false,\n  };\n  const options = mergeObject(defaultOptions, inOptions);\n\n  if (!compendium.indexed) await compendium.getIndex(options.indexFilter);\n  const index = compendium.index;\n  const firstPassItems = await index.filter((i) =>\n    items.some((orig) => {\n      const extraNames = (orig.flags?.ddbimporter?.dndbeyond?.alternativeNames)\n        ? orig.flags.ddbimporter.dndbeyond.alternativeNames\n        : [];\n      if (options.looseMatch) {\n        const looseNames = getLooseNames(orig.name, extraNames);\n        return looseNames.includes(i.name.split(\"(\")[0].trim().toLowerCase());\n      } else if (options.monsterMatch) {\n        const monsterNames = getMonsterNames(orig.name);\n        // console.log(magicNames)\n        if (i.name === orig.name) {\n          return true;\n        } else if (monsterNames.includes(i.name.toLowerCase())) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return i.name === orig.name || extraNames.includes(i.name);\n      }\n    })\n  );\n\n  let loadedItems = [];\n  for (const i of firstPassItems) {\n    // eslint-disable-next-line no-await-in-loop\n    let item = await compendium.getDocument(i._id).then((doc) => {\n      const docData = doc.toObject();\n      if (options.deleteCompendiumId) delete docData._id;\n      SETTINGS.COMPENDIUM_REMOVE_FLAGS.forEach((flag) => {\n        if (hasProperty(docData, flag)) setProperty(docData, flag, undefined);\n      });\n\n      return docData;\n    });\n    setProperty(item, \"flags.ddbimporter.pack\", `${compendium.metadata.id}`);\n    loadedItems.push(item);\n  }\n  logger.debug(`compendium ${type} loaded items:`, loadedItems);\n\n  const matchingOptions = {\n    looseMatch: options.looseMatch,\n    monster: options.monsterMatch,\n    keepId: options.keepId,\n    keepDDBId: options.keepDDBId,\n  };\n\n  const results = await updateMatchingItems(items, loadedItems, matchingOptions);\n  logger.debug(`compendium ${type} result items:`, results);\n  return results;\n}\n\n/**\n * gets items from compendium\n * @param {*} items\n * @param {*} type\n * @param {*} options\n */\nexport async function getCompendiumItems(items, type, inOptions) {\n  const defaultOptions = {\n    compendiumLabel: null,\n    looseMatch: false,\n    monsterMatch: false,\n    keepId: false,\n    deleteCompendiumId: true,\n    keepDDBId: false,\n  };\n  const options = mergeObject(defaultOptions, inOptions);\n\n  if (!options.compendiumLabel) {\n    options.compendiumLabel = CompendiumHelper.getCompendiumLabel(type);\n  }\n  const compendium = CompendiumHelper.getCompendium(options.compendiumLabel, false);\n  if (!compendium) return [];\n\n  const loadOptions = {\n    looseMatch: options.looseMatch,\n    monsterMatch: options.monsterMatch,\n    keepId: options.keepId,\n    keepDDBId: options.keepDDBId,\n    deleteCompendiumId: options.deleteCompendiumId,\n  };\n  const results = await loadPassedItemsFromCompendium(compendium, items, type, loadOptions);\n\n  return results;\n}\n\nexport async function getSRDCompendiumItems(items, type, looseMatch = false, keepId = false, monster = false) {\n  const compendiumName = SETTINGS.SRD_COMPENDIUMS.find((c) => c.type == type).name;\n  if (!CONFIG.DDBI.SRD_LOAD.packsLoaded[compendiumName]) await loadpacks(compendiumName);\n  const compendiumItems = CONFIG.DDBI.SRD_LOAD.packs[compendiumName];\n\n  const loadedItems = await compendiumItems.filter((i) =>\n    compendiumItems.some((orig) => {\n      const extraNames = (orig.flags?.ddbimporter?.dndbeyond?.alternativeNames)\n        ? orig.flags.ddbimporter.dndbeyond.alternativeNames\n        : [];\n      if (looseMatch) {\n        const looseNames = getLooseNames(orig.name, extraNames);\n        return looseNames.includes(i.name.split(\"(\")[0].trim().toLowerCase());\n      } else {\n        return i.name === orig.name || extraNames.includes(i.name);\n      }\n    })\n  ).map((i) => {\n    const item = i.toObject();\n    if (item.flags.ddbimporter) {\n      item.flags.ddbimporter[\"pack\"] = compendiumName;\n    } else {\n      item.flags.ddbimporter = { pack: compendiumName };\n    }\n    return item;\n  });\n  // logger.debug(`SRD ${type} loaded items:`, loadedItems);\n\n  const matchingOptions = {\n    looseMatch,\n    monster,\n    keepId,\n  };\n\n  const results = await updateMatchingItems(items, loadedItems, matchingOptions);\n  logger.debug(`SRD ${type} result items:`, results);\n\n  return results;\n}\n\n/**\n * Add an item to effects, if available\n * @param {*} items\n */\nexport function addItemEffectIcons(items) {\n  logger.debug(\"Adding Icons to effects\");\n\n  items.forEach((item) => {\n    if (item.effects && (item.img || item.img !== \"\" || item.img !== CONST.DEFAULT_TOKEN)) {\n      item.effects.forEach((effect) => {\n\n        if (!effect.icon || effect.icon === \"\" || effect.icon === CONST.DEFAULT_TOKEN) {\n          effect.icon = item.img;\n        }\n      });\n    }\n\n  });\n  return items;\n}\n\n/**\n * TO DO : This function should do something.\n * @param {*} effects\n */\nexport function addACEffectIcons(effects) {\n  logger.debug(\"Adding Icons to AC effects\");\n\n  // effects.forEach((item) => {\n  //   if (!effect.icon || effect.icon === \"\" || effect.icon === CONST.DEFAULT_TOKEN) {\n  //     effect.icon = item.img;\n  //   }\n  // });\n  return effects;\n}\n\nexport async function updateIcons(items, srdIconUpdate = true, monster = false, monsterName = \"\") {\n  // this will use ddb item icons as a fall back\n  const ddbItemIcons = game.settings.get(\"ddb-importer\", \"munching-policy-use-ddb-item-icons\");\n  if (ddbItemIcons) {\n    logger.debug(\"DDB Equipment Icon Match\");\n    items = await getDDBEquipmentIcons(items);\n  }\n\n  const inBuiltIcons = game.settings.get(\"ddb-importer\", \"munching-policy-use-inbuilt-icons\");\n  if (inBuiltIcons) {\n    logger.debug(`Inbuilt icon matching (Monster? ${monster ? monsterName : monster})`);\n    items = await copyInbuiltIcons(items, monster, monsterName);\n  }\n\n  // check for SRD icons\n  const srdIcons = game.settings.get(\"ddb-importer\", \"munching-policy-use-srd-icons\");\n  // eslint-disable-next-line require-atomic-updates\n  if (srdIcons && srdIconUpdate) {\n    logger.debug(\"SRD Icon Matching\");\n    items = await copySRDIcons(items);\n  }\n\n  // this will use ddb spell school icons as a fall back\n  const ddbSpellIcons = game.settings.get(\"ddb-importer\", \"munching-policy-use-ddb-spell-icons\");\n  if (ddbSpellIcons) {\n    logger.debug(\"DDB Spell School Icon Match\");\n    items = await getDDBSpellSchoolIcons(items, true);\n  }\n\n  // this will use ddb generic icons as a fall back\n  const ddbGenericItemIcons = game.settings.get(\"ddb-importer\", \"munching-policy-use-ddb-generic-item-icons\");\n  if (ddbGenericItemIcons) {\n    logger.debug(\"DDB Generic Item Icon Match\");\n    items = await getDDBGenericItemIcons(items, true);\n  }\n\n  // update any generated effects\n  const addEffects = game.settings.get(\"ddb-importer\", \"munching-policy-add-effects\");\n  if (addEffects) {\n    items = addItemEffectIcons(items);\n  }\n\n  return items;\n}\n\nexport async function srdFiddling(items, type) {\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n  const useSrd = game.settings.get(\"ddb-importer\", \"munching-policy-use-srd\");\n\n  if (useSrd && type == \"monsters\") {\n    const srdItems = await getSRDCompendiumItems(items, type);\n    // removed existing items from those to be imported\n    logger.debug(\"Removing compendium items\");\n    const lessSrdItems = await removeItems(items, srdItems);\n    const newIcons = lessSrdItems.concat(srdItems);\n    const iconedItems = await updateIcons(newIcons);\n    // console.warn(\"Final Monsters\", srdItems);\n    return iconedItems;\n  } else if (useSrd) {\n    logger.debug(\"Removing compendium items\");\n    let itemMap = {};\n    const srdItems = await getSRDCompendiumItems(items, type);\n    itemMap[type] = srdItems;\n    logger.debug(\"Adding SRD compendium items\");\n    updateCompendium(type, itemMap, updateBool);\n    // removed existing items from those to be imported\n    return new Promise((resolve) => {\n      removeItems(items, srdItems)\n        .then((cleanedItems) => updateIcons(cleanedItems))\n        .then((iconItems) => resolve(iconItems));\n    });\n  } else {\n    const iconItems = await updateIcons(items);\n    return iconItems;\n  }\n}\n\n\nexport async function daeFiddling(items) {\n  const fiddle = game.settings.get(\"ddb-importer\", \"munching-policy-use-dae-effects\");\n  const installed = game.modules.get(\"dae\")?.active\n    && (game.modules.get(\"Dynamic-Effects-SRD\")?.active || game.modules.get(\"midi-srd\")?.active);\n\n  if (fiddle && installed) {\n    return addItemsDAESRD(items);\n  } else return items;\n}\n\nasync function getCompendiumItemSpells(spells) {\n  const getItemsOptions = {\n    looseMatch: true,\n    keepId: true,\n    deleteCompendiumId: false,\n  };\n  const compendiumSpells = await getCompendiumItems(spells, \"spell\", getItemsOptions);\n  const lessCompendiumSpells = await removeItems(spells, compendiumSpells);\n  const srdSpells = await getSRDCompendiumItems(lessCompendiumSpells, \"spell\", true, true);\n  const foundSpells = compendiumSpells.concat(srdSpells);\n\n  const itemSpells = foundSpells.map((result) => {\n    return {\n      magicItem: {\n        _id: result._id,\n        id: result._id,\n        pack: result.flags.ddbimporter.pack,\n        img: result.img,\n        name: result.name,\n        flatDc: result.flags.ddbimporter.dndbeyond?.overrideDC,\n        dc: result.flags.ddbimporter.dndbeyond?.dc,\n      },\n      _id: result._id,\n      name: result.name,\n      compendium: true,\n    };\n  });\n\n  return [foundSpells, itemSpells];\n}\n\n/**\n * This adds magic item spells to an item, by looking in compendium or from a world.\n */\nexport async function addMagicItemSpells(input) {\n  // check for existing spells in spell compendium & srdCompendium\n  const [compendiumSpells, compendiumItemSpells] = await getCompendiumItemSpells(input.itemSpells);\n  // if spells not found create world version\n  const remainingSpells = {\n    itemSpells: await removeItems(input.itemSpells, compendiumSpells),\n  };\n  const worldSpells = remainingSpells.length > 0\n    ? await updateFolderItems(\"itemSpells\", remainingSpells)\n    : [];\n  const itemSpells = worldSpells.concat(compendiumItemSpells);\n\n  logger.debug(\"itemSpells fetched\", itemSpells);\n\n  // scan the inventory for each item with spells and copy the imported data over\n  input.inventory.forEach((item) => {\n    logger.debug(\"replacing spells for item\", item);\n    const magicItemsSpells = getProperty(item, \"flags.magicitems.spells\");\n    if (magicItemsSpells) {\n      logger.debug(\"item.flags.magicitems.spells\", magicItemsSpells);\n      for (let [i, spell] of Object.entries(magicItemsSpells)) {\n        const itemSpell = itemSpells.find((iSpell) => iSpell.name === spell.name\n          && (iSpell.compendium || iSpell.magicItem.subFolder === item.name)\n        );\n        if (itemSpell) {\n          for (const [key, value] of Object.entries(itemSpell.magicItem)) {\n            item.flags.magicitems.spells[i][key] = value;\n          }\n        } else if (!game.user.can(\"ITEM_CREATE\")) {\n          ui.notifications.warn(`Magic Item ${item.name} cannot be enriched because of lacking player permissions`);\n        } else {\n          ui.notifications.warn(`Magic Item ${item.name}: cannot add spell ${spell.name}`);\n        }\n      }\n    }\n    // {\n    //   magicItem: {\n    //     _id: result._id,\n    //     id: result._id,\n    //     pack: result.flags.ddbimporter.pack,\n    //     img: result.img,\n    //     name: result.name,\n    //     flatDc: result.flags.ddbimporter.dndbeyond?.overrideDC,\n    //     dc: result.flags.ddbimporter.dndbeyond?.dc,\n    //   },\n    //   _id: result._id,\n    //   name: result.name,\n    //   compendium: true,\n    // };\n    const itemsWithSpells = getProperty(item, \"flags.items-with-spells-5e.item-spells\");\n    if (itemsWithSpells) {\n      logger.debug(\"item.flags.items-with-spells-5e.item-spells\", item.flags[\"items-with-spells-5e\"][\"item-spells\"]);\n      itemsWithSpells.forEach((spellData, i) => {\n        const itemSpell = itemSpells.find((iSpell) => iSpell.name === spellData.flags.ddbimporter.spellName\n          && (iSpell.compendium || iSpell.magicItem.subFolder === item.name)\n        );\n        if (itemSpell) {\n          item.flags[\"items-with-spells-5e\"][\"item-spells\"][i].uuid = `Compendium.${itemSpell.magicItem.pack}.${itemSpell._id}`;\n          if (item._id) {\n            setProperty(item.flags[\"items-with-spells-5e\"][\"item-spells\"][i], \"flags.items-with-spells-5e.item-spells.parent-item\", item._id);\n          }\n        } else if (!game.user.can(\"ITEM_CREATE\")) {\n          ui.notifications.warn(`Magic Item ${item.name} cannot be enriched because of lacking player permissions`);\n        } else {\n          ui.notifications.warn(`Magic Item ${item.name}: cannot add spell ${spellData.name}`);\n        }\n\n\n      });\n    }\n  });\n}\n","import logger from \"../logger.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { updateIcons, getCompendiumItems, getSRDIconLibrary, copySRDIcons, compendiumFolders } from \"./import.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { migrateItemsDAESRD } from \"./dae.js\";\nimport SETTINGS from \"../settings.js\";\nimport utils from \"../lib/utils.js\";\n\n// check items to see if retaining item, img or resources\nasync function existingItemRetentionCheck(currentItems, newItems, checkId = true) {\n  const returnItems = [];\n\n  await newItems.forEach((item) => {\n    const existingItem = currentItems.find((owned) => {\n      const simpleMatch\n        = item.name === owned.name\n        && item.type === owned.type\n        && item.system.activation?.type === owned.system.activation?.type\n        && ((checkId && item.flags?.ddbimporter?.id === owned.flags?.ddbimporter?.id) || !checkId);\n\n      return simpleMatch;\n    });\n\n    if (existingItem) {\n      if (existingItem.flags.ddbimporter?.ignoreItemImport) {\n        returnItems.push(duplicate(existingItem));\n      } else {\n        item[\"_id\"] = existingItem.id;\n        if (getProperty(existingItem, \"flags.ddbimporter.ignoreIcon\") === true) {\n          item.img = existingItem.img;\n          setProperty(item, \"flags.ddbimporter.ignoreIcon\", true);\n        }\n        if (getProperty(existingItem, \"flags.ddbimporter.retainResourceConsumption\")) {\n          item.system.consume = existingItem.system.consume;\n          setProperty(item, \"flags.ddbimporter.retainResourceConsumption\", true);\n          if (hasProperty(existingItem, \"flags.link-item-resource-5e\")) {\n            setProperty(item, \"flags.link-item-resource-5e\", existingItem.flags[\"link-item-resource-5e\"]);\n          }\n        }\n\n        if (!item.effects\n          || (item.effects && item.effects.length == 0 && existingItem.effects && existingItem.effects.length > 0)\n        ) {\n          item.effects = duplicate(existingItem.getEmbeddedCollection(\"ActiveEffect\"));\n        }\n\n        returnItems.push(item);\n      }\n    } else {\n      returnItems.push(item);\n    }\n  });\n\n  logger.debug(\"Finished retaining items\");\n  return returnItems;\n}\n\n\nasync function addNPCToCompendium(npc, type = \"monster\") {\n  const compendium = CompendiumHelper.getCompendiumType(type, false);\n  if (compendium) {\n    const npcBasic = duplicate(npc);\n\n    // unlock the compendium for update/create\n    compendium.configure({ locked: false });\n\n    let compendiumNPC;\n    if (hasProperty(npc, \"_id\") && compendium.index.has(npc._id)) {\n      if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\")) {\n        const existingNPC = await compendium.getDocument(npc._id);\n\n        const monsterTaggedItems = npcBasic.items.map((item) => {\n          setProperty(item, \"flags.ddbimporter.parentId\", npc._id);\n          return item;\n        });\n        const existingItems = existingNPC.getEmbeddedCollection(\"Item\");\n        npcBasic.items = await existingItemRetentionCheck(existingItems, monsterTaggedItems, false);\n\n        logger.debug(\"NPC Update Data\", duplicate(npcBasic));\n        await existingNPC.deleteEmbeddedDocuments(\"Item\", [], { deleteAll: true });\n        await existingNPC.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n        compendiumNPC = await existingNPC.update(npcBasic, { pack: compendium.collection, recursive: true, keepId: true });\n        if (!compendiumNPC) {\n          logger.debug(\"No changes made to base character\", npcBasic);\n          compendiumNPC = existingNPC;\n        }\n      }\n    } else {\n      // create the new npc\n      logger.debug(`Creating NPC actor ${npcBasic.name}`);\n      const options = {\n        displaySheet: false,\n        pack: compendium.collection,\n        keepId: true,\n      };\n      logger.debug(\"NPC New Data\", duplicate(npcBasic));\n      compendiumNPC = await Actor.create(npcBasic, options);\n    }\n\n    // using compendium folders?\n    if (compendiumNPC) {\n      await compendiumFolders(compendiumNPC, \"npc\");\n      return compendiumNPC;\n    }\n  } else {\n    logger.error(\"Error opening compendium, check your settings\");\n  }\n  return npc;\n}\n\nexport async function addNPCsToCompendium(npcs, type = \"monster\") {\n  const compendium = CompendiumHelper.getCompendiumType(type, false);\n  let results = [];\n  if (compendium) {\n    // unlock the compendium for update/create\n    compendium.configure({ locked: false });\n\n    const options = {\n      pack: compendium.collection,\n      displaySheet: false,\n      recursive: false,\n      keepId: true,\n    };\n\n    if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\")) {\n      const updateNPCs = npcs.filter((npc) => hasProperty(npc, \"_id\") && compendium.index.has(npc._id));\n      logger.debug(\"NPCs Update Data\", duplicate(updateNPCs));\n      const updateResults = await Actor.updateDocuments(updateNPCs, options);\n      results = results.concat(updateResults);\n    }\n\n    const newNPCs = npcs.filter((npc) => !hasProperty(npc, \"_id\") || !compendium.index.has(npc._id));\n    logger.debug(\"NPC New Data\", duplicate(newNPCs));\n    const createResults = await Actor.createDocuments(newNPCs, options);\n    results = results.concat(createResults);\n\n    // // using compendium folders?\n    // if (compendiumNPC) {\n    //   await compendiumFolders(compendiumNPC, \"npc\");\n    //   return compendiumNPC;\n    // }\n  } else {\n    logger.error(\"Error opening compendium, check your settings\");\n  }\n  return results;\n}\n\nexport async function addNPCDDBId(npc, type = \"monster\") {\n  let npcBasic = duplicate(npc);\n  const compendium = CompendiumHelper.getCompendiumType(type, false);\n  if (compendium) {\n    // unlock the compendium for update/create\n    compendium.configure({ locked: false });\n    const monsterIndexFields = [\"name\", \"flags.ddbimporter.id\"];\n\n    const index = await compendium.getIndex({ fields: monsterIndexFields });\n    const npcMatch = index.contents.find((entity) =>\n      !hasProperty(entity, \"flags.ddbimporter.id\")\n      && entity.name.toLowerCase() === npcBasic.name.toLowerCase()\n    );\n\n    if (npcMatch) {\n      if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\")) {\n        const existingNPC = await compendium.getDocument(npcMatch._id);\n        const updateDDBData = {\n          _id: npcMatch._id,\n          \"flags.ddbimporter.id\": npcBasic.flags.ddbimporter.id,\n        };\n        logger.debug(\"NPCId Update Data\", duplicate(updateDDBData));\n        await existingNPC.update(updateDDBData);\n      }\n    }\n  } else {\n    logger.error(\"Error opening compendium, check your settings\");\n  }\n}\n\n\n// eslint-disable-next-line complexity\nexport async function getNPCImage(npcData, options) {\n  const defaultOptions = {\n    forceUpdate: false,\n    forceUseFullToken: false,\n    forceUseTokenAvatar: false,\n    disableAutoTokenizeOverride: false,\n    type: \"monster\"\n  };\n  const mergedOptions = mergeObject(defaultOptions, options);\n  // check to see if we have munched flags to work on\n  if (!hasProperty(npcData, \"flags.monsterMunch.img\")) {\n    return npcData;\n  }\n\n  const updateImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\");\n  if (!mergedOptions.forceUpdate && !updateImages && npcData.img !== CONST.DEFAULT_TOKEN) {\n    return npcData;\n  }\n\n  let ddbAvatarUrl = npcData.flags.monsterMunch.img;\n  let ddbTokenUrl = npcData.flags.monsterMunch.tokenImg;\n  const useAvatarAsToken = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-full-token-image\") || mergedOptions.forceUseFullToken;\n  const useTokenAsAvatar = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-token-avatar-image\") || mergedOptions.forceUseTokenAvatar;\n  if (useAvatarAsToken) {\n    ddbTokenUrl = ddbAvatarUrl;\n  } else if (useTokenAsAvatar) {\n    ddbAvatarUrl = ddbTokenUrl;\n  }\n\n  const npcType = options.type.startsWith(\"vehicle\") ? \"vehicle\" : npcData.system.details.type.value;\n  const genericNPCName = utils.referenceNameString(npcType);\n  const npcName = utils.referenceNameString(npcData.name);\n\n  if (!ddbAvatarUrl && ddbTokenUrl) ddbAvatarUrl = ddbTokenUrl;\n  if (!ddbTokenUrl && ddbAvatarUrl) ddbTokenUrl = ddbAvatarUrl;\n\n  if (ddbAvatarUrl) {\n    const ext = ddbAvatarUrl.split(\".\").pop().split(/#|\\?|&/)[0];\n    const genericNpc = ddbAvatarUrl.endsWith(npcType + \".\" + ext);\n    const name = genericNpc ? genericNPCName : npcName;\n    const nameType = genericNpc ? \"npc-generic\" : \"npc\";\n    const downloadOptions = { type: nameType, name };\n    // eslint-disable-next-line require-atomic-updates\n    npcData.img = await FileHelper.getImagePath(ddbAvatarUrl, downloadOptions);\n  }\n\n  // Token images always have to be downloaded.\n  if (ddbTokenUrl) {\n    const tokenExt = ddbTokenUrl.split(\".\").pop().split(/#|\\?|&/)[0];\n    const genericNpc = ddbTokenUrl.endsWith(npcType + \".\" + tokenExt);\n    const name = genericNpc ? genericNPCName : npcName;\n    const nameType = genericNpc ? \"npc-generic-token\" : \"npc-token\";\n    const downloadOptions = { type: nameType, name, download: true, remoteImages: false, force: true };\n    // eslint-disable-next-line require-atomic-updates\n    npcData.prototypeToken.texture.src = await FileHelper.getImagePath(ddbTokenUrl, downloadOptions);\n  }\n\n  // check avatar, if not use token image\n  // eslint-disable-next-line require-atomic-updates\n  if (!npcData.img && npcData.prototypeToken.texture.src) npcData.img = npcData.prototypeToken.texture.src;\n\n  // final check if image comes back as null\n  // eslint-disable-next-line require-atomic-updates\n  if (npcData.img === null) npcData.img = CONST.DEFAULT_TOKEN;\n  // eslint-disable-next-line require-atomic-updates\n  if (npcData.prototypeToken.texture.src === null) npcData.prototypeToken.texture.src = CONST.DEFAULT_TOKEN;\n\n  // okays, but do we now want to tokenize that?\n  const tokenizerReady = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-tokenize\")\n    && !mergedOptions.disableAutoTokenizeOverride\n    && game.modules.get(\"vtta-tokenizer\")?.active;\n  if (tokenizerReady) {\n    const compendiumLabel = CompendiumHelper.getCompendiumLabel(options.type);\n    // eslint-disable-next-line require-atomic-updates\n    npcData.prototypeToken.texture.src = await window.Tokenizer.autoToken(npcData, { nameSuffix: `-${compendiumLabel}`, updateActor: false });\n    logger.debug(`Generated tokenizer image at ${npcData.prototypeToken.texture.src}`);\n  }\n\n  return npcData;\n}\n\nasync function swapItems(data) {\n  const swap = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-items\");\n\n  if (swap) {\n    logger.debug(\"Replacing items...\");\n    // console.info(data.items);\n    const getItemOptions = {\n      monsterMatch: true,\n    };\n    const updatedItems = await getCompendiumItems(data.items, \"inventory\", getItemOptions);\n    const itemsToRemove = updatedItems.map((item) => {\n      logger.debug(`${item.name} to ${item.flags.ddbimporter.originalItemName}`);\n      return { name: item.flags.ddbimporter.originalItemName, type: item.type };\n    });\n    logger.debug(\"Swapping items\", itemsToRemove);\n    // console.warn(itemsToRemove);\n    const lessUpdatedItems = data.items.filter((item) =>\n      !itemsToRemove.some((target) => item.name === target.name && item.type === target.type)\n    );\n    // console.log(lessUpdatedItems);\n    const newItems = lessUpdatedItems.concat(updatedItems);\n    // console.error(newItems);\n    // eslint-disable-next-line require-atomic-updates\n    data.items = newItems;\n\n  }\n}\n\nasync function linkResourcesConsumption(actor) {\n  if (actor.items.some((item) => item.system.recharge?.value)) {\n    logger.debug(`Resource linking for ${actor.name}`);\n    actor.items.forEach((item) => {\n      if (item.system?.recharge?.value) {\n        const itemID = randomID(16);\n        item._id = itemID;\n        if (item.type === \"weapon\") {\n          item.type = \"feat\";\n          delete item.system.weaponType;\n          item.system.type = {\n            value: \"monster\",\n            subtype: \"\",\n          };\n        }\n        item.system.consume = {\n          type: \"charges\",\n          target: itemID,\n          amount: null,\n        };\n      }\n    });\n  }\n  return actor;\n}\n\n// async function buildNPC(data, srdIconLibrary, iconMap) {\nexport async function buildNPC(data, type = \"monster\", temporary = true, update = false, handleBuild = false) {\n  logger.debug(\"Importing Images\");\n  await getNPCImage(data, { type });\n  logger.debug(\"Checking Items\");\n  await swapItems(data);\n\n  // DAE\n  const daeInstalled = game.modules.get(\"dae\")?.active\n    && (game.modules.get(\"Dynamic-Effects-SRD\")?.active || game.modules.get(\"midi-srd\")?.active);\n  const daeCopy = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-dae-copy\");\n  if (daeInstalled && daeCopy) {\n    DDBMuncher.munchNote(`Importing DAE Item for ${data.name}`);\n    // eslint-disable-next-line require-atomic-updates\n    data.items = await migrateItemsDAESRD(data.items);\n  }\n\n  logger.debug(\"Importing Icons\");\n  // eslint-disable-next-line require-atomic-updates\n  data.items = await updateIcons(data.items, false, true, data.name);\n  data = await linkResourcesConsumption(data);\n\n  if (handleBuild) {\n    // create the new npc\n    logger.debug(\"Creating NPC actor\");\n    const options = {\n      temporary: temporary,\n      displaySheet: false,\n    };\n    if (update) {\n      const npc = game.actors.get(data._id);\n      await npc.deleteEmbeddedDocuments(\"Item\", [], { deleteAll: true });\n      await Actor.updateDocuments([data]);\n      return npc;\n    } else {\n      const npc = await Actor.create(data, options);\n      return npc;\n    }\n\n  } else {\n    return data;\n  }\n\n}\n\nasync function parseNPC (data, bulkImport, type) {\n  const buildNpc = await buildNPC(data, type);\n  logger.info(`Processing ${type} ${buildNpc.name} for the compendium`);\n  if (bulkImport) {\n    return buildNpc;\n  } else {\n    const compendiumNPC = await addNPCToCompendium(buildNpc, type);\n    return compendiumNPC;\n  }\n}\n\nexport function addNPC(data, bulkImport, type) {\n  return new Promise((resolve, reject) => {\n    parseNPC(data, bulkImport, type)\n      .then((npc) => {\n        resolve(npc);\n      })\n      .catch((error) => {\n        logger.error(`error parsing NPC type ${type}: ${error} ${data.name}`);\n        logger.error(error.stack);\n        reject(error);\n      });\n  });\n}\n\nexport async function generateIconMap(monsters) {\n  let promises = [];\n\n  const srdIcons = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-icons\");\n  // eslint-disable-next-line require-atomic-updates\n  if (srdIcons) {\n    const srdIconLibrary = await getSRDIconLibrary();\n    DDBMuncher.munchNote(`Updating SRD Icons`, true);\n    let itemMap = [];\n\n    monsters.forEach((monster) => {\n      DDBMuncher.munchNote(`Processing ${monster.name}`);\n      promises.push(\n        copySRDIcons(monster.items, srdIconLibrary, itemMap).then((items) => {\n          monster.items = items;\n        })\n      );\n    });\n  }\n\n  return Promise.all(promises);\n}\n\nexport function copyExistingMonsterImages(monsters, existingMonsters) {\n  const updated = monsters.map((monster) => {\n    const existing = existingMonsters.find((m) => monster.name === m.name);\n    if (existing) {\n      monster.img = existing.img;\n      monster.prototypeToken.texture.src = existing.prototypeToken.texture.src;\n      return monster;\n    } else {\n      return monster;\n    }\n  });\n  return updated;\n}\n","// Main module class\nimport { updateCompendium, srdFiddling, daeFiddling } from \"./import.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport utils from \"../lib/utils.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport logger from \"../logger.js\";\nimport { createCompendiumFolderStructure } from \"./compendiumFolders.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\n\nasync function getCharacterInventory(items) {\n  return items.map((item) => {\n    return {\n      chargesUsed: 0,\n      definitionId: 0,\n      definitionTypeId: 0,\n      displayAsAttack: null,\n      entityTypeId: 0,\n      equipped: false,\n      id: 0,\n      isAttuned: false,\n      quantity: item.bundleSize ? item.bundleSize : 1,\n      definition: item,\n    };\n  });\n}\n\nasync function generateImportItems(items) {\n  const mockCharacter = {\n    system: JSON.parse(utils.getTemplate(\"character\")),\n    type: \"character\",\n    name: \"\",\n    flags: {\n      ddbimporter: {\n        compendium: true,\n        dndbeyond: {\n          effectAbilities: [],\n          totalLevels: 0,\n          proficiencies: [],\n          proficienciesIncludingEffects: [],\n          characterValues: [],\n        },\n      },\n    },\n  };\n  const mockDDB = {\n    character: {\n      classes: [],\n      race: {\n        racialTraits: [],\n      },\n      characterValues: [],\n      inventory: items,\n      customItems: null,\n      options: {\n        class: [],\n        race: [],\n        feat: [],\n      },\n      modifiers: {\n        race: [],\n        class: [],\n        background: [],\n        feat: [],\n        item: [],\n        condition: [],\n      },\n      feats: [],\n    }\n  };\n  let itemSpells = []; // here we need to parse each available spell and build a mock spell parser\n  const ddbCharacter = new DDBCharacter(mockDDB);\n  ddbCharacter.raw.character = mockCharacter;\n  ddbCharacter.source = {\n    ddb: mockDDB\n  };\n  ddbCharacter.raw.itemSpells = [];\n  const inventory = await ddbCharacter.getInventory();\n  const results = {\n    items: inventory,\n    itemSpellNames: itemSpells, // this needs to be a list of spells to find\n  };\n  return results;\n}\n\nfunction getItemData(sourceFilter) {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n  const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n  const sources = enableSources\n    ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n    : [];\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/items`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `items-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => {\n        if (sources.length == 0 || !sourceFilter) return data.data;\n        return data.data.filter((item) =>\n          item.sources.some((source) => sources.includes(source.sourceId))\n        );\n      })\n      .then((data) => {\n        if (sources.length > 0) return data;\n        if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew-only\")) {\n          return data.filter((item) => item.isHomebrew);\n        } else if (!game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew\")) {\n          return data.filter((item) => !item.isHomebrew);\n        } else {\n          return data;\n        }\n      })\n      .then((data) => getCharacterInventory(data))\n      .then((items) => generateImportItems(items))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function addMagicItemSpells(items, spells, updateBool) {\n  if (spells.length === 0) return;\n  const itemSpells = await updateCompendium(\"itemspells\", { itemspells: spells }, updateBool);\n  // scan the inventory for each item with spells and copy the imported data over\n  items.forEach((item) => {\n    if (item.flags.magicitems.spells) {\n      for (let [i, spell] of Object.entries(item.flags.magicitems.spells)) {\n        const itemSpell = itemSpells.find((item) => item.name === spell.name);\n        if (itemSpell) {\n          for (const [key, value] of Object.entries(itemSpell)) {\n            item.flags.magicitems.spells[i][key] = value;\n          }\n        }\n      }\n    }\n  });\n}\n\nexport async function parseItems(ids = null) {\n  const updateBool = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n  const magicItemsInstalled = !!game.modules.get(\"magicitems\");\n  const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n\n  // to speed up file checking we pregenerate existing files now.\n  logger.info(\"Checking for existing files...\");\n  await FileHelper.generateCurrentFiles(uploadDirectory);\n  logger.info(\"Check complete, getting ItemData.\");\n\n  const addToCompendiumFolder = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-compendium-folders\");\n  const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n  if (addToCompendiumFolder && compendiumFoldersInstalled) {\n    DDBMuncher.munchNote(`Checking compendium folders..`, true);\n    await createCompendiumFolderStructure(\"items\");\n  }\n\n  DDBMuncher.munchNote(\"Downloading item data..\");\n\n  // disable source filter if ids provided\n  const sourceFilter = !(ids !== null && ids.length > 0);\n  const results = await getItemData(sourceFilter);\n  let items = results.items;\n\n  DDBMuncher.munchNote(\"Parsing item data..\");\n\n  // Items Spell addition is currently not done, parsing out spells needs to be addded\n  // let itemSpells = results.value.itemSpells;\n  let itemSpells = null;\n\n  // store all spells in the folder specific for Dynamic Items\n  if (magicItemsInstalled && itemSpells && Array.isArray(itemSpells)) {\n    await addMagicItemSpells(items, itemSpells, updateBool);\n  }\n\n  const srdItems = await srdFiddling(items, \"inventory\");\n  const filteredItems = (ids !== null && ids.length > 0)\n    ? srdItems.filter((s) => s.flags?.ddbimporter?.definitionId && ids.includes(String(s.flags.ddbimporter.definitionId)))\n    : srdItems;\n  const finalItems = await daeFiddling(filteredItems);\n\n  const finalCount = finalItems.length;\n  DDBMuncher.munchNote(`Importing ${finalCount} items!`, true);\n\n  return new Promise((resolve) => {\n    resolve(updateCompendium(\"inventory\", { inventory: finalItems }, updateBool));\n  });\n}\n\n\n","// Import parsing functions\nimport { fixSpells } from \"./special.js\";\nimport { parseSpell } from \"./parseSpell.js\";\n\nexport async function getSpells(spells) {\n  let items = await Promise.all(spells\n    .filter((spell) => spell.definition)\n    .filter((spell) => {\n      // remove archived material\n      if (spell.definition.sources && spell.definition.sources.some((source) => source.sourceId === 39)) {\n        return false;\n      } else {\n        return true;\n      }\n    })\n    .map(async (spell) => {\n      spell.flags = {\n        ddbimporter: {\n          generic: true,\n          dndbeyond: {\n            lookup: \"generic\",\n            lookupName: \"generic\",\n            level: spell.castAtLevel,\n            castAtLevel: spell.castAtLevel,\n          },\n        },\n      };\n\n      return parseSpell(spell, null);\n    }));\n\n  if (items) fixSpells(null, items);\n\n  return items;\n}\n","// Main module class\nimport { updateCompendium, srdFiddling, daeFiddling } from \"./import.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { getSpells } from \"../parser/spells/getGenericSpells.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport logger from \"../logger.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport { createCompendiumFolderStructure } from \"./compendiumFolders.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nfunction getSpellData(className, sourceFilter) {\n  const cobaltCookie = getCobalt();\n  const campaignId = getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey, className: className };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n  const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n  const sources = enableSources\n    ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n    : [];\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/class/spells`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `spells-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => {\n        if (sources.length == 0 || !sourceFilter) return data.data;\n        return data.data.filter((spell) =>\n          spell.definition.sources.some((source) => sources.includes(source.sourceId))\n        );\n      })\n      .then((data) => {\n        if (sources.length > 0) return data;\n        if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew-only\")) {\n          return data.filter((spell) => spell.definition.isHomebrew);\n        } else if (!game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew\")) {\n          return data.filter((spell) => !spell.definition.isHomebrew);\n        } else {\n          return data;\n        }\n      })\n      .then((data) => resolve(data))\n      .catch((error) => {\n        logger.warn(error);\n        reject(error);\n      });\n  });\n}\n\nexport async function parseSpells(ids = null) {\n  const updateBool = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n  const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n\n  // to speed up file checking we pregenerate existing files now.\n  await FileHelper.generateCurrentFiles(uploadDirectory);\n\n  const addToCompendiumFolder = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-compendium-folders\");\n  const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n  if (addToCompendiumFolder && compendiumFoldersInstalled) {\n    DDBMuncher.munchNote(`Checking compendium folders..`, true);\n    await createCompendiumFolderStructure(\"spells\");\n    DDBMuncher.munchNote(\"\", true);\n  }\n\n  DDBMuncher.munchNote(\"Downloading spell data..\");\n\n  // disable source filter if ids provided\n  const sourceFilter = !(ids !== null && ids.length > 0);\n  const results = await Promise.allSettled([\n    getSpellData(\"Cleric\", sourceFilter),\n    getSpellData(\"Druid\", sourceFilter),\n    getSpellData(\"Sorcerer\", sourceFilter),\n    getSpellData(\"Warlock\", sourceFilter),\n    getSpellData(\"Wizard\", sourceFilter),\n    getSpellData(\"Paladin\", sourceFilter),\n    getSpellData(\"Ranger\", sourceFilter),\n    getSpellData(\"Bard\", sourceFilter),\n    getSpellData(\"Graviturgy\", sourceFilter),\n    getSpellData(\"Chronurgy\", sourceFilter),\n    getSpellData(\"Artificer\", sourceFilter),\n  ]);\n\n  DDBMuncher.munchNote(\"Parsing spell data..\");\n\n  const filteredResults = results\n    .filter((r) => r.status === \"fulfilled\")\n    .map((r) => r.value).flat().flat();\n\n  const rawSpells = await getSpells(filteredResults);\n\n  const spells = rawSpells\n    .filter((spell) => spell?.name)\n    .map((spell) => {\n      spell.name = spell.name.replace(/’/g, \"'\");\n      return spell;\n    });\n\n  if (results.some((r) => r.status === \"rejected\")) {\n    DDBMuncher.munchNote(\"Failed to parse some spells, see the developer console (F12) for details.\");\n    logger.error(\"Failed spell parsing\", results);\n  }\n\n  let uniqueSpells = spells.filter((v, i, a) => a.findIndex((t) => t.name === v.name) === i);\n  const srdSpells = await srdFiddling(uniqueSpells, \"spells\");\n  const filteredSpells = (ids !== null && ids.length > 0)\n    ? srdSpells.filter((s) => s.flags?.ddbimporter?.definitionId && ids.includes(String(s.flags.ddbimporter.definitionId)))\n    : srdSpells;\n  const finalSpells = await daeFiddling(filteredSpells);\n\n  const finalCount = finalSpells.length;\n  DDBMuncher.munchNote(`Importing ${finalCount} spells...`, true);\n\n  return new Promise((resolve) => {\n    resolve(updateCompendium(\"spells\", { spells: finalSpells }, updateBool));\n  });\n}\n\n\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array ? array.length : 0;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * Checks if a cache value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    Set = getNative(root, 'Set'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each\n * element is kept.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nexport function uniq(array) {\n  return (array && array.length)\n    ? baseUniq(array)\n    : [];\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n","/**\n * @license\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Nick Williams\n * Copyright (c) 2021 Jack Holloway\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport { uniq } from \"./lowdash/uniq.js\";\n\n/**\n * generates factory functions to convert table rows to objects,\n * based on the titles in the table's <thead>\n * @param  {Array<String>} headings the values of the table's <thead>\n * @return {(row: HTMLTableRowElement) => Object} a function that takes a table row and spits out an object\n */\nfunction mapRow(headings, highSplit = false) {\n  return function mapRowToObject({ cells }) {\n    const lowCells = [...cells];\n    const highCells = lowCells.length > headings.length ? lowCells.splice(lowCells.length / 2) : [];\n    const range = highSplit ? highCells : lowCells;\n\n    return range.reduce((result, cell, i) => {\n      const input = cell.querySelector(\"input,select\");\n      var value;\n\n      if (input) {\n        value = input.type === \"checkbox\" ? input.checked : input.value;\n      } else {\n        value = cell.innerHTML;\n      }\n\n      return Object.assign(result, { [headings[i]]: value });\n    }, {});\n  };\n}\n\n/**\n * given a table, generate an array of keys/column names\n *\n * @param  {HTMLTableElement} table the table to convert\n * @return {Array<String>}       array of strings representing each header in the table\n */\nexport function getHeadings(table, unique = true) {\n  if (!table.tHead || table.tHead.rows.length === 0) return [];\n  const headings = [...table.tHead.rows[0].cells].map((heading) => {\n    return heading.textContent;\n  });\n\n  if (unique) return uniq(headings);\n  return headings;\n}\n\n\nfunction getRowsFromHeader(table) {\n  let rows = [...table.tHead.rows];\n  rows.splice(0, 1);\n  return rows;\n}\n\n/**\n * given a table, generate an array of objects.\n * each object corresponds to a row in the table.\n * each object's key/value pairs correspond to a column's heading and the row's value for that column\n *\n * @param  {HTMLTableElement} table the table to convert\n * @return {Array<Object>}       array of objects representing each row in the table\n */\nexport function parseTable(table) {\n  const headings = getHeadings(table);\n  const allHeadings = getHeadings(table, false);\n\n  if (headings.length === 0) return [];\n  // some tables are misformated and only have a thead and no tbody\n  const rows = table.tBodies[0]\n    ? [...table.tBodies[0].rows]\n    : table.tHead.rows.length > 1\n      ? getRowsFromHeader(table)\n      : [];\n  // DDB often puts d rolls alongside each other. we attempt to detect these\n  const lowResults = rows.map(mapRow(headings));\n  const highResults =\n    allHeadings.length !== headings.length ? rows.map(mapRow(headings, true)) : [];\n\n  return lowResults.concat(highResults);\n}\n\n","import { parseTable, getHeadings } from \"../../vendor/parseTable.js\";\nimport utils from \"../lib/utils.js\";\nimport logger from \"../logger.js\";\nimport { updateCompendium } from \"./import.js\";\n\nfunction diceRollMatcher(match, p1, p2, p3, p4, p5) {\n  if (p5 && p5.toLowerCase() === \"damage\") {\n    let dmgString = `${p4} damage`;\n    dmgString = dmgString[0].toUpperCase() + dmgString.substring(1);\n    const diceString = utils.parseDiceString(p2, null, `[${p4.toLowerCase()}]`).diceString;\n    return `${p1 ? p1 : \"\"}[[/r ${diceString} # ${dmgString}]]${p3} damage`;\n  } else if (p5 && p1 && p5.toLowerCase() === \"points\" && p1.toLowerCase() === \"regains\") {\n    const diceString = utils.parseDiceString(p2, null, \"[healing]\").diceString;\n    return `${p1 ? p1 : \"\"}[[/r ${diceString} # Healing]]${p3} hit points`;\n  } else {\n    const diceString = utils.parseDiceString(p2).diceString;\n    const result = `${p1 ? p1 : \"\"}[[/r ${diceString}]]${p3 ? p3 : \"\"} ${p4 ? p4 : \"\"} ${p5 ? p5 : \"\"}`.trim();\n    return result;\n  }\n}\n\nfunction replaceRollLinks(text) {\n  text = text.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\");\n  const damageRegex = new RegExp(/([.>( ^]|^|regains +)?(\\d*d\\d+(?:\\s*[+-]\\s*\\d*d*\\d*)*)([.,<)]|$| +) *([a-z,A-Z]*) *(damage|points)?/, \"g\");\n  text = text.replace(damageRegex, diceRollMatcher);\n\n  // const Regex\n  // to hit rolls\n  const toHitRegex = new RegExp(/ ([+-]) *(\\d+) to hit/, \"g\");\n  text = text.replace(toHitRegex, \" [[/r 1d20 $1 $2]] to hit\");\n  return text;\n}\n\nfunction findDiceColumns(table) {\n  let result = [];\n  if (table.tHead) {\n    const headings = getHeadings(table);\n    headings.forEach((h) => {\n      const diceRegex = new RegExp(/(\\d*[d|D]\\d+(\\s*[+-]?\\s*\\d*)?)/, \"g\");\n      const match = h.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\").match(diceRegex);\n      if (match) {\n        result.push(h);\n      }\n    });\n  }\n  return result;\n}\n\nfunction guessTableName(parentName, htmlDocument, tableNum) {\n  const element = htmlDocument.querySelectorAll('table');\n  let track = element[tableNum];\n  let sibling = track.previousElementSibling;\n\n  while (!sibling && track.parentElement?.nodeName === \"DIV\") {\n    if (!track.parentElement.previousElementSibling) {\n      track = track.parentElement;\n    } else {\n      sibling = track.parentElement.previousElementSibling;\n    }\n  }\n\n  if (sibling) {\n    return sibling.textContent;\n  } else {\n    logger.warn(`No table name identified for ${parentName}`);\n    return \"\";\n  }\n}\n\n\nfunction tableReplacer(htmlDocument, tableNum, compendiumTables) {\n  // future enhancement - replace liks to DDB spells, monsters, items etc to munched compendium\n  const element = htmlDocument.querySelectorAll('table');\n  const tablePoint = element[tableNum];\n\n  if (tablePoint) {\n    const rollCompendiumLabel = game.settings.get(\"ddb-importer\", \"entity-table-compendium\");\n    compendiumTables.slice().reverse().forEach((table) => {\n      logger.debug(`Updating table reference for: ${table.name}`);\n      tablePoint.insertAdjacentHTML(\"afterend\", `<div id=\"table-link\">@Compendium[${rollCompendiumLabel}.${table.name}]{Open RollTable ${table.name}}</div>`);\n    });\n  }\n\n  return htmlDocument;\n}\n\n\nfunction diceInt(text) {\n  if (text === \"0\") return 10;\n  if (text === \"00\") return 100;\n  return parseInt(text);\n}\n\n/**\n * This could be:\n * a single value e.g. 19\n * a range of values 19-20\n * remaining values 19+\n * @param {*} value\n * @returns array of range\n */\nfunction getDiceTableRange(value) {\n  const document = utils.htmlToDoc(value);\n  const text = document.body.textContent.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\").replace(/\\s/g, \"\").trim();\n  // eslint-disable-next-line no-useless-escape\n  const valueRegex = new RegExp(/^(\\d+)\\-(\\d+)|^(\\d+)(\\+?)$/);\n  const valueMatch = text.match(valueRegex);\n\n  if (valueMatch) {\n    if (valueMatch[1] !== undefined && valueMatch[2] !== undefined) {\n      const low = diceInt(valueMatch[1]);\n      const high = diceInt(valueMatch[2]);\n      return [low, high];\n    }\n\n    if (valueMatch[3]) {\n      if (valueMatch[4] !== undefined && valueMatch[4] === \"+\") {\n        const low = diceInt(valueMatch[3]);\n        return [low, 0];\n      }\n      if (valueMatch[4] !== undefined && valueMatch[4] === \"\") {\n        const low = diceInt(valueMatch[3]);\n        return [low, low];\n      }\n    }\n  }\n\n  // logger.debug(`Dice range: Unable to table range match '${value}' text was '${text}'`);\n  return [];\n}\n\n\nfunction buildTable(parsedTable, keys, diceKeys, tableName, parentName) {\n  let generatedTables = [];\n\n  diceKeys.forEach((diceKey) => {\n    const nameExtension = diceKeys > 1 ? ` [${diceKeys}]` : \"\";\n    const realName = ((tableName && tableName !== \"\") ? tableName : \"Unnamed Table\") + nameExtension;\n    logger.debug(`Generating table ${realName}`);\n\n    const diceRegex = new RegExp(/(\\d*d\\d+(\\s*[+-]?\\s*\\d*d*\\d*)?)/, \"g\");\n    const formulaMatch = diceKey.match(diceRegex);\n\n    let table = {\n      \"name\": realName,\n      \"sort\": 100000,\n      \"flags\": {\n        \"ddbimporter\": {\n          \"parentName\": parentName,\n          \"keys\": keys,\n          \"diceKeys\": diceKeys\n        }\n      },\n      \"img\": \"icons/svg/d20-grey.svg\",\n      \"description\": \"\",\n      \"results\": [],\n      \"formula\": formulaMatch ? formulaMatch[0].trim() : \"\",\n      \"replacement\": true,\n      \"displayRoll\": true,\n    };\n\n    const concatKeys = (keys.length - diceKeys.length) > 1;\n    // loop through rows and build result entry.\n    // if more than one result key then we will concat the results.\n    parsedTable.forEach((entry) => {\n      const result = {\n        flags: {},\n        type: 0,\n        text: \"\",\n        img: \"icons/svg/d20-black.svg\",\n        resultId: null,\n        weight: 1,\n        range: [],\n        drawn: false,\n        resultCollection: \"\",\n      };\n      Object.entries(entry).forEach(([key, value]) => {\n        if (key === diceKey) {\n          result.range = getDiceTableRange(value);\n        } else if (diceKeys.includes(key)) return;\n        if (concatKeys) {\n          if (result.text != \"\") result.text += \"\\n\\n\";\n          result.text += `<b>${key}</b>${value}`;\n        } else {\n          result.text = value;\n        }\n      });\n      result.text = replaceRollLinks(result.text);\n      const diceRollerRegexp = new RegExp(/\\[\\[\\/r\\s*([0-9d+-\\s]*)(:?#.*)?\\]\\]/);\n      result.text = result.text.replace(diceRollerRegexp, \"[[$1]] ($&)\");\n      table.results.push(result);\n    });\n\n    generatedTables.push(table);\n\n  });\n\n  return generatedTables;\n}\n\nexport function generateTable(parentName, html, updateExisting, type = \"\") {\n  const document = utils.htmlToDoc(html);\n  const tableNodes = document.querySelectorAll(\"table\");\n  let tablesMatched = [];\n  let updatedDocument = utils.htmlToDoc(html);\n  if (type === \"background\" && !parentName.startsWith(\"Background:\")) {\n    parentName = `Background: ${parentName}`;\n  }\n  if (parentName.startsWith(\"Background:\")) {\n    const parentNamesArray = parentName.split(\":\");\n    // if (parentNamesArray.length > 2) parentNamesArray.pop();\n    parentName = parentNamesArray.join(\":\");\n  }\n\n  let tableNum = 0;\n  tableNodes.forEach((node) => {\n  // for (let i = 0; i < tableNodes.length; i++) {\n    // const node = tableNodes[i];\n    const parsedTable = parseTable(node);\n    const keys = getHeadings(node);\n    const diceKeys = findDiceColumns(node);\n    let nameGuess = guessTableName(parentName, document, tableNum);\n    if (nameGuess.split(\" \").length > 5 && diceKeys.length === 1 && keys.length === 2) {\n      nameGuess = keys[1];\n    }\n    const finalName = `${parentName}: ${nameGuess}`;\n    const tableGenerated = (finalName in CONFIG.DDBI.TABLES);\n\n    logger.debug(`Table detection triggered for ${parentName}!`);\n    logger.debug(`Table: \"${finalName}\"`);\n    logger.debug(`Dice Keys: ${diceKeys.join(\", \")}`);\n    logger.debug(`Keys: ${keys.join(\", \")}`);\n\n    const builtTables = tableGenerated\n      ? CONFIG.DDBI.TABLES[finalName]\n      : buildTable(parsedTable, keys, diceKeys, finalName, parentName);\n\n    if (builtTables.length > 0) {\n      // these updates are done async, and we continue. this is fine as we actually use the table name for linking\n      if (!tableGenerated) {\n        CONFIG.DDBI.TABLES[finalName] = builtTables;\n        logger.debug(`Generated table`, builtTables);\n        updateCompendium(\"tables\", { tables: builtTables }, updateExisting);\n      }\n\n      let tableData = {\n        nameGuess,\n        finalName,\n        parentName,\n        tableNum,\n        length: parsedTable.length,\n        keys: keys,\n        diceKeys: diceKeys,\n        diceTable: diceKeys.length > 0,\n        multiDiceKeys: diceKeys.length > 1,\n        diceKeysNumber: diceKeys.length,\n        totalKeys: keys.length,\n        builtTables: CONFIG.DDBI.TABLES[finalName],\n      };\n      tablesMatched.push(tableData);\n      updatedDocument = tableReplacer(updatedDocument, tableNum, tableData.builtTables);\n\n    }\n    tableNum++;\n  // }\n  });\n\n  return updatedDocument.body.innerHTML;\n\n}\n","import logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { copySupportedItemFlags } from \"./import.js\";\nimport { getNPCImage } from \"./importMonster.js\";\nimport DDBMonsterFactory from \"./DDBMonsterFactory.js\";\n\nlet totalTargets = 0;\nlet count = 0;\n\nasync function updateActorsWithActor(targetActors, sourceActor) {\n  let results = [];\n  count++;\n\n  for (let targetActor of targetActors) {\n    DDBMuncher.munchNote(`Updating ${count}/${totalTargets} world monsters`);\n    logger.debug(`Updating ${count}/${totalTargets} world monsters`, targetActor);\n    const monsterItems = sourceActor.items.toObject().map((item) => {\n      delete item._id;\n      return item;\n    });\n    const actorUpdate = duplicate(sourceActor);\n    // pop items in later\n    delete actorUpdate.items;\n\n\n    const updateImages = game.settings.get(\"ddb-importer\", \"munching-policy-update-world-monster-update-images\");\n    if (!updateImages) {\n      actorUpdate.img = targetActor.img;\n      actorUpdate.prototypeToken.texture.src = targetActor.prototypeToken.texture.src;\n      actorUpdate.prototypeToken.scale = targetActor.prototypeToken.scale;\n      actorUpdate.prototypeToken.randomImg = targetActor.prototypeToken.randomImg;\n      actorUpdate.prototypeToken.mirrorX = targetActor.prototypeToken.mirrorX;\n      actorUpdate.prototypeToken.mirrorY = targetActor.prototypeToken.mirrorY;\n      actorUpdate.prototypeToken.lockRotation = targetActor.prototypeToken.lockRotation;\n      actorUpdate.prototypeToken.rotation = targetActor.prototypeToken.rotation;\n      actorUpdate.prototypeToken.alpha = targetActor.prototypeToken.alpha;\n      actorUpdate.prototypeToken.lightAlpha = targetActor.prototypeToken.lightAlpha;\n      actorUpdate.prototypeToken.lightAnimation = targetActor.prototypeToken.lightAnimation;\n      actorUpdate.prototypeToken.tint = targetActor.prototypeToken.tint;\n      actorUpdate.prototypeToken.lightColor = targetActor.prototypeToken.lightColor;\n    }\n\n    const retainBiography = game.settings.get(\"ddb-importer\", \"munching-policy-update-world-monster-retain-biography\");\n    if (retainBiography) {\n      actorUpdate.system.details.biography = targetActor.system.details.biography;\n    }\n\n    actorUpdate._id = targetActor.id;\n    if (targetActor.folder) actorUpdate.folder = targetActor.folder._id;\n    actorUpdate.sort = targetActor.sort;\n    actorUpdate.ownership = targetActor.ownership;\n    // eslint-disable-next-line no-await-in-loop\n    await copySupportedItemFlags(targetActor, actorUpdate);\n\n    // eslint-disable-next-line no-await-in-loop\n    await targetActor.deleteEmbeddedDocuments(\"Item\", [], { deleteAll: true });\n\n    // eslint-disable-next-line no-await-in-loop\n    await targetActor.update(actorUpdate);\n    // console.warn(\"afterdelete\", duplicate(targetActor));\n    // eslint-disable-next-line no-await-in-loop\n    await targetActor.createEmbeddedDocuments(\"Item\", monsterItems);\n    // console.warn(\"after create\", duplicate(targetActor));\n\n  };\n\n  return Promise.all(results);\n}\n\nexport async function updateWorldMonsters() {\n  let results = [];\n  // get ddb monsters compendium\n  const monsterCompendiumLabel = CompendiumHelper.getCompendiumLabel(\"monster\");\n  const monsterCompendium = CompendiumHelper.getCompendium(monsterCompendiumLabel);\n\n  if (monsterCompendium) {\n    const monsterIndices = [\"name\", \"flags.ddbimporter.id\"];\n    const index = await monsterCompendium.getIndex({ fields: monsterIndices });\n    totalTargets = game.actors.filter((a) => a.type === \"npc\" && hasProperty(a, \"flags.ddbimporter.id\")).length;\n    count = 0;\n    DDBMuncher.munchNote(`Updating ${count}/${totalTargets} world monsters`);\n    logger.debug(`Checking ${totalTargets} world monsters`);\n\n    for (const [key, value] of index.entries()) {\n\n      const worldMatches = game.actors.filter((actor) =>\n        actor.flags?.ddbimporter?.id\n        && actor.name === value.name\n        && actor.flags.ddbimporter.id == value.flags?.ddbimporter?.id\n      );\n\n      if (worldMatches.length > 0) {\n        DDBMuncher.munchNote(`Found ${value.name} world monster`, true);\n        logger.debug(`Matched ${value.name} (${key})`);\n        // eslint-disable-next-line no-await-in-loop\n        const monster = await monsterCompendium.getDocument(value._id);\n        // eslint-disable-next-line no-await-in-loop\n        let updatedActors = await updateActorsWithActor(worldMatches, monster, count);\n        results.push(updatedActors);\n      }\n    }\n    DDBMuncher.munchNote(`Finished updating ${totalTargets} world monsters`);\n    DDBMuncher.munchNote(\"\", true);\n\n  } else {\n    logger.error(\"Error opening compendium, check your settings\");\n  }\n  return results;\n}\n\nexport async function resetCompendiumActorImages(compendiumName = null, type = \"monster\") {\n  const monsterCompendiumLabel = compendiumName ? compendiumName : CompendiumHelper.getCompendiumLabel(type);\n  const monsterCompendium = CompendiumHelper.getCompendium(monsterCompendiumLabel);\n  const fields = [\"name\", \"flags.monsterMunch\", \"system.details.type.value\", \"img\", \"prototypeToken.texture.src\"];\n  const index = await monsterCompendium.getIndex({ fields });\n\n  const otherDirectory = game.settings.get(\"ddb-importer\", \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n  await FileHelper.generateCurrentFiles(otherDirectory);\n\n  const updates = await Promise.all(index\n    .filter((i) => i.name !== \"#[CF_tempEntity]\")\n    .map(async (i) => {\n      const options = { forceUpdate: true, disableAutoTokenizeOverride: true, type };\n      const update = await getNPCImage(duplicate(i), options);\n      logger.info(`Resetting ${i.name}`, update);\n      return update;\n    }));\n\n  const results = await Actor.updateDocuments(updates, { pack: monsterCompendiumLabel });\n  logger.debug(\"Reset results\", results);\n  return results;\n}\n\nexport async function parseCritters(ids = null) {\n  const monsterFactory = new DDBMonsterFactory();\n  const parsedExtras = await monsterFactory.processIntoCompendium(ids);\n  return parsedExtras;\n}\n","export async function newVehicle(name) {\n  const options = {\n    temporary: true,\n    displaySheet: false,\n  };\n  const vehicleClass = await Actor.create({ name, type: \"vehicle\" }, options);\n  let vehicle = vehicleClass.toObject();\n  const flags = {\n    dnd5e: {},\n    monsterMunch: {},\n    ddbimporter: {\n      dndbeyond: {},\n    },\n  };\n  setProperty(vehicle, \"flags\", flags);\n  return vehicle;\n};\n","import DICTIONARY from \"../../dictionary.js\";\n\nexport function getDamageImmunities(ddb) {\n  const config = CONFIG.DDB.damageTypes;\n\n  let values = [];\n  let custom = [];\n\n  const damageTypes = DICTIONARY.actions.damageType.filter((d) => d.name !== null).map((d) => d.name);\n\n  ddb.damageImmunities.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    if (adjustment && damageTypes.includes(adjustment.name.toLowerCase())) {\n      values.push(adjustment.name.toLowerCase());\n    } else if (adjustment && adjustment.slug === \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks\") {\n      values.push(\"physical\");\n    } else if (adjustment) {\n      const midiQolInstalled = game.modules.get(\"midi-qol\")?.active;\n      if (midiQolInstalled) {\n        if (adjustment.name.toLowerCase().includes(\"silvered\")) {\n          values.push(\"silver\");\n        } else if (adjustment.name.toLowerCase().includes(\"adamantine\")) {\n          values.push(\"adamant\");\n        } else if (adjustment.slug === \"damage-from-spells\") {\n          values.push(\"spell\");\n        } else {\n          custom.push(adjustment.name);\n        }\n      } else {\n        custom.push(adjustment.name);\n      }\n    }\n  });\n\n  const adjustments = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n\n  return adjustments;\n}\n\nexport function getConditionImmunities(ddb) {\n  const config = CONFIG.DDB.conditions.map((condition) => {\n    return {\n      id: condition.definition.id,\n      name: condition.definition.name,\n      type: condition.definition.type,\n      slug: condition.definition.slug,\n    };\n  });\n\n  let values = [];\n  let custom = [];\n\n  ddb.conditionImmunities.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    const valueAdjustment = DICTIONARY.conditions.find((condition) => condition.label.toLowerCase() == adjustment.name.toLowerCase());\n    if (adjustment && valueAdjustment) {\n      values.push(valueAdjustment.foundry);\n    } else if (adjustment) {\n      custom.push(adjustment.name);\n    }\n  });\n\n  const adjustments = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n\n  return adjustments;\n}\n","export const ABILITIES = [\n  { id: 1, value: \"str\", long: \"strength\" },\n  { id: 2, value: \"dex\", long: \"dexterity\" },\n  { id: 3, value: \"con\", long: \"constitution\" },\n  { id: 4, value: \"int\", long: \"intelligence\" },\n  { id: 5, value: \"wis\", long: \"wisdom\" },\n  { id: 6, value: \"cha\", long: \"charisma\" },\n];\n\n//     \"abilities\": {\n// \"str\": {\n//   \"value\": 27,\n//   \"proficient\": 0,\n//   \"min\": 3,\n//   \"mod\": 8,\n//   \"save\": 8,\n//   \"prof\": 0,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 23\n// },\n// \"dex\": {\n//   \"value\": 14,\n//   \"proficient\": 1,\n//   \"min\": 3,\n//   \"mod\": 2,\n//   \"save\": 9,\n//   \"prof\": 7,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 17\n// },\n/**\n * Retrieves character abilities, including proficiency on saving throws\n * @param {obj} ddb JSON Import\n * @param {obj} CONFIG.DDB config\n */\nexport function getAbilities(abilities, ddb) {\n  // go through every ability\n  ABILITIES.forEach((ability) => {\n    const value = ddb.stats.find((stat) => stat.id === ability.id)?.value || 10;\n    const mod = value === 0\n      ? -5\n      : CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n    abilities[ability.value]['value'] = value;\n    abilities[ability.value]['proficient'] = 0;\n    abilities[ability.value]['mod'] = mod;\n\n  });\n\n  return abilities;\n}\n\n\nexport function getAbilityMods(ddb) {\n  let abilities = {};\n\n  ABILITIES.forEach((ability) => {\n    const value = ddb.stats.find((stat) => stat.id === ability.id)?.value || 10;\n    const mod = value === 0\n      ? -5\n      : CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n    abilities[ability.value] = mod;\n  });\n\n  return abilities;\n\n}\n","import logger from '../../logger.js';\n\nconst SIZES = [\n  { name: \"Tiny\", value: \"tiny\", size: 0.5 },\n  { name: \"Small\", value: \"sm\", size: 0.8 },\n  { name: \"Medium\", value: \"med\", size: 1 },\n  { name: \"Large\", value: \"lg\", size: 2 },\n  { name: \"Huge\", value: \"huge\", size: 3 },\n  { name: \"Gargantuan\", value: \"grg\", size: 4 },\n];\n\nfunction getSizeFromId(sizeId) {\n  const size = CONFIG.DDB.creatureSizes.find((s) => s.id == sizeId).name;\n  const sizeData = SIZES.find((s) => size == s.name);\n\n  if (!sizeData) {\n    logger.warn(`No size found, using medium`, size);\n    return { name: \"Medium\", value: \"med\", size: 1 };\n  }\n  return sizeData;\n}\n\nexport function getSize (ddb) {\n  const sizeData = getSizeFromId(ddb.sizeId);\n  const token = {\n    scale: sizeData.size >= 1 ? 1 : sizeData.size,\n    value: sizeData.size >= 1 ? sizeData.size : 1,\n  };\n\n  const data = {\n    value: sizeData.value,\n    token: token,\n  };\n\n  return data;\n\n}\n","export function getCapacity(ddb) {\n  let capacity = {\n    creature: \"\",\n    cargo: null,\n  };\n\n  if (ddb.cargoCapacity) {\n    capacity.cargo = ddb.cargoCapacity;\n  }\n\n  if (ddb.creatureCapacity && ddb.creatureCapacity.length > 0) {\n    const capacityStrings = ddb.creatureCapacity.map((c) => {\n      const size = c.sizeId\n        ? `${CONFIG.DDB.creatureSizes.find((s) => s.id == c.sizeId).name.toLowerCase()} `\n        : \"\";\n\n      return `${c.capacity} ${size}${c.type}`;\n    });\n    capacity.creature = capacityStrings.join(\", \");\n  }\n\n  return capacity;\n}\n","export const FLIGHT_IDS = [\n  \"7\",\n  \"8\",\n];\n\nconst MOVEMENT_DICT = {\n  \"land\": \"walk\",\n  \"water\": \"swim\",\n  \"air\": \"fly\",\n  \"magical\": \"Magical\",\n};\n\nexport function getMovement(ddb, configurations, movement) {\n\n  // is it travel pace?\n  if (configurations.ETP) {\n    movement[\"units\"] = \"mi\";\n    const travelPaceMilesPerHour = ddb.travelPace / 5280;\n    if (FLIGHT_IDS.includes(ddb.id) || configurations.DT === \"spelljammer\") {\n      movement[\"fly\"] = travelPaceMilesPerHour;\n    } else {\n      movement[\"swim\"] = travelPaceMilesPerHour;\n    }\n  } else {\n    const primaryComponent = ddb.components.find((c) => c.isPrimaryComponent);\n    if (primaryComponent && primaryComponent.speeds && primaryComponent.speeds.length > 0) {\n      movement[\"units\"] = \"ft\";\n      const type = MOVEMENT_DICT[primaryComponent.speeds[0].type];\n      movement[type] = primaryComponent.speeds[0].modes[0].value;\n    }\n\n  }\n\n  return movement;\n}\n","// import logger from '../../../logger.js';\nimport utils from '../../../lib/utils.js';\n\nexport function newComponent(name, type) {\n  // logger.debug(\"Generating new component:\", { name, type });\n  let feat = {\n    name: name,\n    type: type,\n    system: JSON.parse(utils.getTemplate(type)),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n        },\n      },\n    },\n  };\n  return feat;\n};\n","import { newComponent } from \"./templates/component.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\n\nconst TYPE_MAPPING = {\n  hull: \"equipment\",\n  helm: \"equipment\",\n  weapon: \"weapon\",\n  movement: \"equipment\",\n  control: \"equipment\",\n  // \"crew\" action: feat\n  // \"action\", action: feat\n  feature: \"feat\",\n  // \"loot\": loot\n};\n\n// function getWeaponType(action) {\n//   const entry = DICTIONARY.actions.attackTypes.find((type) => type.attackSubtype === action.attackSubtype);\n//   const range = DICTIONARY.weapon.weaponRange.find((type) => type.attackType === action.attackTypeRange);\n//   return entry ? entry.value : range ? `simple${range.value}` : \"simpleM\";\n// }\n\nfunction getActivation(action, crew = false) {\n  const actionType = DICTIONARY.actions.activationTypes.find((type) => type.id === action.activation?.activationType);\n  const activation = {\n    type: crew ? \"crew\" : actionType ? actionType.value : \"action\",\n    cost: action.activation?.activationTime || 1,\n    condition: \"\",\n  };\n  return activation;\n}\n\nfunction getLimitedUse(action) {\n  if (\n    action.limitedUse\n    && (action.limitedUse.maxUses)\n  ) {\n    const resetType = DICTIONARY.resets.find((type) => type.id === action.limitedUse.resetType);\n    let maxUses = (action.limitedUse.maxUses && action.limitedUse.maxUses !== -1) ? action.limitedUse.maxUses : 0;\n\n    const finalMaxUses = (maxUses) ? parseInt(maxUses) : null;\n\n    return {\n      value: (finalMaxUses !== null && finalMaxUses != 0) ? maxUses - action.limitedUse.numberUsed : null,\n      max: (finalMaxUses != 0) ? finalMaxUses : null,\n      per: resetType ? resetType.value : \"\",\n    };\n  } else {\n    return {\n      value: null,\n      max: null,\n      per: \"\",\n    };\n  }\n}\n\nfunction calculateRange(action, weapon) {\n  if (action.range && action.range.aoeType && action.range.aoeSize) {\n    weapon.system.range = { value: null, units: \"self\", long: \"\" };\n    weapon.system.target = {\n      value: action.range.aoeSize,\n      type: DICTIONARY.actions.aoeType.find((type) => type.id === action.range.aoeType)?.value,\n      units: \"ft\",\n    };\n  } else if (action.range && action.range.range) {\n    weapon.system.range = {\n      value: action.range.range,\n      units: \"ft\",\n      long: action.range.longRange || \"\",\n    };\n  } else {\n    weapon.system.range = { value: 5, units: \"ft\", long: \"\" };\n  }\n  return weapon;\n}\n\n\nfunction getSaveAbility(description) {\n  const save = description.match(/DC ([0-9]+) (.*?) saving throw|\\(save DC ([0-9]+)\\)/);\n  if (save) {\n    return save[2] ? save[2].toLowerCase().substr(0, 3) : \"\";\n  } else {\n    return \"\";\n  }\n}\n\nfunction getActionType(action) {\n  let actionType = \"rwak\";\n  // lets see if we have a save stat for things like Dragon born Breath Weapon\n  if (typeof action.saveStatId === \"number\" || action.fixedSaveDc) {\n    actionType = \"save\";\n  } else if (action.actionType === 1) {\n    if (action.attackTypeRange === 2) {\n      actionType = \"rwak\";\n    } else {\n      actionType = \"mwak\";\n    }\n  } else if (action.rangeId && action.rangeId === 1) {\n    actionType = \"mwak\";\n  } else if (action.rangeId && action.rangeId === 2) {\n    actionType = \"rwak\";\n  } else {\n    actionType = \"other\";\n  }\n  return actionType;\n}\n\n\nfunction getWeaponProperties(action, weapon) {\n  if (action.name) weapon.name += `: ${action.name}`;\n  weapon.system.description.value += `\\n${action.description}`;\n\n  if (action.fixedToHit !== null) {\n    weapon.system.attackBonus = `${action.fixedToHit}`;\n  }\n  // weapon.system.weaponType = getWeaponType(action);\n  weapon.system.weaponType = \"siege\";\n  weapon.system.target = {\n    \"value\": 1,\n    \"width\": null,\n    \"units\": \"\",\n    \"type\": \"creature\"\n  };\n  if (Number.isInteger(action.numberOfTargets)) weapon.system.target.value = action.numberOfTargets;\n\n  const damageType = DICTIONARY.actions.damageType.find((type) => type.id === action.damageTypeId).name;\n\n  if (action.dice?.diceString) weapon.system.damage.parts = [[action.dice.diceString, damageType]];\n\n  if (action.fixedSaveDc) {\n    const saveAbility = (action.saveStatId)\n      ? DICTIONARY.character.abilities.find((stat) => stat.id === action.saveStatId).value\n      : getSaveAbility(action.description);\n    weapon.system.save = {\n      ability: saveAbility,\n      dc: Number.parseInt(action.fixedSaveDc),\n      scaling: \"flat\",\n    };\n  }\n\n  weapon.system.equipped = true;\n  weapon.system.actionType = getActionType(action);\n  weapon.system.uses = getLimitedUse(action);\n  weapon.system.activation = getActivation(action, weapon.system.activation.type === \"crew\");\n  weapon = calculateRange(action, weapon);\n\n  return weapon;\n\n}\n\n// eslint-disable-next-line complexity\nfunction buildComponents(ddb, configurations, component) {\n  const results = [];\n  const types = component.definition.types.map((t) => t.type);\n  const item = duplicate(newComponent(component.definition.name, TYPE_MAPPING[types[0]]));\n\n  if (types[0] === \"equipment\") {\n    setProperty(item, \"data.armor.type\", \"vehicle\");\n  }\n\n  if (component.description) item.system.description.value = parseTags(component.description);\n\n  item.system.quantity = component.count;\n\n  item.system.armor = {\n    value: null,\n    type: \"vehicle\",\n    dex: null\n  };\n  item.system.hp = {\n    value: null,\n    max: null,\n    dt: null,\n    conditions: \"\"\n  };\n\n  if (component.groupType === \"action-station\") {\n    item.system.activation.type = \"crew\";\n    switch (component.definition.coverType) {\n      case \"full\":\n        item.system.cover = 1;\n        break;\n      case \"half\":\n        item.system.cover = 0.5;\n        break;\n      case \"three-quarters\":\n        item.system.cover = 0.75;\n        break;\n      default:\n        item.system.cover = undefined;\n        break;\n    }\n\n  } else if (component.definition.groupType === \"component\") {\n\n    if (component.definition.speeds && component.definition.speeds.length > 0) {\n      item.system.speed = {\n        value: component.definition.speeds[0].modes[0].value,\n        conditions: component.definition.speeds[0].modes[0].description\n          ? component.definition.speeds[0].modes[0].description\n          : \"\",\n      };\n      if (component.definition.speeds[0].modes.length > 1) {\n        const speedConditions = [];\n        for (let i = 1; i < component.definition.speeds[0].modes.length; i++) {\n          const speedValue = component.definition.speeds[0].modes[i].value;\n          const speedCondition = component.definition.speeds[0].modes[i].description\n            ? component.definition.speeds[0].modes[i].description\n            : \"\";\n          const speedRestriction = component.definition.speeds[0].modes[i].restrictionsText\n            ? component.definition.speeds[0].modes[i].restrictionsText\n            : \"\";\n          speedConditions.push(`${speedValue} ${speedCondition}${speedRestriction}`);\n        }\n\n        const speedAdjustment = component.definition.types.find((t) => t.type === \"movement\");\n        if (speedAdjustment && speedAdjustment.adjustments && speedAdjustment.adjustments.length > 0) {\n          speedAdjustment.adjustments.filter((a) => a.type === \"speed\").forEach((a) => {\n            a.values.forEach((v) => {\n              speedConditions.push(`-${v.perDamageValue}ft speed per ${v.perDamageTaken} damage taken`);\n            });\n          });\n        }\n        if (speedConditions.length > 0) {\n          item.system.speed.conditions += speedConditions.join(\"; \");\n        }\n      }\n    }\n\n    if (Number.isInteger(component.definition.armorClass)) {\n      item.system.armor = {\n        value: parseInt(component.definition.armorClass),\n        type: \"vehicle\",\n        dex: null\n      };\n    }\n\n    if (Number.isInteger(component.definition.hitPoints)) {\n      item.system.hp = {\n        value: parseInt(component.definition.hitPoints),\n        max: parseInt(component.definition.hitPoints),\n        dt: null,\n        conditions: \"\"\n      };\n      if (component.definition.damageThreshold) {\n        item.system.hp.dt = component.definition.damageThreshold;\n      }\n    }\n  }\n\n  if (types.includes(\"weapon\") && component.definition.actions.length > 0) {\n    logger.debug(\"processing weapon\", component);\n    component.definition.actions.forEach((action) => {\n      const actionItem = getWeaponProperties(action, duplicate(item));\n      logger.debug(\"action item\", actionItem);\n      results.push(actionItem);\n    });\n  } else {\n    results.push(item);\n  }\n\n  return results;\n\n}\n\nexport function processComponents(ddb, configurations) {\n  const components = ddb.components.sort((c) => c.displayOrder);\n\n  const componentCount = {};\n  const uniqueComponents = [];\n  components.forEach((component) => {\n    const key = component.definitionKey;\n    const count = componentCount[key] || 0;\n    if (count === 0) uniqueComponents.push(component);\n    componentCount[key] = count + 1;\n  });\n\n\n  const componentItems = uniqueComponents\n    .filter((f) => f.definition.name)\n    .map((component) => {\n      component.count = componentCount[component.definitionKey];\n      const builtItems = buildComponents(ddb, configurations, component);\n      return builtItems;\n    })\n    .flat();\n\n  const featureItems = ddb.features\n    .filter((f) => f.name)\n    .map((feature) => {\n      setProperty(feature, \"definition.types\", [{ type: \"feature\" }]);\n      setProperty(feature, \"definition.name\", feature.name);\n      const builtItems = buildComponents(ddb, configurations, feature);\n      return builtItems;\n    })\n    .flat();\n\n  return featureItems.concat(componentItems);\n}\n","export const ACTION_THRESHOLDS = [\n  {\n    id: \"7\",\n    thresholds: {\n      0: 1,\n      1: 10,\n      2: 20,\n    },\n  },\n  {\n    id: \"11\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"9\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"1\",\n    thresholds: {\n      0: 3,\n      1: 20,\n      2: 40,\n    },\n  },\n  {\n    id: \"2\",\n    thresholds: {\n      0: 1,\n      1: null,\n      2: 2,\n    },\n  },\n  {\n    id: \"3\",\n    thresholds: {\n      0: 20,\n      1: null,\n      2: 40,\n    },\n  },\n  {\n    id: \"8\",\n    thresholds: {\n      0: 1,\n      1: null,\n      2: 1,\n    },\n  },\n  {\n    id: \"4\",\n    thresholds: {\n      0: 1,\n      1: null,\n      2: 2,\n    },\n  },\n  {\n    id: \"5\",\n    thresholds: {\n      0: 3,\n      1: 10,\n      2: 20,\n    },\n  },\n  {\n    id: \"12\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"10\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"6\",\n    thresholds: {\n      0: 3,\n      1: 10,\n      2: 20,\n    },\n  },\n];\n","import logger from '../../logger.js';\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\n\nimport { newVehicle } from './templates/vehicle.js';\nimport { getDamageImmunities, getConditionImmunities } from \"./conditions.js\";\nimport { getAbilities, getAbilityMods } from \"./abilities.js\";\nimport { getSize } from \"./size.js\";\nimport { getCapacity } from './capacity.js';\nimport { FLIGHT_IDS, getMovement } from './movement.js';\nimport { processComponents } from './components.js';\nimport { ACTION_THRESHOLDS } from './threshold.js';\nimport { parseTags } from '../../lib/DDBTemplateStrings.js';\n\n// eslint-disable-next-line complexity\nasync function parseVehicle(ddb, extra = {}) {\n\n  logger.debug(\"Parsing vehicle\", { extra });\n  let vehicle = duplicate(await newVehicle(ddb.name));\n  const configurations = {};\n  ddb.configurations.forEach((c) => {\n    configurations[c.key] = c.value;\n  });\n\n  let img = ddb.largeAvatarUrl;\n  // foundry doesn't support gifs\n  if (img && img.match(/.gif$/)) {\n    img = null;\n  }\n  vehicle.prototypeToken.name = ddb.name;\n  vehicle.flags.monsterMunch = {\n    url: ddb.url,\n    img: (img) ? img : ddb.avatarUrl,\n    tokenImg: ddb.avatarUrl,\n  };\n  vehicle.flags.ddbimporter = {\n    id: ddb.id,\n    version: CONFIG.DDBI.version,\n    configurations,\n  };\n\n  // const removedHitPoints = ddb.removedHitPoints ? ddb.removedHitPoints : 0;\n  // const temporaryHitPoints = ddb.temporaryHitPoints ? ddb.removedHitPoints : 0;\n\n  // abilities\n  vehicle.system.abilities = getAbilities(vehicle.system.abilities, ddb);\n\n  // Conditions\n  vehicle.system.traits.di = getDamageImmunities(ddb);\n  vehicle.system.traits.ci = getConditionImmunities(ddb);\n\n  // size\n  const size = getSize(ddb);\n  vehicle.system.traits.size = size.value;\n  vehicle.prototypeToken.width = size.token.value;\n  vehicle.prototypeToken.height = size.token.value;\n  vehicle.prototypeToken.scale = size.token.scale;\n\n  vehicle.system.attributes.capacity = getCapacity(ddb);\n\n  if (configurations.ST === \"dimension\") {\n    vehicle.system.traits.dimensions = `(${ddb.length} ft. by ${ddb.width} ft.)`;\n  }\n  if (configurations.ST === \"weight\") {\n    vehicle.system.traits.dimensions = `(${ddb.weight} lb.)`;\n  }\n\n  const movement = duplicate(vehicle.system.attributes.movement);\n  vehicle.system.attributes.movement = getMovement(ddb, configurations, movement);\n\n  const primaryComponent = ddb.components.find((c) => c.isPrimaryComponent);\n  // // ac\n  // if we are using actor level HP apply\n  if (!configurations.ECCR && primaryComponent) {\n    vehicle.system.attributes.hp.value = primaryComponent.definition.hitPoints;\n    vehicle.system.attributes.hp.max = primaryComponent.definition.hitPoints;\n    if (!configurations.ECMT && Number.isInteger(primaryComponent.definition.mishapThreshold)) {\n      vehicle.system.attributes.hp.mt = primaryComponent.definition.mishapThreshold;\n    }\n    if (!configurations.ECDT && Number.isInteger(primaryComponent.definition.damageThreshold)) {\n      vehicle.system.attributes.hp.dt = primaryComponent.definition.damageThreshold;\n    }\n  }\n\n  // if we are using actor level AC apply\n  if (configurations.PCMT === \"vehicle\" && primaryComponent) {\n    const mods = getAbilityMods(ddb);\n    if (configurations.DT === \"spelljammer\") {\n      vehicle.system.attributes.ac.motionless = primaryComponent.definition.armorClassDescription;\n      vehicle.system.attributes.ac.flat = primaryComponent.definition.armorClass;\n    } else {\n      vehicle.system.attributes.ac.motionless = primaryComponent.definition.armorClass;\n      vehicle.system.attributes.ac.flat = primaryComponent.definition.armorClass + mods[\"dex\"];\n    }\n  }\n\n  vehicle.system.vehicleType = FLIGHT_IDS.includes(ddb.id) || configurations.DT === \"spelljammer\"\n    ? \"air\"\n    : configurations.DT === \"ship\"\n      ? \"water\"\n      : \"land\";\n\n  vehicle.items = processComponents(ddb, configurations);\n\n  // No 5e support for vehicles yet:\n  // fuel data\n\n  // details\n  vehicle.system.details.source = DDBHelper.parseSource(ddb);\n  vehicle.system.details.biography.value = parseTags(ddb.description);\n\n  if (configurations.EAS) {\n    vehicle.system.attributes.actions.stations = true;\n  }\n\n  if (ddb.actionsText) {\n    vehicle.system.details.biography.value += `<h2>Actions</h2>\\n<p>${ddb.actionsText}</p>`;\n    const componentActionSummaries = ddb.componentActionSummaries.map((feature) => {\n      return `<h3>${feature.name}</h3>\\n<p>${feature.description}</p>`;\n    }).join('\\n');\n    vehicle.system.details.biography.value += `\\n<p>${componentActionSummaries}</p>`;\n\n    const actionsRegex = /On its turn(?:,*) the (?:.*?) can take (\\d+) action/g;\n    const actionsMatch = ddb.actionsText.match(actionsRegex);\n    const numberOfActions = actionsMatch ? parseInt(actionsMatch[1]) : 1;\n\n    vehicle.system.attributes.actions.value = numberOfActions;\n    const actionThreshold = ACTION_THRESHOLDS.find((t) => t.id === ddb.id);\n    vehicle.system.attributes.actions.thresholds = actionThreshold ? actionThreshold.thresholds : [];\n\n  } else if (ddb.features.length > 0) {\n    const featuresText = ddb.features.map((feature) => {\n      return `<h3>${feature.name}</h3>\\n<p>${feature.description}</p>`;\n    }).join('\\n');\n    vehicle.system.details.biography.value += `<h2>Features</h2>\\n<p>${featuresText}</p>`;\n  }\n\n  vehicle = await CompendiumHelper.existingActorCheck(\"vehicle\", vehicle);\n\n  return vehicle;\n}\n\n\nexport async function parseVehicles(ddbData, extra = false) {\n\n  let foundryActors = [];\n  let failedVehicleNames = [];\n\n  ddbData.forEach((vehicle) => {\n    try {\n      logger.debug(`Attempting to parse ${vehicle.name}`);\n      const foundryActor = parseVehicle(vehicle, extra);\n      foundryActors.push(foundryActor);\n    } catch (err) {\n      logger.error(`Failed parsing ${vehicle.name}`);\n      logger.error(err);\n      logger.error(err.stack);\n      failedVehicleNames.push(vehicle.name);\n    }\n  });\n\n  const result = {\n    actors: await Promise.all(foundryActors),\n    failedVehicleNames,\n  };\n\n  return result;\n}\n","import logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { srdFiddling, getCompendiumItems, removeItems } from \"./import.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { addNPC, generateIconMap, copyExistingMonsterImages, addNPCsToCompendium } from \"./importMonster.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport { parseVehicles } from \"../parser/vehicle/vehicle.js\";\n// import { createCompendiumFolderStructure } from \"./compendiumFolders.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\n/**\n *\n * @returns {Promise<Array<JSON>>} A promise that resolves to an array of JSON vehicles from DDB\n */\nexport function getVehicleData(ids) {\n  const cobaltCookie = getCobalt();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const parsingApi = DDBProxy.getProxy();\n\n  const campaignId = getCampaignId();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n\n  if (ids && ids.length > 0) {\n    body.ids = [...new Set(ids)];\n  } else {\n    const searchFilter = $(\"#monster-munch-filter\")[0];\n    const searchTerm = searchFilter?.value || \"\";\n    const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n    const sources = enableSources\n      ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n      : [];\n    body.sources = sources;\n    body.search = searchTerm;\n    body.homebrew = body.sources.length > 0 ? false : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\");\n    body.homebrewOnly = body.sources.length > 0 ? false : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\");\n    body.searchTerm = encodeURIComponent(searchTerm);\n    body.exactMatch = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-exact-match\");\n    body.excludeLegacy = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-exclude-legacy\");\n  }\n\n  const url = ids && ids.length > 0\n    ? `${parsingApi}/proxy/vehicles/ids`\n    : `${parsingApi}/proxy/vehicles`;\n\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `vehicles-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => resolve(data.data))\n      .catch((error) => reject(error));\n  });\n}\n\n/**\n *\n * @param {*} ddbData json data from DDB\n * @returns array of vehicles processed to Foundry\n */\nasync function processVehicleData(ddbData) {\n  DDBMuncher.munchNote(`Retrieved ${ddbData.length} vehicles, starting parse...`, true, false);\n  logger.info(`Retrieved ${ddbData.length} vehicles`);\n  const parsedVehicles = await parseVehicles(ddbData);\n\n  DDBMuncher.munchNote(\n    `Parsed ${parsedVehicles.actors.length} vehicles, failed ${parsedVehicles.failedVehicleNames.length} vehicles`,\n    false,\n    true\n  );\n  logger.info(`Parsed ${parsedVehicles.actors.length} vehicles, failed ${parsedVehicles.failedVehicleNames.length} vehicles`);\n  if (parsedVehicles.failedVehicleNames && parsedVehicles.failedVehicleNames.length !== 0) {\n    logger.error(`Failed to parse`, parsedVehicles.failedVehicleNames);\n  }\n  return parsedVehicles.actors;\n}\n\n\nexport async function parseTransports(ids = null) {\n  setProperty(CONFIG.DDBI, \"MUNCHER.TEMPORARY\", {});\n  const updateBool = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n  const updateImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\");\n  const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n  const bulkImport = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-bulk-import\");\n\n  // to speed up file checking we pregenerate existing files now.\n  logger.info(\"Checking for existing files...\");\n  DDBMuncher.munchNote(`Checking existing image files...`);\n  await FileHelper.generateCurrentFiles(uploadDirectory);\n  logger.info(\"Check complete getting vehicle data...\");\n  DDBMuncher.munchNote(`Getting vehicle data from DDB...`);\n  let vehicleJSON = await getVehicleData(ids);\n  let vehicles = await processVehicleData(vehicleJSON);\n\n  if (!updateBool || !updateImages) {\n    DDBMuncher.munchNote(`Calculating which vehicles to update...`, true);\n    const existingVehicles = await getCompendiumItems(vehicles, \"npc\", { keepDDBId: true });\n    const existingVehiclesTotal = existingVehicles.length + 1;\n    if (!updateBool) {\n      logger.debug(\"Removing existing vehicles from import list\");\n      logger.debug(`Matched ${existingVehiclesTotal}`);\n      DDBMuncher.munchNote(`Removing ${existingVehiclesTotal} from update...`);\n      vehicles = await removeItems(vehicles, existingVehicles, true);\n    }\n    if (!updateImages) {\n      logger.debug(\"Copying vehicle images across...\");\n      DDBMuncher.munchNote(`Copying images for ${existingVehiclesTotal} vehicles...`);\n      vehicles = copyExistingMonsterImages(vehicles, existingVehicles);\n    }\n  }\n  DDBMuncher.munchNote(\"\");\n  DDBMuncher.munchNote(`Fiddling with the SRD data...`, true);\n  const finalVehicles = await srdFiddling(vehicles, \"vehicles\");\n\n  DDBMuncher.munchNote(`Generating Icon Map..`, true);\n  await generateIconMap(finalVehicles);\n\n  // Compendium folders not yet in use for Vehicles\n  // const addToCompendiumFolder = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-compendium-folders\");\n  // const compendiumFoldersInstalled = game.modules.get(\"compendium-folders\")?.active;\n  // if (addToCompendiumFolder && compendiumFoldersInstalled) {\n  //   DDBMuncher.munchNote(`Checking compendium folders..`, true);\n  //   await createCompendiumFolderStructure(\"vehicles\");\n  //   DDBMuncher.munchNote(\"\", true);\n  // }\n\n  let vehiclesParsed = [];\n  let currentVehicle = 1;\n  const vehicleCount = finalVehicles.length;\n  DDBMuncher.munchNote(`Preparing to wax ${vehicleCount} vehicles!`, true);\n  for (const vehicle of finalVehicles) {\n    if (bulkImport) {\n      DDBMuncher.munchNote(`[${currentVehicle}/${vehicleCount}] Checking servicing requirements for ${vehicle.name}`, false, true);\n    } else {\n      DDBMuncher.munchNote(`[${currentVehicle}/${vehicleCount}] Importing ${vehicle.name}`, false, true);\n    }\n    logger.debug(`Importing/second parse of ${vehicle.name} data`);\n    // eslint-disable-next-line no-await-in-loop\n    const munched = await addNPC(vehicle, bulkImport, \"vehicle\");\n    vehiclesParsed.push(munched);\n    currentVehicle += 1;\n  }\n  logger.debug(\"Vehicles Parsed\", vehiclesParsed);\n  if (bulkImport) {\n    DDBMuncher.munchNote(`Importing ${vehiclesParsed.length} vehicles`, false, true);\n    logger.debug(`Importing ${vehiclesParsed.length} vehicles`);\n    await addNPCsToCompendium(vehiclesParsed, \"vehicle\");\n  }\n  DDBMuncher.munchNote(\"\", false, true);\n  setProperty(CONFIG.DDBI, \"MUNCHER.TEMPORARY\", {});\n\n  if (ids !== null) {\n    return Promise.all(vehiclesParsed);\n  }\n  return vehicleCount;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { fixFeatures, getDescription, addFeatEffects, addExtraEffects } from \"./special.js\";\nimport { getInfusionActionData } from \"../item/infusions.js\";\n\nfunction getProperties(ddb, feature) {\n\n  let result = {\n    mgc: false,\n  };\n\n  const kiEmpowered = ddb.character.classes\n    // is a martial artist\n    .some((cls) =>\n      cls.classFeatures.some((feature) =>\n        feature.definition.name === \"Ki-Empowered Strikes\"\n        && cls.level >= feature.definition.requiredLevel\n      ));\n\n  if (kiEmpowered && feature.flags.ddbimporter.originalName == \"Unarmed Strike\") {\n    result.mgc = true;\n  }\n\n  return result;\n\n}\n\nfunction getResourceFlags(character, action, flags) {\n  const linkItems = game.modules.get(\"link-item-resource-5e\")?.active;\n  const resourceType = getProperty(character, \"flags.ddbimporter.resources.type\");\n  if (resourceType !== \"disable\" && linkItems) {\n    const hasResourceLink = getProperty(flags, \"link-item-resource-5e.resource-link\");\n    Object.keys(character.system.resources).forEach((resource) => {\n      const detail = character.system.resources[resource];\n      if (action.name === detail.label) {\n        setProperty(flags, \"link-item-resource-5e.resource-link\", resource);\n        character.system.resources[resource] = { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n      } else if (hasResourceLink === resource) {\n        setProperty(flags, \"link-item-resource-5e.resource-link\", undefined);\n      }\n    });\n  }\n  return flags;\n}\n\nfunction addFlagHints(ddb, character, action, feature) {\n  const klassAction = ddb.character.actions.class\n    .filter((ddbAction) => DDBHelper.findClassByFeatureId(ddb, ddbAction.componentId))\n    .find((ddbAction) => {\n      const name = DDBHelper.getName(ddb, ddbAction, character);\n      return name === feature.name;\n    });\n  const raceAction = ddb.character.actions.race\n    .some((ddbAction) => {\n      const name = DDBHelper.getName(ddb, ddbAction, character);\n      return name === feature.name;\n    });\n  const featAction = ddb.character.actions.feat\n    .some((ddbAction) => {\n      const name = DDBHelper.getName(ddb, ddbAction, character);\n      return name === feature.name;\n    });\n\n  // obsidian and klass names (used in effect enrichment)\n  if (klassAction) {\n    const klass = DDBHelper.findClassByFeatureId(ddb, klassAction.componentId);\n    setProperty(feature.flags, \"obsidian.source.type\", \"class\");\n    setProperty(feature.flags, \"ddbimporter.type\", \"class\");\n    setProperty(feature.flags, \"obsidian.source.text\", klass.definition.name);\n    setProperty(feature.flags, \"ddbimporter.class\", klass.definition.name);\n    const subClassName = hasProperty(klass, \"subclassDefinition.name\") ? klass.subclassDefinition.name : undefined;\n    setProperty(feature.flags, \"ddbimporter.subclass\", subClassName);\n  } else if (raceAction) {\n    setProperty(feature.flags, \"obsidian.source.type\", \"race\");\n    setProperty(feature.flags, \"ddbimporter.type\", \"race\");\n  } else if (featAction) {\n    setProperty(feature.flags, \"obsidian.source.type\", \"feat\");\n    setProperty(feature.flags, \"ddbimporter.type\", \"feat\");\n  }\n\n  // scaling details\n  let klassActionComponent = DDBHelper.findComponentByComponentId(ddb, action.id);\n  if (!klassActionComponent) klassActionComponent = DDBHelper.findComponentByComponentId(ddb, action.componentId);\n  if (klassActionComponent) {\n    setProperty(feature.flags, \"ddbimporter.dndbeyond.levelScale\", klassActionComponent.levelScale);\n    setProperty(feature.flags, \"ddbimporter.dndbeyond.levelScales\", klassActionComponent.definition?.levelScales);\n    setProperty(feature.flags, \"ddbimporter.dndbeyond.limitedUse\", klassActionComponent.definition?.limitedUse);\n  }\n\n  // resource flag hints\n  feature.flags = getResourceFlags(character, action, feature.flags);\n\n  return feature;\n}\n\n// get actions from ddb.character.customActions\nfunction getCustomActions(ddb, displayedAsAttack) {\n  const customActions = ddb.character.customActions\n    .filter((action) => action.displayAsAttack === displayedAsAttack)\n    .map((action) => {\n      action.dice = {\n        diceString: action.diceCount && action.diceType ? `${action.diceCount}d${action.diceType}` : null,\n        fixedValue: action.fixedValue,\n      };\n\n      const range = {\n        aoeType: action.aoeType,\n        aoeSize: action.aoeSize,\n        range: action.range,\n        long: action.longRange,\n      };\n      action.range = range;\n\n      if (action.statId) action.abilityModifierStatId = action.statId;\n\n      action.activation = {\n        activationTime: action.activationTime,\n        activationType: action.activationType,\n      };\n\n      return action;\n    });\n\n  return customActions;\n}\n\nfunction isMartialArtists(classes) {\n  return classes.some((cls) => cls.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\"));\n}\n\nconst LEVEL_SCALE_EXCLUSION = [\n  \"Fire Rune\",\n  \"Cloud Rune\",\n  \"Stone Rune\",\n  \"Frost Rune\",\n  \"Hill Rune\",\n  \"Storm Rune\",\n];\n\n// eslint-disable-next-line complexity\nfunction getDamage(ddb, action, feat) {\n  let damage = {};\n  const damageType = action.damageTypeId\n    ? DICTIONARY.actions.damageType.find((type) => type.id === action.damageTypeId).name\n    : null;\n\n  // when the action type is not set to melee or ranged we don't apply the mod to damage\n  const meleeOrRangedAction = action.attackTypeRange || action.rangeId;\n  const modBonus = (action.statId || action.abilityModifierStatId) && !action.isOffhand && meleeOrRangedAction ? \" + @mod\" : \"\";\n  const die = action.dice ? action.dice : action.die ? action.die : undefined;\n  const fixedBonus = die?.fixedValue ? ` + ${die.fixedValue}` : \"\";\n  const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n\n  const useScale = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue\");\n  const scaleValueLink = DDBHelper.getScaleValueString(ddb, action).value;\n  const excludedScale = LEVEL_SCALE_EXCLUSION.includes(feat.name);\n\n  const useScaleValueLink = useScale && !excludedScale && scaleValueLink && scaleValueLink !== \"{{scalevalue-unknown}}\";\n\n  if (die || useScaleValueLink) {\n    const damageTag = (globalDamageHints && damageType) ? `[${damageType}]` : \"\";\n    if (useScaleValueLink) {\n      damage = {\n        parts: [[`${scaleValueLink}${damageTag}${modBonus}${fixedBonus}`, damageType]],\n        versatile: \"\",\n      };\n    } else if (die.diceString) {\n      const damageString = utils.parseDiceString(die.diceString, modBonus, damageTag).diceString;\n      damage = {\n        parts: [[damageString, damageType]],\n        versatile: \"\",\n      };\n    } else if (fixedBonus) {\n      damage = {\n        parts: [[fixedBonus + modBonus, damageType]],\n        versatile: \"\",\n      };\n    }\n  }\n\n  return damage;\n}\n\nconst LEVEL_SCALE_INFUSIONS = [\n  \"Unarmed Strike\",\n  \"Arms of the Astral Self (WIS)\",\n  \"Arms of the Astral Self (DEX)\",\n  \"Arms of the Astral Self (DEX/STR)\",\n  \"Body of the Astral Self\",\n  \"Starry Form: Archer\",\n  \"Sneak Attack\",\n];\n\n/**\n * Some features have actions that use dice and mods that are defined on the character class feature\n * this attempts to parse out the damage dice and any ability modifier.\n * This relies on the parsing of templateStrings for the ability modifier detection.\n * @param {*} ddb\n * @param {*} character\n * @param {*} action\n * @param {*} feat\n */\nfunction getLevelScaleDice(ddb, character, action, feat) {\n  const useScale = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue\");\n  const excludedScale = LEVEL_SCALE_EXCLUSION.includes(feat.name);\n\n  if (useScale) return feat;\n  const parts = ddb.character.classes\n    .filter((cls) => cls.classFeatures.some((feature) =>\n      feature.definition.id == action.componentId\n      && feature.definition.entityTypeId == action.componentTypeId\n      && feature.levelScale?.dice?.diceString\n    ))\n    .map((cls) => {\n      const feature = cls.classFeatures.find((feature) =>\n        feature.definition.id == action.componentId\n        && feature.definition.entityTypeId == action.componentTypeId\n      );\n      const parsedString = character.flags.ddbimporter.dndbeyond.templateStrings.find((templateString) =>\n        templateString.id == action.id\n        && templateString.entityTypeId == action.entityTypeId\n      );\n      const die = feature.levelScale.dice ? feature.levelScale.dice : feature.levelScale.die ? feature.levelScale.die : undefined;\n      const scaleValueLink = DDBHelper.getScaleValueString(ddb, action).value;\n      let part = useScale && !excludedScale && scaleValueLink && scaleValueLink !== \"{{scalevalue-unknown}}\"\n        ? scaleValueLink\n        : die.diceString;\n      if (parsedString) {\n        const modifier = parsedString.definitions.find((definition) => definition.type === \"modifier\");\n        if (modifier) {\n          feat.system.ability = modifier.subType;\n          part = `${part} + @mod`;\n        }\n      }\n      return [part, \"\"];\n    });\n\n  if (parts.length > 0 && useScale) {\n    feat.system.damage.parts = parts;\n  } else if (parts.length > 0 && !LEVEL_SCALE_INFUSIONS.includes(action.name)) {\n    const combinedParts = hasProperty(feat, \"data.damage.parts\") && feat.system.damage.parts.length > 0\n      ? feat.system.damage.parts.concat(parts)\n      : parts;\n    feat.system.damage = {\n      parts: combinedParts,\n      versatile: \"\",\n    };\n  }\n\n  return feat;\n}\n\nfunction martialArtsDamage(ddb, action) {\n  const damageType = DICTIONARY.actions.damageType.find((type) => type.id === action.damageTypeId).name;\n  const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n\n  let damageBonus = DDBHelper.filterBaseModifiers(ddb, \"damage\", \"unarmed-attacks\").reduce((prev, cur) => prev + cur.value, 0);\n  if (damageBonus === 0) {\n    damageBonus = \"\";\n  } else {\n    damageBonus = ` + ${damageBonus}`;\n  }\n  const actionDie = action.dice ? action.dice : action.die ? action.die : undefined;\n\n  // are we dealing with martial arts?\n  if (isMartialArtists(ddb.character.classes)) {\n    const useScale = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue\");\n\n    const dies = ddb.character.classes\n      .filter((cls) => isMartialArtists([cls]))\n      .map((cls) => {\n        const feature = cls.classFeatures.find((feature) => feature.definition.name === \"Martial Arts\");\n        const levelScaleDie = feature?.levelScale?.dice ? feature.levelScale.dice : feature?.levelScale.die ? feature.levelScale.die : undefined;\n\n        if (levelScaleDie?.diceString) {\n\n          const scaleValueLink = DDBHelper.getScaleValueLink(ddb, feature);\n          const scaleString = useScale && scaleValueLink && scaleValueLink !== \"{{scalevalue-unknown}}\"\n            ? scaleValueLink\n            : levelScaleDie.diceString;\n\n          if (actionDie?.diceValue > levelScaleDie.diceValue) {\n            return actionDie.diceString;\n          }\n          return scaleString;\n        } else if (actionDie !== null && actionDie !== undefined) {\n          // On some races bite is considered a martial art, damage\n          // is different and on the action itself\n          return actionDie.diceString;\n        } else {\n          return \"1\";\n        }\n      });\n    const die = dies.length > 0 ? dies[0] : \"\";\n    const damageTag = (globalDamageHints && damageType) ? `[${damageType}]` : \"\";\n    const damageString = useScale && die.includes(\"@\")\n      ? `${die}${damageTag}${damageBonus} + @mod`\n      : utils.parseDiceString(die, `${damageBonus} + @mod`, damageTag).diceString;\n\n    // set the weapon damage\n    return {\n      parts: [[damageString, damageType]],\n      versatile: \"\",\n    };\n  } else if (actionDie !== null && actionDie !== undefined) {\n    // The Lizardfolk jaws have a different base damage, its' detailed in\n    // dice so lets capture that for actions if it exists\n    const damageTag = (globalDamageHints && damageType) ? `[${damageType}]` : \"\";\n    const damageString = utils.parseDiceString(actionDie.diceString, `${damageBonus} + @mod`, damageTag).diceString;\n    return {\n      parts: [[damageString, damageType]],\n      versatile: \"\",\n    };\n  } else {\n    // default to basics\n    return {\n      parts: [[`1${damageBonus} + @mod`, damageType]],\n      versatile: \"\",\n    };\n  }\n}\n\nfunction getLimitedUse(action, character) {\n  if (\n    action.limitedUse\n    && (action.limitedUse.maxUses || action.limitedUse.statModifierUsesId || action.limitedUse.useProficiencyBonus)\n  ) {\n    const resetType = DICTIONARY.resets.find((type) => type.id === action.limitedUse.resetType);\n    let maxUses = (action.limitedUse.maxUses && action.limitedUse.maxUses !== -1) ? action.limitedUse.maxUses : 0;\n\n    if (action.limitedUse.statModifierUsesId) {\n      const ability = DICTIONARY.character.abilities.find(\n        (ability) => ability.id === action.limitedUse.statModifierUsesId\n      ).value;\n\n      switch (action.limitedUse.operator) {\n        case 2: {\n          maxUses *= character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n          break;\n        }\n        case 1:\n        default:\n          maxUses += character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n      }\n    }\n\n    if (action.limitedUse.useProficiencyBonus) {\n      switch (action.limitedUse.proficiencyBonusOperator) {\n        case 2: {\n          maxUses *= character.system.attributes.prof;\n          break;\n        }\n        case 1:\n        default:\n          maxUses += character.system.attributes.prof;\n      }\n    }\n\n    const finalMaxUses = (maxUses) ? parseInt(maxUses) : null;\n\n    return {\n      value: (finalMaxUses !== null && finalMaxUses != 0) ? maxUses - action.limitedUse.numberUsed : null,\n      max: (finalMaxUses != 0) ? finalMaxUses : null,\n      per: resetType ? resetType.value : \"\",\n    };\n  } else {\n    return {\n      value: null,\n      max: null,\n      per: \"\",\n    };\n  }\n}\n\nfunction getActivation(action) {\n  if (action.activation) {\n    const actionType = DICTIONARY.actions.activationTypes.find((type) => type.id === action.activation.activationType);\n    const activation = !actionType\n      ? {}\n      : {\n        type: actionType.value,\n        cost: action.activation.activationTime || 1,\n        condition: \"\",\n      };\n    return activation;\n  }\n  return {};\n}\n\nfunction getResource(character, action) {\n  let consume = {\n    \"type\": \"\",\n    \"target\": \"\",\n    \"amount\": null\n  };\n\n  Object.keys(character.system.resources).forEach((resource) => {\n    const detail = character.system.resources[resource];\n    if (action.name === detail.label) {\n      consume = {\n        type: \"attribute\",\n        target: `resources.${resource}.value`,\n        amount: 1,\n      };\n    }\n  });\n\n  return consume;\n}\n\nfunction getWeaponType(action) {\n  const entry = DICTIONARY.actions.attackTypes.find((type) => type.attackSubtype === action.attackSubtype);\n  const range = DICTIONARY.weapon.weaponRange.find((type) => type.attackType === action.attackTypeRange);\n  return entry ? entry.value : range ? `simple${range.value}` : \"simpleM\";\n}\n\nfunction calculateRange(action, weapon) {\n  if (action.range && action.range.aoeType && action.range.aoeSize) {\n    weapon.system.range = { value: null, units: \"self\", long: \"\" };\n    weapon.system.target = {\n      value: action.range.aoeSize,\n      type: DICTIONARY.actions.aoeType.find((type) => type.id === action.range.aoeType)?.value,\n      units: \"ft\",\n    };\n  } else if (action.range && action.range.range) {\n    weapon.system.range = {\n      value: action.range.range,\n      units: \"ft\",\n      long: action.range.long || \"\",\n    };\n  } else {\n    weapon.system.range = { value: 5, units: \"ft\", long: \"\" };\n  }\n  return weapon;\n}\n\nfunction calculateSaveAttack(ddb, action, weapon) {\n  weapon.system.actionType = \"save\";\n  weapon.system.damage = getDamage(ddb, action, weapon);\n\n  const fixedDC = (action.fixedSaveDc) ? action.fixedSaveDc : null;\n  const scaling = (fixedDC) ? fixedDC : (action.abilityModifierStatId) ? DICTIONARY.character.abilities.find((stat) => stat.id === action.abilityModifierStatId).value : \"spell\";\n\n  const saveAbility = (action.saveStatId)\n    ? DICTIONARY.character.abilities.find((stat) => stat.id === action.saveStatId).value\n    : \"\";\n\n  weapon.system.save = {\n    ability: saveAbility,\n    dc: fixedDC,\n    scaling: scaling,\n  };\n  if (action.abilityModifierStatId) {\n    weapon.system.ability = DICTIONARY.character.abilities.find((stat) => stat.id === action.abilityModifierStatId).value;\n  }\n  return weapon;\n}\n\n\nfunction calculateActionAttackAbilities(ddb, character, action, weapon) {\n  let defaultAbility;\n\n  if (action.abilityModifierStatId && !([1, 2].includes(action.abilityModifierStatId) && action.isMartialArts)) {\n    defaultAbility = DICTIONARY.character.abilities.find(\n      (stat) => stat.id === action.abilityModifierStatId\n    ).value;\n    weapon.system.ability = defaultAbility;\n  } else if (action.isMartialArts) {\n    weapon.system.ability\n      = action.isMartialArts && isMartialArtists(ddb.character.classes)\n        ? character.flags.ddbimporter.dndbeyond.effectAbilities.dex.value >= character.flags.ddbimporter.dndbeyond.effectAbilities.str.value\n          ? \"dex\"\n          : \"str\"\n        : \"str\";\n  } else {\n    weapon.system.ability = \"\";\n  }\n  if (action.isMartialArts) {\n    weapon.system.damage = martialArtsDamage(ddb, action);\n    weapon.system.attackBonus = DDBHelper.filterBaseModifiers(ddb, \"bonus\", \"unarmed-attacks\").reduce((prev, cur) => prev + cur.value, 0);\n  } else {\n    weapon.system.damage = getDamage(ddb, action, weapon);\n  }\n  return weapon;\n}\n\nfunction getAttackType(ddb, character, action, weapon) {\n  // lets see if we have a save stat for things like Dragon born Breath Weapon\n  if (typeof action.saveStatId === \"number\") {\n    weapon = calculateSaveAttack(ddb, action, weapon);\n  } else if (action.actionType === 1) {\n    if (action.attackTypeRange === 2) {\n      weapon.system.actionType = \"rwak\";\n    } else {\n      weapon.system.actionType = \"mwak\";\n    }\n    weapon = calculateActionAttackAbilities(ddb, character, action, weapon);\n  } else {\n    if (action.rangeId && action.rangeId === 1) {\n      weapon.system.actionType = \"mwak\";\n    } else if (action.rangeId && action.rangeId === 2) {\n      weapon.system.actionType = \"rwak\";\n    } else {\n      weapon.system.actionType = \"other\";\n    }\n    weapon = calculateActionAttackAbilities(ddb, character, action, weapon);\n  }\n  return weapon;\n}\n\nconst excludedActionFeatures = [\"Unarmed Strike\"];\n\nfunction getAttackAction(ddb, character, action) {\n  const actionType = game.settings.get(\"ddb-importer\", \"character-update-policy-use-actions-as-features\") && !excludedActionFeatures.includes(action.name)\n    ? \"feat\"\n    : \"weapon\";\n  let feature = {\n    name: DDBHelper.getName(ddb, action, character),\n    type: actionType,\n    system: JSON.parse(utils.getTemplate(actionType)),\n    flags: {\n      ddbimporter: {\n        id: action.id,\n        entityTypeId: action.entityTypeId,\n        action: true,\n        componentId: action.componentId,\n        componentTypeId: action.componentTypeId,\n        originalName: DDBHelper.getName(ddb, action, character, false),\n        type: \"other\",\n      },\n      infusions: { infused: false },\n      obsidian: {\n        source: {\n          type: \"other\",\n        },\n      },\n    },\n  };\n  logger.debug(`Parsing action: ${feature.name} as ${actionType}`);\n  if (action.infusionFlags) {\n    setProperty(feature, \"flags.infusions\", action.infusionFlags);\n  }\n\n  try {\n    if (action.isMartialArts) {\n      feature.flags.ddbimporter.dndbeyond = {\n        type: \"Martial Arts\",\n      };\n    }\n\n    feature.system.proficient = action.isProficient ? 1 : 0;\n    feature.system.description = getDescription(ddb, character, action);\n    feature.system.equipped = true;\n    feature.system.rarity = \"\";\n    feature.system.identified = true;\n    feature.system.activation = getActivation(action);\n    feature = calculateRange(action, feature);\n    feature = getAttackType(ddb, character, action, feature);\n    feature.system.weaponType = getWeaponType(action);\n    feature.system.uses = getLimitedUse(action, character);\n    feature.system.consume = getResource(character, action);\n    feature.system.properties = getProperties(ddb, feature);\n\n    feature = addFlagHints(ddb, character, action, feature);\n    feature = addFeatEffects(ddb, character, action, feature);\n    feature = getLevelScaleDice(ddb, character, action, feature);\n\n    feature = DDBHelper.addCustomValues(ddb, feature);\n\n  } catch (err) {\n    logger.warn(\n      `Unable to Import Attack Action: ${action.name}, please log a bug report. Err: ${err.message}`,\n      \"extension\"\n    );\n  }\n\n  return feature;\n}\n\n/**\n * Everyone has an Unarmed Strike\n * @param {*} ddb\n */\nfunction getUnarmedStrike(ddb, character) {\n  const unarmedStrikeMock = {\n    limitedUse: null,\n    name: \"Unarmed Strike\",\n    description: null,\n    snippet:\n      \"Instead of using a weapon to make a melee weapon attack, you can use an unarmed strike: a punch, kick, head-butt, or similar forceful blow (none of which count as weapons). On a hit, an unarmed strike deals bludgeoning damage equal to 1 + your Strength modifier. You are proficient with your unarmed strikes.\",\n    abilityModifierStatId: null,\n    attackTypeRange: 1,\n    actionType: 1,\n    attackSubtype: 3,\n    dice: null,\n    value: 1,\n    damageTypeId: 1,\n    isMartialArts: true,\n    isProficient: true,\n    displayAsAttack: true,\n    range: {\n      range: null,\n      longRange: null,\n      aoeType: null,\n      aoeSize: null,\n      hasAoeSpecialDescription: false,\n    },\n    activation: {\n      activationTime: 1,\n      activationType: 1,\n    },\n    id: \"unarmedStrike\",\n  };\n  const unarmedStrike = getAttackAction(ddb, character, unarmedStrikeMock);\n  return unarmedStrike;\n}\n\n/**\n * Try and parse attack actions - this will at the moment only really support basic melee attacks\n * @param {*} ddb\n * @param {*} character\n */\nfunction getAttackActions(ddb, character) {\n  const attackActions = [\n    // do class options here have a class id, needed for optional class features\n    ddb.character.actions.class.filter((action) => DDBHelper.findClassByFeatureId(ddb, action.componentId)),\n    ddb.character.actions.race,\n    ddb.character.actions.feat,\n    getCustomActions(ddb, true),\n    getInfusionActionData(ddb),\n  ]\n    .flat()\n    .filter((action) => DDBHelper.displayAsAttack(ddb, action, character))\n    .map((action) => {\n      return getAttackAction(ddb, character, action);\n    });\n  logger.debug(\"attack actions\", attackActions);\n  return attackActions;\n}\n\nfunction actionFilter(action, parsedActions) {\n  const attacksAsFeatures = game.settings.get(\"ddb-importer\", \"character-update-policy-use-actions-as-features\");\n  const exists = parsedActions.some((attack) => attack.name === action.name);\n  // console.warn(\"action filter\", {actionName: action.name, parsedActions, attacksAsFeatures, exists, total: attacksAsFeatures && exists});\n\n  return attacksAsFeatures && exists;\n}\n\n/**\n * Lets Parse remaining actions\n * @param {*} ddb\n * @param {*} parsedActions\n */\nfunction getOtherActions(ddb, character, parsedActions) {\n  const otherActions = [\n    // do class options here have a class id, needed for optional class features\n    ddb.character.actions.class.filter((action) => DDBHelper.findClassByFeatureId(ddb, action.componentId)),\n    ddb.character.actions.race,\n    ddb.character.actions.feat,\n    getCustomActions(ddb, false),\n    getInfusionActionData(ddb),\n  ]\n    .flat()\n    .filter((action) => action.name && action.name !== \"\")\n    .filter(\n      (action) =>\n        // lets grab other actions and add, make sure we don't get attack based ones that haven't parsed\n        (!DDBHelper.displayAsAttack(ddb, action, character) && !actionFilter(action, parsedActions))\n        || (DDBHelper.displayAsAttack(ddb, action, character) && !parsedActions.some((attack) => attack.name === DDBHelper.getName(ddb, action, character)))\n    )\n    .map((action) => {\n      logger.debug(`Getting Other Action ${action.name}`);\n      let feature = {\n        name: DDBHelper.getName(ddb, action, character),\n        type: \"feat\",\n        system: JSON.parse(utils.getTemplate(\"feat\")),\n        flags: {\n          ddbimporter: {\n            id: action.id,\n            entityTypeId: action.entityTypeId,\n            componentId: action.componentId,\n            componentTypeId: action.componentTypeId,\n            type: \"other\",\n          },\n          infusions: { infused: false },\n          obsidian: {\n            source: {\n              type: \"other\",\n            },\n          }\n        },\n      };\n      if (action.infusionFlags) {\n        setProperty(feature, \"flags.infusions\", action.infusionFlags);\n      }\n      feature.system.activation = getActivation(action);\n      feature.system.description = getDescription(ddb, character, action);\n      feature.system.uses = getLimitedUse(action, character);\n      feature.system.consume = getResource(character, action);\n\n      feature = calculateRange(action, feature);\n      feature = getAttackType(ddb, character, action, feature);\n\n      if (!feature.system.damage?.parts) {\n        logger.debug(\"Running level scale parser\");\n        feature = getLevelScaleDice(ddb, character, action, feature);\n      }\n\n      feature = addFlagHints(ddb, character, action, feature);\n      feature = addFeatEffects(ddb, character, action, feature);\n\n      feature = DDBHelper.addCustomValues(ddb, feature);\n\n      return feature;\n    });\n\n  logger.debug(\"other actions\", otherActions);\n  return otherActions;\n}\n\nexport default async function parseActions(ddb, character) {\n  let actions = [\n    // Get Attack Actions that we know about, typically natural attacks etc\n    ...getAttackActions(ddb, character),\n  ];\n  // Everyone has an Unarmed Strike, but some choose not to use it - DDB option now always set to false\n  // if (ddb.character.preferences.showUnarmedStrike) actions.push(getUnarmedStrike(ddb, character));\n  actions.push(getUnarmedStrike(ddb, character));\n  actions = [\n    ...actions,\n    // Try and parse other relevant actions\n    ...getOtherActions(ddb, character, actions),\n  ];\n\n  // sort alphabetically, then by action type\n  actions.sort().sort((a, b) => {\n    if (!a.system.activation.activationType) {\n      return 1;\n    } else if (!b.system.activation.activationType) {\n      return -1;\n    } else {\n      const aActionTypeID = DICTIONARY.actions.activationTypes.find(\n        (type) => type.value === a.system.activation.activationType\n      ).id;\n      const bActionTypeID = DICTIONARY.actions.activationTypes.find(\n        (type) => type.value === b.system.activation.activationType\n      ).id;\n      if (aActionTypeID > bActionTypeID) {\n        return 1;\n      } else if (aActionTypeID < bActionTypeID) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n  });\n\n  fixFeatures(actions);\n  const results = await addExtraEffects(ddb, actions, character);\n  return results;\n}\n","/* eslint-disable no-continue */\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\n\n// Import parsing functions\nimport { getLookups } from \"./metadata.js\";\nimport { fixSpells } from \"./special.js\";\nimport { parseSpell } from \"./parseSpell.js\";\nimport { getSpellCastingAbility, hasSpellCastingAbility, convertSpellCastingAbilityId } from \"./ability.js\";\nimport logger from \"../../logger.js\";\n\nexport default class CharacterSpellFactory {\n\n  constructor(ddb, character) {\n    this.ddb = ddb;\n    this.character = character;\n\n    this.items = [];\n\n    this.proficiencyModifier = character.system.attributes.prof;\n    this.lookups = getLookups(ddb.character);\n\n    logger.debug(\"Character spell lookups\", this.lookups);\n    this.characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n\n    this.healingBoost = DDBHelper.filterBaseModifiers(ddb, \"bonus\", \"spell-group-healing\").reduce((a, b) => a + b.value, 0);\n\n  }\n\n  async getClassSpells() {\n    for (const playerClass of this.ddb.character.classSpells) {\n      const classInfo = this.ddb.character.classes.find((cls) => cls.id === playerClass.characterClassId);\n      const spellCastingAbility = getSpellCastingAbility(classInfo);\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      logger.debug(\"Spell parsing, class info\", classInfo);\n\n      const cantripBoost\n        = DDBHelper.getChosenClassModifiers(this.ddb).filter(\n          (mod) =>\n            mod.type === \"bonus\"\n            && mod.subType === `${classInfo.definition.name.toLowerCase()}-cantrip-damage`\n            && (mod.restriction === null || mod.restriction === \"\")\n        ).length > 0;\n\n      // parse spells chosen as spellcasting (playerClass.spells)\n      for (const spell of playerClass.spells) {\n        if (!spell.definition) continue;\n        // add some data for the parsing of the spells into the data structure\n        spell.flags = {\n          ddbimporter: {\n            dndbeyond: {\n              lookup: \"classSpell\",\n              class: classInfo.definition.name,\n              level: classInfo.level,\n              characterClassId: playerClass.characterClassId,\n              spellLevel: spell.definition.level,\n              // spellSlots: character.system.spells,\n              ability: spellCastingAbility,\n              mod: abilityModifier,\n              dc: 8 + this.proficiencyModifier + abilityModifier,\n              cantripBoost: cantripBoost,\n              overrideDC: false,\n              id: spell.id,\n              entityTypeId: spell.entityTypeId,\n              healingBoost: this.healingBoost,\n              usesSpellSlot: spell.usesSpellSlot,\n            },\n          },\n          \"spell-class-filter-for-5e\": {\n            parentClass: classInfo.definition.name.toLowerCase(),\n          },\n          // \"spellbook-assistant-manager\": {\n          //   class: classInfo.definition.name.toLowerCase(),\n          // }\n        };\n\n        // Check for duplicate spells, normally domain ones\n        // We will import spells from a different class that are the same though\n        // as they may come from with different spell casting mods\n        // eslint-disable-next-line no-await-in-loop\n        const parsedSpell = await parseSpell(spell, this.character);\n        const duplicateSpell = this.items.findIndex(\n          (existingSpell) => {\n            const existingName = (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name);\n            const parsedName = (parsedSpell.flags.ddbimporter.originalName ? parsedSpell.flags.ddbimporter.originalName : parsedSpell.name);\n            // some spells come from different classes but end up having the same ddb id\n            const classIdMatch = (classInfo.definition.name === existingSpell.flags.ddbimporter.dndbeyond.class || spell.id === existingSpell.flags.ddbimporter.dndbeyond.id);\n            return existingName === parsedName && classIdMatch;\n          });\n        const duplicateItem = this.items[duplicateSpell];\n        if (!duplicateItem) {\n          this.items.push(parsedSpell);\n        } else if (spell.alwaysPrepared || parsedSpell.system.preparation.mode === \"always\"\n          || (spell.alwaysPrepared === duplicateItem.alwaysPrepared && parsedSpell.system.preparation.mode === duplicateItem.system.preparation.mode && parsedSpell.prepared && !duplicateItem.prepared)) {\n          // if our new spell is always known we overwrite!\n          // it's probably domain\n          this.items[duplicateSpell] = parsedSpell;\n        } else {\n          // we'll emit a console message if it doesn't match this case for future debugging\n          logger.info(`Duplicate Spell ${spell.definition.name} detected in class ${classInfo.definition.name}.`);\n        }\n      }\n    }\n\n  }\n\n  async getSpecialClassSpells() {\n    for (const spell of this.ddb.character.spells.class) {\n      if (!spell.definition) continue;\n      // If the spell has an ability attached, use that\n      let spellCastingAbility = undefined;\n      const featureId = DDBHelper.determineActualFeatureId(this.ddb, spell.componentId);\n      const classInfo = this.lookups.classFeature.find((clsFeature) => clsFeature.id == featureId);\n\n      logger.debug(\"Class spell parsing, class info\", classInfo);\n      // Sometimes there are spells here which don't have an class Info\n      // this seems to be part of the optional tasha's rules, lets not parse for now\n      // as ddb implementation is not yet finished\n      // / options.class.[].definition.id\n      if (!classInfo) {\n        logger.warn(`Unable to add ${spell.definition.name}`);\n      }\n      if (!classInfo) continue;\n      let klass = DDBHelper.getClassFromOptionID(this.ddb, spell.componentId);\n\n      if (!klass) klass = DDBHelper.findClassByFeatureId(this.ddb, spell.componentId);\n\n      logger.debug(\"Class spell, class found?\", klass);\n\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      } else if (klass) {\n        spellCastingAbility = getSpellCastingAbility(klass);\n        // force these spells to always be prepared\n        spell.alwaysPrepared = true;\n      } else {\n        // if there is no ability on spell, we default to wis\n        spellCastingAbility = \"wis\";\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            class: (klass) ? klass.definition.name : undefined,\n            lookup: \"classFeature\",\n            lookupName: classInfo.name,\n            lookupId: classInfo.id,\n            level: this.character.flags.ddbimporter.dndbeyond.totalLevels,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n          },\n        },\n      };\n\n      // Check for duplicate spells, normally domain ones\n      // We will import spells from a different class that are the same though\n      // as they may come from with different spell casting mods\n      const duplicateSpell = this.items.findIndex(\n        (existingSpell) =>\n          (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name) === spell.definition.name\n          && klass\n          && klass.definition.name === existingSpell.flags.ddbimporter.dndbeyond.class\n          && spell.usesSpellSlot && existingSpell.flags.ddbimporter.dndbeyond.usesSpellSlot\n      );\n      if (!this.items[duplicateSpell]) {\n        // eslint-disable-next-line no-await-in-loop\n        const parsedSpell = await parseSpell(spell, this.character);\n        this.items.push(parsedSpell);\n      } else if (spell.alwaysPrepared) {\n        // if our new spell is always known we overwrite!\n        // it's probably domain\n        // eslint-disable-next-line no-await-in-loop\n        const parsedSpell = await parseSpell(spell, this.character);\n        this.items[duplicateSpell] = parsedSpell;\n      } else {\n        // we'll emit a console message if it doesn't match this case for future debugging\n        logger.info(`Duplicate Spell ${spell.definition.name} detected in class ${classInfo.name}.`);\n      }\n    }\n  }\n\n  async getRaceSpells() {\n    for (const spell of this.ddb.character.spells.race) {\n      if (!spell.definition)\n        continue;\n      // for race spells the spell spellCastingAbilityId is on the spell\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      let raceInfo = this.lookups.race.find((rc) => rc.id === spell.componentId);\n\n      if (!raceInfo) {\n        // for some reason we haven't matched the race option id with the spell\n        // this happens with at least the SCAG optional spells casting half elf\n        raceInfo = {\n          name: \"Racial spell\",\n          id: spell.componentId,\n        };\n      }\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            lookup: \"race\",\n            lookupName: raceInfo.name,\n            lookupId: raceInfo.id,\n            race: this.ddb.character.race.fullName,\n            level: spell.castAtLevel,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n          },\n        },\n      };\n\n      if (spell.alwaysPrepared && spell.limitedUse) {\n        const dups = this.ddb.character.spells.race.filter((otherSpell) => otherSpell.definition.name === spell.definition.name).length > 1;\n        const duplicateSpell = this.items.findIndex(\n          (existingSpell) =>\n            (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name) === spell.definition.name\n            && existingSpell.flags.ddbimporter.dndbeyond.usesSpellSlot\n        );\n        if (!dups && !this.items[duplicateSpell]) {\n          // also parse spell as non-limited use\n          let unlimitedSpell = duplicate(spell);\n          unlimitedSpell.limitedUse = null;\n          unlimitedSpell.usesSpellSlot = true;\n          unlimitedSpell.flags.ddbimporter.dndbeyond.usesSpellSlot = true;\n          unlimitedSpell.flags.ddbimporter.dndbeyond.granted = true;\n          unlimitedSpell.flags.ddbimporter.dndbeyond.lookup = \"race\";\n          delete unlimitedSpell.id;\n          delete unlimitedSpell.flags.ddbimporter.dndbeyond.id;\n          // eslint-disable-next-line no-await-in-loop\n          const parsedSpell = await parseSpell(spell, this.character);\n          this.items.push(parsedSpell);\n        }\n      }\n\n      // eslint-disable-next-line no-await-in-loop\n      const parsedSpell = await parseSpell(spell, this.character);\n      this.items.push(parsedSpell);\n    }\n  }\n\n  async getFeatSpells() {\n    for (const spell of this.ddb.character.spells.feat) {\n      if (!spell.definition)\n        continue;\n      // If the spell has an ability attached, use that\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      let featInfo = this.lookups.feat.find((ft) => ft.id === spell.componentId);\n\n      if (!featInfo) {\n        // for some reason we haven't matched the feat option id with the spell\n        // we fiddle the result\n        featInfo = {\n          name: \"Feat option spell\",\n          id: spell.componentId,\n        };\n      }\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            lookup: \"feat\",\n            lookupName: featInfo.name,\n            lookupId: featInfo.id,\n            level: spell.castAtLevel,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n          },\n        },\n      };\n\n      // if (spell.alwaysPrepared && spell.limitedUse) {\n      //   const dups = this.ddb.character.spells.feat.filter((otherSpell) => otherSpell.definition.name === spell.definition.name).length > 1;\n      //   const duplicateSpell = this.items.findIndex(\n      //     (existingSpell) =>\n      //       (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name) === spell.definition.name\n      //       && existingSpell.flags.ddbimporter.dndbeyond.usesSpellSlot\n      //   );\n      //   if (!dups && !this.items[duplicateSpell]) {\n      //     // also parse spell as non-limited use\n      //     let unlimitedSpell = duplicate(spell);\n      //     unlimitedSpell.limitedUse = null;\n      //     unlimitedSpell.usesSpellSlot = true;\n      //     unlimitedSpell.flags.ddbimporter.dndbeyond.usesSpellSlot = true;\n      //     unlimitedSpell.flags.ddbimporter.dndbeyond.lookup = \"feat\";\n      //     unlimitedSpell.flags.ddbimporter.dndbeyond.granted = true;\n      //     delete unlimitedSpell.id;\n      //     delete unlimitedSpell.flags.ddbimporter.dndbeyond.id;\n      //     // eslint-disable-next-line no-await-in-loop\n      //     const parsedSpell = await parseSpell(spell, this.character);\n      //     this.items.push(parsedSpell);\n      //   }\n      // }\n\n      // eslint-disable-next-line no-await-in-loop\n      const parsedSpell = await parseSpell(spell, this.character);\n      this.items.push(parsedSpell);\n    }\n  }\n\n  async getBackgroundSpells() {\n    if (!this.ddb.character.spells.background) this.ddb.character.spells.background = [];\n    for (const spell of this.ddb.character.spells.background) {\n      if (!spell.definition)\n        continue;\n      // If the spell has an ability attached, use that\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            lookup: \"background\",\n            lookupName: \"Background\",\n            level: spell.castAtLevel,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n          },\n        },\n      };\n\n      if (spell.alwaysPrepared && spell.limitedUse) {\n        const dups = this.ddb.character.spells.background.filter((otherSpell) => otherSpell.definition.name === spell.definition.name).length > 1;\n        const duplicateSpell = this.items.findIndex(\n          (existingSpell) =>\n            (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name) === spell.definition.name\n            && existingSpell.flags.ddbimporter.dndbeyond.usesSpellSlot\n        );\n        if (!dups && !this.items[duplicateSpell]) {\n          // also parse spell as non-limited use\n          let unlimitedSpell = duplicate(spell);\n          unlimitedSpell.limitedUse = null;\n          unlimitedSpell.usesSpellSlot = true;\n          unlimitedSpell.flags.ddbimporter.dndbeyond.usesSpellSlot = true;\n          unlimitedSpell.flags.ddbimporter.dndbeyond.lookup = \"background\";\n          unlimitedSpell.flags.ddbimporter.dndbeyond.granted = true;\n          delete unlimitedSpell.id;\n          delete unlimitedSpell.flags.ddbimporter.dndbeyond.id;\n          // eslint-disable-next-line no-await-in-loop\n          const parsedSpell = await parseSpell(spell, this.character);\n          this.items.push(parsedSpell);\n        }\n      }\n\n      // eslint-disable-next-line no-await-in-loop\n      const parsedSpell = await parseSpell(spell, this.character);\n      this.items.push(parsedSpell);\n    }\n  }\n\n  async getCharacterSpells() {\n    // each class has an entry here, each entry has spells\n    // we loop through each class and process\n    await this.getClassSpells();\n\n    // Parse any spells granted by class features, such as Barbarian Totem\n    await this.getSpecialClassSpells();\n\n    // Race spells are handled slightly differently\n    await this.getRaceSpells();\n\n    // feat spells are handled slightly differently\n    await this.getFeatSpells();\n\n    // background spells are handled slightly differently\n    await this.getBackgroundSpells();\n\n    fixSpells(this.ddb, this.items);\n\n    return this.items.sort((a, b) => a.name.localeCompare(b.name));\n  }\n}\n","import getActions from \"./features/actions.js\";\nimport { getClasses } from \"./classes/index.js\";\nimport CharacterSpellFactory from \"./spells/CharacterSpellFactory.js\";\nimport logger from \"../logger.js\";\nimport { createGMMacros } from \"../effects/macros.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport { importCacheLoad } from \"../lib/DDBTemplateStrings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport SETTINGS from \"../settings.js\";\n\n\nexport default class DDBCharacter {\n  constructor({ currentActor = null, characterId = null, resourceSelection = true, enableCompanions = false } = {}) {\n    // the actor the data will be imported into/currently exists\n    this.currentActor = currentActor;\n    this.currentActorId = currentActor?.id;\n    // DDBCharacter ID\n    this.characterId = characterId;\n    // show resource selection prompt?\n    this.resourceSelection = resourceSelection;\n    // raw data received from DDB\n    this.source = null;\n    // this is the raw items processed before filtering\n    this.raw = {};\n    // the data to act on following initial parse\n    this.data = {};\n\n    // Character data\n    this.abilities = {\n      overrides: {},\n      core: {},\n      withEffects: {},\n    };\n    this.spellSlots = {};\n    this.totalLevels = 0;\n    this.companionFactories = [];\n    this.enableCompanions = enableCompanions;\n  }\n\n  /**\n   * Retrieves the character ID from a given URL, which can be one of the following:\n   * - regular character sheet\n   * - public sharing link\n   * - direct link to the endpoint already\n   * @returns {string|null} DDB CharacterId\n   * @param {String} url\n   */\n  static getCharacterId(url) {\n    const ddbNamePattern = /(?:https?:\\/\\/)?(?:www\\.dndbeyond\\.com|ddb\\.ac)(?:\\/profile\\/.+)?\\/characters\\/(\\d+)\\/?/;\n    const matches = url.match(ddbNamePattern);\n    return matches ? matches[1] : null;\n  }\n\n  /**\n   * Creates the Character Endpoint URL from a given character ID\n   * @returns {string|null} The API endpoint\n   */\n  getCharacterAPIEndpoint() {\n    return this.characterId !== null ? `https://character-service.dndbeyond.com/character/v5/character/${this.characterId}` : null;\n  }\n\n\n  /**\n   * Loads and parses character in the proxy\n   * This will return an object containing the character, and items separated into arrays relating to their types\n   * Additional processing is required after this step.\n   * @param {String} syncId\n   * @param {String} localCobaltPostFix\n   * @returns {Object} Parsed Character Data and DDB data\n   */\n\n  async getCharacterData({ syncId = undefined, localCobaltPostFix = \"\" } = {}) {\n    const cobaltCookie = getCobalt(localCobaltPostFix);\n    const parsingApi = DDBProxy.getProxy();\n    const betaKey = game.settings.get(\"ddb-importer\", \"beta-key\");\n    const campaignId = getCampaignId();\n    const proxyCampaignId = campaignId === \"\" ? null : campaignId;\n    let body = { cobalt: cobaltCookie, betaKey, characterId: this.characterId, campaignId: proxyCampaignId };\n    if (syncId) {\n      body[\"updateId\"] = syncId;\n    }\n\n    try {\n      const response = await fetch(`${parsingApi}/proxy/v5/character`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      });\n      this.source = await response.json();\n      if (!this.source.success) return this.source;\n\n      // load some required content\n      await importCacheLoad();\n\n      logger.debug(\"DDB Data to parse:\", duplicate(this.source.ddb));\n      logger.debug(\"currentActorId\", this.currentActorId);\n      try {\n        // this parses the json and sets the results as this.data\n        await this._parseCharacter();\n        const shouldChangeName = game.settings.get(\"ddb-importer\", \"character-update-policy-name\");\n        if (!shouldChangeName) {\n          this.data.character.name = undefined;\n          this.data.character.prototypeToken.name = undefined;\n        }\n        this.source[\"character\"] = this.data;\n        logger.debug(\"finalParsedData\", duplicate(this.source));\n        return this.source;\n      } catch (error) {\n        if (game.settings.get(\"ddb-importer\", \"debug-json\")) {\n          FileHelper.download(JSON.stringify(this.source), `${this.characterId}-raw.json`, \"application/json\");\n        }\n        throw error;\n      }\n    } catch (error) {\n      logger.error(\"JSON Fetch and Parse Error\");\n      logger.error(error);\n      logger.error(error.stack);\n      throw error;\n    }\n  }\n\n  /**\n   * Removes duplicate features/actions based on import preferences\n   */\n  _filterActionFeatures() {\n    const actionAndFeature = game.settings.get(\"ddb-importer\", \"character-update-policy-use-action-and-feature\");\n\n    this.data.actions = this.raw.actions.map((action) => {\n      const featureMatch = this.raw.features.find((feature) => feature.name === action.name);\n      if (featureMatch\n        && action.effects && action.effects.length === 0\n        && featureMatch.effects && featureMatch.effects.length > 0\n      ) {\n        action.effects = featureMatch.effects;\n        const newFlags = duplicate(featureMatch.flags);\n        delete newFlags.ddbimporter;\n        mergeObject(action.flags, newFlags, { overwrite: true, insertKeys: true, insertValues: true });\n      }\n      return action;\n    });\n\n    this.data.features = this.raw.features\n      .filter((feature) =>\n        actionAndFeature\n        || !this.data.actions.some((action) => action.name.trim().toLowerCase() === feature.name.trim().toLowerCase())\n      )\n      .map((feature) => {\n        const actionMatch = actionAndFeature && this.data.actions.some((action) => feature.name === action.name);\n        if (actionMatch) feature.effects = [];\n        return feature;\n      });\n\n  }\n\n  /**\n   * Parses the collected Character JSON data into various foundry features.\n   * Additional steps are needed after this based on the settings in the character import, but this will give the \"raw\" items\n   *\n   * @returns Object containing various parsed Foundry features\n   *\n   */\n  async _parseCharacter() {\n    try {\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-add-spell-effects\")) await createGMMacros();\n      logger.debug(\"Starting core character parse\", { thisDDB: this.source.ddb });\n      await this._generateCharacter();\n      if (this.resourceSelection) {\n        logger.debug(\"Character resources\");\n        await this.resourceSelectionDialog();\n      }\n      logger.debug(\"Character parse complete\");\n      this._generateRace();\n      logger.debug(\"Race parse complete\");\n      this.raw.classes = await getClasses(this.source.ddb, this.raw.character);\n      logger.debug(\"Classes parse complete\");\n      await this._generateFeatures();\n      logger.debug(\"Feature parse complete\");\n      const spellParser = new CharacterSpellFactory(this.source.ddb, this.raw.character);\n      this.raw.spells = await spellParser.getCharacterSpells();\n      logger.debug(\"Character Spells parse complete\");\n      this.raw.actions = await getActions(this.source.ddb, this.raw.character, this.raw.classes);\n      logger.debug(\"Action parse complete\");\n      await this._generateInventory();\n      logger.debug(\"Inventory generation complete\");\n\n      this.data = {\n        character: this.raw.character,\n        features: this.raw.features,\n        race: this.raw.race,\n        classes: this.raw.classes,\n        inventory: this.raw.inventory,\n        spells: this.raw.spells,\n        actions: this.raw.actions,\n        itemSpells: this.raw.itemSpells,\n      };\n\n      this._filterActionFeatures();\n\n      // this adds extras like a Divine Smite spell to this.data\n      this._addSpecialAdditions();\n\n      // find supported companion blocks\n      if (this.enableCompanions && game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-create-companions\")) {\n        await this.generateCompanions();\n      }\n\n\n    } catch (error) {\n      logger.error(error);\n      logger.error(\"Error during parse:\", error.message);\n      throw (error);\n    }\n  }\n\n  async disableDynamicUpdates() {\n    this.currentActor.flags.ddbimporter.activeUpdate = false;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: false } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n  async enableDynamicUpdates() {\n    this.currentActor.flags.ddbimporter.activeUpdate = true;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: true } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n  async updateDynamicUpdates(state) {\n    this.currentActor.flags.ddbimporter.activeUpdate = state;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: state } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n  getCurrentDynamicUpdateState() {\n    const activeUpdateState = this.currentActor.flags?.ddbimporter?.activeUpdate\n      ? this.currentActor.flags.ddbimporter.activeUpdate\n      : false;\n    return activeUpdateState;\n  }\n\n  async setActiveSyncSpellsFlag(state) {\n    this.currentActor.flags.ddbimporter.activeSyncSpells = state;\n    const activeUpdateData = { flags: { ddbimporter: { activeSyncSpells: state } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n}\n","// these are non-compliant monsters that currently don't meet parsing requirements\n// these are temporary work arounds till parsing is fixed.\nexport function specialCases(monster) {\n  switch (monster.name) {\n    case \"Reduced-threat Aboleth\":\n    case \"Aboleth\": {\n      monster.items.forEach(function(item, index) {\n        if (item.name === \"Tentacle\") {\n          this[index].system.formula = item.system.damage.parts[1][0];\n          this[index].system.damage.parts.splice(1, 1);\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Dullahan\": {\n      monster.items.forEach(function(item, index) {\n        if (item.name === \"Battleaxe\") {\n          this[index].system.damage.versatile += \" + 2d10[necrotic]\";\n          this[index].system.damage.parts.push([\"2d10[necrotic]\", \"necrotic\"]);\n        } else if (item.name === \"Coordinated Assault\") {\n          this[index].system.activation.type = \"legendary\";\n          this[index].system.consume = {\n            type: \"attribute\",\n            target: \"resources.legact.value\",\n            amount: 1\n          };\n          this[index].system.activation.cost = 1;\n        } else if (item.name.startsWith(\"Headless Wail\")) {\n          this[index].system.activation.cost = 2;\n          this[index].system.activation.type = \"legendary\";\n          this[index].system.consume = {\n            type: \"attribute\",\n            target: \"resources.legact.value\",\n            amount: 2\n          };\n        }\n      }, monster.items);\n      break;\n    }\n    // flumph tendrils have weird syntax for damage over time.\n    case \"Flumph\": {\n      monster.items.forEach(function(item, index) {\n        if (item.name === \"Tendrils\") {\n          if (item.system.damage.parts.length > 2) {\n            this[index].system.formula = item.system.damage.parts[2][0];\n            this[index].system.damage.parts.splice(2, 1);\n          }\n          this[index].system.save.ability = \"\";\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Hypnos Magen\": {\n      monster.flags.monsterMunch.spellList.atwill = [\"Suggestion\"];\n      monster.flags.monsterMunch.spellList.material = false;\n      monster.system.attributes.spellcasting = \"int\";\n      break;\n    }\n    case \"Nosferatu\": {\n      monster.items.forEach(function(item, index) {\n        if (item.name === \"Bite\") {\n          this[index].system.damage.versatile = `${item.system.damage.parts[0][0]} + ${item.system.damage.parts[2][0]}`;\n          this[index].system.damage.parts.splice(2, 1);\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Sephek Kaltro\": {\n      monster.flags.monsterMunch.spellList.innate = [{ name: \"Misty Step\", type: \"day\", value: 3 }];\n      monster.flags.monsterMunch.spellList.material = false;\n      break;\n    }\n    // no default\n  }\n\n  return monster;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function absorptionEffect(monster) {\n  monster.items.forEach((item) => {\n    const absRegEx = /is subjected to (\\w+) damage, it takes no damage and instead regains a number of hit points equal to the (\\w+) damage/;\n    const match = absRegEx.exec(item.system.description.value);\n    if (!item.effects) item.effects = [];\n    if (match) {\n      let effect = baseItemEffect(item, `${item.name}`);\n      effect.changes.push(\n        {\n          key: `flags.midi-qol.absorption.${match[1]}`,\n          value: \"1\",\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          priority: 20,\n        }\n      );\n      effect.icon = \"icons/svg/downgrade.svg\";\n      item.effects.push(effect);\n    }\n  });\n  return monster;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function generateLegendaryEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.LegRes.save.fail\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"success\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.LegRes.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"@resources.legres.value\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.LegRes.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Use Legendary Resistance to Succeed?\",\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseMonsterFeatureEffect } from \"../specialMonsters.js\";\nimport utils from \"../../lib/utils.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport { generateStatusEffectChange } from \"../effects.js\";\nimport logger from \"../../logger.js\";\nimport DDBFeature from \"../../parser/monster/features/DDBFeature.js\";\n\nconst DEFAULT_DURATION = 60;\n\nfunction overTime({ document, turn, damage, damageType, saveAbility, saveRemove, saveDamage, dc }) {\n  return {\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: `turn=end,label=${document.name} (${utils.capitalize(turn)} of Turn),damageRoll=${damage},damageType=${damageType},saveRemove=${saveRemove},saveDC=${dc},saveAbility=${saveAbility},saveDamage=${saveDamage}`,\n    priority: \"20\",\n  };\n}\n\nfunction startOrEnd(text) {\n  const re = /at the (start|end) of each/i;\n  const match = text.match(re);\n  if (match) {\n    return match[1];\n  } else {\n    return undefined;\n  }\n}\n\nfunction getDuration(text) {\n  const re = /for (\\d+) (minute|hour)/;\n  const match = text.match(re);\n  if (match) {\n    let minutes = parseInt(match[1]) * 60;\n    if (match[2] === \"hour\") {\n      minutes *= 60;\n    }\n    return minutes;\n  } else {\n    const reRounds = /for (\\d+) round/;\n    const roundMatch = text.match(reRounds);\n    if (roundMatch) {\n      return roundMatch[1] * 6;\n    }\n  }\n  return DEFAULT_DURATION;\n}\n\n\n// A selection of example conditions\n// DC 18 Strength saving throw or be knocked prone\n// DC 14 Constitution saving throw or become poisoned for 1 minute.\n// DC 12 Constitution saving throw or be poisoned for 1 minute\n// DC 15 Wisdom saving throw or be frightened until the end of its next turn.\n// DC 15 Charisma saving throw or be charmed\n// DC 12 Charisma saving throw or become cursed\n// DC 10 Intelligence saving throw or it can’t take a reaction until the end of its next turn\n// DC 12 Constitution saving throw or contract bluerot\n// DC 17 Strength saving throw or be thrown up to 30 feet away in a straight line\n// DC 13 Constitution saving throw or lose the ability to use reactions until the start of the weird’s\n// DC 16 Wisdom saving throw or move 1 round forward in time\n// DC 15 Constitution saving throw, or for 1 minute, its speed is reduced by 10 feet; it can take either an action or a bonus action on each of its turns, not both; and it can’t take reactions.\n// DC 15 Constitution saving throw or have disadvantage on its attack rolls until the end of its next turn\n// DC 15 Wisdom saving throw or be frightened until the end of its next turn\n// DC 13 Strength saving throw or take an extra 3 (1d6) piercing damage and be grappled (escape DC 13)\n// DC 15 Constitution saving throw or gain 1 level of exhaustion\n// DC 20 Constitution saving throw or be paralyzed for 1 minute\n// DC 17 Constitution saving throw or be cursed with loup garou lycanthropy\n// DC 12 Constitution saving throw or be cursed with mummy rot\n// DC 18 Strength saving throw or be swallowed by the neothelid. A swallowed creature is blinded and restrained, it has total cover against attacks and other effects outside the neothelid, and it takes 35 (10d6) acid damage at the start of each of the neothelid’s turns.</p><p>If the neothelid takes 30 damage or more on a single turn from a creature inside it, the neothelid must succeed on a DC 18 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the neothelid. If the neothelid dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 20 feet of movement, exiting prone.\n// (before DC) it can’t regain hit points for 1 minute\n// DC 14 Dexterity saving throw or suffer one additional effect of the shadow dancer’s choice:</p><ul>\\n<li>The target is grappled (escape DC 14) if it is a Medium or smaller creature. Until the grapple ends, the target is restrained, and the shadow dancer can’t grapple another target.</li>\\n<li>The target is knocked prone.</li>\\n<li>The target takes 22 (4d10) necrotic damage.</li>\\n</ul>\\n</section>\\nThe Shadow Dancer attacks with its Spiked Chain.\n// DC 15 Constitution saving throw or be stunned until the end of its next turn.\n// DC 15 Constitution saving throw or die.\n// DC 20 Strength saving throw or be pulled up to 25 feet toward the balor.\n// DC 11 Constitution saving throw or be poisoned until the end of the target’s next turn.\n// DC 14 Wisdom saving throw or be frightened of the quori for 1 minute.\n// DC 13 Constitution saving throw or be poisoned for 1 hour. If the saving throw fails by 5 or more, the target is also unconscious while poisoned in this way. The target wakes up if it takes damage or if another creature takes an action to shake it awake.\n\nfunction getSpecialDuration (effect, match) {\n  // minutes\n  if (match[7]\n    && (match[7].includes(\"until the end of its next turn\")\n    || match[7].includes(\"until the end of the target's next turn\"))\n  ) {\n    setProperty(effect, \"flags.dae.specialDuration\", [\"turnEnd\"]);\n  } else if (match[7] && match[7].includes(\"until the start of the\")) {\n    setProperty(effect, \"flags.dae.specialDuration\", [\"turnStartSource\"]);\n  }\n  return effect;\n}\n\nfunction generateConditionEffect(effect, text) {\n  let results = {\n    success: false,\n    effect,\n  };\n  text = text.replace(\"’\", \"'\");\n  const conditionSearch = /DC (\\d+) (\\w+) saving throw(?:,)? or (be |be cursed|become|die|contract|have|it can't|suffer|gain|lose the)\\s?(?:knocked )?(\\w+)?\\s?(?:for (\\d+) (minute))?(.*)?(?:.|$)/;\n  const match = text.match(conditionSearch);\n  // console.warn(\"condition status\", match);\n  if (match) {\n    results.success = true;\n    results.save = {\n      dc: parseInt(match[1]),\n      ability: match[2].toLowerCase().substr(0, 3),\n      scaling: \"flat\",\n    };\n    // group 4 condition - .e.g. \"DC 18 Strength saving throw or be knocked prone\"\n    const group4Condition = match[4]\n      ? DICTIONARY.character.damageAdjustments\n        .filter((type) => type.type === 1)\n        .find((type) => type.name.toLowerCase() === match[4].toLowerCase() || type.value.toLowerCase() === match[4].toLowerCase())\n      : undefined;\n    if (group4Condition) {\n      results.condition = group4Condition.value;\n      results.effect.changes.push(generateStatusEffectChange(group4Condition.name));\n      effect = getSpecialDuration(results.effect, match);\n    } else if (match[3] && match[3] === \"die\") {\n      results.effect.changes.push(generateStatusEffectChange(\"Dead\"));\n    }\n  }\n  return results;\n}\n\nfunction getOvertimeDamage(text) {\n  if (text.includes(\"taking\") && (text.includes(\"on a failed save\") || text.includes(\"damage on a failure\"))) {\n    const damageText = text.split(\"taking\")[1];\n    const feature = new DDBFeature(\"overTimeFeature\", { html: damageText });\n    feature.prepare();\n    feature.generateExtendedDamageInfo();\n    return feature.actionInfo.damage;\n  }\n  return undefined;\n}\n\nfunction effectCleanup(document, actor, monster, effect) {\n  if (effect.changes.length > 0) {\n    document.effects.push(effect);\n    let overTimeFlags = hasProperty(actor, \"flags.monsterMunch.overTime\") ? getProperty(actor, \"flags.monsterMunch.overTime\") : [];\n    overTimeFlags.push(document.name);\n    setProperty(actor, \"flags.monsterMunch.overTime\", overTimeFlags);\n    // console.warn(`ITEM OVER TIME EFFECT: ${actor.name}, ${document.name}`);\n    logger.debug(`Generating damage over time effect for ${actor.name}, ${actor.name}`);\n  }\n  return { document, actor, monster };\n}\n\nexport function generateOverTimeEffect(document, actor, monster) {\n  logger.debug(\"Generating damage over time effect for\", document.name);\n  if (!document.effects) document.effects = [];\n  let effect = baseMonsterFeatureEffect(document, `${document.name}`);\n  // add any condition effects\n  const conditionResults = generateConditionEffect(effect, document.system.description.value);\n  effect = conditionResults.effect;\n  if (conditionResults.success) setProperty(document, \"flags.midiProperties.fulldam\", true);\n\n  const durationSeconds = hasProperty(document.flags, \"monsterMunch.overTime.durationSeconds\")\n    ? getProperty(document.flags, \"monsterMunch.overTime.durationSeconds\")\n    : getDuration(document.system.description.value);\n  setProperty(effect, \"duration.seconds\", durationSeconds);\n\n  const turn = startOrEnd(document.system.description.value);\n  if (!turn) return effectCleanup(document, actor, monster, effect);\n\n  const saveFeature = new DDBFeature(\"overTimeSaveFeature\", { html: document.system.description.value });\n  saveFeature.prepare();\n  const save = saveFeature.getFeatSave();\n  if (!Number.isInteger(Number.parseInt(save.dc))) return effectCleanup(document, actor, monster, effect);\n\n  const saveAbility = save.ability;\n  const dc = save.dc;\n\n  const dmg = getOvertimeDamage(document.system.description.value);\n\n  if (!dmg) return effectCleanup(document, actor, monster, effect);\n\n  // overtime damage, revert any full damage flag, reset to default on save\n  setProperty(document, \"flags.midiProperties.fulldam\", false);\n\n  const damage = hasProperty(document.flags, \"monsterMunch.overTime.damage\")\n    ? getProperty(document.flags, \"monsterMunch.overTime.damage\")\n    : dmg.parts.reduce((total, current) => {\n      total = [total, `${current[0]}[${current[1]}]`].join(\" + \");\n      return total;\n    }, \"\");\n\n  const damageType = hasProperty(document.flags, \"monsterMunch.overTime.damageType\")\n    ? getProperty(document.flags, \"monsterMunch.overTime.damageType\")\n    : dmg.parts.length > 0 ? dmg.parts[0][1] : \"\";\n\n  const saveRemove = hasProperty(document.flags, \"monsterMunch.overTime.saveRemove\")\n    ? getProperty(document.flags, \"monsterMunch.overTime.saveRemove\")\n    : true;\n\n  const saveDamage = hasProperty(document.flags, \"monsterMunch.overTime.saveDamage\")\n    ? getProperty(document.flags, \"monsterMunch.overTime.saveDamage\")\n    : \"nodamage\";\n\n  effect.changes.push(overTime({ document, turn, damage, damageType, saveAbility, saveRemove, saveDamage, dc }));\n  document.effects.push(effect);\n\n  return effectCleanup(document, actor, monster, effect);\n}\n\n\nexport function damageOverTimeEffect({ document, startTurn = false, endTurn = false, durationSeconds, damage, damageType, saveAbility, saveRemove = true, saveDamage = \"nodamage\", dc }) {\n  let effect = baseMonsterFeatureEffect(document, `${document.name}`);\n\n  if (!startTurn && !endTurn) return document;\n\n  if (startTurn) {\n    effect.changes.push(overTime({ document, turn: \"start\", damage, damageType, saveAbility, saveRemove, saveDamage, dc }));\n  }\n  if (endTurn) {\n    effect.changes.push(overTime({ document, turn: \"end\", damage, damageType, saveAbility, saveRemove, saveDamage, dc }));\n  }\n\n  setProperty(effect, \"duration.seconds\", durationSeconds);\n\n  document.effects.push(effect);\n  return document;\n}\n","\nimport { baseItemEffect } from \"../effects.js\";\n\nexport function generatePackTacticsEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.attack.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"findNearby(1, tokenUuid, 5, 0).length > 0\",\n      priority: \"20\",\n    },\n  );\n\n  document.effects.push(effect);\n  return document;\n}\n","import CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport { forceItemEffect } from \"./effects.js\";\nimport { configureDependencies } from \"./macros.js\";\n\nimport { absorptionEffect } from \"./monsterFeatures/absorbtion.js\";\nimport { generateLegendaryEffect } from \"./monsterFeatures/legendary.js\";\nimport { generateOverTimeEffect } from \"./monsterFeatures/overTimeEffect.js\";\nimport { generatePackTacticsEffect } from \"./monsterFeatures/packTactics.js\";\n\nexport function baseMonsterFeatureEffect(document, label) {\n  return {\n    label,\n    icon: document.img,\n    changes: [],\n    duration: {},\n    tint: \"\",\n    transfer: false,\n    disabled: false,\n    flags: {\n      dae: {\n        transfer: false,\n        stackable: \"none\",\n      },\n      ddbimporter: {\n        disabled: false,\n      },\n      \"midi-qol\": { // by default force CE effect usage to off\n        forceCEOff: true,\n      },\n    },\n  };\n}\n\nexport function monsterFeatEffectModules() {\n  if (CONFIG.DDBI.EFFECT_CONFIG.MONSTERS.installedModules) {\n    return CONFIG.DDBI.EFFECT_CONFIG.MONSTERS.installedModules;\n  }\n  const midiQolInstalled = game.modules.get(\"midi-qol\")?.active;\n  const advancedMacrosInstalled = game.modules.get(\"advanced-macros\")?.active;\n  const itemMacroInstalled = game.modules.get(\"itemacro\")?.active;\n  const timesUp = game.modules.get(\"times-up\")?.active;\n  const daeInstalled = game.modules.get(\"dae\")?.active;\n  const convenientEffectsInstalled = game.modules.get(\"dfreds-convenient-effects\")?.active;\n\n  const activeAurasInstalled = game.modules.get(\"ActiveAuras\")?.active;\n  const atlInstalled = game.modules.get(\"ATL\")?.active;\n  const tokenAurasInstalled = game.modules.get(\"token-auras\")?.active;\n  const tokenMagicInstalled = game.modules.get(\"tokenmagic\")?.active;\n  const autoAnimationsInstalled = game.modules.get(\"autoanimations\")?.active;\n  CONFIG.DDBI.EFFECT_CONFIG.MONSTERS.installedModules = {\n    hasCore:\n      itemMacroInstalled\n      && midiQolInstalled\n      && advancedMacrosInstalled\n      && timesUp\n      && daeInstalled\n      && convenientEffectsInstalled,\n    midiQolInstalled,\n    itemMacroInstalled,\n    advancedMacrosInstalled,\n    timesUp,\n    daeInstalled,\n    convenientEffectsInstalled,\n    atlInstalled,\n    tokenAurasInstalled,\n    tokenMagicInstalled,\n    activeAurasInstalled,\n    autoAnimationsInstalled,\n  };\n  return CONFIG.DDBI.EFFECT_CONFIG.MONSTERS.installedModules;\n}\n\nfunction transferEffectsToActor(document) {\n  if (!document.effects) document.effects = [];\n  const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"monsters\");\n\n  // loop over items and item effect and transfer any effects to the actor\n  document.items.forEach((item) => {\n    item.effects.forEach((effect) => {\n      if (effect.transfer) {\n        const transferEffect = duplicate(effect);\n        if (!hasProperty(item, \"_id\")) item._id = randomID();\n        if (!hasProperty(effect, \"_id\")) effect._id = randomID();\n        transferEffect._id = randomID();\n        transferEffect.transfer = false;\n        transferEffect.origin = `Compendium.${compendiumLabel}.${document._id}.Item.${item._id}`;\n        document.effects.push(transferEffect);\n      }\n    });\n  });\n\n  return document;\n}\n\n/**\n * This function is mainly for effects that can't be dynamically generated\n * @param {*} document\n */\nexport async function monsterFeatureEffectAdjustment(document, monster) {\n  if (!document.effects) document.effects = [];\n\n  const deps = monsterFeatEffectModules();\n  if (!deps.hasCore) {\n    return document;\n  }\n  if (!CONFIG.DDBI.EFFECT_CONFIG.MONSTERS.configured) {\n    CONFIG.DDBI.EFFECT_CONFIG.MONSTERS.configured = configureDependencies();\n  }\n\n  // const name = document.flags.ddbimporter.originalName || document.name;\n\n  // absorbtion on monster\n  document = absorptionEffect(document);\n\n  // damage over time effects\n  document.items.forEach(function(item, index) {\n    // Legendary Resistance Effects\n    if (item.name.startsWith(\"Legendary Resistance\")) item = generateLegendaryEffect(item);\n    if (item.name.startsWith(\"Pack Tactics\")) item = generatePackTacticsEffect(item);\n    // auto overtime effect\n    const overTimeResults = generateOverTimeEffect(item, document, monster);\n    this[index] = overTimeResults.document;\n    document = overTimeResults.actor;\n\n    document = forceItemEffect(document);\n  }, document.items);\n\n  document = transferEffectsToActor(document);\n  return document;\n}\n","\n\nimport { newNPC } from \"./monster/templates/monster.js\";\nimport { specialCases } from \"./monster/special.js\";\nimport { monsterFeatureEffectAdjustment } from \"../effects/specialMonsters.js\";\n\nimport logger from '../logger.js';\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport { DDBFeatureFactory } from \"./monster/features/DDBFeatureFactory.js\";\nimport SETTINGS from \"../settings.js\";\n\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nexport default class DDBMonster {\n\n  setProperty(name, value) {\n    if (this.overrides[\"name\"]) {\n      this[name] = this.overrides[\"name\"];\n    } else {\n      this[name] = value;\n    }\n  }\n\n  constructor(ddbObject = null, { existingNpc = null, extra = false, useItemAC = true,\n    legacyName = true, addMonsterEffects = false } = {}, overrides = {}\n  ) {\n    this.source = ddbObject;\n\n    // processing options\n    this.extra = extra;\n    this.npc = existingNpc;\n    this.useItemAC = useItemAC;\n    this.legacyName = legacyName;\n    this.addMonsterEffects = addMonsterEffects;\n\n    // some of this data can be overwritten, useful for mangling new actions\n    this.overrides = overrides;\n\n    // used by extra processing\n    this.removedHitPoints = this.setProperty(\"removedHitPoints\", (this.source?.removedHitPoints ?? 0));\n    this.temporaryHitPoints = this.setProperty(\"temporaryHitPoints\", (this.source?.temporaryHitPoints ?? 0));\n\n    this.characterDescription = \"\";\n    this.unexpectedDescription = null;\n\n    // processing info\n    this.name = overrides[\"name\"] ?? (existingNpc ? existingNpc.name : null);\n    this.abilities = null;\n    this.proficiencyBonus = null;\n    this.cr = 0;\n    this.items = [];\n    this.img = null;\n    if (existingNpc) {\n      this.proficiencyBonus = this.setProperty(\"proficiencyBonus\", existingNpc.system.attributes.prof);\n      this.cr = this.setProperty(\"cr\", existingNpc.system.details.cr);\n      this.abilities = this.setProperty(\"abilities\", existingNpc.system.abilities);\n      this.items = duplicate(existingNpc.items);\n      this.img = existingNpc.img;\n    }\n\n    this.featureFactory = new DDBFeatureFactory({ ddbMonster: this });\n  }\n\n  _calculateImage() {\n    if (this.source) {\n      this.img = (this.source.basicAvatarUrl) ? this.source.basicAvatarUrl : this.source.largeAvatarUrl;\n      // foundry doesn't support gifs\n      if (this.img && this.img.match(/.gif$/)) {\n        this.img = null;\n      }\n    } else {\n      this.img = null;\n    }\n  }\n\n  _generateFlags() {\n    this.npc.flags.monsterMunch = {\n      url: this.source.url,\n      img: (this.img) ? this.img : this.source.avatarUrl,\n      tokenImg: this.source.avatarUrl,\n    };\n    this.npc.flags.ddbimporter = {\n      id: this.source.id,\n      entityTypeId: this.source.entityTypeId,\n      // creatureGroup: monster.creatureGroup ? monster.creatureGroup : null,\n      creatureGroupId: this.source.creatureGroupId ? this.source.creatureGroupId : null,\n      creatureFlags: this.source.creatureFlags ? this.source.creatureFlags : [],\n      automatedEvcoationAnimation: this.source.automatedEvcoationAnimation ? this.source.automatedEvcoationAnimation : undefined,\n      version: CONFIG.DDBI.version,\n      isLegacy: this.source.isLegacy,\n    };\n  }\n\n\n  async fetchMonsterSourceFromDDB(id) {\n    if (!id && Number.isInteger(id) && Number.isInteger(Number.parseInt(id))) {\n      throw new Error(\"Please provide a monster ID (number) to fetch\");\n    }\n    const cobaltCookie = getCobalt();\n    const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    const parsingApi = DDBProxy.getProxy();\n\n    const body = {\n      cobalt: cobaltCookie,\n      betaKey: betaKey,\n      ids: [Number.parseInt(id)],\n    };\n\n    const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/proxy/monsters/ids`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            logger.error(`API Failure:`, data.message);\n            reject(data.message);\n          }\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(data), `monsters-raw.json`, \"application/json\");\n          }\n          return data;\n        })\n        .then((data) => {\n          logger.info(`Retrieved monster`, { monster: data.data });\n          this.source = data.data[0];\n          return data.data[0];\n        })\n        .catch((error) => reject(error));\n    });\n  }\n\n  async #linkResourcesConsumption() {\n    if (this.items.some((item) => item.system.recharge?.value)) {\n      logger.debug(`Resource linking for ${this.name}`);\n      this.items.forEach((item) => {\n        if (item.system?.recharge?.value) {\n          const itemID = randomID(16);\n          item._id = itemID;\n          if (item.type === \"weapon\") {\n            item.type = \"feat\";\n            delete item.system.weaponType;\n            item.system.type = {\n              value: \"monster\",\n              subtype: \"\",\n            };\n          }\n          item.system.consume = {\n            type: \"charges\",\n            target: itemID,\n            amount: null,\n          };\n        }\n      });\n    }\n  }\n\n  async parse() {\n    if (!this.name) this.name = this.source.name;\n    this.npc = duplicate(await newNPC(this.name));\n    this._calculateImage();\n\n    this.npc.prototypeToken.name = this.name;\n    this._generateFlags();\n\n\n    this.proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n    this.npc.system.attributes.prof = this.proficiencyBonus;\n    this._generateAbilities();\n\n    // skills are different with extras, because DDB\n    if (this.extra) {\n      this._generateSkills();\n    } else {\n      this._generateSkillsHTML();\n    }\n\n    // Senses needed for actor and token\n    this._generateSenses();\n    this._generateTokenSenses();\n\n    this._generateDamageImmunities();\n    this._generateDamageResistances();\n    this._generateDamageVulnerabilities();\n    this._generateConditionImmunities();\n    this._generateSize();\n    this._generateLanguages();\n    this._generateHitPoints();\n    this._generateMovement();\n    await this._generateAC();\n\n    this.cr = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId);\n    this._generateType();\n\n    const alignment = CONFIG.DDB.alignments.find((c) => this.source.alignmentId == c.id);\n    this.npc.system.details.alignment = alignment ? alignment.name : \"\";\n    this.npc.system.details.cr = this.cr.value;\n    this.npc.system.details.xp = { value: this.cr.xp };\n\n    this._generateSource();\n    this._generateEnvironments();\n    this.npc.system.details.biography.value = this.source.characteristicsDescription;\n\n    this._generateFeatures();\n\n    // Spellcasting\n    this._generateSpells();\n    await this.addSpells();\n\n    const badItems = this.items.filter((i) => i.name === \"\" || !i.name);\n    if (badItems.length > 0) {\n      logger.error(`${this.source.name} - ${badItems.length} items have no name.`, badItems);\n      this.items = this.items.filter((i) => i.name && i.name !== \"\");\n    }\n\n    await this.#linkResourcesConsumption();\n    this.npc.items = this.items;\n\n    if (this.legacyName) {\n      if (this.source.isLegacy) {\n        this.npc.name += \" (Legacy)\";\n        this.npc.prototypeToken.name += \" (Legacy)\";\n      }\n    }\n\n    this.npc = await CompendiumHelper.existingActorCheck(\"monster\", this.npc);\n    this.npc = specialCases(this.npc);\n\n    if (this.addMonsterEffects) {\n      this.npc = await monsterFeatureEffectAdjustment(this.npc, this.source);\n    }\n\n    logger.debug(`Generated ${this.name}`, this);\n    return this.npc;\n\n  }\n\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype.getBackgroundName = function getBackgroundName() {\n  if (this.source.ddb.character.background.hasCustomBackground === false) {\n    if (this.source.ddb.character.background.definition !== null) {\n      return this.source.ddb.character.background.definition.name || \"\";\n    } else {\n      return \"\";\n    }\n  } else {\n    return this.source.ddb.character.background.customBackground.name || \"\";\n  }\n};\n\nDDBCharacter.prototype._generateTrait = function _generateTrait() {\n  this.raw.character.system.details.trait = this.source.ddb.character.traits.personalityTraits ?? \"\";\n};\n\nDDBCharacter.prototype._generateIdeal = function _generateIdeal() {\n  this.raw.character.system.details.ideal = this.source.ddb.character.traits.ideals ?? \"\";\n};\n\nDDBCharacter.prototype._generateBond = function _generateBond() {\n  this.raw.character.system.details.bond = this.source.ddb.character.traits.bonds ?? \"\";\n};\n\nDDBCharacter.prototype._generateFlaw = function _generateFlaw() {\n  this.raw.character.system.details.flaw = this.source.ddb.character.traits.flaws ?? \"\";\n};\n\nDDBCharacter.prototype.getCharacteristics = function getCharacteristics() {\n  let characteristicBlurb = \"\";\n  if (this.source.ddb.character.gender) characteristicBlurb += `Gender: ${this.source.ddb.character.gender}\\n`;\n  if (this.source.ddb.character.eyes) characteristicBlurb += `Eyes: ${this.source.ddb.character.eyes}\\n`;\n  if (this.source.ddb.character.height) characteristicBlurb += `Height: ${this.source.ddb.character.height}\\n`;\n  if (this.source.ddb.character.faith) characteristicBlurb += `Faith: ${this.source.ddb.character.faith}\\n`;\n  if (this.source.ddb.character.hair) characteristicBlurb += `Hair: ${this.source.ddb.character.hair}\\n`;\n  if (this.source.ddb.character.skin) characteristicBlurb += `Skin: ${this.source.ddb.character.skin}\\n`;\n  if (this.source.ddb.character.age) characteristicBlurb += `Age: ${this.source.ddb.character.age}\\n`;\n  if (this.source.ddb.character.weight) characteristicBlurb += `Weight: ${this.source.ddb.character.weight}\\n`;\n  return characteristicBlurb;\n};\n\nDDBCharacter.prototype._generateAppearance = function _generateAppearance() {\n  let result = this.getCharacteristics();\n  if (result && result !== \"\") result += \"\\n\";\n  if (this.source.ddb.character.traits.appearance) result += this.source.ddb.character.traits.appearance;\n  this.raw.character.system.details.appearance = result ?? \"\";\n};\n\n/**\n * Gets the character's alignment\n * Defaults to Neutral, if not set in DDB\n * @todo: returns .name right now, should switch to .value once the DND5E options are fully implemented\n */\nDDBCharacter.prototype._generateAlignment = function _generateAlignment() {\n  const alignmentID = this.source.ddb.character.alignmentId || 5;\n  const alignment = DICTIONARY.character.alignments.find((alignment) => alignment.id === alignmentID);\n  if (alignment) this.raw.character.system.details.alignment = alignment.name;\n};\n\nfunction getBackgroundTemplate() {\n  return {\n    name: \"Background\",\n    description: \"\",\n    id: null,\n    entityTypeId: null,\n    featuresId: null,\n    featuresEntityTypeId: null,\n    characteristicsId: null,\n    characteristicsEntityTypeId: null,\n    definition: {\n      name: \"Background\",\n      description: \"\",\n      id: null,\n      entityTypeId: null,\n    },\n  };\n}\n\nexport function generateBackground(bg) {\n  let result = getBackgroundTemplate();\n\n  // console.warn(bg)\n\n  if (bg.id) result.id = bg.id;\n  if (bg.entityTypeId) result.entityTypeId = bg.entityTypeId;\n\n  if (bg.name) {\n    result.name = `Background: ${bg.name}`;\n    result.description = `<h1>Background: ${bg.name}</h1>`;\n  }\n\n  if (bg.description) {\n    result.description += `<p>${bg.description}</p>`;\n  } else if (bg.shortDescription) {\n    result.description += bg.shortDescription.replace(\"\\r\\n\", \"\");\n  }\n  if (bg.definition) result.definition = bg.definition;\n\n  if (bg.isHomebrew === true) {\n    if (bg.featuresBackground) {\n      result.description += `<h2>${bg.featuresBackground.name}</h2>`;\n      result.description += bg.featuresBackground.shortDescription.replace(\"\\r\\n\", \"\");\n      result.description += `<h3>${bg.featuresBackground.featureName}</h3>`;\n      result.description += bg.featuresBackground.featureDescription.replace(\"\\r\\n\", \"\");\n      result.featuresId = bg.featuresBackground.id;\n      result.id = bg.featuresBackground.id;\n      result.featuresEntityTypeId = bg.featuresBackground.entityTypeId;\n      result.definition = bg.featuresBackground;\n    }\n    if (\n      bg.characteristicsBackground\n      && bg.featuresBackground\n      && bg.featuresBackground.entityTypeId != bg.characteristicsBackground.entityTypeId\n    ) {\n      result.description += `<h2>${bg.characteristicsBackground.name}</h2>`;\n      result.description += bg.characteristicsBackground.shortDescription.replace(\"\\r\\n\", \"\");\n      result.description += `<h3>${bg.characteristicsBackground.featureName}</h3>`;\n      result.description += bg.characteristicsBackground.featureDescription.replace(\"\\r\\n\", \"\");\n      result.characteristicsId = bg.characteristicsBackground.id;\n      result.characteristicsEntityTypeId = bg.characteristicsBackground.entityTypeId;\n    }\n  }\n\n  if (bg.featureName) {\n    result.description += `<h2>${bg.featureName}</h2>`;\n    result.description += bg.featureDescription.replace(\"\\r\\n\", \"\");\n  }\n  if (bg.spellListIds) result.spellListIds = bg.spellListIds;\n  result.definition.name = result.name;\n  result.description = utils.replaceHtmlSpaces(result.description);\n  result.definition.description = result.description;\n  return result;\n}\n\n// WIP, not used\nDDBCharacter.prototype.getBackgroundFeature = function getBackgroundFeature(bg) {\n  let result = getBackgroundTemplate();\n  result.name = \"Background Feature\";\n\n  if (bg.isHomebrew === true) {\n    if (bg.featuresBackground) {\n      result.name = bg.featuresBackground.featureName;\n      result.description += bg.featuresBackground.featureDescription.replace(\"\\r\\n\", \"\");\n      result.featuresId = bg.featuresBackground.id;\n      result.id = bg.featuresBackground.id;\n      result.featuresEntityTypeId = bg.featuresBackground.entityTypeId;\n      result.definition = bg.featuresBackground;\n    }\n    if (\n      bg.characteristicsBackground\n      && bg.featuresBackground\n      && bg.featuresBackground.entityTypeId != bg.characteristicsBackground.entityTypeId\n    ) {\n      result.name = bg.characteristicsBackground.featureName;\n      result.description += bg.characteristicsBackground.featureDescription.replace(\"\\r\\n\", \"\");\n      result.characteristicsId = bg.characteristicsBackground.id;\n      result.characteristicsEntityTypeId = bg.characteristicsBackground.entityTypeId;\n    }\n  }\n\n  if (bg.featureName) {\n    result.name = bg.featureName;\n    result.description += bg.featureDescription.replace(\"\\r\\n\", \"\");\n  }\n\n  return result;\n\n};\n\nDDBCharacter.prototype.getBackgroundData = function getBackgroundData() {\n  let bg = null;\n  if (this.source.ddb.character.background.hasCustomBackground === true) {\n    bg = this.source.ddb.character.background.customBackground;\n    bg.isHomebrew = true;\n  } else if (this.source.ddb.character.background.definition !== null) {\n    bg = this.source.ddb.character.background.definition;\n  } else {\n    bg = this.source.ddb.character.background.customBackground;\n    let result = getBackgroundTemplate();\n    if (bg.id) result.id = bg.id;\n    if (bg.entityTypeId) result.entityTypeId = bg.entityTypeId;\n    return result;\n  }\n\n  return generateBackground(bg);\n};\n\nDDBCharacter.prototype._generateBiography = function _generateBiography() {\n  const backstory = this.source.ddb.character.notes.backstory\n    ? \"<h1>Backstory</h1><p>\" + this.source.ddb.character.notes.backstory + \"</p>\"\n    : \"\";\n\n  this.raw.character.system.details.biography = {\n    public: backstory,\n    value: backstory,\n  };\n};\n\nDDBCharacter.prototype._generateDescription = function _generateDescription() {\n  this.raw.character.system.details[\"gender\"] = this.source.ddb.character.gender || \"\";\n  this.raw.character.system.details[\"age\"] = this.source.ddb.character.age || \"\";\n  this.raw.character.system.details[\"height\"] = this.source.ddb.character.height || \"\";\n  this.raw.character.system.details[\"weight\"] = this.source.ddb.character.weight || \"\";\n  this.raw.character.system.details[\"eyes\"] = this.source.ddb.character.eyes || \"\";\n  this.raw.character.system.details[\"skin\"] = this.source.ddb.character.skin || \"\";\n  this.raw.character.system.details[\"hair\"] = this.source.ddb.character.hair || \"\";\n};\n","function convertToSingularDie(advancement) {\n  advancement.title += ` (Die)`;\n  for (const key of Object.keys(advancement.configuration.scale)) {\n    advancement.configuration.scale[key].n = 1;\n  }\n  return advancement;\n}\n\nfunction renameTotal(advancement) {\n  advancement.title += ` (Total)`;\n  return advancement;\n}\n\nfunction addAdditionalUses (advancement) {\n  const scaleValue = {\n    _id: foundry.utils.randomID(),\n    type: \"ScaleValue\",\n    configuration: {\n      distance: { units: \"\" },\n      identifier: `${advancement.configuration.identifier}-uses`,\n      type: \"number\",\n      scale: {},\n    },\n    value: {},\n    title: `${advancement.title} (Uses)`,\n    icon: \"\",\n  };\n\n  for (const [key, value] of Object.entries(advancement.configuration.scale)) {\n    scaleValue.configuration.scale[key] = {\n      value: value.n,\n    };\n  }\n\n  return scaleValue;\n}\n\nfunction addSingularDie (advancement) {\n  const scaleValue = convertToSingularDie(duplicate(advancement));\n\n  scaleValue._id = foundry.utils.randomID();\n  scaleValue.configuration.identifier = `${advancement.configuration.identifier}-die`;\n\n  return scaleValue;\n}\n\nexport const SPECIAL_ADVANCEMENTS = {\n  \"Combat Superiority\": {\n    fix: true,\n    fixFunction: renameTotal,\n    additionalAdvancements: true,\n    additionalFunctions: [addAdditionalUses, addSingularDie],\n  },\n  \"Rune Carver\": {\n    fix: true,\n    fixFunction: renameTotal,\n    additionalAdvancements: false,\n    additionalFunctions: [],\n  },\n};\n","import logger from '../../logger.js';\nimport DICTIONARY from '../../dictionary.js';\nimport utils from '../../lib/utils.js';\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from '../../lib/CompendiumHelper.js';\nimport { getSpellCastingAbility } from \"../spells/ability.js\";\nimport parseTemplateString from \"../../lib/DDBTemplateStrings.js\";\nimport { SPECIAL_ADVANCEMENTS } from './special.js';\n\n/**\n * Fetches the sources and pages for class and subclass\n * @param {obj} data item\n */\nfunction getSources(data) {\n  const classSource = DDBHelper.getSourceData(data.definition);\n\n  let sources = classSource.name;\n  if (classSource.page) sources += ` (pg. ${classSource.page})`;\n\n  if (data.subclassDefinition) {\n    const subclassSource = DDBHelper.getSourceData(data.subclassDefinition);\n    if (subclassSource.name && classSource.name !== subclassSource.name) {\n      sources += `, ${subclassSource.name}`;\n    }\n    if (subclassSource.page && classSource.page !== subclassSource.page) {\n      sources += ` (pg. ${subclassSource.page})`;\n    }\n  }\n\n  return sources;\n}\n\nfunction generateScaleValueAdvancement(feature) {\n  // distance, number, dice, anything\n  let type = \"string\";\n  const die = feature.levelScales[0]?.dice ? feature.levelScales[0]?.dice : feature.levelScales[0]?.die ? feature.levelScales[0]?.die : undefined;\n\n  if (die?.diceString && (!die.fixedValue || die.fixedValue === \"\")) {\n    type = \"dice\";\n  } else if (feature.levelScales[0].fixedValue\n    && feature.levelScales[0].fixedValue !== \"\"\n    && Number.isInteger(feature.levelScales[0].fixedValue)\n  ) {\n    type = \"number\";\n  }\n\n  const scaleValue = {\n    _id: foundry.utils.randomID(),\n    type: \"ScaleValue\",\n    configuration: {\n      distance: { units: \"\" },\n      identifier: utils.referenceNameString(feature.name).toLowerCase(),\n      type,\n      scale: {},\n    },\n    value: {},\n    title: feature.name,\n    icon: \"\",\n    // classRestriction: \"\",\n  };\n\n  feature.levelScales.forEach((scale) => {\n    const die = scale.dice ? scale.dice : scale.die ? scale.die : undefined;\n    if (type === \"dice\") {\n      scaleValue.configuration.scale[scale.level] = {\n        n: die.diceCount,\n        die: die.diceValue,\n      };\n    } else if (type === \"number\") {\n      scaleValue.configuration.scale[scale.level] = {\n        value: scale.fixedValue,\n      };\n    } else {\n      let value = (die.diceString && die.diceString !== \"\")\n        ? die.diceString\n        : \"\";\n      if (die.fixedValue && die.fixedValue !== \"\") {\n        value += ` + ${die.fixedValue}`;\n      }\n      if (value === \"\") {\n        value = scale.description;\n      }\n      scaleValue.configuration.scale[scale.level] = {\n        value,\n      };\n    }\n  });\n\n  return scaleValue;\n}\n\nexport function getHPAdvancement(klass) {\n  // const value = \"value\": {\n  //   \"1\": \"max\",\n  //   \"2\": \"avg\"\n  // },\n  let value = {};\n  if (klass) {\n    for (let i = 1; i <= klass.system.levels; i++) {\n      value[`${i}`] = i === 1 && getProperty(klass, \"flags.ddbimporter.isStartingClass\") === true ? \"max\" : \"avg\";\n    };\n  }\n  return {\n    _id: foundry.utils.randomID(),\n    type: \"HitPoints\",\n    configuration: {},\n    value,\n    title: \"\",\n    icon: \"\",\n    classRestriction: \"\",\n  };\n}\n\nfunction getClassFeatures(ddb, klass, klassDefinition, excludedIds = []) {\n  const excludedFeatures = ddb.character.optionalClassFeatures\n    .filter((f) => f.affectedClassFeatureId)\n    .map((f) => f.affectedClassFeatureId);\n\n  const optionFeatures = ddb.classOptions\n    ? ddb.classOptions\n      .filter((feature) => feature.classId === klassDefinition.id && !excludedIds.includes(feature.id))\n    : [];\n\n  const classFeatures = klass.classFeatures\n    .filter((feature) =>\n      !excludedFeatures.includes(feature.definition.id)\n      && !excludedIds.includes(feature.definition.id)\n      && feature.definition.classId === klassDefinition.id\n    )\n    .map((feature) => feature.definition);\n\n  return classFeatures.concat(optionFeatures)\n    .sort((a, b) => a.displayOrder - b.displayOrder)\n    .sort((a, b) => a.requiredLevel - b.requiredLevel);\n}\n\nfunction getFeatureCompendiumMatch(compendium, feature, klassDefinition) {\n  return compendium.find((match) =>\n    ((hasProperty(match, \"flags.ddbimporter.featureName\") && feature.name.trim().toLowerCase() == match.flags.ddbimporter.featureName.trim().toLowerCase())\n      || (!hasProperty(match, \"flags.ddbimporter.featureName\")\n        && (feature.name.trim().toLowerCase() == match.name.trim().toLowerCase()\n        || `${feature.name} (${klassDefinition.name})`.trim().toLowerCase() == match.name.trim().toLowerCase()))\n    )\n    && hasProperty(match, \"flags.ddbimporter\")\n    && (match.flags.ddbimporter.class == klassDefinition.name\n      || match.flags.ddbimporter.parentClassId == klassDefinition.id\n      || match.flags.ddbimporter.classId == klassDefinition.id)\n  );\n}\n\nasync function generateFeatureAdvancements(ddb, klass, klassDefinition, compendiumClassFeatures, ignoreIds = []) {\n  logger.debug(`Parsing ${klass.name} features for advancement`);\n  const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"features\");\n\n  let advancements = [];\n  getClassFeatures(ddb, klass, klassDefinition, ignoreIds)\n    .filter((feature) => !ignoreIds.includes(feature.id))\n    .forEach((feature) => {\n      const featureMatch = getFeatureCompendiumMatch(compendiumClassFeatures, feature, klassDefinition);\n\n      if (featureMatch) {\n        const levelAdvancement = advancements.findIndex((advancement) => advancement.level === feature.requiredLevel);\n\n        if (levelAdvancement == -1) {\n          const advancement = {\n            _id: foundry.utils.randomID(),\n            type: \"ItemGrant\",\n            configuration: {\n              items: [\n                `Compendium.${compendiumLabel}.${featureMatch._id}`\n              ]\n            },\n            value: {},\n            level: feature.requiredLevel,\n            title: \"Features\",\n            icon: \"\",\n            classRestriction: \"\"\n          };\n          advancements.push(advancement);\n        } else {\n          advancements[levelAdvancement].configuration.items.push(`Compendium.${compendiumLabel}.${featureMatch._id}`);\n        }\n      }\n    });\n\n  return advancements;\n}\n\nfunction parseFeaturesForScaleValues(ddb, klass, klassDefinition, ignoreIds = []) {\n  let specialFeatures = [];\n  const advancements = getClassFeatures(ddb, klass, klassDefinition, ignoreIds)\n    .filter((feature) => feature.levelScales?.length > 0)\n    .map((feature) => {\n      let advancement = generateScaleValueAdvancement(feature);\n      const specialLookup = SPECIAL_ADVANCEMENTS[advancement.title];\n      if (specialLookup) {\n        if (specialLookup.additionalAdvancements) {\n          specialLookup.additionalFunctions.forEach((fn) => {\n            specialFeatures.push(fn(advancement));\n          });\n        }\n        if (specialLookup.fixFunction) advancement = specialLookup.fixFunction(advancement);\n      }\n      return advancement;\n    });\n  return advancements.concat(specialFeatures);\n}\n\nexport async function addSRDAdvancements(advancements, klass) {\n  const rulesCompendium = \"dnd5e.classes\";\n  const srdCompendium = CompendiumHelper.getCompendium(rulesCompendium);\n  await srdCompendium.getIndex();\n  const klassMatch = srdCompendium.index.find((k) => k.name === klass.name);\n  if (klassMatch) {\n    const srdKlass = await srdCompendium.getDocument(klassMatch._id);\n    const scaleAdvancements = srdKlass.system.advancement.filter((srdA) =>\n      srdA.type === \"ScaleValue\"\n      && !advancements.some((ddbA) => ddbA.configuration.identifier === srdA.configuration.identifier)\n    ).map((advancement) => {\n      return foundry.utils.isNewerVersion(game.system.version, \"2.0.3\") ? advancement.toObject() : advancement;\n    });\n    advancements.push(...scaleAdvancements);\n  }\n\n  return advancements;\n}\n\n\nasync function buildClassFeatures(ddb, klass, klassDefinition, compendiumClassFeatures, ignoreIds = []) {\n  logger.debug(`Parsing ${klassDefinition.name} features`);\n  let description = \"<h1>Class Features</h1>\\n\\n\";\n  let classFeatures = [];\n\n  const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"features\");\n\n  getClassFeatures(ddb, klass, klassDefinition, ignoreIds).forEach((feature) => {\n    const classFeaturesAdded = classFeatures.some((f) => f === feature.name);\n\n    if (!classFeaturesAdded && !ignoreIds.includes(feature.id)) {\n      const featureMatch = getFeatureCompendiumMatch(compendiumClassFeatures, feature, klassDefinition);\n      const title = (featureMatch)\n        ? `<p><b>@Compendium[${compendiumLabel}.${featureMatch._id}]{${feature.name}}</b></p>`\n        : `<p><b>${feature.name}</b></p>`;\n\n      // eslint-disable-next-line require-atomic-updates\n      description += `${title}\\n${feature.description}\\n\\n`;\n      classFeatures.push(feature.name);\n    }\n\n  });\n\n  return description;\n}\n\n\nasync function parseSubclass(ddb, character, characterClass, featuresIndex) {\n  let subKlass = {\n    name: characterClass.subclassDefinition.name,\n    type: 'subclass',\n    system: JSON.parse(utils.getTemplate('subclass')),\n    flags: {\n      ddbimporter: {\n        subclassDefinitionId: characterClass.id,\n        id: characterClass.subclassDefinition.id,\n        type: \"class\",\n      },\n      obsidian: {\n        source: {\n          type: \"class\",\n          text: characterClass.subclassDefinition.name,\n        }\n      },\n    },\n  };\n\n  subKlass.system.classIdentifier = utils.referenceNameString(characterClass.definition.name.toLowerCase());\n  subKlass.system.identifier = utils.referenceNameString(characterClass.subclassDefinition.name.toLowerCase());\n\n  const castSpells = characterClass.subclassDefinition.canCastSpells;\n\n  if (castSpells) {\n    const spellProgression = DICTIONARY.spell.progression.find((cls) => cls.name === characterClass.definition.name);\n    const spellCastingAbility = getSpellCastingAbility(characterClass, true, true);\n    if (spellProgression) {\n      subKlass.system.spellcasting = {\n        progression: spellProgression.value,\n        ability: spellCastingAbility,\n      };\n    }\n    const spellSlotDivisor = characterClass.subclassDefinition.spellRules?.multiClassSpellSlotDivisor\n      ? characterClass.subclassDefinition.spellRules?.multiClassSpellSlotDivisor\n      : undefined;\n    subKlass.flags.ddbimporter.spellSlotDivisor = spellSlotDivisor;\n    subKlass.flags.ddbimporter.spellCastingAbility = spellCastingAbility;\n  }\n\n  subKlass.system.description.value += \"<h1>Description</h1>\";\n  subKlass.system.description.value += characterClass.subclassDefinition.description;\n\n  const baseClassFeatureIds = characterClass.definition.classFeatures.map((f) => f.id);\n  // eslint-disable-next-line no-await-in-loop\n  subKlass.system.description.value += await buildClassFeatures(ddb, characterClass, characterClass.subclassDefinition, featuresIndex, baseClassFeatureIds);\n\n  subKlass.system.description.value = parseTemplateString(ddb, character, subKlass.system.description.value, subKlass).text;\n\n  subKlass.system.advancement = [\n    ...parseFeaturesForScaleValues(ddb, characterClass, characterClass.subclassDefinition, baseClassFeatureIds),\n    ...await generateFeatureAdvancements(ddb, characterClass, characterClass.subclassDefinition, featuresIndex, baseClassFeatureIds),\n  ];\n\n  return subKlass;\n}\n\nexport async function getClasses(ddb, character) {\n  const featuresCompendium = CompendiumHelper.getCompendiumType(\"features\");\n  const featuresIndex = featuresCompendium\n    ? await featuresCompendium.getIndex({ fields: [\"name\", \"flags.ddbimporter.classId\", \"flags.ddbimporter.class\", \"flags.ddbimporter.subClass\", \"flags.ddbimporter.parentClassId\"] })\n    : [];\n\n  let items = [];\n\n  for (const characterClass of ddb.character.classes) {\n    let klass = {\n      name: characterClass.definition.name,\n      type: 'class',\n      system: JSON.parse(utils.getTemplate('class')),\n      flags: {\n        ddbimporter: {\n          id: characterClass.id,\n          definitionId: characterClass.definition.id,\n          entityTypeId: characterClass.entityTypeId,\n          type: \"class\",\n          isStartingClass: characterClass.isStartingClass,\n        },\n        obsidian: {\n          source: {\n            type: \"class\",\n            text: characterClass.definition.name,\n          }\n        },\n      },\n    };\n\n    /* eslint-disable require-atomic-updates */\n    klass.system.description.value = \"<h1>Description</h1>\";\n    klass.system.description.value += characterClass.definition.description;\n    // get class features\n    const subClassFeatureIds = characterClass.subclassDefinition && characterClass.subclassDefinition.name\n      ? characterClass.subclassDefinition.classFeatures.filter((f) => f.id === characterClass.subclassDefinition.id).map((f) => f.id)\n      : [];\n    // eslint-disable-next-line no-await-in-loop, require-atomic-updates\n    klass.system.description.value += await buildClassFeatures(ddb, characterClass, characterClass.definition, featuresIndex, subClassFeatureIds);\n\n    if (characterClass.definition.equipmentDescription) {\n      // eslint-disable-next-line require-atomic-updates\n      klass.system.description.value += `<h1>Starting Equipment</h1>\\n${characterClass.definition.equipmentDescription}\\n\\n`;\n    }\n\n    klass.system.identifier = utils.referenceNameString(characterClass.definition.name.toLowerCase());\n    klass.system.levels = characterClass.level;\n    klass.system.source = getSources(characterClass);\n    klass.system.hitDice = `d${characterClass.definition.hitDice}`;\n    klass.system.hitDiceUsed = characterClass.hitDiceUsed;\n    // eslint-disable-next-line no-await-in-loop\n    klass.system.advancement = await addSRDAdvancements([\n      getHPAdvancement(klass),\n      ...parseFeaturesForScaleValues(ddb, characterClass, characterClass.definition, subClassFeatureIds),\n      // eslint-disable-next-line no-await-in-loop\n      ...await generateFeatureAdvancements(ddb, characterClass, characterClass.definition, featuresIndex, subClassFeatureIds),\n    ], klass);\n\n\n    // There class object supports skills granted by the class.\n    // Lets find and add them for future compatibility.\n    // const classFeatureIds = characterClass.definition.classFeatures\n    //   .map((feature) => feature.id)\n    //   .concat((characterClass.subclassDefinition)\n    //     ? characterClass.subclassDefinition.classFeatures.map((feature) => feature.id)\n    //     : []);\n\n    const classProficiencyFeatureIds = characterClass.definition.classFeatures\n      .filter((feature) => feature.name === \"Proficiencies\")\n      .map((feature) => feature.id)\n      .concat((characterClass.subclassDefinition)\n        ? characterClass.subclassDefinition.classFeatures\n          .filter((feature) => feature.name === \"Proficiencies\")\n          .map((feature) => feature.id)\n        : []);\n\n    // const classSkillSubType = `choose-a-${characterClass.definition.name.toLowerCase()}-skill`;\n    // const skillIds = DDBHelper.getChosenClassModifiers(ddb)\n    //   .filter((mod) => mod.subType === classSkillSubType && mod.type === \"proficiency\")\n    //   .map((mod) => mod.componentId);\n\n    // \"subType\": 1,\n    // \"type\": 2,\n\n    // There class object supports skills granted by the class.\n    let skillsChosen = [];\n    let skillChoices = [];\n    const choiceDefinitions = ddb.character.choices.choiceDefinitions;\n    ddb.character.choices.class.filter((choice) =>\n      classProficiencyFeatureIds.includes(choice.componentId)\n      && choice.subType === 1\n      && choice.type === 2\n    ).forEach((choice) => {\n      const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n      if (!optionChoice) return;\n      const option = optionChoice.options.find((option) => option.id === choice.optionValue);\n      if (!option) return;\n      const smallChosen = DICTIONARY.character.skills.find((skill) => skill.label === option.label);\n      if (smallChosen && !skillsChosen.includes(smallChosen.name)) {\n        skillsChosen.push(smallChosen.name);\n      }\n      const optionNames = optionChoice.options.filter((option) =>\n        DICTIONARY.character.skills.some((skill) => skill.label === option.label)\n        && choice.optionIds.includes(option.id)\n      ).map((option) =>\n        DICTIONARY.character.skills.find((skill) => skill.label === option.label).name\n      );\n      optionNames.forEach((skill) => {\n        if (!skillChoices.includes(skill)) {\n          skillChoices.push(skill);\n        }\n      });\n    });\n\n    klass.system.skills = {\n      value: skillsChosen,\n      number: skillsChosen.length,\n      choices: skillChoices,\n    };\n\n    klass.system.saves = [];\n    DICTIONARY.character.abilities.forEach((ability) => {\n      const mods = DDBHelper.getChosenClassModifiers(ddb, true);\n      const save = DDBHelper.filterModifiers(mods, \"proficiency\", `${ability.long}-saving-throws`, [null, \"\"], true).length > 0;\n      if (save) klass.system.saves.push(ability.value);\n    });\n\n    const castSpells = characterClass.definition.canCastSpells;\n\n    if (castSpells) {\n      const spellProgression = DICTIONARY.spell.progression.find((cls) => cls.name === characterClass.definition.name);\n      const spellCastingAbility = getSpellCastingAbility(characterClass, false, false);\n      if (spellProgression) {\n        klass.system.spellcasting = {\n          progression: spellProgression.value,\n          ability: spellCastingAbility,\n        };\n      }\n      const spellSlotDivisor = characterClass.definition.spellRules?.multiClassSpellSlotDivisor\n        ? characterClass.definition.spellRules.multiClassSpellSlotDivisor\n        : characterClass.subclassDefinition.spellRules?.multiClassSpellSlotDivisor\n          ? characterClass.subclassDefinition.spellRules?.multiClassSpellSlotDivisor\n          : undefined;\n      klass.flags.ddbimporter.spellSlotDivisor = spellSlotDivisor;\n      klass.flags.ddbimporter.spellCastingAbility = spellCastingAbility;\n    }\n\n    if (characterClass.subclassDefinition && characterClass.subclassDefinition.name) {\n      // eslint-disable-next-line no-await-in-loop\n      items.push(await parseSubclass(ddb, character, characterClass, featuresIndex));\n    }\n\n    klass.system.description.value = parseTemplateString(ddb, character, klass.system.description.value, klass).text;\n\n    items.push(klass);\n  }\n\n  return items;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBMonster from \"../DDBMonster.js\";\nimport { DDBFeatureFactory } from \"../monster/features/DDBFeatureFactory.js\";\nimport { newNPC } from \"../monster/templates/monster.js\";\n\nexport default class DDBCompanion {\n\n  constructor(block, options = {}) {\n    // console.warn(\"DDBCompanion\", { block });\n    this.options = options;\n    this.block = block;\n    this.blockDatas = this.block.querySelectorAll(\"p.Stat-Block-Styles_Stat-Block-Data\");\n    this.npc = null;\n    this.data = {};\n    this.parsed = false;\n    this.type = this.options.type;\n\n    this.useItemAC = false; // game.settings.get(\"ddb-importer\", \"munching-policy-monster-use-item-ac\");\n    this.legacyName = false; // game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    this.addMonsterEffects = true; // game.settings.get(\"ddb-importer\", \"munching-policy-add-monster-effects\");\n    this.removeSplitCreatureActions = true;\n    this.removeCreatureOnlyNames = true;\n  }\n\n  #generateAbilities() {\n    const abilityNodes = this.block.querySelector(\"div.stat-block-ability-scores\");\n\n    abilityNodes.querySelectorAll(\"div.stat-block-ability-scores-stat\").forEach((aNode) => {\n      const ability = aNode.querySelector(\"div.stat-block-ability-scores-heading\").innerText.toLowerCase();\n\n      const getFallbackAbility = () => {\n        const clone = aNode.querySelector(\"div.stat-block-ability-scores-data\").cloneNode(true);\n        clone.getElementsByTagName(\"span\")[0].innerHTML = \"\";\n        return clone.innerText.trim();\n      };\n\n      const abilityScore = aNode.querySelector(\"span.stat-block-ability-scores-score\")?.innerText\n        ?? getFallbackAbility();\n\n      const value = Number.parseInt(abilityScore);\n      const mod = CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n      this.npc.system.abilities[ability]['value'] = value;\n      this.npc.system.abilities[ability]['mod'] = mod;\n    });\n  }\n\n  getBlockData(type) {\n    const block = Array.from(this.blockDatas).find((el) => {\n      const elementName = el.innerText.trim();\n      const elementStartsWith = elementName.startsWith(type);\n      const isOnly = elementName.toLowerCase().includes(\"only\")\n        ? elementName.toLowerCase().includes(this.options.subType.toLowerCase())\n        : true;\n      return elementStartsWith && isOnly;\n    });\n    if (!block) return undefined;\n\n    const header = block.getElementsByTagName(\"strong\")[0].innerText.toLowerCase();\n    if (header.includes(\"only\") && !header.includes(this.options.subType.toLowerCase())) {\n      return undefined;\n    }\n\n    const clone = block.cloneNode(true);\n    clone.getElementsByTagName(\"strong\")[0].innerHTML = \"\";\n    return clone.innerText.trim();\n  }\n\n  // savings throws\n  #generateSavingThrows() {\n    const saveString = this.getBlockData(\"Saving Throws\");\n    if (!saveString) return;\n\n    const saves = saveString.split(\",\");\n\n    saves.forEach((save) => {\n      const ability = save.trim().split(\" \")[0].toLowerCase();\n      if (save.includes(\"plus PB\") || save.includes(\"+ PB\")) {\n        this.npc.system.abilities[ability]['proficient'] = 1;\n      }\n    });\n  }\n\n  #generateArmorClass() {\n    const acString = this.getBlockData(\"Armor Class\");\n    if (!acString) return;\n\n    const ac = Number.parseInt(acString.split(\",\")[0]);\n\n    if (Number.isInteger(ac)) {\n      this.npc.system.attributes.ac = {\n        flat: ac,\n        calc: \"natural\",\n        formula: \"\",\n      };\n\n      if (acString.includes(\"plus PB\") || acString.includes(\"+ PB\")) {\n        setProperty(this.npc, \"flags.arbron-summoner.config.acFormula\", `${ac} + @prof`);\n      } else if (acString.includes(\"+ the level of the spell\")) {\n        setProperty(this.npc, \"flags.arbron-summoner.config.acFormula\", `${ac} + @details.level`);\n      }\n    }\n  }\n\n  #generateProficiencyBonus() {\n    const profString = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Data-Last\")\n      ?? this.getBlockData(\"Challenge\");\n\n    if (profString && profString.innerText.includes(\"equals your bonus\")) {\n      setProperty(this.npc, \"flags.arbron-summoner.config.matchProficiency\", true);\n    }\n  }\n\n\n  #getBaseHitPoints(hpString) {\n    const baseString = this.options.subType && hpString.includes(\" or \")\n      ? hpString.split(\"or\").find((s) => s.toLowerCase().includes(this.options.subType.toLowerCase()))\n      : hpString.trim();\n\n    const hpFind = baseString.trim().match(/(\\d*)/);\n    const hpInt = Number.parseInt(hpFind);\n    return Number.isInteger(hpInt) ? hpInt : 0;\n  }\n\n  #generateHitPoints() {\n    const hpString = this.getBlockData(\"Hit Points\");\n    if (!hpString) return;\n\n    const hpInt = this.#getBaseHitPoints(hpString);\n    this.npc.system.attributes.hp.max = hpInt;\n    this.npc.system.attributes.hp.value = hpInt;\n\n    // conditions\n    // 5 + five times your druid level\n    // 5 + five times your ranger level (the beast has a number of Hit Dice [d8s] equal to your ranger level)\n    // 1 + your Intelligence modifier + your artificer level (the homunculus has a number of Hit Dice [d4s] equal to your artificer level)\n    // 40 + 15 for each spell level above 4th\n    // 20 (Air only) or 30 (Land and Water only) + 5 for each spell level above 2nd\n    // 50 (Demon only) or 40 (Devil only) or 60 (Yugoloth only) + 15 for each spell level above 6th\n    // 30 (Ghostly and Putrid only) or 20 (Skeletal only) + 10 for each spell level above 3rd\n\n    // additional summon points\n    const hpAdjustments = [hpInt];\n    const modMatch = hpString.match(/\\+ your (\\w+) modifier/);\n\n    if (modMatch) hpAdjustments.push(`@abilities.${modMatch[1].toLowerCase().substring(0, 3)}.mod`);\n\n    // class level\n    const klassMultiMatch = hpString.match(/\\+ (\\w+)?( times? )?your (\\w+) level/);\n    if (klassMultiMatch) {\n      const klass = klassMultiMatch[3].trim().toLowerCase();\n      const multiplier = klassMultiMatch[1]\n        ? DICTIONARY.numbers.find((d) => d.natural === klassMultiMatch[1].trim().toLowerCase()).num\n        : null;\n      const multiplierString = multiplier ? ` * ${multiplier}` : \"\";\n      hpAdjustments.push(`(@classes.${klass}.levels${multiplierString})`);\n    }\n\n    // spell level\n    const spellLevelMatch = hpString.match(/\\+ (\\d+) for each spell level above (\\d)/);\n    if (spellLevelMatch) {\n      hpAdjustments.push(`(${spellLevelMatch[1]} * (@item.level - ${spellLevelMatch[2]}))`);\n    }\n\n    if (hpAdjustments.length > 0) {\n      setProperty(this.npc, \"flags.arbron-summoner.config.hpFormula\", hpAdjustments.join(\" + \"));\n    }\n\n  }\n\n  #generateHitDie() {\n    // (the beast has a number of Hit Dice [d8s] equal to your ranger level)\n    // (the homunculus has a number of Hit Dice [d4s] equal to your artificer level)\n    const hpString = this.getBlockData(\"Hit Points\");\n    if (!hpString || !hpString.includes(\"number of Hit Dice\")) return;\n\n    const hitDice = hpString.match(/Hit Dice \\[d(\\d)s\\] equal to your (\\w+) level/);\n    if (hitDice) {\n      const hitDiceAdjustment = {\n        \"key\": \"system.attributes.hp.formula\",\n        \"value\": `(@classes.${hitDice[2]}.levels)[d${hitDice[1]}]`\n      };\n      this.npc.flags[\"arbron-summoner\"].config.actorChanges.push(hitDiceAdjustment);\n    }\n  }\n\n  #generateSkills() {\n    const skillString = this.getBlockData(\"Skills\");\n    if (!skillString) return;\n    //  \"History + 12, Perception +0 plus PB &times; 2\"\n    const skillsMaps = skillString.split(\",\").filter((str) => str != '').map((str) => {\n      const skillMatch = str.trim().match(/(\\w+ *\\w* *\\w*)(?: *)([+-])(?: *)(\\d+) *(plus PB)? *(&times;|x|times)? *(\\d*)?/);\n      let result = {};\n      if (skillMatch) {\n        result = {\n          name: skillMatch[1].trim(),\n          value: skillMatch[2] + skillMatch[3],\n          proficient: skillMatch[4] !== undefined,\n          expertise: Number.isInteger(skillMatch[5]?.trim()),\n          pbMultiplier: skillMatch[5],\n        };\n        logger.debug(`Found skill for companion ${this.npc.name}`, result);\n      } else {\n        logger.error(`Skill Parsing failed for ${this.npc.name}`);\n        logger.debug(skillString);\n        logger.debug(str);\n        logger.debug(skillMatch);\n      }\n      return result;\n    });\n\n    const keys = Object.keys(this.npc.system.skills);\n    const validSkills = DICTIONARY.character.skills.map((skill) => skill.name);\n    keys\n      .filter((key) => validSkills.includes(key))\n      .forEach((key) => {\n        let skill = this.npc.system.skills[key];\n        const lookupSkill = DICTIONARY.character.skills.find((s) => s.name == key);\n        const skillData = skillsMaps.find((skl) => skl.name == lookupSkill.label);\n\n        if (skillData) {\n          skill.value = skillData.expertise ? 2 : skillData.proficient ? 1 : 0;\n          const ability = this.npc.system.abilities[skill.ability];\n          if (parseInt(ability.mod) !== parseInt(skillData.value.trim())) {\n            skill.bonuses.check = parseInt(skillData.value.trim()) - parseInt(ability.mod);\n            skill.bonuses.passive = parseInt(skillData.value.trim()) - parseInt(ability.mod);\n          }\n\n          this.npc.system.skills[key] = skill;\n        }\n\n      });\n  }\n\n  #generateSize() {\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Metadata\").innerHTML;\n\n    if (!data) return;\n    const size = data.split(\" \")[0];\n    const sizeData = DICTIONARY.sizes.find((s) => size.toLowerCase() == s.name.toLowerCase())\n      ?? { name: \"Medium\", value: \"med\", size: 1 };\n\n    this.npc.system.traits.size = sizeData.value;\n    this.npc.prototypeToken.width = sizeData.size >= 1 ? sizeData.size : 1;\n    this.npc.prototypeToken.height = sizeData.size >= 1 ? sizeData.size : 1;\n    this.npc.prototypeToken.scale = sizeData.size >= 1 ? 1 : sizeData.size;\n  }\n\n  #generateType() {\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Metadata\").innerHTML;\n    if (!data) return;\n    const typeName = data.split(\",\")[0].split(\" \").pop().toLowerCase();\n\n    if (CONFIG.DND5E.creatureTypes[typeName]) {\n      this.npc.system.details.type.value = typeName;\n    } else {\n      this.npc.system.details.type.value = \"Unknown\";\n    }\n  }\n\n  #generateAlignment() {\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Metadata\").innerHTML;\n    if (!data) return;\n    const alignment = data.split(\",\").pop().toLowerCase().trim();\n\n    if (alignment && alignment !== \"\") this.npc.system.details.alignment = alignment;\n  }\n\n  static getDamageAdjustments(data) {\n    const values = [];\n    const custom = [];\n    const damageTypes = DICTIONARY.actions.damageType.filter((d) => d.name !== null).map((d) => d.name);\n\n    data.forEach((adj) => {\n      if (damageTypes.includes(adj.toLowerCase())) {\n        values.push(adj.toLowerCase());\n      } else if (adj.includes(\"physical\")) {\n        values.push(\"physical\");\n      } else {\n        custom.push(adj);\n      }\n    });\n\n    const adjustments = {\n      value: values,\n      custom: custom.join(\"; \"),\n    };\n\n    return adjustments;\n  }\n\n  filterDamageConditions(data) {\n    const onlyFiltered = data.split(/[;,]/).filter((state) => {\n      if (state.includes(\"only\")) {\n        if (state.toLowerCase().includes(this.options.subType.toLowerCase())) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    });\n\n    const conditions = [];\n\n    onlyFiltered.forEach((state) => {\n      const results = state\n        .split(\"and\")\n        .map((s) => {\n          return s.split(\"(\")[0].trim().toLowerCase();\n        });\n      conditions.push(...results);\n    });\n\n    return conditions;\n  }\n\n  // Damage Resistances acid (Water only); lightning and thunder (Air only); piercing and slashing (Earth only)\n  // Damage Immunities poison; fire (Fire only)\n  // Damage Immunities necrotic, poison\n  // Condition Immunities exhaustion, frightened, paralyzed, poisoned\n  #generateImmunities() {\n    const data = this.getBlockData(\"Damage Immunities\");\n    if (!data) return;\n\n    this.npc.system.traits.di = DDBCompanion.getDamageAdjustments(this.filterDamageConditions(data));\n  }\n\n  #generateResistances() {\n    const data = this.getBlockData(\"Damage Resistances\");\n    if (!data) return;\n\n    this.npc.system.traits.dr = DDBCompanion.getDamageAdjustments(this.filterDamageConditions(data));\n  }\n\n  #generateVulnerabilities() {\n    const data = this.getBlockData(\"Damage Vulnerabilities\");\n    if (!data) return;\n\n    this.npc.system.traits.dv = DDBCompanion.getDamageAdjustments(this.filterDamageConditions(data));\n  }\n\n  // Condition Immunities exhaustion, frightened, paralyzed, poisoned\n  #generateConditions() {\n    const data = this.getBlockData(\"Condition Immunities\");\n    if (!data) return;\n\n    let values = [];\n    let custom = [];\n\n    data.split(\",\").forEach((adj) => {\n      const valueAdjustment = DICTIONARY.conditions.find((condition) => condition.label.toLowerCase() == adj.trim().toLowerCase());\n      if (valueAdjustment) {\n        values.push(valueAdjustment.foundry);\n      } else {\n        custom.push(adj);\n      }\n    });\n\n    // Condition Immunities charmed, exhaustion, frightened, incapacitated, paralyzed, petrified, poisoned\n    this.npc.system.traits.ci = {\n      value: values,\n      custom: custom.join(\"; \"),\n    };\n  }\n\n  #generateSenses() {\n    const data = this.getBlockData(\"Senses\");\n    if (!data) return;\n\n    // darkvision 60 ft., passive Perception 10 + (PB &times; 2)\n    // darkvision 60 ft., passive Perception 10 + (PB × 2)\n\n    data.split(\",\").forEach((sense) => {\n      const match = sense.match(/(darkvision|blindsight|tremorsense|truesight)\\s+(\\d+)/i);\n\n      if (match) {\n        const value = parseInt(match[2]);\n        this.npc.system.attributes.senses[match[1].toLowerCase()] = value;\n\n        const senseType = DICTIONARY.senseMap[match[1].toLowerCase()];\n\n        if (value > 0 && value > this.npc.prototypeToken.sight.range && hasProperty(CONFIG.Canvas.visionModes, senseType)) {\n          setProperty(this.npc.prototypeToken.sight, \"visionMode\", senseType);\n          setProperty(this.npc.prototypeToken.sight, \"range\", value);\n          this.npc.prototypeToken.sight = mergeObject(this.npc.prototypeToken.sight, CONFIG.Canvas.visionModes[senseType].vision.defaults);\n        }\n        if (value > 0 && hasProperty(DICTIONARY.detectionMap, match[1].toLowerCase())) {\n          const detectionMode = {\n            id: DICTIONARY.detectionMap[match[1].toLowerCase()],\n            range: value,\n            enabled: true,\n          };\n\n          // only add duplicate modes if they don't exist\n          if (!this.npc.prototypeToken.detectionModes.some((mode) => mode.id === detectionMode.id)) {\n            this.npc.prototypeToken.detectionModes.push(detectionMode);\n          }\n        }\n      }\n    });\n  }\n\n  #generateLanguages() {\n    const data = this.getBlockData(\"Languages\");\n    if (!data) return;\n\n    // loop back to add small chance they have non-custom language support\n    this.npc.system.traits.languages.custom = data;\n  }\n\n  #generateSpeed() {\n    const data = this.getBlockData(\"Speed\");\n    if (!data) return;\n\n    // 30 ft.; fly 40 ft. (hover) (Ghostly only)\n    // 40 ft.; climb 40 ft. (Demon only); fly 60 ft. (Devil only)\n    // 30 ft., fly 40 ft.\n\n    const onlyFiltered = data.split(/[;,]/).filter((speed) => {\n      if (speed.includes(\"only\")) {\n        if (speed.toLowerCase().includes(this.options.subType.toLowerCase())) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    });\n\n    const speeds = [];\n    onlyFiltered.forEach((state) => {\n      const results = state\n        .split(\"and\")\n        .map((s) => {\n          return s.trim().toLowerCase();\n        });\n      speeds.push(...results);\n    });\n\n    speeds.forEach((speed) => {\n      const match = speed.match(/(\\w+ )*(\\d+)/i);\n      if (match) {\n        const type = match[1]?.trim() ?? \"walk\";\n        this.npc.system.attributes.movement[type] = parseInt(match[2]);\n        if (speed.includes(\"hover\")) this.npc.system.attributes.movement[\"hover\"] = true;\n      }\n    });\n  }\n\n\n  async getFeature(text, type) {\n    const options = { extra: true, useItemAC: this.useItemAC, legacyName: this.legacyName, addMonsterEffects: this.addMonsterEffects };\n    const ddbMonster = new DDBMonster(null, options);\n    ddbMonster.name = this.name;\n    ddbMonster.npc = duplicate(this.npc);\n    ddbMonster.abilities = ddbMonster.npc.system.abilities;\n    ddbMonster.proficiencyBonus = 0;\n    const featureFactory = new DDBFeatureFactory({ ddbMonster, hideDescription: false, updateExisting: false });\n    featureFactory.generateActions(text, type);\n    logger.debug(\"Generating companion feature\", { text, type, featureFactory });\n    const toHitRegex = /(your spell attack modifier to hit)/i;\n    if (toHitRegex.test(text)) {\n      setProperty(this.npc, \"flags.arbron-summoner.config.matchToHit\", true);\n    }\n    const spellSaveRegex = /(against your spell save DC)/i;\n    if (spellSaveRegex.test(text)) {\n      setProperty(this.npc, \"flags.arbron-summoner.config.matchSaveDCs\", true);\n    }\n    return featureFactory.getFeatures(type);\n  }\n\n\n  async #processFeatureElement(element, featType) {\n    let next = element.nextElementSibling;\n\n    if (!next) return { next, featType };\n\n    switch (next.innerText.trim().toLowerCase()) {\n      case \"action\":\n      case \"actions\":\n        logger.debug(\"Companion parsing switching to actions\");\n        return { next, featType: \"action\" };\n      case \"reaction\":\n      case \"reactions\":\n        logger.debug(\"Companion parsing switching to reactions\");\n        return { next, featType: \"reaction\" };\n      case \"bonus actions\":\n      case \"bonus\":\n      case \"bonus action\":\n        logger.debug(\"Companion parsing switching to bonus actions\");\n        return { next, featType: \"bonus\" };\n      // no default\n    }\n\n    const features = await this.getFeature(next.outerHTML, featType);\n    features.forEach((feature) => {\n      if (this.removeSplitCreatureActions && feature.name.toLowerCase().includes(\"only\")\n        && feature.name.toLowerCase().includes(this.options.subType.toLowerCase())\n      ) {\n        if (this.removeCreatureOnlyNames) feature.name = feature.name.split(\"only\")[0].split(\"(\")[0].trim();\n        this.npc.items.push(feature);\n      } else if (!this.removeSplitCreatureActions || !feature.name.toLowerCase().includes(\"only\")) {\n        this.npc.items.push(feature);\n      }\n    });\n    return { next, featType };\n  }\n\n  async #generateFeatures() {\n\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Data-Last\");\n    if (!data) {\n      logger.error(`Unable to parse ${this.npc.name} features and actions`, { this: this });\n      return;\n    }\n\n    let now = data;\n    let featType = \"special\";\n    while (now !== null) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await this.#processFeatureElement(now, featType);\n      now = result.next;\n      featType = result.featType;\n    }\n  }\n\n  // this parser creates actor data for a base actor\n  // these are actors that are modified by the PB of the actor\n  // these require the use of \"arbron-summoner\" module to run.\n  // {\n  //   \"config\": {\n  //     \"matchProficiency\": true,\n  //     \"matchToHit\": true,\n  //     \"matchSaveDCs\": true,\n  //     \"acFormula\": \"22 + @prof\",\n  //     \"hpFormula\": \"2 + @prof\",\n  //     \"actorChanges\": [\n  //       {\n  //         \"key\": \"system.attributes.movement.fly\",\n  //         \"value\": \"10\"\n  //       }\n  //     ]\n  //   }\n\n  async parse() {\n    // console.warn(\"PARSE COMPANION\", { block: this.block, aThis: this });\n    const name = this.options.name ?? this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Title\").innerHTML;\n    const namePostfix = this.options.subType\n      ? `(${this.options.subType})`\n      : \"\";\n\n    if (!name) return;\n    this.name = name;\n    logger.debug(`Beginning companion parse for ${name}`, { name, block: this.block });\n\n    const actorName = `${name} ${namePostfix}`.trim();\n    this.npc = await newNPC(actorName);\n    setProperty(this.npc, \"flags.ddbimporter.companion.modifiers\", {});\n    this.npc.prototypeToken.name = actorName;\n\n    setProperty(this.npc, \"flags.arbron-summoner\", {\n      config: {\n        matchProficiency: false,\n        matchToHit: false,\n        matchSaveDCs: false,\n        acFormula: \"\",\n        hpFormula: \"\",\n        actorChanges: []\n      }\n    });\n\n    setProperty(this.npc, \"flags.ddbimporter.id\", `companion-${actorName}`);\n    setProperty(this.npc, \"flags.ddbimporter.entityTypeId\", `companion-${this.type}`);\n\n    this.#generateSize();\n    this.#generateType();\n    this.#generateAbilities();\n    this.#generateSavingThrows();\n    this.#generateArmorClass();\n    this.#generateProficiencyBonus();\n    this.#generateHitPoints();\n    this.#generateHitDie();\n    this.#generateSkills();\n    this.#generateImmunities();\n    this.#generateResistances();\n    this.#generateVulnerabilities();\n    this.#generateConditions();\n    this.#generateAlignment();\n    this.#generateSenses();\n    this.#generateLanguages();\n    this.#generateSpeed();\n    await this.#generateFeatures();\n\n    // make friendly\n    setProperty(this.npc, \"prototypeToken.disposition\", 1);\n\n    this.data = duplicate(this.npc);\n    this.parsed = true;\n\n    logger.debug(`Finished companion parse for ${name}`, { name, block: this.block, data: this.data, npc: this.npc });\n  }\n\n}\n","import utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport { copySupportedItemFlags, srdFiddling } from \"../../muncher/import.js\";\nimport { buildNPC, copyExistingMonsterImages, generateIconMap } from \"../../muncher/importMonster.js\";\nimport DDBCompanion from \"./DDBCompanion.js\";\n\nexport default class DDBCompanionFactory {\n\n  constructor(ddbCharacter, html, options = {}) {\n    // console.warn(\"html\", html);\n    this.options = options;\n    this.ddbCharacter = ddbCharacter;\n    this.html = html;\n    this.doc = new DOMParser().parseFromString(html.replaceAll(\"\\n\", \"\"), 'text/html');\n    this.companions = [];\n    this.actor = this.options.actor;\n    this.folderIds = new Set();\n    this.updateCompanions = true; //  game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n    this.updateImages = false; // game.settings.get(\"ddb-importer\", \"munching-policy-update-images\");\n    this.results = {\n      created: [],\n      updated: [],\n    };\n    this.originDocument = options.originDocument;\n  }\n\n  get data() {\n    return this.options.data ?? this.companions.map((c) => c.data);\n  }\n\n  static MULTI = {\n    \"Aberrant Spirit\": [\"Slaad\", \"Beholderkin\", \"Star Spawn\"],\n    \"Bestial Spirit\": [\"Air\", \"Land\", \"Water\"],\n    \"Celestial Spirit\": [\"Avenger\", \"Defender\"],\n    \"Construct Spirit\": [\"Clay\", \"Metal\", \"Stone\"],\n    \"Elemental Spirit\": [\"Air\", \"Earth\", \"Fire\", \"Water\"],\n    \"Fey Spirit\": [\"Fuming\", \"Mirthful\", \"Tricksy\"],\n    \"Fiendish Spirit\": [\"Demon\", \"Devil\", \"Yugoloth\"],\n    \"Shadow Spirit\": [\"Fury\", \"Despair\", \"Fear\"],\n    \"Undead Spirit\": [\"Ghostly\", \"Putrid\", \"Skeletal\"],\n    \"Drake Companion\": [\"Acid\", \"Cold\", \"Fire\", \"Lightning\", \"Poison\"],\n    \"Draconic Spirit\": [\"Chromatic\", \"Gem\", \"Metallic\"],\n    // \"Primal Companion\": [\"Beast of the Land\", \"Beast of the Sea\", \"Beast of the Sky\"],\n  };\n\n  async #buildCompanion(block, options = {}) {\n    logger.debug(\"Beginning companion parse\", { block });\n    const ddbCompanion = new DDBCompanion(block, mergeObject(options, { type: this.options.type }));\n    // eslint-disable-next-line no-await-in-loop\n    await ddbCompanion.parse();\n    if (ddbCompanion.parsed) {\n      this.companions.push(ddbCompanion);\n    }\n  }\n\n  async parse() {\n    // console.warn(this.doc);\n    const statBlockDivs = this.doc.querySelectorAll(\"div.stat-block-background, div.stat-block-finder, div.basic-text-frame\");\n\n    // console.warn(\"statblkc divs\", { statBlockDivs, athis: this });\n    for (const block of statBlockDivs) {\n      const name = block\n        .querySelector(\"p.Stat-Block-Styles_Stat-Block-Title\")\n        .innerText\n        .trim()\n        .toLowerCase()\n        .split(\" \")\n        .map((w) => utils.capitalize(w))\n        .join(\" \");\n\n      if (name && name in DDBCompanionFactory.MULTI) {\n        for (const subType of DDBCompanionFactory.MULTI[name]) {\n          // eslint-disable-next-line no-await-in-loop\n          await this.#buildCompanion(block, { name, subType });\n        }\n      } else {\n        // eslint-disable-next-line no-await-in-loop\n        await this.#buildCompanion(block, { name, subType: null });\n      }\n\n    }\n\n    return this.data;\n  }\n\n  async #generateCompanionFolders(rootFolderName = \"DDB Companions\") {\n    const rootFolder = await utils.getOrCreateFolder(null, \"Actor\", rootFolderName);\n    for (const companion of this.companions) {\n      // eslint-disable-next-line no-await-in-loop\n      const folder = await utils.getOrCreateFolder(rootFolder, \"Actor\", utils.capitalize(companion.type ?? \"other\"));\n      companion.data.folder = folder._id;\n      this.folderIds.add(folder._id);\n    }\n  }\n\n  async getExistingWorldCompanions({ folderOverride = null, rootFolderNameOverride = undefined, limitToFactory = false } = {}) {\n    if (!folderOverride) await this.#generateCompanionFolders(rootFolderNameOverride);\n\n    const companionNames = limitToFactory ? this.data.map((c) => c.name) : [];\n    logger.debug(\"Matched companion names\", companionNames);\n\n    const existingCompanions = await game.actors.contents\n      .filter((companion) => hasProperty(companion, \"folder.id\")\n        && ((!folderOverride && this.folderIds.has(companion.folder.id))\n          || folderOverride?.id === companion.folder.id)\n        && (!limitToFactory || (limitToFactory && companionNames.includes(companion.name)))\n      )\n      .map((companion) => companion);\n    return existingCompanions;\n  }\n\n  static async updateCompanions(companions, existingCompanions) {\n    const updateCompanions = companions.filter((companion) =>\n      existingCompanions.some(\n        (exist) =>\n          exist.flags?.ddbimporter?.id === companion.flags.ddbimporter.id\n          && companion.flags?.ddbimporter?.entityTypeId === companion.flags.ddbimporter.entityTypeId\n      ));\n\n    const results = [];\n\n    for (const companion of updateCompanions) {\n      // eslint-disable-next-line no-await-in-loop\n      const existingCompanion = await existingCompanions.find((exist) =>\n        exist.flags?.ddbimporter?.id === companion.flags.ddbimporter.id\n        && companion.flags?.ddbimporter?.entityTypeId === companion.flags.ddbimporter.entityTypeId\n      );\n      companion.folder = existingCompanion.folder?.id;\n      companion._id = existingCompanion._id;\n      logger.info(`Updating companion ${companion.name}`);\n      // eslint-disable-next-line no-await-in-loop\n      await copySupportedItemFlags(existingCompanion, companion);\n      // eslint-disable-next-line no-await-in-loop\n      const npc = await buildNPC(companion, \"monster\", false, true, true);\n      results.push(npc);\n    }\n\n    return results;\n  }\n\n  static async createCompanions(companions, existingCompanions, folderId) {\n    if (!game.user.can(\"ITEM_CREATE\")) {\n      ui.notifications.warn(`User is unable to create world items, and cannot create companions`);\n      return [];\n    }\n    const newCompanions = companions.filter((companion) =>\n      !existingCompanions.some(\n        (exist) =>\n          exist.flags?.ddbimporter?.id === companion.flags.ddbimporter.id\n          && companion.flags?.ddbimporter?.entityTypeId === companion.flags.ddbimporter.entityTypeId\n      ));\n\n    const results = [];\n    for (const companion of newCompanions) {\n      logger.info(`Creating Companion ${companion.name}`);\n      if (folderId) companion.folder = folderId;\n      // eslint-disable-next-line no-await-in-loop\n      const importedCompanion = await buildNPC(companion, \"monster\", false, false, true);\n      results.push(importedCompanion);\n    }\n    return results;\n  }\n\n  async updateOrCreateCompanions({ folderOverride = null, rootFolderNameOverride = undefined } = {}) {\n    const existingCompanions = await this.getExistingWorldCompanions({ folderOverride, rootFolderNameOverride });\n\n    let companionData = this.data;\n\n    if (!this.updateCompanions || !this.updateImages) {\n      if (!this.updateImages) {\n        logger.debug(\"Copying monster images across...\");\n        companionData = copyExistingMonsterImages(companionData, existingCompanions);\n      }\n    }\n\n    let finalCompanions = await srdFiddling(companionData, \"monsters\");\n    await generateIconMap(finalCompanions);\n\n    if (this.updateCompanions) {\n      this.results.updated = await DDBCompanionFactory.updateCompanions(finalCompanions, existingCompanions);\n    }\n    this.results.created = await DDBCompanionFactory.createCompanions(finalCompanions, existingCompanions, folderOverride?.id);\n\n    // add companions to automated evocations list\n    if (this.actor && game.modules.get(\"automated-evocations\")?.active) {\n      const currentAutomatedEvocationSettings = {\n        isLocal: this.actor.getFlag(\"automated-evocations\", \"isLocal\"),\n        companions: this.actor.getFlag(\"automated-evocations\", \"isLocal\"),\n      };\n\n      const companions = existingCompanions.concat(this.results.created).map((companion) => {\n        return {\n          id: companion.id ? companion.id : companion._id,\n          number: 1,\n          animation: companion.flags?.ddbimporter?.automatedEvcoationAnimation\n            ? companion.flags?.ddbimporter?.automatedEvcoationAnimation\n            : \"magic1\",\n        };\n      });\n      const newAutomatedEvocationSettings = {\n        isLocal: true,\n        companions,\n      };\n      const mergedSettings = mergeObject(currentAutomatedEvocationSettings, newAutomatedEvocationSettings);\n\n      this.actor.setFlag(\"automated-evocations\", \"isLocal\", mergedSettings.isLocal);\n      this.actor.setFlag(\"automated-evocations\", \"companions\", mergedSettings.companions);\n    }\n  }\n\n}\n","import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBMonsterFactory from \"../../muncher/DDBMonsterFactory.js\";\nimport { getAbilityMods } from \"../monster/helpers.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBCompanionFactory from \"../companions/DDBCompanionFactory.js\";\n\nfunction getCustomValue(ddbCharacter, typeId, valueId, valueTypeId) {\n  const characterValues = ddbCharacter.characterValues;\n  const customValue = characterValues.find(\n    (value) => value.valueId == valueId && value.valueTypeId == valueTypeId && value.typeId == typeId\n  );\n\n  if (customValue) {\n    return customValue.value;\n  }\n  return null;\n}\n\nfunction generateBeastCompanionEffects(extra, characterProficiencyBonus) {\n  // beast master get to add proficiency bonus to current attacks, damage, ac\n  // and saving throws and skills it is proficient in.\n  // extra.system.details.cr = actor.system.flags.ddbimporter.dndbeyond.totalLevels;\n\n  let effect = {\n    changes: [\n      {\n        key: \"data.bonuses.rwak.attack\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.rwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.mwak.attack\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.mwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n    ],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    label: \"Beast Companion Effects\",\n    tint: \"\",\n    disabled: false,\n    selectedKey: [],\n  };\n  DICTIONARY.character.abilities.filter((ability) => extra.system.abilities[ability.value].proficient >= 1).forEach((ability) => {\n    const boost = {\n      key: `data.abilities.${ability.value}.save`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: characterProficiencyBonus,\n      priority: 20,\n    };\n    effect.selectedKey.push(`data.abilities.${ability.value}.save`);\n    effect.changes.push(boost);\n  });\n  DICTIONARY.character.skills.filter((skill) => extra.system.skills[skill.name].prof >= 1).forEach((skill) => {\n    const boost = {\n      key: `data.skills.${skill.name}.mod`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: characterProficiencyBonus,\n      priority: 20,\n    };\n    effect.selectedKey.push(`data.skills.${skill.name}.mod`);\n    effect.changes.push(boost);\n  });\n  extra.effects = [effect];\n  return extra;\n}\n\nfunction generateArtificerDamageEffect(actor, extra) {\n  // artificer uses the actors spell attack bonus, so is a bit trickier\n  // we remove damage bonus later, and will also have to calculate additional attack bonus for each attack\n  extra.system.details.cr = actor.flags.ddbimporter.dndbeyond.totalLevels;\n\n  let effect = {\n    changes: [\n      {\n        key: \"data.bonuses.rwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"+ @prof\",\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.mwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"+ @prof\",\n        priority: 20,\n      },\n    ],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    label: \"Artificer Extra Effects\",\n    tint: \"\",\n    disabled: false,\n    selectedKey: [],\n  };\n  extra.effects = [effect];\n  return extra;\n}\n\nconst creatureGroupMatrix = [\n  {\n    id: 1,\n    name: \"Wildshape\",\n    animation: \"fourelements\",\n  },\n  {\n    id: 2,\n    name: \"Familiar\",\n    animation: \"magic1\",\n  },\n  {\n    id: 3,\n    name: \"Beast Companion\",\n    animation: \"fourelements\",\n  },\n  {\n    id: 4,\n    name: \"Mount\",\n    animation: \"heart\",\n  },\n  {\n    id: 5,\n    name: \"Pet\",\n    animation: \"heart\",\n  },\n  {\n    id: 6,\n    name: \"Summoned\",\n    animation: \"magic1\",\n  },\n  {\n    id: 7,\n    name: \"Misc\",\n    animation: \"magic1\",\n  },\n  {\n    id: 10,\n    name: \"Battle Smith Defender\",\n    animation: \"energy1\",\n  },\n  {\n    id: 11,\n    name: \"Sidekick\",\n    animation: \"energy1\",\n  },\n  {\n    id: 12,\n    name: \"Infusion\",\n    animation: \"energy1\",\n  },\n];\n\nfunction getCreatureAnimationType(name, creatureGroup) {\n  // \"fire\":\n  // \"air\":\n  // \"lightning\":\n  // \"water\":\n  // \"energy1\":\n  // \"magic1\":\n  // \"heart\":\n  // \"music\":\n  // \"fourelements\":\n  const checkName = name.toLowerCase();\n  let animation = \"magic1\";\n  switch (name) {\n    case checkName.includes(\"flame\"):\n    case checkName.includes(\"fire\"):\n      animation = \"fire\";\n      break;\n    case checkName.includes(\"air\"):\n    case checkName.includes(\"wind\"):\n      animation = \"air\";\n      break;\n    case checkName.includes(\"lightning\"):\n    case checkName.includes(\"thunder\"):\n      animation = \"lightning\";\n      break;\n    case checkName.includes(\"water\"):\n    case checkName.includes(\"aqua\"):\n      animation = \"water\";\n      break;\n    case checkName.includes(\"energy\"):\n    case checkName.includes(\"construct\"):\n      animation = \"energy1\";\n      break;\n    case checkName.includes(\"magic\"):\n    case checkName.includes(\"arcane\"):\n      animation = \"magic1\";\n      break;\n    default: {\n      const match = creatureGroupMatrix.find((group) => group.id === creatureGroup.id);\n      if (match) {\n        animation = match.animation;\n      }\n    }\n  }\n\n  return animation;\n}\n\nfunction setExtraMunchDefaults() {\n  let munchSettings = [];\n\n  SETTINGS.MUNCH_DEFAULTS.forEach((setting) => {\n    logger.debug(`Loading extras munch settings ${setting.name}`);\n    setting[\"chosen\"] = game.settings.get(\"ddb-importer\", setting.name);\n    munchSettings.push(setting);\n  });\n\n  munchSettings.forEach((setting) => {\n    game.settings.set(\"ddb-importer\", setting.name, setting.needed);\n  });\n\n  return munchSettings;\n\n}\n\nfunction revertExtraMunchDefaults(munchSettings) {\n  munchSettings.forEach((setting) => {\n    logger.debug(`Returning ${setting.name} to ${setting.chosen}`);\n    game.settings.set(\"ddb-importer\", setting.name, setting.chosen);\n  });\n}\n\nfunction addOwnerSkillProficiencies(ddbCharacter, mock) {\n  let newSkills = [];\n  const proficiencyBonus = CONFIG.DDB.challengeRatings.find(\n    (cr) => cr.id == mock.challengeRatingId\n  ).proficiencyBonus;\n\n  DICTIONARY.character.skills.forEach((skill) => {\n    const existingSkill = mock.skills.find((mockSkill) => skill.valueId === mockSkill.skillId);\n    const characterProficient = ddbCharacter.source.character.character.system.skills[skill.name].value;\n    const ability = DICTIONARY.character.abilities.find((ab) => ab.value === skill.ability);\n    const stat = mock.stats.find((stat) => stat.statId === ability.id).value || 10;\n    const mod = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n\n    if (existingSkill && characterProficient === 2) {\n      const doubleProf = proficiencyBonus * 2;\n      newSkills.push({\n        skillId: skill.valueId,\n        value: mod + doubleProf,\n        additionalBonus: null,\n      });\n    } else if (existingSkill) {\n      newSkills.push(existingSkill);\n    } else if (characterProficient === 1) {\n      newSkills.push({\n        skillId: skill.valueId,\n        value: mod + proficiencyBonus,\n        additionalBonus: null,\n      });\n    }\n  });\n  mock.skills = newSkills;\n\n  return mock;\n}\n\nfunction addOwnerSaveProficiencies(ddbCharacter, mock) {\n// add owner save profs\n  let newSaves = [];\n  DICTIONARY.character.abilities.forEach((ability) => {\n    const existingProficient = mock.savingThrows.find((stat) => stat.statId === ability.id) ? 1 : 0;\n    const characterProficient = ddbCharacter.abilities.withEffects[ability.value].proficient;\n\n    if (existingProficient || characterProficient) {\n      const bonus = {\n        bonusModifier: null,\n        statId: ability.id,\n      };\n      newSaves.push(bonus);\n    }\n  });\n  mock.savingThrows = newSaves;\n  return mock;\n}\n\nfunction addAverageHitPoints(ddbCharacterData, actor, creature, mock) {\n  // hp\n  const hpMaxChange = getCustomValue(ddbCharacterData, 43, creature.id, creature.entityTypeId);\n  if (hpMaxChange) mock.averageHitPoints = hpMaxChange;\n\n  // assume this is beast master\n  if (mock.creatureFlags.includes(\"HPLM\")) {\n    const ranger = ddbCharacterData.classes.find((klass) => klass.definition.id === 5);\n    const level = ranger ? ranger.level : 0;\n    mock.averageHitPoints = Math.max(mock.averageHitPoints, 4 * level);\n  }\n\n  // homunculus servant\n  // Max Hit Points Base Artificer Level\n  if (mock.creatureFlags.includes(\"MHPBAL\")) {\n    const artificer = ddbCharacterData.classes.find((klass) => klass.definition.name === \"Artificer\");\n    if (artificer) {\n      mock.averageHitPoints = parseInt(artificer.level);\n      setProperty(mock, \"hitPointDice.diceCount\", artificer.level);\n      setProperty(mock, \"hitPointDice.diceString\", `${artificer.level}d${mock.hitPointDice.diceValue}`);\n    }\n  }\n\n  if (mock.creatureFlags.includes(\"AHM\")) {\n    const artificer = ddbCharacterData.classes.find((klass) => klass.definition.name === \"Artificer\");\n    if (artificer) {\n      mock.averageHitPoints = parseInt(5 * artificer.level);\n    }\n  }\n\n  // Max Hit Points Add Int Modifier\n  if (mock.creatureFlags.includes(\"MHPAIM\")) {\n    mock.averageHitPoints += parseInt(actor.system.abilities.int.mod);\n  }\n\n  // Max Hit Points Add Monster CON Modifier\n  if (mock.creatureFlags.includes(\"MHPAMCM\")) {\n    const monsterConModifier = getAbilityMods(mock, CONFIG.DDB);\n    mock.averageHitPoints += parseInt(monsterConModifier.con);\n  }\n\n  return mock;\n}\n\nfunction addCreatureStats(mock, actor) {\n  const creatureStats = mock.stats.filter((stat) => !mock.creatureGroup.ownerStats.includes(stat.statId));\n  const characterStats = mock.stats\n    .filter((stat) => mock.creatureGroup.ownerStats.includes(stat.statId))\n    .map((stat) => {\n      const value = actor.system.abilities[DICTIONARY.character.abilities.find((a) => a.id === stat.statId).value].value;\n      return { name: null, statId: stat.statId, value: value };\n    });\n\n  mock.stats = creatureStats.concat(characterStats);\n  return mock;\n}\n\nfunction addCreatureFlags(creature, mock) {\n  const creatureGroup = CONFIG.DDB.creatureGroups.find((group) => group.id == creature.groupId);\n  let creatureFlags = creatureGroup.flags;\n\n  if (creature.definition.name === \"Homunculus Servant\") {\n    // Max Hit Points Add Monster CON Modifier\n    // Max Hit Points Add Int Modifier\n    // Max Hit Points Base Artificer Level\n    // Attack Rolls Add Proficiency Bonus\n    // Proficient Skills Add Proficiency Bonus\n    creatureFlags = creatureFlags.concat([\"MHPAMCM\", \"MHPAIM\", \"MHPBAL\", \"ARPB\", \"PSPB\"]);\n  }\n  mock.creatureFlags = creatureFlags;\n  mock.creatureGroupId = creature.groupId;\n  mock.creatureGroup = creatureGroup;\n\n  return mock;\n\n}\n\nfunction transformExtraToMonsterData(ddbCharacter, actor, creature) {\n  let ddbCharacterData = ddbCharacter.source.ddb.character;\n  logger.debug(\"Extra data\", creature);\n  let mock = duplicate(creature.definition);\n  mock.id = creature.id;\n  mock.entityTypeId = creature.entityTypeId;\n  mock = addCreatureFlags(creature, mock);\n\n  if (creature.name) mock.name = creature.name;\n\n  // creature group\n  mock.automatedEvcoationAnimation = getCreatureAnimationType(mock.name, mock.creatureGroup);\n\n  // size\n  const sizeChange = getCustomValue(ddbCharacterData, 46, creature.id, creature.entityTypeId);\n  if (sizeChange) mock.sizeId = sizeChange;\n\n  // hp\n  mock = addAverageHitPoints(ddbCharacterData, actor, creature, mock);\n  mock.removedHitPoints = creature.removedHitPoints;\n  mock.temporaryHitPoints = creature.temporaryHitPoints;\n\n  // creature type\n  const typeChange = getCustomValue(ddbCharacterData, 44, creature.id, creature.entityTypeId);\n  if (typeChange) mock.typeId = typeChange;\n\n  // ac\n  const acChange = getCustomValue(ddbCharacterData, 42, creature.id, creature.entityTypeId);\n  if (acChange) mock.armorClass = acChange;\n\n  // alignment\n  const alignmentChange = getCustomValue(ddbCharacterData, 45, creature.id, creature.entityTypeId);\n  if (alignmentChange) mock.alignmentId = alignmentChange;\n\n  // notes\n  const extraNotes = getCustomValue(ddbCharacterData, 47, creature.id, creature.entityTypeId);\n  if (extraNotes) mock.characteristicsDescription += `\\n\\n${extraNotes}`;\n\n  // stats\n  mock = addCreatureStats(mock, actor);\n\n  // ownership the same as actor\n  mock.ownership = actor.ownership;\n\n  if (mock.creatureGroup.description !== \"\") {\n    mock.characteristicsDescription = `${mock.creatureGroup.description}\\n\\n${mock.characteristicsDescription}`;\n  }\n\n  if (mock.creatureGroup.specialQualityTitle) {\n    mock.specialTraitsDescription = `${mock.specialTraitsDescription} <p><em><strong>${mock.creatureGroup.specialQualityTitle}.</strong></em> ${mock.creatureGroup.specialQualityText}</p>`;\n  }\n\n  // Armor Add Proficiency Bonus\n  if (mock.creatureFlags.includes(\"ACPB\")) {\n    mock.armorClass += actor.system.attributes.prof;\n  }\n\n  // Evaluate Owner Skill Proficiencies\n  if (mock.creatureFlags.includes(\"EOSKP\")) {\n    mock = addOwnerSkillProficiencies(ddbCharacter, mock);\n  }\n\n  // Evaluate Owner Save Proficiencies\n  if (mock.creatureFlags.includes(\"EOSVP\")) {\n    mock = addOwnerSaveProficiencies(ddbCharacter, mock);\n  }\n\n  // Cannot Use Legendary Actions\n  if (mock.creatureFlags.includes(\"CULGA\")) {\n    mock.isLegendary = false;\n    mock.legendaryActionsDescription = \"\";\n  }\n\n  // Cannot Use Lair Actions\n  if (mock.creatureFlags.includes(\"CULRA\")) {\n    mock.hasLair = false;\n    mock.lairDescription = \"\";\n  }\n\n  logger.debug(\"mock creature\", mock);\n  return mock;\n\n}\n\nfunction enhanceParsedExtra(actor, extra) {\n  const damageDiceExpression = /(\\d*d\\d+\\s*\\+*\\s*)+/;\n  const characterProficiencyBonus = actor.system.attributes.prof;\n  const artificerBonusGroup = [10, 12];\n\n  if (\n    extra.flags?.ddbimporter?.creatureFlags?.includes(\"ARPB\") // Attack Rolls Add Proficiency Bonus\n    && extra.flags?.ddbimporter?.creatureFlags?.includes(\"PSPB\") // Proficient Skills Add Proficiency Bonus\n  ) {\n    if (extra.flags?.ddbimporter?.creatureGroupId === 3) {\n      extra = generateBeastCompanionEffects(extra, characterProficiencyBonus);\n    } else if (artificerBonusGroup.includes(extra.flags?.ddbimporter?.creatureGroupId)) {\n      // artificer uses the actors spell attack bonus, so is a bit trickier\n      // we remove damage bonus later, and will also have to calculate additional attack bonus for each attack\n      extra = generateArtificerDamageEffect(actor, extra, characterProficiencyBonus);\n    } else {\n      // who knows!\n      extra.system.details.cr = actor.flags.ddbimporter.dndbeyond.totalLevels;\n    }\n  }\n\n  if (\n    // Damage Rolls Add Proficiency Bonus\n    (extra.flags?.ddbimporter?.creatureFlags?.includes(\"DRPB\") && extra.flags?.ddbimporter?.creatureGroupId !== 3)\n    // is this a artificer infusion? the infusion call actually adds this creature group, but we don't fetch that yet.\n    || extra.flags?.ddbimporter?.creatureGroupId === 12\n  ) {\n    extra.items = extra.items.map((item) => {\n      if (item.type === \"weapon\") {\n        let characterAbility;\n\n        item.system.damage.parts = item.system.damage.parts.map((part) => {\n          const match = part[0].match(damageDiceExpression);\n          if (match) {\n            let dice = match[0];\n            // the artificer creatures have the initial prof built in, lets replace it\n            if (artificerBonusGroup.includes(extra.flags?.ddbimporter?.creatureGroupId)) {\n              characterAbility = \"int\";\n              dice = match[1].trim().endsWith(\"+\") ? match[1].trim().slice(0, -1) : match[1];\n            }\n            part[0] = `${dice.trim()}`;\n          }\n\n          return part;\n        });\n\n        if (characterAbility) {\n          const ability = item.system.ability;\n          const mod = parseInt(extra.system.abilities[ability].mod);\n          const characterMod = parseInt(actor.system.abilities[characterAbility].mod);\n          // eslint-disable-next-line no-eval\n          const globalMod = parseInt(eval(actor.system.bonuses.rsak.attack || 0));\n          item.system.attackBonus = characterMod + globalMod - mod;\n        }\n      }\n      return item;\n    });\n  }\n\n  return extra;\n}\n\nexport async function generateCharacterExtras(html, ddbCharacter, actor) {\n  const munchSettings = setExtraMunchDefaults();\n\n  try {\n    logger.debug(\"ddbCharacter\", ddbCharacter);\n    if (ddbCharacter.source.ddb.character.creatures.length === 0) return;\n\n    const folder = await utils.getOrCreateFolder(actor.folder, \"Actor\", `[Extras] ${actor.name}`);\n\n    const extractedCreatures = ddbCharacter.source.ddb.character.creatures\n      .map((creature) => transformExtraToMonsterData(ddbCharacter, actor, creature))\n      .map((creature) => {\n        creature.folder = folder.id;\n        return creature;\n      });\n\n    logger.debug(\"Extracted creatures\", duplicate(extractedCreatures));\n    const monsterFactory = new DDBMonsterFactory({ ddbData: extractedCreatures, extra: true });\n    const parsedExtras = await monsterFactory.parse();\n    logger.debug(\"Parsed Extras:\", duplicate(parsedExtras.actors));\n\n    const enhancedExtras = parsedExtras.actors.map((extra) => enhanceParsedExtra(actor, extra));\n    logger.debug(\"Enhanced Parsed Extras:\", duplicate(enhancedExtras));\n\n    const ddbCompanionFactory = new DDBCompanionFactory(ddbCharacter, \"\", { actor, data: enhancedExtras });\n    await ddbCompanionFactory.updateOrCreateCompanions({ folderOverride: folder });\n\n  } catch (err) {\n    logger.error(\"Failure parsing extra\", err);\n    logger.error(err.stack);\n  } finally {\n    revertExtraMunchDefaults(munchSettings);\n  }\n}\n","// import DICTIONARY from \"../../dictionary.js\";\n// import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { generateEffects } from \"../../effects/effects.js\";\nimport { generateBaseACItemEffect } from \"../../effects/acEffects.js\";\nimport { generateTable } from \"../../muncher/table.js\";\nimport { featureEffectAdjustment } from \"../../effects/specialFeats.js\";\nimport parseTemplateString from \"../../lib/DDBTemplateStrings.js\";\n\nfunction generateFeatModifiers(ddb, ddbItem, choice, type) {\n  // console.warn(ddbItem);\n  // console.log(choice);\n  if (ddbItem.grantedModifiers) return ddbItem;\n  let modifierItem = duplicate(ddbItem);\n  const modifiers = [\n    DDBHelper.getChosenClassModifiers(ddb, true, true),\n    DDBHelper.getModifiers(ddb, \"race\", true, true),\n    DDBHelper.getModifiers(ddb, \"background\", true, true),\n    DDBHelper.getModifiers(ddb, \"feat\", true, true),\n  ].flat();\n\n  // console.warn(modifiers);\n  // console.log(ddb.character.options[type]);\n  // console.warn(`${ddbItem.name} Adding modifiers`, { ddbItem, choice, type, modifiers });\n  // console.log(type);\n  // if (type === \"race\") console.log(modifiers);\n\n  if (!modifierItem.definition) modifierItem.definition = {};\n  modifierItem.definition.grantedModifiers = modifiers.filter((mod) => {\n    if (mod.componentId === ddbItem.definition?.id && mod.componentTypeId === ddbItem.definition?.entityTypeId)\n      return true;\n    if (choice && ddb.character.options[type]?.length > 0) {\n      // if it is a choice option, try and see if the mod matches\n      const choiceMatch = ddb.character.options[type].some(\n        (option) =>\n          // id match\n          choice.componentId == option.componentId // the choice id matches the option componentID\n          && option.definition.id == mod.componentId // option id and mod id match\n          && (choice.componentTypeId == option.componentTypeId // either the choice componenttype and optiontype match or\n            || choice.componentTypeId == option.definition.entityTypeId) // the choice componentID matches the option definition entitytypeid\n          && option.definition.entityTypeId == mod.componentTypeId // mod componentId matches option entity type id\n          && choice.id == mod.componentId // choice id and mod id match\n      );\n      // console.log(`choiceMatch ${choiceMatch}`);\n      if (choiceMatch) return true;\n    } else if (choice) {\n      // && choice.parentChoiceId\n      const choiceIdSplit = choice.choiceId.split(\"-\").pop();\n      if (mod.id == choiceIdSplit) return true;\n    }\n\n    if (mod.componentId === ddbItem.id || mod.componentId === ddbItem.definition?.id) {\n      if (type === \"class\") {\n        // logger.log(\"Class check - feature effect parsing\");\n        const classFeatureMatch = ddb.character.classes.some((klass) =>\n          klass.classFeatures.some(\n            (f) => f.definition.entityTypeId == mod.componentTypeId && f.definition.id == ddbItem.id\n          )\n        );\n        if (classFeatureMatch) return true;\n      } else if (type === \"feat\") {\n        const featMatch = ddb.character.feats.some(\n          (f) => f.definition.entityTypeId == mod.componentTypeId && f.definition.id == ddbItem.id\n        );\n        if (featMatch) return true;\n      } else if (type === \"race\") {\n        const traitMatch = ddb.character.race.racialTraits.some(\n          (t) =>\n            t.definition.entityTypeId == mod.componentTypeId\n            && t.definition.id == mod.componentId\n            && t.definition.id == ddbItem.definition.id\n        );\n        if (traitMatch) return true;\n      }\n    }\n    return false;\n  });\n  // console.warn(\"Modifier Item\", modifierItem);\n  return modifierItem;\n}\n\nexport function addFeatEffects(ddb, character, ddbItem, item, choice, type) {\n  // can we apply any effects to this feature\n  const daeInstalled = game.modules.get(\"dae\")?.active;\n  const compendiumItem = character.flags.ddbimporter.compendium;\n  const addCharacterEffects = compendiumItem\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-character-effects\");\n  const modifierItem = generateFeatModifiers(ddb, ddbItem, choice, type);\n  if (daeInstalled && addCharacterEffects) {\n    item = generateEffects(ddb, character, modifierItem, item, compendiumItem, \"feat\");\n    // console.log(item);\n  }\n\n  item = generateBaseACItemEffect(ddb, character, modifierItem, item, compendiumItem);\n\n  return item;\n}\n\nfunction setConsumeAmount(feature) {\n  // ki point detection\n  const kiPointRegex = /(?:spend|expend) (\\d) ki point/;\n  const match = feature.system.description.value.match(kiPointRegex);\n  if (match) {\n    setProperty(feature, \"system.consume.amount\", match[1]);\n  }\n  return feature;\n}\n\nfunction buildFullDescription(main, summary, title) {\n  let result = \"\";\n\n  if (summary && !utils.stringKindaEqual(main, summary) && summary.trim() !== \"\" && main.trim() !== \"\") {\n    result += summary.trim();\n    result += `\n<details>\n  <summary>\n    ${title ? title : \"More Details\"}\n  </summary>\n  <p>\n    ${main.trim()}\n  </p>\n</details>`;\n  } else if (main.trim() === \"\") {\n    result += summary.trim();\n  } else {\n    result += main.trim();\n  }\n\n  return result;\n}\n\nfunction getClassFeatureDescription(ddb, character, feat) {\n  const componentId = feat.definition?.componentId\n    ? feat.definition.componentId\n    : feat.componentId;\n  const componentTypeId = feat.definition?.componentTypeId\n    ? feat.definition.componentTypeId\n    : feat.componentTypeId;\n\n  const findFeatureKlass = ddb.character.classes\n    .find((cls) => cls.classFeatures.find((feature) =>\n      feature.definition.id == componentId\n      && feature.definition.entityTypeId == componentTypeId\n    ));\n\n  if (findFeatureKlass) {\n    const feature = findFeatureKlass.classFeatures\n      .find((feature) =>\n        feature.definition.id == componentId\n        && feature.definition.entityTypeId == componentTypeId\n      );\n    if (feature) {\n      return parseTemplateString(ddb, character, feature.definition.description, feat).text;\n    }\n  }\n  return \"\";\n\n}\n\n\nexport function getDescription(ddb, character, feat, forceFull = false) {\n  // for now none actions probably always want the full text\n  const useFullSetting = game.settings.get(\"ddb-importer\", \"character-update-policy-use-full-description\");\n  const useFull = forceFull || useFullSetting;\n  const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n\n  const rawSnippet = feat.definition?.snippet\n    ? parseTemplateString(ddb, character, feat.definition.snippet, feat).text\n    : feat.snippet\n      ? parseTemplateString(ddb, character, feat.snippet, feat).text\n      : \"\";\n\n  const description = feat.definition?.description && feat.definition.description !== \"\"\n    ? parseTemplateString(ddb, character, feat.definition.description, feat).text\n    : feat.description && feat.description !== \"\"\n      ? parseTemplateString(ddb, character, feat.description, feat).text\n      : getClassFeatureDescription(ddb, character, feat);\n\n  const snippet = utils.stringKindaEqual(description, rawSnippet) ? \"\" : rawSnippet;\n  const fullDescription = buildFullDescription(description, snippet);\n  const value = !useFull && snippet.trim() !== \"\" ? snippet : fullDescription;\n\n  return {\n    value: value,\n    chat: chatAdd ? snippet : \"\",\n    unidentified: \"\",\n  };\n}\n\nexport function setLevelScales(classes, features) {\n  const useScale = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue\");\n  if (useScale) {\n    features.forEach((feature) => {\n      const featureName = utils.referenceNameString(feature.name.toLowerCase());\n      const scaleKlass = classes.find((klass) =>\n        klass.system.advancement\n          .some((advancement) => advancement.type === \"ScaleValue\"\n            && advancement.configuration.identifier === featureName\n          ));\n\n      if (scaleKlass) {\n        if (hasProperty(feature, \"system.damage.parts\") && feature.system.damage.parts.length > 0) {\n          feature.system.damage.parts[0][0] = `@scale.${scaleKlass.system.identifier}.${featureName}`;\n        } else {\n          setProperty(feature, \"system.damage.parts\", [[`@scale.${scaleKlass.system.identifier}.${featureName}`]]);\n        }\n      }\n    });\n  }\n}\n\n/**\n * Some features we need to fix up or massage because they are modified\n * in interesting ways\n * @param {*} ddb\n * @param {*} features\n */\nexport function fixFeatures(features) {\n  const useScale = game.settings.get(\"ddb-importer\", \"character-update-policy-use-scalevalue\");\n  // eslint-disable-next-line complexity\n  features.forEach((feature) => {\n    const name = feature.flags.ddbimporter.originalName || feature.name;\n    switch (name) {\n      case \"Action Surge\": {\n        feature.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Arcane Propulsion Armor Gauntlet\": {\n        feature.system.damage.parts[0][0] += \" + @mod\";\n        break;\n      }\n      case \"Arms of the Astral Self: Summon\": {\n        feature.system.target.type = \"enemy\";\n        feature.system.target.units = \"all\";\n        feature.system.range.value = 10;\n        feature.system.range.units = \"ft\";\n        break;\n      }\n      case \"Bardic Inspiration\": {\n        feature.system.actionType = \"util\";\n        feature.system.duration = {\n          value: 10,\n          units: \"minute\",\n        };\n        feature.system.target = {\n          value: 1,\n          width: null,\n          units: \"\",\n          type: \"creature\",\n        };\n        feature.system.range.value = 60;\n        feature.system.range.units = \"ft\";\n        break;\n      }\n      case \"Blessed Healer\": {\n        feature.system.activation.type = \"special\";\n        feature.system.activation.cost = null;\n        feature.system.actionType = \"heal\";\n        feature.system[\"target\"][\"type\"] = \"self\";\n        feature.system.range = { value: null, units: \"self\", long: null };\n        feature.system.uses = { value: null, max: \"0\", per: \"\", type: \"\" };\n        break;\n      }\n      case \"Celestial Revelation\": {\n        feature.system.activation.type = \"\";\n        feature.system.actionType = \"\";\n        feature.system.uses = {\n          value: null,\n          max: null,\n          per: \"\",\n        };\n        break;\n      }\n      case \"Channel Divinity: Radiance of the Dawn\":\n        feature.system.damage = {\n          parts: [[\"2d10[radiant] + @classes.cleric.levels\", \"radiant\"]],\n          versatile: \"\",\n          value: \"\",\n        };\n        break;\n      case \"Dark One’s Blessing\":\n      case \"Dark One's Blessing\": {\n        feature.system.damage = { parts: [[\"@classes.warlock.level + @mod\", \"temphp\"]], versatile: \"\", value: \"\" };\n        feature.system.actionType = \"heal\";\n        feature.system.ability = \"cha\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        feature.system.activation.condition = \"Reduce a hostile creature to 0 HP\";\n        break;\n      }\n      case \"Deflect Missiles\": {\n        feature.system.damage = { parts: [[\"1d10 + @mod + @classes.monk.levels\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Divine Intervention\":\n        feature.system.damage = { parts: [[\"1d100\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.actionType = \"other\";\n        break;\n      case \"Eldritch Cannon: Force Ballista\":\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.value = 120;\n        feature.system.range.units = \"ft\";\n        feature.system.ability = \"int\";\n        feature.system.actionType = \"rsak\";\n        feature.system.chatFlavor = \"On hit pushed 5 ft away.\";\n        feature.system.damage = { parts: [[\"2d8[force]\", \"force\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Eldritch Cannon: Flamethrower\":\n        feature.system.damage = { parts: [[\"2d8[fire]\", \"fire\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Eldritch Cannon: Protector\":\n        feature.system.target.units = \"any\";\n        feature.system.target.type = \"ally\";\n        feature.system.range.value = 10;\n        feature.system.ability = \"int\";\n        feature.system.actionType = \"heal\";\n        feature.system.damage = { parts: [[\"1d8 + @mod\", \"temphp\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Extra Attack\": {\n        feature.system.activation = { type: \"\", cost: 0, condition: \"\" };\n        feature.system.actionType = \"\";\n        feature.system.range.value = null;\n        break;\n      }\n      case \"Fighting Style: Interception\":\n        feature.system.damage = { parts: [[\"1d10 + @prof\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        break;\n      case \"Genie's Vessel: Genie's Wrath (Dao)\": {\n        feature.system.activation.type = \"special\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.units = \"spec\";\n        feature.system.actionType = \"util\";\n        feature.system.duration.units = \"inst\";\n        feature.system.damage = { parts: [[\"@prof\", \"bludgeoning\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Giant's Might\": {\n        feature.system[\"target\"][\"type\"] = \"self\";\n        feature.system.range = { value: null, units: \"self\", long: null };\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        break;\n      }\n      case \"Hand of Healing\": {\n        feature.system.actionType = \"heal\";\n        break;\n      }\n      case \"Harness Divine Power\": {\n        feature.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Healing Hands\": {\n        feature.system.damage = {\n          parts: [[\"@details.level[healing]\", \"healing\"]],\n          versatile: \"\",\n          value: \"\",\n        };\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"creature\";\n        feature.system.range = {\n          type: \"touch\",\n          value: null,\n          long: null,\n          units: \"touch\"\n        };\n        break;\n      }\n      case \"Healing Light\": {\n        feature.system.damage = { parts: [[\"1d6\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Metamagic - Heightened Spell\": {\n        feature.system.consume.amount = 3;\n        break;\n      }\n      case \"Metamagic - Quickened Spell\": {\n        feature.system.consume.amount = 2;\n        break;\n      }\n      case \"Momentary Stasis\": {\n        feature.system.actionType = \"save\";\n        feature.system.save.ability = \"con\";\n        break;\n      }\n      case \"Polearm Master - Bonus Attack\": {\n        feature.system.actionType = \"mwak\";\n        feature.system.range = { value: 10, long: null, units: \"ft\" };\n        break;\n      }\n      case \"Psionic Power: Recovery\": {\n        feature.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        setProperty(feature, \"system.consume.amount\", -1);\n        break;\n      }\n      case \"Quickened Healing\": {\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        if (useScale) {\n          feature.system.damage.parts[0][0] += \" + @prof[healing]\";\n          feature.system.damage.parts[0][1] = \"healing\";\n        }\n        break;\n      }\n      case \"Celestial Revelation (Radiant Soul)\":\n      case \"Radiant Soul\": {\n        if (getProperty(feature, \"flags.ddbimporter.type\") == \"race\") {\n          feature.system.uses = {\n            value: 1,\n            max: 1,\n            per: \"lr\",\n          };\n        } else if (getProperty(feature, \"flags.ddbimporter.type\") == \"class\") {\n          feature.system.activation.type = \"special\";\n        }\n        break;\n      }\n      case \"Rage\": {\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        break;\n      }\n      case \"Second Wind\":\n        feature.system.damage = {\n          parts: [[\"1d10[healing] + @classes.fighter.levels\", \"healing\"]],\n          versatile: \"\",\n          value: \"\",\n        };\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        break;\n      case \"Shifting\": {\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range = { value: null, long: null, units: \"self\" };\n        feature.system.duration.units = \"inst\";\n        feature.system.ability = \"con\";\n        feature.system.actionType = \"heal\";\n        feature.system.damage = { parts: [[\"@details.level + max(1,@mod)\", \"temphp\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Shift\": {\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range = { value: null, long: null, units: \"self\" };\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        feature.system.ability = \"con\";\n        feature.system.actionType = \"heal\";\n        feature.system.damage = { parts: [[\"2 * @prof\", \"temphp\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Sneak Attack\": {\n        if (!useScale) feature.system.damage = { parts: [[\"(ceil(@classes.rogue.levels /2))d6\", \"\"]], versatile: \"\", value: \"\" };\n        if (!feature.flags.ddbimporter.action) {\n          feature.system.actionType = \"other\";\n          feature.system.activation = { type: \"special\", cost: 0, condition: \"\" };\n        }\n        break;\n      }\n      case \"Surprise Attack\":\n        feature.system.damage = { parts: [[\"2d6\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.activation.type = \"special\";\n        break;\n      case \"Starry Form: Archer\":\n        feature.system.actionType = \"rsak\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.units = \"ft\";\n        break;\n      case \"Starry Form: Chalice\":\n        feature.system.damage.parts[0][1] = \"healing\";\n        feature.system.actionType = \"heal\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"ally\";\n        feature.system.range.value = 30;\n        feature.system.range.units = \"ft\";\n        feature.system.activation.type = \"special\";\n        break;\n      case \"Starry Form: Dragon\":\n        break;\n      case \"Stone's Endurance\":\n      case \"Stone’s Endurance\":\n        feature.system.damage = { parts: [[\"1d12 + @mod\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.actionType = \"other\";\n        feature.system.ability = \"con\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        break;\n      case \"Stunning Strike\":\n        feature.system.actionType = \"save\";\n        feature.system.save = { ability: \"con\", dc: null, scaling: \"wis\" };\n        feature.system.target = { value: null, width: null, units: \"touch\", type: \"creature\" };\n        feature.system.range.units = \"ft\";\n        break;\n      case \"Superiority Dice\": {\n        setProperty(feature.system, \"damage.parts\", [[\"@scale.battle-master.combat-superiority-die\"]]);\n        break;\n      }\n      // no default\n    }\n\n    const tableDescription = generateTable(feature.name, feature.system.description.value, true, feature.type);\n    feature.system.description.value = tableDescription;\n    const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n    feature.system.description.chat = chatAdd ? tableDescription : \"\";\n    feature = setConsumeAmount(feature);\n\n\n    // if (useScale) {\n    //   feature = setLevelScale(feature);\n    // }\n  });\n}\n\nexport async function addExtraEffects(ddb, documents, character) {\n  const compendiumItem = character.flags.ddbimporter.compendium;\n  const addCharacterEffects = compendiumItem\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-character-effects\");\n\n  if (addCharacterEffects) {\n    const results = await Promise.all(documents.map((document) => {\n      return featureEffectAdjustment(ddb, character, document);\n    }));\n    return results;\n  } else {\n    return documents;\n  }\n\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport logger from \"../../logger.js\";\n\nimport { generateEffects } from \"../../effects/effects.js\";\n\n// function isInfused(ddb, item) {\n//   return ddb.infusions.item.some((mapping) =>\n//     mapping.itemId === item.flags.ddbimporter.definitionId &&\n//     mapping.inventoryMappingId === item.flags.ddbimporter.id &&\n//     mapping.itemTypeId === item.flags.ddbimporter.definitionEntityTypeId\n//   );\n// }\n\n// function getInfusionId(item, infusionMap) {\n//   const infusionInMap = infusionMap.find((mapping) =>\n//     mapping.itemId === item.flags.ddbimporter.definitionId &&\n//     mapping.inventoryMappingId === item.flags.ddbimporter.id &&\n//     mapping.itemTypeId === item.flags.ddbimporter.definitionEntityTypeId\n//   );\n\n//   if (infusionInMap) {\n//     return infusionInMap.definitionKey.replace(\"infusion:\", \"\");\n//   } else {\n//     return undefined;\n//   }\n// }\n\n\nfunction getInfusionItemMap(ddb, item) {\n  if (!ddb.infusions?.item) return undefined;\n  return ddb.infusions.item.find((mapping) =>\n    mapping.itemId === item.flags.ddbimporter.definitionId\n    && mapping.inventoryMappingId === item.flags.ddbimporter.id\n    && mapping.itemTypeId === item.flags.ddbimporter.definitionEntityTypeId\n  );\n}\n\nfunction getInfusionDetail(ddb, definitionKey) {\n  if (!ddb.infusions?.infusions?.definitionData) return undefined;\n  return ddb.infusions.infusions.definitionData.find(\n    (infusion) => infusion.definitionKey === definitionKey\n  );\n}\n\n\nfunction getInfusionModifiers(infusionItemMap, infusionDetail) {\n  let modifiers = [];\n\n  switch (infusionDetail.modifierDataType) {\n    case \"class-level\":\n    case \"damage-type-choice\": {\n      const damageMods = infusionDetail.modifierData.find(\n        (data) => data.id === infusionItemMap.modifierGroupId\n      );\n      if (damageMods) modifiers = damageMods.modifiers;\n      break;\n    }\n    case \"granted\":\n    default: {\n      modifiers = infusionDetail.modifierData.map((data) => data.modifiers).flat();\n    }\n  }\n\n  // logger.debug(`${infusionDetail.name} ${infusionDetail.modifierDataType}`, modifiers);\n\n  return modifiers;\n}\n\nfunction addMagicBonus(character, item, modifiers) {\n  const filteredModifiers = DDBHelper.filterModifiers(modifiers, \"bonus\", \"magic\");\n  const magicBonus = DDBHelper.getModifierSum(filteredModifiers, character);\n\n  if (magicBonus && magicBonus !== 0 && magicBonus !== \"\") {\n    item.system.damage.parts[0][0] += ` + ${magicBonus}`;\n    item.system.attackBonus += magicBonus;\n    setProperty(item, \"system.properties.mgc\", true);\n    // to do add infusion description to item\n  }\n  return item;\n}\n\nexport function getInfusionActionData(ddb) {\n  if (!ddb.infusions?.item) return [];\n  const generatedInfusionMap = ddb.infusions.item\n    .filter((mapping) => getInfusionDetail(ddb, mapping.definitionKey) !== undefined)\n    .map((mapping) => {\n      return getInfusionDetail(ddb, mapping.definitionKey);\n    });\n\n  const infusionActions = generatedInfusionMap\n    .filter((infusionDetail) => infusionDetail.type === \"augment\" && infusionDetail.actions.length > 0)\n    .map((infusionDetail) => {\n      const actions = infusionDetail.actions.map((action) => {\n        const itemLookup = ddb.infusions.item.find((mapping) => mapping.definitionKey === infusionDetail.definitionKey);\n        if (!action.name) {\n          const itemLookup = ddb.infusions.item.find((mapping) => mapping.definitionKey === infusionDetail.definitionKey);\n          const item = ddb.character.inventory.find((item) => item.id === itemLookup.inventoryMappingId);\n          const itemName = item?.definition?.name ? `${item.definition.name} : ` : ``;\n          action.name = `${itemName}[Infusion] ${infusionDetail.name}`;\n        }\n        action.infusionFlags = {\n          maps: [duplicate(itemLookup)],\n          applied: [duplicate(infusionDetail)],\n          infused: true,\n        };\n        return action;\n      });\n      return actions;\n    })\n    .flat();\n\n  logger.debug(`Infusions Actions Map`, generatedInfusionMap);\n  logger.debug(`Generated Infusions Actions`, infusionActions);\n  return infusionActions;\n}\n\nexport function parseInfusion(ddb, character, foundryItem, ddbItem, compendiumItem) {\n  // get item mapping\n  const infusionItemMap = getInfusionItemMap(ddb, foundryItem);\n  foundryItem.flags.infusions = { maps: [], applied: [], infused: false };\n  // sometimes ddb keeps dead infusions around - notably homonculus\n  const infusionDetail = infusionItemMap\n    ? getInfusionDetail(ddb, infusionItemMap.definitionKey)\n    : undefined;\n\n  if (infusionItemMap && infusionDetail) {\n    logger.debug(`Infusion detected for ${foundryItem.name}`);\n    // console.warn(ddb);\n    // console.warn(ddbItem);\n    // console.warn(foundryItem);\n\n    // get modifiers && generate effects\n    const ddbInfusionItem = duplicate(ddbItem);\n    ddbInfusionItem.definition.grantedModifiers = getInfusionModifiers(infusionItemMap, infusionDetail);\n\n    foundryItem = generateEffects(ddb, character, ddbInfusionItem, foundryItem, compendiumItem, \"infusion\");\n    // magic bonuses can't be added as effects as it's real hard to pin to one item\n    foundryItem = addMagicBonus(character, foundryItem, ddbInfusionItem.definition.grantedModifiers);\n\n    // add infusion flags\n    foundryItem.flags.infusions.infused = true;\n    foundryItem.flags.infusions.applied.push(infusionDetail);\n    foundryItem.flags.infusions.maps.push(infusionItemMap);\n\n    // set magic properties\n    setProperty(foundryItem, \"system.properties.mgc\", true);\n\n    // Update Item description\n    foundryItem.system.description.value += `<div class=\"infusion-description\"><p><b>Infusion: ${infusionDetail.name}</b></p><p>${infusionDetail.description}</p></div>`;\n    foundryItem.system.description.chat += `<div class=\"infusion-description\"><p><b>Infusion: ${infusionDetail.name}</b></p><p>${infusionDetail.snippet ? infusionDetail.snippet : \"\"}</p></div>`;\n\n    // adjust name for infused item\n    if (!foundryItem.name.includes(\"[Infusion]\")) foundryItem.name += \" [Infusion]\";\n    // if item is loot, lets move it to equipment/trinket so effects will apply\n    if (foundryItem.type === \"loot\") {\n      foundryItem.type = \"equipment\";\n      foundryItem.system.armor = {\n        type: \"trinket\",\n        value: 10,\n        dex: null,\n      };\n      // infusions will over ride the can equip status, so just check for equipped\n      foundryItem.system.equipped = ddbItem.equipped;\n    }\n\n    // check to see if we need to fiddle attack modifiers on infused weapons\n    if (foundryItem.type === \"weapon\") {\n      const intSwap = DDBHelper.filterBaseModifiers(ddb, \"bonus\", \"magic-item-attack-with-intelligence\").length > 0;\n      if (intSwap) {\n        const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n        const mockAbility = foundryItem.system.ability === null\n          ? foundryItem.system.properties.fin ? \"dex\" : \"str\"\n          : foundryItem.system.ability;\n        if (characterAbilities.int.value > characterAbilities[mockAbility].value) {\n          foundryItem.system.ability = \"int\";\n        }\n      }\n    }\n  } else if (infusionItemMap && !infusionDetail) {\n    logger.warn(`${foundryItem.name} marked as infused but no infusion info found`);\n  }\n  return foundryItem;\n\n}\n","import utils from \"../../../lib/utils.js\";\nimport logger from \"../../../logger.js\";\nimport DICTIONARY from \"../../../dictionary.js\";\nimport { generateTable } from \"../../../muncher/table.js\";\nimport SETTINGS from \"../../../settings.js\";\n\nexport default class DDBFeature {\n\n  #generateAdjustedName() {\n    if (!this.stripName) return;\n    const regex = /(.*)\\s*\\((:?costs \\d actions|\\d\\/day|recharge \\d-\\d)\\)/i;\n    const nameMatch = this.name.replace(/[–-–−]/g, \"-\").match(regex);\n    if (nameMatch) {\n      this.feature.name = nameMatch[1];\n      this.nameSplit = nameMatch[2];\n    }\n  }\n\n  createBaseFeature() {\n    this.feature = {\n      name: this.name,\n      type: this.templateType,\n      system: JSON.parse(utils.getTemplate(this.templateType)),\n      effects: [],\n      flags: {\n        ddbimporter: {\n          dndbeyond: {\n          },\n        },\n        monsterMunch: {\n          titleHTML: this.titleHTML,\n          fullName: this.fullName,\n          actionCopy: this.actionCopy,\n        }\n      },\n    };\n    // these templates not good\n    this.feature.system.duration.value = \"\";\n    this.feature.system.requirements = \"\";\n  }\n\n  // prepare the html in this.html for a parse, runs some checks and pregen to calculate values\n  prepare() {\n    this.strippedHtml = utils.stripHtml(`${this.html}`).trim();\n\n    const matches = this.strippedHtml.match(\n      /(Melee|Ranged|Melee\\s+or\\s+Ranged)\\s+(|Weapon|Spell)\\s*Attack:\\s*([+-]\\d+|your (?:\\w+\\s*)*)\\s+to\\s+hit/i\n    );\n\n    // set calc flags\n    this.isAttack = matches ? matches[1] !== undefined : false;\n    this.weaponAttack = matches\n      ? (matches[2].toLowerCase() === \"weapon\" || matches[2] === \"\")\n      : false;\n    this.spellAttack = matches ? matches[2].toLowerCase() === \"spell\" : false;\n    this.meleeAttack = matches ? matches[1].indexOf(\"Melee\") !== -1 : false;\n    this.rangedAttack = matches ? matches[1].indexOf(\"Ranged\") !== -1 : false;\n    this.toHit = matches\n      ? Number.isInteger(parseInt(matches[3]))\n        ? parseInt(matches[3])\n        : 0\n      : 0;\n    this.templateType = this.isAttack ? \"weapon\" : \"feat\";\n    this.yourSpellAttackModToHit = matches ? matches[3]?.startsWith(\"your spell\") : false;\n\n    if (!this.feature) this.createBaseFeature();\n    this.#generateAdjustedName();\n\n    // if not attack set to a monster type action\n    if (!this.isAttack) setProperty(this.feature, \".system.type.value\", \"monster\");\n\n  }\n\n  constructor(name, { ddbMonster, html, type, titleHTML, fullName, actionCopy, updateExisting, hideDescription } = {}) {\n\n    this.name = name;\n    this.ddbMonster = ddbMonster;\n    this.type = type;\n    this.html = html ?? \"\";\n    this.titleHTML = titleHTML ?? undefined;\n    this.fullName = fullName ?? this.name;\n    this.actionCopy = actionCopy ?? false;\n\n    this.hideDescription = hideDescription ?? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-hide-description\");\n    this.updateExisting = updateExisting ?? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n    this.stripName = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-strip-name\");\n\n    this.prepare();\n\n    // copy source details from parent\n    if (this.ddbMonster) this.feature.system.source = this.ddbMonster.npc.system.details.source;\n\n    this.actionInfo = {\n      damage: {\n        parts: [],\n        versatile: \"\"\n      },\n      formula: \"\",\n      damageSave: {\n        dc: null,\n        ability: null\n      },\n      target: {\n        \"value\": null,\n        \"width\": null,\n        \"units\": \"\",\n        \"type\": \"\"\n      },\n      duration: {\n        \"value\": \"\",\n        \"units\": \"inst\"\n      },\n      extraAttackBonus: 0,\n      baseAbility: null,\n      proficient: false,\n      properties: {\n        \"amm\": false,\n        \"fin\": false,\n        \"fir\": false,\n        \"foc\": false,\n        \"hvy\": false,\n        \"lgt\": false,\n        \"lod\": false,\n        \"rch\": false,\n        \"rel\": false,\n        \"ret\": false,\n        \"spc\": false,\n        \"thr\": false,\n        \"two\": false,\n        \"ver\": false\n      },\n      reach: \"\",\n      range: {\n        value: null,\n        long: null,\n        units: \"\",\n      },\n      recharge: { value: null, charged: true },\n      activation: {\n        type: \"\",\n        cost: null,\n        condition: \"\"\n      },\n      save: {\n        dc: null,\n        ability: \"\",\n        scaling: \"flat\",\n      },\n      uses: {\n        value: null,\n        max: \"\",\n        per: null,\n        recovery: \"\",\n      },\n    };\n\n  }\n\n  damageModReplace(text, damageType) {\n    let result;\n    const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n    const damageHint = globalDamageHints && damageType ? `[${damageType}]` : \"\";\n    const diceParse = utils.parseDiceString(text, null, damageHint);\n    if (this.actionInfo.baseAbility) {\n      const baseAbilityMod = this.ddbMonster.abilities[this.actionInfo.baseAbility].mod;\n      const bonusMod = (diceParse.bonus && diceParse.bonus !== 0) ? diceParse.bonus - baseAbilityMod : \"\";\n      const useMod = (diceParse.bonus && diceParse.bonus !== 0) ? \" + @mod \" : \"\";\n      const reParse = utils.diceStringResultBuild(diceParse.diceMap, diceParse.dice, bonusMod, useMod, damageHint);\n      result = reParse.diceString;\n    } else {\n      result = diceParse.diceString;\n    }\n\n    return result;\n  }\n\n  // eslint-disable-next-line complexity\n  generateExtendedDamageInfo() {\n    const hitIndex = this.strippedHtml.indexOf(\"Hit:\");\n    let hit = (hitIndex > 0) ? this.strippedHtml.slice(hitIndex) : `${this.strippedHtml}`;\n    hit = hit.split(\"At the end of each\")[0].split(\"At the start of each\")[0];\n    hit = hit.replace(/[–-–−]/g, \"-\");\n    // console.warn(hit);\n    // Using match with global modifier then map to regular match because RegExp.matchAll isn't available on every browser\n    // eslint-disable-next-line no-useless-escape\n    const damageExpression = new RegExp(/((?:takes|saving throw or take\\s+)|(?:[\\w]*\\s+))(?:([0-9]+))?(?:\\s*\\(?([0-9]*d[0-9]+(?:\\s*[-+]\\s*(?:[0-9]+|PB|the spell[’']s level))*(?:\\s+plus [^\\)]+)?)\\)?)?\\s*([\\w ]*?)\\s*damage(?: when used with | if used with )?(\\s?two hands|\\s?at the start of|\\son a failed save)?/gi);\n    const matches = [...hit.matchAll(damageExpression)];\n    const regainExpression = new RegExp(/(regains)\\s+?(?:([0-9]+))?(?: *\\(?([0-9]*d[0-9]+(?:\\s*[-+]\\s*[0-9]+)??)\\)?)?\\s+hit\\s+points/);\n    const regainMatch = hit.match(regainExpression);\n\n    logger.debug(`${this.name} Damage matches`, { hit, matches, regainMatch });\n    let versatile = false;\n    for (const dmg of matches) {\n      let other = false;\n      if (dmg[1] == \"DC \" || dmg[4] == \"hit points by this\") {\n        continue; // eslint-disable-line no-continue\n      }\n      // check for versatile\n      if (dmg[1] == \"or \" || dmg[5] == \"two hands\") {\n        versatile = true;\n      }\n      // check for other\n      if (dmg[5] && dmg[5].trim() == \"at the start of\") other = true;\n      const profBonus = dmg[3]?.includes(\" + PB\") ? \"@prof\" : \"\";\n      const levelBonus = dmg[3] && (/the spell[’']s level/i).test(dmg[3]) ? \"@summoner.item.level\" : \"\";\n      const damage = profBonus !== \"\" || levelBonus !== \"\"\n        ? `${dmg[2]}${dmg[3].replace(\" + PB\", \"\").replace(\" + the spell’s level\", \"\").replace(\" + the spell's level\", \"\")}`\n        : dmg[3] ?? dmg[2];\n\n      // Make sure we did match a damage\n      if (damage) {\n        const includesDiceRegExp = /[0-9]*d[0-9]+/;\n        const includesDice = includesDiceRegExp.test(damage);\n        const parsedDiceDamage = (this.actionInfo && includesDice)\n          ? this.damageModReplace(damage.replace(\"plus\", \"+\"), dmg[4])\n          : damage.replace(\"plus\", \"+\");\n\n        const finalDamage = [parsedDiceDamage, profBonus, levelBonus].filter((t) => t !== \"\").join(\" + \");\n\n        // if this is a save based attack, and multiple damage entries, we assume any entry beyond the first is going into\n        // versatile for damage\n        if (((dmg[5] && dmg[5].trim() == \"on a failed save\")\n            || (dmg[1] && dmg[1].includes(\"saving throw\")))\n          && this.actionInfo.damage.parts.length >= 1\n        ) {\n          versatile = true;\n        }\n        // assumption here is that there is just one field added to versatile. this is going to be rare.\n        if (other) {\n          if (this.actionInfo.formula == \"\") this.actionInfo.formula = finalDamage;\n        } else if (versatile) {\n          if (this.actionInfo.damage.versatile == \"\") this.actionInfo.damage.versatile = finalDamage;\n          // so things like the duergar mind master have oddity where we might want to use a different thing\n          // } else {\n          //   result.damage.versatile += ` + ${finalDamage}`;\n          // }\n        } else {\n          this.actionInfo.damage.parts.push([finalDamage, dmg[4]]);\n        }\n      }\n    }\n\n    if (regainMatch) {\n      const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n      const damageHint = globalDamageHints ? `[healing]` : \"\";\n      this.actionInfo.damage.parts.push([utils.parseDiceString(regainMatch[3], null, damageHint).diceString, 'healing']);\n    }\n\n    const save = hit.match(/DC ([0-9]+) (.*?) saving throw|\\(save DC ([0-9]+)\\)/);\n    if (save) {\n      this.actionInfo.damageSave.dc = save[1];\n      this.actionInfo.damageSave.ability = save[2] ? save[2].toLowerCase().substr(0, 3) : \"\";\n    } else {\n      const escape = hit.match(/escape DC ([0-9]+)/);\n      if (escape) {\n        this.actionInfo.damageSave.dc = escape[1];\n        this.actionInfo.damageSave.ability = \"Escape\";\n      }\n    }\n  }\n\n  getAction() {\n    let action = this.type;\n    // foundry doesn't support mythic actions pre 1.6\n    if (this.type === \"mythic\") action = \"mythic\";\n    const actionAction = this.strippedHtml.toLowerCase().match(/as (a|an) action/);\n    const bonusAction = this.strippedHtml.toLowerCase().match(/as a bonus action/);\n    const reAction = this.strippedHtml.toLowerCase().match(/as a reaction/);\n    // e.g. mephit death\n    const specialDie = this.strippedHtml.toLowerCase().match(/dies/);\n    if (bonusAction) {\n      action = \"bonus\";\n    } else if (reAction) {\n      action = \"reaction\";\n    } else if (specialDie) {\n      action = \"special\";\n    } else if (actionAction) {\n      action = \"action\";\n    }\n    return action;\n  }\n\n  getUses(name = false) {\n    let uses = {\n      value: null,\n      max: \"\",\n      per: null,\n      recovery: \"\",\n    };\n\n    const usesSearch = name ? /(\\d+)\\/(\\w+)\\)/ : /\\((\\d+)\\/(\\w+)\\)/;\n    const usesMatch = this.strippedHtml.match(usesSearch);\n    // console.log(usesMatch);\n    if (usesMatch && usesMatch[2].toLowerCase() !== \"turn\") {\n      uses.value = Number.parseInt(usesMatch[1]);\n      uses.max = usesMatch[1];\n      uses.per = \"day\";\n      const perMatch = DICTIONARY.monsters.resets.find((reset) => reset.id === usesMatch[2]);\n      if (perMatch) uses.per = perMatch.value;\n    }\n\n    return uses;\n  }\n\n  getRecharge() {\n    const matches = this.name.toLowerCase().match(/\\(recharge ([0-9––−-]+)\\)/);\n    if (matches) {\n      const value = matches[1].replace(/[––−-]/, \"-\").split(\"-\").shift();\n      return {\n        value: parseInt(value),\n        charged: true\n      };\n    }\n\n    return {\n      value: null,\n      charged: false\n    };\n  }\n\n  getActivation() {\n    const matches = this.strippedHtml.match(/\\(costs ([0-9]+) actions\\)/i);\n    if (matches) return parseInt(matches[1]);\n    const nameMatch = this.name.match(/\\(costs ([0-9]+) actions\\)/i);\n    if (nameMatch) return parseInt(nameMatch[1]);\n    return null;\n  }\n\n  getFeatSave() {\n    const saveSearch = /DC (\\d+) (\\w+) (saving throw|check)/i;\n    const match = this.strippedHtml.match(saveSearch);\n    if (match) {\n      this.actionInfo.save.dc = parseInt(match[1]);\n      this.actionInfo.save.ability = match[2].toLowerCase().substr(0, 3);\n      this.actionInfo.save.scaling = \"flat\";\n    } else {\n      const saveSelfSearch = /(\\w+) saving throw against your spell save DC/i;\n      const selfMatch = this.strippedHtml.match(saveSelfSearch);\n      if (selfMatch) {\n        this.feature.system.actionType = \"save\";\n        this.actionInfo.save.dc = 10;\n        this.actionInfo.save.ability = selfMatch[1].toLowerCase().substr(0, 3);\n        this.actionInfo.save.scaling = \"flat\";\n      }\n    }\n    return this.actionInfo.save;\n  }\n\n  getReach() {\n    const reachSearch = /reach\\s*(\\s*\\d+\\s*)\\s*ft/;\n    const match = this.strippedHtml.match(reachSearch);\n    if (match) {\n      return match[1];\n    }\n    return \"\";\n  }\n\n  getRange() {\n    let range = {\n      value: null,\n      long: null,\n      units: \"\",\n    };\n\n    const rangeSearch1 = /range\\s*(\\d+)\\s*\\/\\s*(\\d+)\\s*ft/;\n    const rangeSearch2 = /range\\s*(\\d+)\\s*ft[.]*\\s*\\/\\s*(\\d+)\\s*ft/;\n    const rangeSearch3 = /range\\s*(\\d+)\\s*(:?ft|feet)/;\n    const reachSearch = /reach\\s*(\\d+)\\s*(:?ft|feet)/;\n    const withinSearch = /within\\s*(\\d+)\\s*(:?ft|feet)/;\n\n    const matches1 = this.strippedHtml.match(rangeSearch1);\n    const matches2 = this.strippedHtml.match(rangeSearch2);\n    const matches3 = this.strippedHtml.match(rangeSearch3);\n    const reachMatch = this.strippedHtml.match(reachSearch);\n    const withinMatch = this.strippedHtml.match(withinSearch);\n\n    if (matches1) {\n      range.value = parseInt(matches1[1]);\n      range.long = parseInt(matches1[2]);\n      range.units = \"ft\";\n    } else if (matches2) {\n      range.value = parseInt(matches2[1]);\n      range.long = parseInt(matches2[2]);\n      range.units = \"ft\";\n    } else if (matches3) {\n      range.value = parseInt(matches3[1]);\n      range.units = \"ft\";\n    } else if (reachMatch) {\n      range.value = parseInt(reachMatch[1]);\n      range.units = \"ft\";\n    } else if (withinMatch) {\n      range.value = parseInt(withinMatch[1]);\n      range.units = \"ft\";\n    }\n\n    return range;\n  }\n\n  checkAbility(abilitiesToCheck) {\n    let result = {\n      success: false,\n      ability: null,\n      proficient: null\n    };\n\n    for (const ability of abilitiesToCheck) {\n      if (this.toHit == this.ddbMonster.proficiencyBonus + this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.ability = ability;\n        result.proficient = true;\n        break;\n      } else if (result.toHit == this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.ability = ability;\n        result.proficient = false;\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  checkAbilities(abilitiesToCheck, negatives = false) {\n    const results = abilitiesToCheck.map((ability) => {\n      let result = {\n        success: false,\n        ability,\n        proficient: null,\n        bonus: 0\n      };\n      if (this.toHit > this.ddbMonster.proficiencyBonus + this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.proficient = true;\n        result.bonus = this.toHit - this.ddbMonster.proficiencyBonus - this.ddbMonster.abilities[ability].mod;\n      } else if (result.toHit > this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.proficient = false;\n        result.bonus = this.toHit - this.ddbMonster.abilities[ability].mod;\n      } else if (negatives) {\n        result.success = true;\n        result.proficient = false;\n        result.bonus = this.toHit - this.ddbMonster.abilities[ability].mod;\n      }\n      return result;\n    });\n\n    return results;\n  }\n\n  // eslint-disable-next-line complexity\n  generateWeaponAttackInfo() {\n    const abilities = [\"str\", \"dex\", \"int\", \"wis\", \"cha\", \"con\"];\n    let initialAbilities = [];\n    let weaponAbilities = [\"str\", \"dex\"];\n    let spellAbilities = [\"cha\", \"wis\", \"int\"];\n\n    const lookup = DICTIONARY.monsters.weapons.find((weapon) => this.name.startsWith(weapon.name));\n    // we have a weapon name match so we can infer a bit more\n    if (lookup) {\n      for (const [key, value] of Object.entries(lookup.properties)) {\n        // logger.info(`${key}: ${value}`);\n        this.actionInfo.properties[key] = value;\n      }\n      const versatileWeapon = this.actionInfo.properties.ver && this.ddbMonster.abilities['dex'].mod > this.ddbMonster.abilities['str'].mod;\n      if (versatileWeapon || lookup.actionType == \"rwak\") {\n        weaponAbilities = [\"dex\"];\n      } else if (lookup.actionType == \"mwak\") {\n        weaponAbilities = [\"str\"];\n      }\n      this.actionInfo.weaponType = lookup.weaponType;\n    } else if (this.meleeAttack) {\n      this.actionInfo.weaponType = \"simpleM\";\n    } else if (this.rangedAttack) {\n      this.actionInfo.weaponType = \"simpleR\";\n    }\n\n    if (this.spellAttack) {\n      initialAbilities = spellAbilities;\n    } else if (this.weaponAttack) {\n      initialAbilities = weaponAbilities;\n    } else {\n      initialAbilities = abilities;\n    }\n\n    // force companions to null and proficient\n    if (this.yourSpellAttackModToHit) {\n      this.actionInfo.baseAbility = null;\n      this.actionInfo.proficient = true;\n    } else if (this.weaponAttack || this.spellAttack) {\n      // check most likely initial attacks - str and dex based weapon, mental for spell\n      const checkInitialAbilities = this.checkAbility(initialAbilities);\n      if (checkInitialAbilities.success) {\n        this.actionInfo.baseAbility = checkInitialAbilities.ability;\n        this.actionInfo.proficient = checkInitialAbilities.proficient;\n      }\n\n      // okay lets see if its one of the others then!\n      if (!this.actionInfo.baseAbility) {\n        const checkAllAbilities = this.checkAbility(abilities);\n        if (checkAllAbilities.success) {\n          this.actionInfo.baseAbility = checkAllAbilities.ability;\n          this.actionInfo.proficient = checkAllAbilities.proficient;\n        }\n      }\n\n      // okay, some oddity, maybe magic bonus, lets calculate one!\n      // we are going to assume it's dex or str based.\n      if (!this.actionInfo.baseAbility) {\n        const magicAbilities = this.checkAbilities(initialAbilities);\n\n        const filteredAbilities = magicAbilities.filter((ab) => ab.success == true).sort((a, b) => {\n          if (a.proficient == !b.proficient) return -1;\n          if (b.proficient == !a.proficient) return 1;\n          if (a.proficient == b.proficient) {\n            if (a.bonus > b.bonus) return 1;\n            if (b.bonus > a.bonus) return -1;\n          }\n          return 0;\n        });\n\n        // fine lets use the first hit\n        if (filteredAbilities.length >= 1 && filteredAbilities[0].success) {\n          this.actionInfo.baseAbility = filteredAbilities[0].ability;\n          this.actionInfo.proficient = filteredAbilities[0].proficient;\n          this.actionInfo.extraAttackBonus = filteredAbilities[0].bonus;\n        }\n      }\n\n      // negative mods!\n      if (!this.actionInfo.baseAbility) {\n        logger.info(`Negative ability parse for ${this.ddbMonster.npc.name}, to hit ${this.toHit} with ${this.name}`);\n\n        const magicAbilities = this.checkAbilities(initialAbilities, true);\n\n        const filteredAbilities = magicAbilities.filter((ab) => ab.success == true).sort((a, b) => {\n          if (a.proficient == !b.proficient) return -1;\n          if (b.proficient == !a.proficient) return 1;\n          if (a.proficient == b.proficient) {\n            if (a.bonus < b.bonus) return 1;\n            if (b.bonus < a.bonus) return -1;\n          }\n          return 0;\n        });\n        logger.debug(\"Filtered abilities\", { filteredAbilities, html: this.strippedHtml });\n        // fine lets use the first hit\n        if (filteredAbilities.length >= 1 && filteredAbilities[0].success) {\n          this.actionInfo.baseAbility = filteredAbilities[0].ability;\n          this.actionInfo.proficient = filteredAbilities[0].proficient;\n          this.actionInfo.extraAttackBonus = filteredAbilities[0].bonus;\n        } else {\n          logger.error(\"Unable to calculate attack!\", { filteredAbilities, html: this.strippedHtml, ddbFeature: this });\n        }\n      }\n    }\n  }\n\n  getTarget() {\n    let target = {\n      value: null,\n      width: null,\n      units: \"\",\n      type: \"\"\n    };\n\n    // 90-foot line that is 10 feet wide\n    // in a 90-foot cone\n    const matchText = this.strippedHtml.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\");\n    // console.warn(matchText);\n    const lineSearch = /(\\d+)-foot line/;\n    const coneSearch = /(\\d+)-foot cone/;\n    const cubeSearch = /(\\d+)-foot cube/;\n    const sphereSearch = /(\\d+)-foot-radius sphere/;\n\n    const coneMatch = matchText.match(coneSearch);\n    const lineMatch = matchText.match(lineSearch);\n    const cubeMatch = matchText.match(cubeSearch);\n    const sphereMatch = matchText.match(sphereSearch);\n\n    if (coneMatch) {\n      target.value = parseInt(coneMatch[1]);\n      target.units = \"ft\";\n      target.type = \"cone\";\n    } else if (lineMatch) {\n      target.value = parseInt(lineMatch[1]);\n      target.units = \"ft\";\n      target.type = \"line\";\n    } else if (cubeMatch) {\n      target.value = parseInt(cubeMatch[1]);\n      target.units = \"ft\";\n      target.type = \"cube\";\n    } else if (sphereMatch) {\n      target.value = parseInt(sphereMatch[1]);\n      target.units = \"ft\";\n      target.type = \"sphere\";\n    }\n\n    return target;\n  }\n\n  #getHiddenDescription() {\n    let description = `<section class=\"secret\">\\n${this.html}`;\n    if ([\"rwak\", \"mwak\"].includes(this.feature.system.actionType)) {\n      description += `\\n</section>\\nThe ${this.ddbMonster.npc.name} attacks with its ${this.feature.name}.`;\n    } else if ([\"rsak\", \"msak\"].includes(this.feature.system.actionType)) {\n      description += `\\n</section>\\nThe ${this.ddbMonster.npc.name} casts ${this.feature.name}.`;\n    } else if ([\"save\"].includes(this.feature.system.actionType)) {\n      description += `\\n</section>\\nThe ${this.ddbMonster.npc.name} uses ${this.feature.name} and a save is required.`;\n    } else {\n      description += `\\n</section>\\nThe ${this.ddbMonster.npc.name} uses ${this.feature.name}.`;\n    }\n    return description;\n  }\n\n  #generateDescription() {\n    let description = this.hideDescription ? this.#getHiddenDescription() : `${this.html}`;\n    description = description.replaceAll(\"<em><strong></strong></em>\", \"\");\n    this.feature.system.description.value = generateTable(this.ddbMonster.npc.name, description, this.updateExisting);\n  }\n\n\n  #buildAction() {\n    if (Number.isInteger(this.actionInfo.activation)) {\n      this.feature.system.activation.cost = this.actionInfo.activation;\n      this.feature.system.consume.amount = this.actionInfo.activation;\n    } else {\n      this.feature.system.activation.cost = 1;\n    }\n    this.feature.system.activation.type = this.getAction();\n\n    this.feature.system.recharge = this.actionInfo.recharge;\n    this.feature.system.save = this.actionInfo.save;\n    // assumption - if we have parsed a save dc set action type to save\n    if (this.feature.system.save.dc && !this.isAttack) {\n      this.feature.system.actionType = \"save\";\n    }\n\n    this.feature.system.damage = this.actionInfo.damage;\n    this.feature.system.formula = this.actionInfo.formula;\n    this.feature.system.properties = this.actionInfo.properties;\n    this.feature.system.proficient = this.actionInfo.proficient;\n    this.feature.system.ability = this.actionInfo.baseAbility;\n    this.feature.system.attackBonus = `${this.actionInfo.extraAttackBonus}`;\n\n    if (this.weaponAttack) {\n      if (this.templateType !== \"feat\") {\n        this.feature.system.weaponType = this.actionInfo.weaponType;\n        this.feature.system.equipped = true;\n      }\n      // console.log(actionInfo.weaponAttack);\n      // console.log(actionInfo.meleeAttack);\n      // console.log(actionInfo.rangedAttack);\n      if (this.meleeAttack) {\n        this.feature.system.actionType = \"mwak\";\n      } else if (this.rangedAttack) {\n        this.feature.system.actionType = \"rwak\";\n      }\n    } else if (this.spellAttack) {\n      if (this.meleeAttack) {\n        this.feature.system.actionType = \"msak\";\n      } else if (this.rangedAttack) {\n        this.feature.system.actionType = \"rsak\";\n      } else {\n        this.feature.system.actionType = \"save\";\n      }\n    } else if (this.actionInfo.save.dc) {\n      this.feature.system.actionType = \"save\";\n    }\n\n    this.feature.system.range = this.actionInfo.range;\n    this.feature.system.target = this.actionInfo.target;\n    this.feature.system.duration = this.actionInfo.duration;\n    this.feature.system.uses = this.actionInfo.uses;\n\n    if (this.name.includes(\"/Day\")) {\n      this.feature.system.uses = this.getUses(true);\n    }\n\n    return this.feature;\n  }\n\n  #buildLair() {\n    if (this.feature.name.trim() === \"Lair Actions\") {\n      this.feature.system.activation.cost = 1;\n    }\n    return this.feature;\n  }\n\n  #buildLegendary() {\n    // for the legendary actions feature itself we don't want to do most processing\n    if (this.name === \"Legendary Actions\") {\n      this.feature.system.activation.type = \"\";\n      return;\n    }\n\n    this.feature.system.activation.type = \"legendary\";\n\n    this.feature.system.consume = {\n      type: \"attribute\",\n      target: \"resources.legact.value\",\n      amount: 1\n    };\n\n    if (Number.isInteger(this.actionInfo.activation)) {\n      this.feature.system.activation.cost = this.actionInfo.activation;\n      this.feature.system.consume.amount = this.actionInfo.activation;\n    } else {\n      this.feature.system.activation.cost = 1;\n    }\n\n    // only attempt to update these if we don't parse an action\n    // most legendary actions are just do x thing, where thing is an existing action\n    // these have been copied from the existing actions so we don't change\n    if (!this.feature.flags.monsterMunch.actionCopy) {\n      this.feature.system.recharge = this.actionInfo.recharge;\n      this.feature.system.save = this.actionInfo.save;\n      // assumption - if we have parsed a save dc set action type to save\n      if (this.feature.system.save.dc) {\n        this.feature.system.actionType = \"save\";\n      // action.type = \"weapon\";\n      }\n      this.feature.system.range = this.actionInfo.range;\n      this.feature.system.target = this.actionInfo.target;\n      this.feature.system.damage = this.actionInfo.damage;\n\n      if (!this.feature.system.actionType && !this.isAttack && this.feature.system.damage.parts.length > 0) {\n        this.feature.system.actionType = \"other\";\n      }\n    }\n\n  }\n\n  #buildSpecial() {\n    this.feature.system.activation.type = this.getAction();\n    if (Number.isInteger(this.actionInfo.activation)) {\n      this.feature.system.activation.cost = this.actionInfo.activation;\n      this.feature.system.consume.amount = this.actionInfo.activation;\n    } else if (this.feature.system.activation.type !== \"\") {\n      this.feature.system.activation.cost = 1;\n    }\n\n    this.feature.system.uses = this.actionInfo.uses;\n    this.feature.system.recharge = this.actionInfo.recharge;\n    this.feature.system.save = this.actionInfo.save;\n    this.feature.system.target = this.actionInfo.target;\n    // assumption - if we have parsed a save dc set action type to save\n    if (this.feature.system.save.dc) {\n      this.feature.system.actionType = \"save\";\n    }\n    this.feature.system.damage = this.actionInfo.damage;\n    // assumption - if the action type is not set but there is damage, the action type is other\n    if (!this.feature.system.actionType && this.feature.system.damage.parts.length != 0) {\n      this.feature.system.actionType = \"other\";\n    }\n\n    // legendary resistance check\n    const resistanceMatch = this.name.match(/Legendary Resistance \\((\\d+)\\/Day/i);\n    if (resistanceMatch) {\n      this.feature.system.activation.type = \"special\";\n      this.feature.system.activation.cost = null;\n      this.feature.system.consume = {\n        type: \"attribute\",\n        target: \"resources.legres.value\",\n        amount: 1\n      };\n    }\n\n    // if this special action has nothing to do, then we remove the activation type\n    if (this.feature.system.actionType === null\n      && (this.feature.system.uses.value === null || this.feature.system.uses.value === 0)\n      && this.feature.system.recharge.value === null\n    ) {\n      this.feature.system.activation = {\n        cost: null,\n        type: \"\",\n        condition: \"\",\n      };\n    }\n  }\n\n  #generateActionInfo() {\n    if (this.weaponAttack || this.spellAttack) {\n      this.generateWeaponAttackInfo();\n    }\n    this.generateExtendedDamageInfo();\n\n    this.actionInfo.reach = this.getReach();\n    this.actionInfo.range = this.getRange();\n    if (this.actionInfo.reach != \"\") this.actionInfo.properties.rch = true;\n    this.actionInfo.recharge = this.getRecharge();\n    this.actionInfo.activation = this.getActivation();\n    this.actionInfo.save = this.getFeatSave();\n    this.actionInfo.target = this.getTarget();\n    this.actionInfo.uses = this.getUses();\n  }\n\n  parse() {\n    this.#generateActionInfo();\n    switch (this.type) {\n      case \"action\":\n      case \"mythic\":\n      case \"reaction\":\n      case \"bonus\":\n        this.#buildAction();\n        break;\n      case \"lair\":\n        this.#buildLair();\n        break;\n      case \"legendary\":\n        this.#buildLegendary();\n        break;\n      case \"special\":\n        this.#buildSpecial();\n        break;\n      default:\n        logger.error(`Unknown action parsing type ${this.type}`, { DDBFeature: this });\n        throw new Error(`Unknown action parsing type ${this.type}`);\n    }\n\n    this.#generateDescription();\n\n    logger.debug(`Parsed Feature ${this.name} for ${this.ddbMonster.name}`, { feature: this });\n\n  }\n\n}\n","import utils from \"../../../lib/utils.js\";\nimport logger from \"../../../logger.js\";\nimport DDBFeature from \"./DDBFeature.js\";\n\nexport class DDBFeatureFactory {\n\n  // some monsters now have [rollable] tags - if these exist we need to parse them out\n  // in the future we may be able to use them, but not consistent yet\n  static replaceRollable(text) {\n    const rollableRegex = new RegExp(/(\\[rollable\\])([^;]*);(.*)(\\[\\/rollable\\])/g);\n    return text.replaceAll(rollableRegex, \"$2\");\n  }\n\n  constructor({ ddbMonster, hideDescription, updateExisting } = {}) {\n    this.ddbMonster = ddbMonster;\n\n    this.hideDescription = hideDescription;\n    this.updateExisting = updateExisting;\n\n    this.featureBlocks = {\n      action: [],\n      reaction: [],\n      bonus: [],\n      mythic: [],\n      lair: [],\n      legendary: [],\n      special: [],\n    };\n\n    this.features = {\n      action: [],\n      reaction: [],\n      bonus: [],\n      mythic: [],\n      lair: [],\n      legendary: [],\n      special: [],\n    };\n\n    this.characterDescription = {\n      action: \"\",\n      reaction: \"\",\n      bonus: \"\",\n      mythic: \"\",\n      lair: \"\",\n      legendary: \"\",\n      special: \"\",\n      unexpected: null,\n    };\n\n    this.html = {\n      action: \"\",\n      reaction: \"\",\n      bonus: \"\",\n      mythic: \"\",\n      lair: \"\",\n      legendary: \"\",\n      special: \"\",\n    };\n\n    this.resources = {\n      legendary: {\n        value: 3,\n        max: 3\n      },\n      lair: {\n        value: false,\n        initiative: null\n      },\n      resistance: {\n        value: 0,\n        max: 0\n      },\n    };\n\n    this.resistance = {};\n  }\n\n  getFeatures(type) {\n    return this.features[type].map((feature) => deepClone(feature.feature));\n  }\n\n  get actions() {\n    return this.getFeatures(\"action\");\n  }\n\n  get reactions() {\n    return this.getFeatures(\"reaction\");\n  }\n\n  get bonus() {\n    return this.getFeatures(\"bonus\");\n  }\n\n  get mythic() {\n    return this.getFeatures(\"mythic\");\n  }\n\n  get lair() {\n    return this.getFeatures(\"lair\");\n  }\n\n  get legendary() {\n    return this.getFeatures(\"legendary\");\n  }\n\n  get special() {\n    return this.getFeatures(\"special\");\n  }\n\n  #buildDom(type) {\n    let dom = new DocumentFragment();\n    $.parseHTML(this.html[type]).forEach((element) => {\n      dom.appendChild(element);\n    });\n    dom.childNodes.forEach((node) => {\n      if (node.textContent == \"\\n\" || node.textContent == \"\\r\\n\") {\n        dom.removeChild(node);\n      }\n    });\n    return dom;\n  }\n\n  #generateActionActions(type) {\n    let splitActions = this.html[type].split(\"<h3>Roleplaying Information</h3>\");\n    if (splitActions.length > 1) {\n      this.characterDescription[type] = `<h3>Roleplaying Information</h3>${splitActions[1]}`;\n    }\n    this.html[type] = splitActions[0];\n\n    let dom = this.#buildDom(type);\n\n    // build out skeleton actions\n    dom.querySelectorAll(\"p\").forEach((node) => {\n\n      let pDom = new DocumentFragment();\n      $.parseHTML(node.outerHTML).forEach((element) => {\n        pDom.appendChild(element);\n      });\n      const query = pDom.querySelector(\"strong\");\n      if (!query) return;\n      let name = query.textContent.trim().replace(/\\./g, '');\n      if (!name.includes(\"Spell;\") && !name.includes(\"Mythic Trait;\")) {\n        name = name.split(\";\").pop().trim();\n      }\n      const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n      this.featureBlocks[type].push(action);\n    });\n\n    // there is inconsistent formatting\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"p\").forEach((node) => {\n\n        let pDom = new DocumentFragment();\n        $.parseHTML(node.outerHTML).forEach((element) => {\n          pDom.appendChild(element);\n        });\n        const query = pDom.querySelector(\"b\");\n        if (!query) return;\n        let name = query.textContent.trim().replace(/\\./g, '');\n        if (!name.includes(\"Spell;\") && !name.includes(\"Mythic Trait;\")) {\n          name = name.split(\";\").pop().trim();\n        }\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n        this.featureBlocks[type].push(action);\n      });\n    }\n\n\n    // there is inconsistent formatting\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"p\").forEach((node) => {\n\n        let pDom = new DocumentFragment();\n        $.parseHTML(node.outerHTML).forEach((element) => {\n          pDom.appendChild(element);\n        });\n        const title = pDom.textContent.split('.')[0];\n        const name = title.trim();\n        if (name && name.length > 0) {\n          const titleHTML = pDom.outerHTML ? pDom.outerHTML.split('.')[0] : undefined;\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    // homebrew fun\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"div\").forEach((node) => {\n\n        let pDom = new DocumentFragment();\n        $.parseHTML(node.outerHTML).forEach((element) => {\n          pDom.appendChild(element);\n        });\n        const title = pDom.textContent.split('.')[0];\n        const name = title.trim();\n        if (name && name.length > 0) {\n          const titleHTML = pDom.outerHTML ? pDom.outerHTML.split('.')[0] : undefined;\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    let action = this.featureBlocks[type][0];\n\n    dom.childNodes.forEach((node) => {\n      const nodeContextSplit = node.textContent.split('.');\n      const nodeName = nodeContextSplit[0].trim();\n      const longNodeName = (nodeContextSplit.length > 2 && nodeContextSplit[1].trim().startsWith('('))\n        ? `${nodeName} ${nodeContextSplit[1].trim()}`\n        : nodeName;\n      let switchAction = this.featureBlocks[type].find((act) => nodeName === act.name || longNodeName === act.name);\n\n      if (!switchAction) {\n        switchAction = this.featureBlocks[type].find((act) =>\n          act.options?.fullName\n          && node.textContent.startsWith(act.options.fullName)\n        );\n      }\n      let startFlag = false;\n      if (switchAction) {\n        action = switchAction;\n        if (action.options.html === \"\") {\n          startFlag = true;\n        }\n      }\n\n      if (!action) return;\n\n      if (node.outerHTML) {\n        let outerHTML = `${node.outerHTML}`;\n        if (switchAction && startFlag) {\n          const replaceName = getProperty(action, \"fullName\") ?? nodeName;\n          outerHTML = outerHTML.replace(replaceName, \"\");\n\n          const titleDom = new DocumentFragment();\n          $.parseHTML(outerHTML).forEach((element) => {\n            titleDom.appendChild(element);\n          });\n          if (titleDom.textContent.startsWith(\".\")) outerHTML = outerHTML.replace(\".\", \"\");\n        }\n        action.options.html += outerHTML;\n      }\n    });\n  }\n\n  #generateLairActions(type = \"lair\") {\n    let dom = this.#buildDom(type);\n\n    const defaultAction = { name: \"Lair Actions\", options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n    this.featureBlocks[type].push(defaultAction);\n\n    dom.querySelectorAll(\"h4\").forEach((node) => {\n      const name = node.textContent.trim();\n      if (name !== \"\") {\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n        if (node.textContent == \"Lair Actions\" || node.textContent == \"\") {\n          return;\n        }\n        this.featureBlocks[type].push(action);\n      }\n    });\n\n    dom.querySelectorAll(\"h3\").forEach((node) => {\n      const name = node.textContent.trim();\n      if (name !== \"\") {\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n        if (node.textContent == \"Lair Actions\" || action.name == \"\") {\n          return;\n        }\n        this.featureBlocks[type].push(action);\n      }\n    });\n\n    let actionType = \"Lair Actions\";\n    let action = this.featureBlocks[type].find((act) => act.name == actionType);\n\n    if (!action) {\n      action = this.featureBlocks[type][0];\n    }\n\n    dom.childNodes.forEach((node) => {\n      // const switchAction = dynamicActions.find((act) => act.name == node.textContent);\n      const nodeName = node.textContent.split('.')[0].trim();\n      const switchAction = this.featureBlocks[type].find((act) => nodeName === act.name);\n      let startFlag = false;\n      if (switchAction) {\n        actionType = node.textContent;\n        action = switchAction;\n        if (action.options.html === \"\") startFlag = true;\n      }\n      if (node.outerHTML) {\n        let outerHTML = node.outerHTML;\n        if (switchAction && startFlag) {\n          outerHTML = outerHTML.replace(`${nodeName}.`, \"\");\n        }\n        action.options.html += outerHTML;\n      }\n\n      const initiativeMatch = node.textContent.match(/initiative count (\\d+)/);\n      if (initiativeMatch) {\n        this.resources.lair = {\n          value: true,\n          initiative: parseInt(initiativeMatch[1]),\n        };\n      }\n    });\n  }\n\n  #generateLegendaryActions(type) {\n    let dom = this.#buildDom(type);\n\n    // Base feat\n    const feat = { name: \"Legendary Actions\", options: { html: \"\", ddbMonster: this.ddbMonster, type, actionCopy: false } };\n    feat.options.html = `${this.html[type]}`;\n    this.featureBlocks[type].push(feat);\n\n\n    // build out skeleton actions\n    dom.querySelectorAll(\"strong\").forEach((node) => {\n      const name = node.textContent.trim().replace(/\\.$/, '').trim();\n      const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, actionCopy: false } };\n\n      const actionMatch = this.features[\"action\"].concat(\n        this.features.reaction,\n        this.features.reaction,\n        this.features.bonus,\n      ).find((mstAction) =>\n        name == mstAction.name\n        || name == `${mstAction.name} Attack`\n        || name == `${mstAction.name}`.split('(', 1)[0].trim()\n        || name == `${mstAction.name} Attack`.split('(', 1)[0].trim()\n      );\n\n      if (actionMatch) {\n        const dupFeature = new DDBFeature(name, { ddbMonster: this.ddbMonster, html: actionMatch.html, type, actionCopy: true });\n        dupFeature.feature = duplicate(actionMatch.feature);\n        dupFeature.feature.name = action.name; // fix up name to make sure things like Attack are included\n        this.features[type].push(dupFeature);\n        action.options.actionCopy = true;\n      }\n      this.featureBlocks[type].push(action);\n\n    });\n\n    let action = this.featureBlocks[type].find((act) => act.name == \"Legendary Actions\");\n\n    dom.childNodes\n      .forEach((node) => {\n      // check for action numbers\n      // can take 3 legendary actions\n        let startFlag = false;\n        const actionMatch = node.textContent.match(/can take (d+) legendary actions/);\n        if (actionMatch) {\n          this.resource.legendary.value = parseInt(actionMatch[1]);\n          this.resource.legendary.max = parseInt(actionMatch[1]);\n        }\n\n        const nodeName = node.textContent.split('.')[0].trim();\n        const switchAction = this.featureBlocks[type].find((act) => nodeName === act.name);\n        if (action.name !== \"Legendary Actions\" || switchAction) {\n\n          if (switchAction) {\n            action = switchAction;\n            if (action.options.html === \"\") {\n              startFlag = true;\n            }\n          }\n\n          if (action.options.actionCopy) return;\n          if (node.outerHTML) {\n            let outerHTML = node.outerHTML;\n            if (switchAction && startFlag) {\n              outerHTML = outerHTML.replace(`${nodeName}.`, \"\");\n            }\n            action.options.html += outerHTML;\n          }\n        }\n      });\n  }\n\n  #generateSpecialActions(type) {\n    let splitActions = this.html[type].split(\"<h3>Roleplaying Information</h3>\");\n    if (splitActions.length > 1) {\n      this.characterDescription[type] = `<h3>Roleplaying Information</h3>${splitActions[1]}`;\n    }\n\n    this.html[type] = splitActions[0];\n    let dom = this.#buildDom(type);\n\n    // build out skeleton actions\n    dom.querySelectorAll(\"p\").forEach((node) => {\n      let pDom = new DocumentFragment();\n      $.parseHTML(node.outerHTML).forEach((element) => {\n        pDom.appendChild(element);\n      });\n      const query = pDom.querySelector(\"em\");\n      if (!query) return;\n      let name = query.textContent.trim().replace(/\\./g, '');\n      if (!name.includes(\"Spell;\") && !name.includes(\"Mythic Trait;\")) {\n        name = name.split(\";\").pop().trim();\n      }\n      if (name) {\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n        this.featureBlocks[type].push(action);\n      }\n    });\n\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"p\").forEach((node) => {\n        let pDom = new DocumentFragment();\n        $.parseHTML(node.outerHTML).forEach((element) => {\n          pDom.appendChild(element);\n        });\n        const query = pDom.querySelector(\"strong\");\n        if (!query) return;\n        let name = query.textContent.trim().replace(/\\./g, '');\n        if (!name.includes(\"Spell;\") && !name.includes(\"Mythic Trait;\")) {\n          name = name.split(\";\").pop().trim();\n        }\n        if (name) {\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"em\").forEach((node) => {\n        const name = node.textContent.trim().replace(/\\.$/, '').trim();\n        if (name) {\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: node.outerHTML, fullName: node.textContent } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"strong\").forEach((node) => {\n        const name = node.textContent.trim().replace(/\\.$/, '').trim();\n        if (name) {\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: node.outerHTML, fullName: node.textContent } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    if (this.featureBlocks[type].length == 0) {\n      const action = { name: \"Special Traits\", options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n      this.featureBlocks[type].push(action);\n    }\n\n    if (this.featureBlocks[type].length === 0) return;\n\n    let action = this.featureBlocks[type][0];\n\n    dom.childNodes.forEach((node) => {\n      const nodeName = node.textContent.split('.')[0].trim();\n      let switchAction = this.featureBlocks[type].find((act) => nodeName === act.name);\n      if (action.name.includes(\"; Recharges after a Short or Long Rest\")) action.name = action.name.replace(\"; Recharges after a Short or Long Rest\", \"\");\n      if (!switchAction) {\n        switchAction = this.featureBlocks[type].find((act) => node.textContent.startsWith(act.options.fullName));\n      }\n      let startFlag = false;\n      if (switchAction) {\n        action = switchAction;\n        if (action.options.html === \"\") {\n          startFlag = true;\n        }\n      }\n\n      if (node.outerHTML) {\n        let outerHTML = node.outerHTML;\n        if (switchAction && startFlag) {\n          if (action.options.fullName) {\n            outerHTML = outerHTML.replace(action.fullName, \"\");\n          } else {\n            outerHTML = outerHTML.replace(nodeName, \"\");\n          }\n        }\n        const titleDom = new DocumentFragment();\n        $.parseHTML(outerHTML).forEach((element) => {\n          titleDom.appendChild(element);\n        });\n        if (titleDom.textContent.startsWith(\". \")) outerHTML = outerHTML.replace(\". \", \"\");\n        action.options.html += outerHTML;\n      }\n\n      const resistanceMatch = node.textContent.match(/Legendary Resistance \\((\\d+)\\/Day/i);\n      if (resistanceMatch) {\n        this.resources.resistance.value = parseInt(resistanceMatch[1]);\n        this.resources.resistance.max = parseInt(resistanceMatch[1]);\n      }\n    });\n  }\n\n  // possible regular types:\n  // action, reaction, bonus, mythic\n  // this.ddbMonster.source.actionsDescription\n  // this.ddbMonster.source.reactionsDescription\n  // this.ddbMonster.source.bonusActionsDescription\n  // this.ddbMonster.source.mythicActionsDescription\n\n  generateActions(html, type = \"action\") {\n    if (!html || html.trim() == \"\") return;\n\n    this.html[type] = DDBFeatureFactory.replaceRollable(utils.replaceHtmlSpaces(`${html}`))\n      .replace(/<\\/strong> <strong>/g, \"\")\n      .replace(/<\\/strong><strong>/g, \"\")\n      .replace(/&shy;/g, \"\");\n\n    switch (type) {\n      case \"action\":\n      case \"bonus\":\n      case \"mythic\":\n      case \"reaction\":\n        this.#generateActionActions(type);\n        break;\n      case \"lair\":\n        this.#generateLairActions(type);\n        break;\n      case \"legendary\":\n        this.#generateLegendaryActions(type);\n        break;\n      case \"special\":\n        this.#generateSpecialActions(type);\n        break;\n      default:\n        logger.error(`Unknown action parsing type ${this.type}`, { DDBFeatureFactory: this });\n        throw new Error(`Unknown action parsing type ${this.type}`);\n    }\n\n    // some features are duplicated and we parse these first\n    this.features[type].forEach((feature) => {\n      feature.parse();\n    });\n\n    // parse remaining feature blocks\n    this.featureBlocks[type]\n      .filter((feature) => !feature.options.actionCopy)\n      .forEach((feature) => {\n        feature.options[\"hideDescription\"] = this.hideDescription;\n        feature.options[\"updateExisting\"] = this.updateExisting;\n        const ddbFeature = new DDBFeature(feature.name, feature.options);\n        ddbFeature.parse();\n        this.features[type].push(ddbFeature);\n      });\n\n  }\n\n}\n\n","import DICTIONARY from \"../../dictionary.js\";\n\nexport function getAbilityMods(monster) {\n  let abilities = {};\n\n  DICTIONARY.character.abilities.forEach((ability) => {\n    const value = monster.stats.find((stat) => stat.statId === ability.id).value || 0;\n    const mod = CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n    abilities[ability.value] = mod;\n  });\n\n  return abilities;\n\n}\n","export async function newNPC(name) {\n  const options = {\n    temporary: true,\n    displaySheet: false,\n  };\n  const npcClass = await Actor.create({ name, type: \"npc\" }, options);\n  let npc = npcClass.toObject();\n  const flags = {\n    dnd5e: {},\n    monsterMunch: {},\n    ddbimporter: {\n      dndbeyond: {},\n    },\n  };\n  setProperty(npc, \"flags\", flags);\n  // delete npc._id;\n  return npc;\n};\n","import { parseTags } from \"../../lib/DDBTemplateStrings.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\n\n\nexport default class DDBRace {\n\n  constructor(race, compendiumRacialTraits) {\n    this.race = race;\n    this.compendiumRacialTraits = compendiumRacialTraits;\n    this.data = {\n      \"name\": \"\",\n      \"type\": \"feat\",\n      \"system\": {\n        \"description\": {\n          \"value\": \"\",\n          \"chat\": \"\",\n          \"unidentified\": \"\"\n        },\n        \"source\": \"\",\n        \"type\": {\n          \"value\": \"race\",\n        },\n      },\n      \"sort\": 2600000,\n      \"flags\": {\n        \"ddbimporter\": {\n          \"type\": \"race\",\n        },\n        \"obsidian\": {\n          \"source\": {\n            \"type\": \"race\"\n          }\n        },\n      },\n      \"img\": null\n    };\n  }\n\n  buildBase() {\n    this.data.name = (this.race.fullName) ? this.race.fullName.replace(\"’\", \"'\") : this.race.name.replace(\"’\", \"'\");\n    this.data.system.description.value += `${this.race.description}\\n\\n`;\n\n    this.data.flags.ddbimporter = {\n      entityRaceId: this.race.entityRaceId,\n      version: CONFIG.DDBI.version,\n      sourceId: this.race.sources.length > 0 ? [0].sourceId : -1, // is homebrew\n      baseName: (this.race.fullName) ? this.race.fullName.replace(\"’\", \"'\") : this.race.name.replace(\"’\", \"'\")\n    };\n\n    if (this.race.moreDetailsUrl) {\n      this.data.flags.ddbimporter['moreDetailsUrl'] = this.race.moreDetailsUrl;\n    }\n\n    this.data.system.source = DDBHelper.parseSource(this.race);\n\n    if (this.race.isSubRace && this.race.baseRaceName) this.data.system.requirements = this.race.baseRaceName;\n    const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    if (legacyName && this.race.isLegacy) {\n      this.data.name += \" (Legacy)\";\n    }\n    return this.data;\n  }\n\n  async buildRace() {\n    this.buildBase();\n\n    let avatarUrl;\n    let largeAvatarUrl;\n    let portraitAvatarUrl;\n\n    this.data.flags.ddbimporter.baseRaceId = this.race.baseRaceId;\n    this.data.flags.ddbimporter.baseName = this.race.baseName;\n    this.data.flags.ddbimporter.baseRaceName = this.race.baseRaceName;\n    this.data.flags.ddbimporter.fullName = this.race.fullName;\n    this.data.flags.ddbimporter.subRaceShortName = this.race.subRaceShortName;\n    this.data.flags.ddbimporter.isHomebrew = this.race.isHomebrew;\n    this.data.flags.ddbimporter.isLegacy = this.race.isLegacy;\n    this.data.flags.ddbimporter.isSubRace = this.race.isSubRace;\n    this.data.flags.ddbimporter.moreDetailsUrl = this.race.moreDetailsUrl;\n    this.data.flags.ddbimporter.featIds = this.race.featIds;\n\n    if (this.race.portraitAvatarUrl) {\n      const downloadOptions = { type: \"race-portrait\", name: this.race.fullName };\n      portraitAvatarUrl = await FileHelper.getImagePath(this.race.portraitAvatarUrl, downloadOptions);\n      this.data.img = portraitAvatarUrl;\n      this.data.flags.ddbimporter['portraitAvatarUrl'] = this.race.portraitAvatarUrl;\n    }\n\n    if (this.race.avatarUrl) {\n      const downloadOptions = { type: \"race-avatar\", name: this.race.fullName };\n      avatarUrl = await FileHelper.getImagePath(this.race.avatarUrl, downloadOptions);\n      this.data.flags.ddbimporter['avatarUrl'] = this.race.avatarUrl;\n      if (!this.data.img) {\n        this.data.img = avatarUrl;\n      }\n    }\n\n    if (this.race.largeAvatarUrl) {\n      const downloadOptions = { type: \"race-large\", name: this.race.fullName };\n      largeAvatarUrl = await FileHelper.getImagePath(this.race.largeAvatarUrl, downloadOptions);\n      // eslint-disable-next-line require-atomic-updates\n      this.data.flags.ddbimporter['largeAvatarUrl'] = this.race.largeAvatarUrl;\n      if (!this.data.img) {\n        this.data.img = largeAvatarUrl;\n      }\n    }\n\n    const image = (avatarUrl) ? `<img src=\"${avatarUrl}\">\\n\\n` : (largeAvatarUrl) ? `<img src=\"${largeAvatarUrl}\">\\n\\n` : \"\";\n    this.data.system.description.value += image;\n\n    const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"traits\");\n\n    this.race.racialTraits.forEach((f) => {\n      const feature = f.definition;\n      const featureMatch = this.compendiumRacialTraits.find((match) =>\n        hasProperty(match, \"flags.ddbimporter.baseName\") && hasProperty(match, \"flags.ddbimporter.entityRaceId\")\n        && feature.name.replace(\"’\", \"'\") === match.flags.ddbimporter.baseName\n        && match.flags.ddbimporter.entityRaceId === feature.entityRaceId\n      );\n      const title = (featureMatch) ? `<p><b>@Compendium[${compendiumLabel}.${featureMatch._id}]{${feature.name}}</b></p>` : `<p><b>${feature.name}</b></p>`;\n      this.data.system.description.value += `${title}\\n${feature.description}\\n\\n`;\n    });\n\n    this.data.system.description.value = parseTags(this.data.system.description.value);\n\n    return this.data;\n  }\n\n  static async getRacialTraitsLookup(racialTraits, fail = true) {\n    const compendium = CompendiumHelper.getCompendiumType(\"traits\", fail);\n    if (compendium) {\n      const flags = [\"name\", \"flags.ddbimporter.entityRaceId\", \"flags.ddbimporter.baseName\"];\n      const index = await compendium.getIndex({ fields: flags });\n      const traitIndex = await index.filter((i) => racialTraits.some((orig) => i.name === orig.name));\n      return traitIndex;\n    } else {\n      return [];\n    }\n  }\n\n}\n\n","import DICTIONARY from \"../../dictionary.js\";\n\n// is there a spell casting ability?\nexport function hasSpellCastingAbility(spellCastingAbilityId) {\n  return DICTIONARY.character.abilities.find((ability) => ability.id === spellCastingAbilityId) !== undefined;\n}\n\n// convert spellcasting ability id to string used by foundry\nexport function convertSpellCastingAbilityId(spellCastingAbilityId) {\n  return DICTIONARY.character.abilities.find((ability) => ability.id === spellCastingAbilityId).value;\n}\n\n// search through classinfo and determine spellcasting ability\nexport function getSpellCastingAbility(classInfo, checkSubclass = true, onlySubclass = false) {\n  let spellCastingAbility = undefined;\n  if (!onlySubclass && hasSpellCastingAbility(classInfo.definition.spellCastingAbilityId)) {\n    spellCastingAbility = convertSpellCastingAbilityId(classInfo.definition.spellCastingAbilityId);\n  } else if (\n    checkSubclass\n    && classInfo.subclassDefinition\n    && hasSpellCastingAbility(classInfo.subclassDefinition.spellCastingAbilityId)\n  ) {\n    // e.g. Arcane Trickster has spellcasting ID granted here\n    spellCastingAbility = convertSpellCastingAbilityId(classInfo.subclassDefinition.spellCastingAbilityId);\n  } else {\n    // special cases: No spellcaster, but can cast spells like totem barbarian, default to wis\n    spellCastingAbility = \"wis\";\n  }\n  return spellCastingAbility;\n}\n","/**\n * Generates some meta data for a character to use to determine what to do\n * with a spell.\n * We use this like a quick lookup table\n * @param {*} character\n */\nexport function getLookups(character) {\n  // racialTraits\n  let lookups = {\n    race: [],\n    feat: [],\n    class: [],\n    classFeature: [],\n    item: [],\n  };\n  character.race.racialTraits.forEach((trait) => {\n    lookups.race.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n    });\n  });\n\n  character.classes.forEach((playerClass) => {\n    lookups.class.push({\n      id: playerClass.definition.id,\n      name: playerClass.definition.name,\n    });\n\n    if (playerClass.subclassDefinition) {\n      lookups.class.push({\n        id: playerClass.subclassDefinition.id,\n        name: playerClass.subclassDefinition.name,\n      });\n    }\n\n    if (playerClass.classFeatures) {\n      playerClass.classFeatures.forEach((trait) => {\n        lookups.classFeature.push({\n          id: trait.definition.id,\n          name: trait.definition.name,\n          classId: trait.definition.classId,\n          componentId: trait.definition.componentId,\n        });\n      });\n    }\n  });\n\n  character.options.class.forEach((trait) => {\n    lookups.classFeature.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n      componentId: trait.componentId,\n    });\n  });\n\n  character.feats.forEach((trait) => {\n    lookups.feat.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n      componentId: trait.componentId,\n    });\n  });\n\n  character.inventory.forEach((trait) => {\n    lookups.item.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n      limitedUse: trait.limitedUse,\n      equipped: trait.equipped,\n      isAttuned: trait.isAttuned,\n      canAttune: trait.definition.canAttune,\n      canEquip: trait.definition.canEquip,\n    });\n  });\n\n  return lookups;\n}\n","export function getComponents (data) {\n  return {\n    value: data.definition.componentsDescription,\n    vocal: data.definition.components.includes(1),\n    somatic: data.definition.components.includes(2),\n    material: data.definition.components.includes(3),\n    ritual: data.definition.ritual,\n    concentration: data.definition.concentration,\n  };\n}\n\nexport function getMaterials(data) {\n  // this is mainly guessing\n  if (data.definition.componentsDescription && data.definition.componentsDescription.length > 0) {\n    let cost = 0;\n    let matches = data.definition.componentsDescription.toLowerCase().match(/([\\d.,]+)\\s*gp/);\n    if (matches) {\n      cost = parseInt(matches[1].replace(/,|\\./g, \"\"));\n    }\n\n    return {\n      value: data.definition.componentsDescription,\n      consumed: data.definition.componentsDescription.toLowerCase().indexOf(\"consume\") !== -1,\n      cost: cost,\n      supply: 0,\n    };\n  } else {\n    return {\n      value: \"\",\n      consumed: false,\n      cost: 0,\n      supply: 0,\n    };\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\n\n\nfunction classSpell(data, result) {\n  const classPrepMode = utils.findByProperty(\n    DICTIONARY.spell.preparationModes,\n    \"name\",\n    data.flags.ddbimporter.dndbeyond.class\n  );\n  if (data.restriction === \"As Ritual Only\") {\n    result.mode = \"prepared\";\n    result.prepared = false;\n  } else if (!data.usesSpellSlot && data.definition.level !== 0) {\n    // some class features such as druid circle of stars grants x uses of a spell\n    // at the lowest level. for these we add as an innate.\n    result.mode = \"innate\";\n  } else if (data.alwaysPrepared) {\n    result.mode = \"always\";\n  } else if (result.mode && classPrepMode) {\n    result.mode = classPrepMode.value;\n  }\n  // Warlocks should use Pact spells\n  // but lets mark level 0 as regular spells so they show up as cantrips\n  if (result.mode === \"pact\" && data.definition.level === 0) {\n    result.mode = \"prepared\";\n    result.prepared = true;\n  } else if (result.mode === \"pact\" && game.settings.get(\"ddb-importer\", \"pact-spells-prepared\")) {\n    result.prepared = true;\n  }\n  return result;\n}\n\n/**\n * Retrieves the spell preparation mode, depending on the location this spell came from\n *\n */\nexport function getSpellPreparationMode(data) {\n  // default values\n  let result = {\n    mode: \"prepared\",\n    // If always prepared mark as such, if not then check to see if prepared\n    prepared: data.alwaysPrepared || data.prepared,\n  };\n\n  // handle classSpells\n  const featureClass = data.flags.ddbimporter.dndbeyond.lookup === \"classFeature\"\n    && data.flags.ddbimporter.dndbeyond.class;\n\n  if (data.flags.ddbimporter.dndbeyond.lookup === \"classSpell\" || featureClass) {\n    result = classSpell(data, result);\n  } else if (data.flags.ddbimporter.dndbeyond.lookup === \"race\" && data.definition.level !== 0) {\n    // set race spells as innate\n    result.mode = \"innate\";\n    if (data.usesSpellSlot) {\n      // some racial spells allow the spell to also be added to spell lists\n      result.mode = \"always\";\n    }\n  } else if (\n    // Warlock Mystic Arcanum are passed in as Features\n    data.flags.ddbimporter.dndbeyond.lookupName.startsWith(\"Mystic Arcanum\")\n  ) {\n    // these have limited uses (set with getUses())\n    result.mode = \"pact\";\n    result.prepared = false;\n  } else if (data.flags.ddbimporter.dndbeyond.lookup === \"item \" && data.definition.level !== 0) {\n    result.mode = \"prepared\";\n    result.prepared = false;\n  } else {\n    // If spell doesn't use a spell slot and is not a cantrip, mark as always preped\n    let always = !data.usesSpellSlot && data.definition.level !== 0;\n    let ritaulOnly = data.ritualCastingType !== null || data.castOnlyAsRitual; // e.g. Book of ancient secrets & totem barb\n    if (always && ritaulOnly) {\n      // in this case we want the spell to appear in the spell list unprepared\n      result.prepared = false;\n    } else if (always) {\n      // these spells are always prepared, and have a limited use that's\n      // picked up by getUses() later\n      // this was changed to \"atwill\"\n      result.mode = \"atwill\";\n    }\n    if (data.flags.ddbimporter.dndbeyond.lookup === \"classFeature\") {\n      if (data.alwaysPrepared) {\n        result.mode = \"always\";\n      }\n    }\n  }\n\n  return result;\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\nconst DEFAULT_USE = {\n  value: null,\n  max: null,\n  per: \"\",\n};\n\n/**\n * Get the reset condition of the spell, if uses restricted\n * @param {*} data Spell data\n * @param {*} character Character data\n */\nexport function getUses(data, character) {\n  // we check this, as things like items have useage attached to the item, not spell\n  const limitedUse = hasProperty(data, \"flags.ddbimporter.dndbeyond.limitedUse\")\n    ? data.flags.ddbimporter.dndbeyond.limitedUse\n    : data.limitedUse;\n\n  if (!limitedUse) return DEFAULT_USE;\n  const resetType = DICTIONARY.resets.find((reset) => reset.id == limitedUse.resetType);\n  if (!resetType) return DEFAULT_USE;\n\n  if (limitedUse.maxUses || limitedUse.statModifierUsesId || limitedUse.useProficiencyBonus) {\n    let maxUses = (limitedUse.maxUses && limitedUse.maxUses !== -1) ? limitedUse.maxUses : 0;\n\n    if (limitedUse.statModifierUsesId) {\n      const ability = DICTIONARY.character.abilities.find(\n        (ability) => ability.id === limitedUse.statModifierUsesId\n      ).value;\n\n      switch (limitedUse.operator) {\n        case 2: {\n          maxUses *= character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n          break;\n        }\n        case 1:\n        default:\n          maxUses += character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n      }\n    }\n\n    if (limitedUse.useProficiencyBonus) {\n      switch (limitedUse.proficiencyBonusOperator) {\n        case 2: {\n          maxUses *= character.system.attributes.prof;\n          break;\n        }\n        case 1:\n        default:\n          maxUses += character.system.attributes.prof;\n      }\n    }\n\n    const finalMaxUses = (maxUses) ? parseInt(maxUses) : null;\n\n    return {\n      value: (finalMaxUses !== null && finalMaxUses != 0) ? maxUses - limitedUse.numberUsed : null,\n      max: (finalMaxUses != 0) ? finalMaxUses : null,\n      per: resetType ? resetType.value : \"\",\n    };\n  } else {\n    return DEFAULT_USE;\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\n/**\n * Gets the activation information of this spell\n */\nexport function getActivation(data) {\n  // for newer override spells, activation is at higher level\n  const activation = data.activation ? data.activation : data.definition.activation;\n  const activationType = DICTIONARY.spell.activationTypes.find(\n    (type) => type.activationType === activation.activationType\n  );\n  if (activationType && activation.activationTime) {\n    return {\n      type: activationType.value,\n      cost: activation.activationTime,\n      condition: data.definition.castingTimeDescription || \"\",\n    };\n  } else {\n    return {\n      type: \"action\",\n      cost: 1,\n      condition: data.definition.castingTimeDescription || \"\",\n    };\n  }\n}\n","/**\n * Retrieves the spell duration\n */\nexport function getDuration(data) {\n  if (data.definition.duration) {\n    let units = \"\";\n    if (data.definition.duration.durationUnit !== null) {\n      units = data.definition.duration.durationUnit.toLowerCase();\n    } else {\n      units = data.definition.duration.durationType.toLowerCase().substring(0, 4);\n    }\n    return {\n      value: data.definition.duration.durationInterval || \"\",\n      units: units,\n    };\n  } else {\n    return {};\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\n/**\n * Does the spell target creatures?\n * @param {*} data\n */\nlet doesTargetCreature = (data) => {\n  const creature = /a creature you|creature( that)? you can see|interrupt a creature|would strike a creature|creature of your choice|creature or object within range|cause a creature|creature must be within range/gi;\n  const creaturesRange = /(humanoid|monster|creature|target)(s)? (or loose object )?(of your choice )?(that )?(you can see )?within range/gi;\n  return data.definition.description.match(creature) || data.definition.description.match(creaturesRange);\n};\n\n/**\n * Get Target Values\n * Uses regex magic to try and determine the number of creatures affected\n * @param {*} data\n */\nlet getTargetValues = (data) => {\n  const numCreatures = /(?!At Higher Levels.*)(\\w*) (falling )?(willing )?(creature|target|monster|celestial|fiend|fey|corpse(s)? of|humanoid)(?!.*you have animated)/gim;\n  const targets = [...data.definition.description.matchAll(numCreatures)];\n  const targetValues = targets\n    .filter((target) => {\n      const matches = DICTIONARY.numbers.filter((n) => n.natural === target[1].toLowerCase());\n      return Array.isArray(matches) && !!matches.length;\n    })\n    .map((target) => DICTIONARY.numbers.find((n) => n.natural === target[1].toLowerCase()).num);\n\n  if (Array.isArray(targetValues) && !!targetValues.length) {\n    return Math.max(...targetValues);\n  } else {\n    return null;\n  }\n};\n\n/**\n * Spell targets\n */\n// eslint-disable-next-line complexity\nexport function getTarget(data) {\n  const result = {\n    value: null,\n    units: null,\n    type: null,\n    width: null,\n  };\n\n  // if spell is an AOE effect get some details\n  if (data.definition.range.aoeType && data.definition.range.aoeValue) {\n    result.value = parseInt(data.definition.range.aoeValue);\n    result.type = data.definition.range.aoeType.toLowerCase();\n    result.units = \"ft\";\n    return result;\n  }\n\n  // does the spell target a creature?\n  const creatures = doesTargetCreature(data);\n\n  if (creatures) {\n    result.value = getTargetValues(data);\n  }\n\n  switch (data.definition.range.origin) {\n    case \"Touch\":\n      result.units = \"touch\";\n      if (creatures) result.type = \"creature\";\n      break;\n    case \"Self\": {\n      const dmgSpell = data.definition.modifiers.some((mod) => mod.type === \"damage\");\n      result.type = (dmgSpell) ? \"creature\" : \"self\";\n      break;\n    }\n    case \"None\":\n      result.type = \"none\";\n      break;\n    case \"Ranged\":\n      if (creatures) result.type = \"creature\";\n      break;\n    case \"Feet\":\n      if (creatures) result.type = \"creature\";\n      break;\n    case \"Miles\":\n      if (creatures) result.type = \"creature\";\n      break;\n    case \"Sight\":\n    case \"Special\":\n      result.units = \"special\";\n      break;\n    case \"Any\":\n      result.units = \"any\";\n      break;\n    case undefined:\n      result.type = null;\n      break;\n    // no default\n  }\n\n  // wall type spell?\n  if (data.definition.name.includes(\"Wall\")) {\n    result.type = \"wall\";\n    result.units = \"ft\";\n\n    if (data.definition.description.includes(\"ten 10-foot-\")) {\n      result.value = 100;\n    } else {\n      const wallReg = new RegExp(/ (\\d*) feet long/);\n      const matches = data.definition.description.match(wallReg);\n      if (matches) {\n        result.value = parseInt(matches[1]);\n      }\n    }\n    const thickReg = new RegExp(/ (\\d*) foot (thick|wide)/);\n    const thickMatch = data.definition.description.match(thickReg);\n    if (thickMatch && thickMatch[1] > 5) {\n      result.width = parseInt(thickMatch[1]);\n    }\n  }\n\n  return result;\n}\n","/** Spell range */\nexport function getRange(data) {\n  // else lets try and fill in some target details\n  let value = data.definition.range.rangeValue ? data.definition.range.rangeValue : null;\n  let units = \"ft\";\n  let long = null;\n\n  switch (data.definition.range.origin) {\n    case \"Touch\":\n      value = null;\n      units = \"touch\";\n      break;\n    case \"Self\":\n      value = null;\n      units = \"self\";\n      break;\n    case \"None\":\n      units = \"none\";\n      break;\n    case \"Ranged\":\n      units = \"ft\";\n      break;\n    case \"Feet\":\n      units = \"ft\";\n      break;\n    case \"Miles\":\n      units = \"ml\";\n      break;\n    case \"Sight\":\n    case \"Special\":\n      units = \"special\";\n      break;\n    case \"Any\":\n      units = \"any\";\n      break;\n    case undefined:\n      units = null;\n      break;\n    // no default\n  }\n\n  return {\n    value: value,\n    long: long,\n    units: units,\n  };\n}\n","export function getActionType(data) {\n  if (data.definition.requiresSavingThrow && !data.definition.requiresAttackRoll) {\n    return \"save\";\n  }\n\n  if (\n    data.definition.tags.includes(\"Damage\")\n    && data.definition.range.rangeValue\n    && data.definition.range.rangeValue > 0\n  ) {\n    return \"rsak\";\n  }\n\n  if (data.definition.tags.includes(\"Damage\")) {\n    return \"msak\";\n  }\n\n  if (data.definition.tags.includes(\"Healing\")) {\n    return \"heal\";\n  }\n\n  if (data.definition.tags.includes(\"Buff\")) {\n    return \"util\";\n  }\n\n  return \"other\";\n}\n","import utils from \"../../lib/utils.js\";\n\nlet getAlternativeFormula = (data) => {\n  // this might be specificially for Toll the Dead only, but it's better than nothing\n\n  let description = data.definition.description;\n  let match = description.match(/instead[\\w\\s]+(\\d+d\\d+) (\\w+) damage/);\n  if (match) {\n    return match[1];\n  } else {\n    return \"\";\n  }\n};\n\nexport function getDamage(data, spell) {\n  let result = {\n    parts: [],\n    versatile: \"\",\n  };\n  let chatFlavor = [];\n\n  const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n  const spellEffects = getProperty(data, \"flags.ddbimporter.addSpellEffects\");\n  const damageRestrictionHints = game.settings.get(\"ddb-importer\", \"add-damage-restrictions-to-hints\") && !spellEffects;\n  const hintOrRestriction = globalDamageHints || damageRestrictionHints;\n\n  // damage\n  const attacks = data.definition.modifiers.filter((mod) => mod.type === \"damage\");\n  if (attacks.length !== 0) {\n    const cantripBoost = data.definition.level === 0 && !!data.flags.ddbimporter.dndbeyond.cantripBoost;\n    attacks.forEach((attack) => {\n      const restrictionText = attack.restriction && attack.restriction !== \"\" ? attack.restriction : \"\";\n      const restriction = damageRestrictionHints && restrictionText !== \"\" ? restrictionText : \"\";\n      const damageHintText = attack.subType || \"\";\n      if (!damageRestrictionHints && restrictionText !== \"\") {\n        const damageText = attack.die.diceString ? `${attack.die.diceString} - ` : \"\";\n        chatFlavor.push(`[${damageText}${damageHintText}] ${restrictionText}`);\n      }\n      const hintAndRestriction = globalDamageHints && restriction !== \"\" ? \" - \" : \"\";\n      const damageHint = globalDamageHints ? damageHintText : \"\";\n      const damageTag = hintOrRestriction ? `[${damageHint}${hintAndRestriction}${restriction}]` : \"\";\n      const addMod = attack.usePrimaryStat || cantripBoost ? \" + @mod\" : \"\";\n      let diceString = utils.parseDiceString(attack.die.diceString, addMod, damageTag).diceString;\n      if (diceString && diceString.trim() !== \"\" && diceString.trim() !== \"null\") result.parts.push([diceString, attack.subType]);\n    });\n\n    // This is probably just for Toll the dead.\n    const alternativeFormula = getAlternativeFormula(data);\n    result.versatile = cantripBoost && alternativeFormula && alternativeFormula != \"\" ? `${alternativeFormula} + @mod` : alternativeFormula;\n  }\n\n  // healing\n  const heals = data.definition.modifiers.filter((mod) => mod.type === \"bonus\" && mod.subType === \"hit-points\");\n  if (heals.length !== 0) {\n    const healingBonus = (spell.flags.ddbimporter.dndbeyond.healingBoost) ? ` + ${spell.flags.ddbimporter.dndbeyond.healingBoost} + @item.level` : \"\";\n    heals.forEach((heal) => {\n      const restrictionText = heal.restriction && heal.restriction !== \"\" ? heal.restriction : \"\";\n      const restriction = damageRestrictionHints && restrictionText !== \"\" ? restrictionText : \"\";\n      if (!damageRestrictionHints && restrictionText !== \"\") {\n        const damageText = heal.die.diceString ? `${heal.die.diceString} - ` : \"\";\n        chatFlavor.push(`[${damageText}healing] ${restrictionText}`);\n      }\n      const hintAndRestriction = globalDamageHints && restriction !== \"\" ? \" - \" : \"\";\n      const damageHint = globalDamageHints ? \"healing\" : \"\";\n      const damageTag = hintOrRestriction ? `[${damageHint}${hintAndRestriction}${restriction}]` : \"\";\n      const healValue = (heal.die.diceString) ? `${heal.die.diceString}${damageTag}` : heal.die.fixedValue;\n      const diceString = heal.usePrimaryStat\n        ? `${healValue} + @mod${healingBonus}`\n        : `${healValue}${healingBonus}`;\n      if (diceString && diceString.trim() !== \"\" && diceString.trim() !== \"null\") result.parts.push([diceString, \"healing\"]);\n    });\n  }\n\n  return [result, chatFlavor.join(\", \")];\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\nexport function getSave(data) {\n  if (data.definition.requiresSavingThrow && data.definition.saveDcAbilityId) {\n    const saveAbility = DICTIONARY.character.abilities.find((ability) => ability.id === data.definition.saveDcAbilityId)\n      .value;\n    if (data.overrideSaveDc) {\n      return {\n        ability: saveAbility,\n        dc: data.overrideSaveDc,\n        scaling: \"flat\",\n      };\n    } else {\n      return {\n        ability: saveAbility,\n        dc: null,\n        scaling: \"spell\",\n      };\n    }\n  } else {\n    return {\n      ability: \"\",\n      dc: null,\n    };\n  }\n}\n","import logger from \"../../logger.js\";\n\n/**\n * Get the scaling type for a spell mod\n * This is complex logic and is broken out to help simplify\n * @param {*} name\n * @param {*} mod\n */\nlet getScaleType = (name, data, mod) => {\n  // scaleTypes:\n  // SPELLSCALE - typical spells that scale\n  // SPELLLEVEL - these spells have benefits that come in at particular levels e.g. bestow curse, hex. typically  duration changes\n  // CHARACTERLEVEL - typical cantrip based levelling, some expections (eldritch blast)\n  let scaleType = null;\n  const modScaleType = mod.atHigherLevels.scaleType ? mod.atHigherLevels.scaleType : data.definition.scaleType;\n  const isHigherLevelDefinitions\n    = mod.atHigherLevels.higherLevelDefinitions\n    && Array.isArray(mod.atHigherLevels.higherLevelDefinitions)\n    && mod.atHigherLevels.higherLevelDefinitions.length >= 1;\n\n  if (isHigherLevelDefinitions && modScaleType === \"spellscale\") {\n    const definition = mod.atHigherLevels.higherLevelDefinitions[0];\n    if (definition) {\n      scaleType = modScaleType;\n    } else {\n      logger.warn(\"No spell definition found for \" + name);\n    }\n  } else if (modScaleType === \"spellscale\") {\n    // lets handle cases where there is a spellscale type but no damage\n    // increase/ higherleveldefinitins e.g. chain lighting\n    // these type of spells typically increase targets so we set the\n    // scaling to null as we don't want to increase damage when upcast.\n    // this also deals with cases like Ice Knife where the upscale damage\n    // is in one of the two mods provided.\n    // we are capturing this else because we don't want to trigger\n    // an update to scaleType or a warning.\n  } else if (modScaleType === \"characterlevel\") {\n    // lets handle odd cantrips like Eldritch Blast\n    // (in fact this might be the only case)\n    if (mod.atHigherLevels.higherLevelDefinitions.length === 0) {\n      // if this array is empty it does not contain levelling information\n      // the only case found is Eldritch Blast.\n      // this does have some info around multiple beams in\n      // data.atHigherLevels but we ignore this. we will set the scaling\n      // to null as each beam is best modelled by \"casting\" the cantrip again/\n      // pressing the attack/damage buttons in FVTT\n      scaleType = null;\n    } else {\n      scaleType = modScaleType;\n    }\n  } else if (modScaleType === \"spelllevel\") {\n    // spells that have particular level associated benefits\n    // these seem to be duration increases or target increases for\n    // the most part we can't handle these in FVTT right now (we could\n    // in theory create a new spell at a higher level).\n    // some duration upcasting (like bestow curse) affects concentration\n    // for now we will do nothing with these spells.\n    // examples include: hex, shadowblade, magic weapon, bestow curse\n    scaleType = modScaleType;\n  } else {\n    logger.warn(`${name} parse failed: `, modScaleType);\n    scaleType = modScaleType; // if this is new/unknow will use default\n  }\n\n  return scaleType;\n};\n\nexport function getSpellScaling(data) {\n  let baseDamage = \"\";\n  let scaleDamage = \"\";\n  let scaleType = null; // defaults to null, so will be picked up as a None scaling spell.\n\n  // spell scaling\n  if (data.definition.canCastAtHigherLevel) {\n    // iterate over each spell modifier\n    data.definition.modifiers\n      .filter((mod) => mod.type === \"damage\" || (mod.type === \"bonus\" && mod.subType === \"hit-points\"))\n      // eslint-disable-next-line complexity\n      .forEach((mod) => {\n        // if the modifier has a die for damage, lets use the string or fixed value\n        // for the base damage\n        if (mod && mod.die) {\n          if (mod.die.diceString !== null) {\n            baseDamage = mod.die.diceString;\n          }\n\n          if (mod.die.fixedValue !== null && baseDamage === \"\") {\n            baseDamage = mod.die.fixedValue;\n          }\n        }\n\n        // defines some details about higher level casting\n        if (mod.atHigherLevels) {\n          // scaleTypes:\n          // SPELLSCALE - typical spells that scale\n          // SPELLLEVEL - these spells have benefits that come in at particular levels e.g. bestow curse, hex. typically  duration changes\n          // CHARACTERLEVEL - typical cantrip based levelling, some expections (eldritch blast)\n\n          // mod.atHigherLevels.higherLevelDefinitions contains info about the\n          // spells damage die at higher levels, but we can't use this for cantrips as\n          // FVTT use a formula to work out the scaling (ddb has a fixed value structure)\n          const isHigherLevelDefinitions\n            = mod.atHigherLevels.higherLevelDefinitions\n            && Array.isArray(mod.atHigherLevels.higherLevelDefinitions)\n            && mod.atHigherLevels.higherLevelDefinitions.length >= 1;\n\n          // lets handle normal spell leveling first\n          const modScaleType = mod.atHigherLevels.scaleType ? mod.atHigherLevels.scaleType : data.definition.scaleType;\n          if (isHigherLevelDefinitions && modScaleType === \"spellscale\") {\n            const definition = mod.atHigherLevels.higherLevelDefinitions[0];\n            if (definition) {\n              const die = definition.dice ? definition.dice : definition.die ? definition.die : undefined;\n              const modScaleDamage\n                = die?.diceString // if dice string\n                  ? die.diceString // use dice string\n                  : die?.fixedValue // else if fixed value\n                    ? die.fixedValue // use fixed value\n                    : definition.value; // else use value\n\n              // some spells have multiple scaling damage (e.g. Wall of Ice,\n              // Glyph of warding, Acid Arrow, Arcane Hand, Dragon's Breath,\n              // Chromatic Orb, Absorb Elements, Storm Sphere, Spirit Guardians)\n              // it's hard to model most of these in FVTT, and for some it makes\n              // no difference. so...\n              // lets optimistically use the highest\n              // assumptions: these are going to be dice strings, and we don't care\n              // about dice value, just number of dice\n              const diceFormula = /(\\d*)d\\d*/;\n              const existingMatch = diceFormula.exec(scaleDamage);\n              const modMatch = diceFormula.exec(modScaleDamage);\n\n              const modMatchValue = modMatch\n                ? modMatch.length > 1 ? modMatch[1] : modMatch[0]\n                : undefined;\n\n              if (!existingMatch && !modMatch) {\n                scaleDamage = modScaleDamage;\n              } else if (!existingMatch || modMatchValue > existingMatch[1]) {\n                scaleDamage = modScaleDamage;\n              }\n            } else {\n              logger.warn(\"No definition found for \" + data.definition.name);\n            }\n          } else if (isHigherLevelDefinitions && modScaleType === \"characterlevel\") {\n            // cantrip support, important to set to a fixed value if using abilities like potent spellcasting\n            scaleDamage = baseDamage;\n          }\n\n          scaleType = getScaleType(data.definition.name, data, mod);\n        }\n      });\n  }\n\n  switch (scaleType) {\n    case \"characterlevel\":\n      return {\n        mode: \"cantrip\",\n        formula: scaleDamage,\n      };\n    case \"spellscale\":\n      return {\n        mode: \"level\",\n        formula: scaleDamage,\n      };\n    case \"spelllevel\":\n    case null:\n      return {\n        mode: \"none\",\n        formula: \"\",\n      };\n    default:\n      return {\n        mode: \"level\",\n        formula: \"\",\n      };\n  }\n}\n","function getCustomName(data, character) {\n  if (!character || (character && !hasProperty(character, \"flags.ddbimporter.dndbeyond.characterValues\"))) return null;\n  const characterValues = character.flags.ddbimporter.dndbeyond.characterValues;\n  const customValue = characterValues.filter((value) => value.valueId == data.id && value.valueTypeId == data.entityTypeId);\n\n  if (customValue) {\n    const customName = customValue.find((value) => value.typeId == 8);\n\n    if (customName) {\n      data.name = customName.vale;\n      return customName.value;\n    }\n    if (customName) return customName.value;\n  }\n  return null;\n}\n\n\nexport function getName(data, character) {\n  // spell name\n  const customName = getCustomName(data, character);\n  if (customName) {\n    return customName;\n  } else if (data.flags.ddbimporter.dndbeyond.nameOverride !== undefined) {\n    return data.flags.ddbimporter.dndbeyond.nameOverride;\n  } else {\n    return data.definition.name.replace(\"’\", \"'\");\n  }\n}\n","import utils from \"../../lib/utils.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\n\n// Import parsing functions\nimport { getMaterials, getComponents } from \"./components.js\";\nimport { getSpellPreparationMode } from \"./prepartion.js\";\nimport { getUses } from \"./uses.js\";\nimport { getActivation } from \"./activation.js\";\nimport { getDuration } from \"./duration.js\";\nimport { getTarget } from \"./target.js\";\nimport { getRange } from \"./range.js\";\nimport { getActionType } from \"./action.js\";\nimport { getDamage } from \"./damage.js\";\nimport { getSave } from \"./save.js\";\nimport { getSpellScaling } from \"./scaling.js\";\nimport { generateTable } from \"../../muncher/table.js\";\nimport { spellEffectAdjustment } from \"../../effects/specialSpells.js\";\nimport { getName } from \"./name.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\n\nexport async function parseSpell(data, character) {\n  let spell = {\n    type: \"spell\",\n    system: JSON.parse(utils.getTemplate(\"spell\")),\n    name: getName(data, character),\n    flags: {\n      ddbimporter: {\n        id: data.id,\n        definitionId: data.definition.id,\n        entityTypeId: data.entityTypeId,\n        dndbeyond: data.flags.ddbimporter.dndbeyond,\n        originalName: data.definition.name.replace(/’/g, \"'\"),\n        sources: data.definition.sources,\n        tags: data.definition.tags,\n        version: CONFIG.DDBI.version,\n      },\n      midiProperties: {\n        magicdam: true,\n        magiceffect: true,\n      },\n      // \"spellbook-assistant-manager\": data.flags[\"spellbook-assistant-manager\"],\n      \"spell-class-filter-for-5e\": data.flags[\"spell-class-filter-for-5e\"],\n    },\n  };\n\n  const isGeneric = getProperty(data, \"flags.ddbimporter.generic\");\n  const addSpellEffects = isGeneric\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-spell-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-spell-effects\");\n  setProperty(data, \"flags.ddbimporter.addSpellEffects\", addSpellEffects);\n\n  // spell level\n  spell.system.level = data.definition.level;\n\n  // get the spell school\n  const school = DICTIONARY.spell.schools.find((s) => s.name === data.definition.school.toLowerCase());\n  spell.system.school = (school) ? school.id : null;\n\n  /**\n   * Gets the necessary spell components VSM + material\n   */\n  spell.system.components = getComponents(data);\n  spell.system.materials = getMaterials(data);\n  spell.system.preparation = getSpellPreparationMode(data);\n\n  const updateExisting = data.flags.ddbimporter.generic\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\")\n    : false;\n  data.definition.description = generateTable(spell.name, data.definition.description, updateExisting);\n\n  spell.system.description = {\n    value: parseTags(data.definition.description),\n    chat: \"\",\n    unidentified: data.definition.type,\n  };\n\n  spell.system.source = DDBHelper.parseSource(data.definition);\n  spell.system.activation = getActivation(data);\n  spell.system.duration = getDuration(data);\n  spell.system.target = getTarget(data);\n  spell.system.range = getRange(data);\n  spell.system.actionType = getActionType(data);\n  const [damage, chatFlavor] = getDamage(data, spell);\n  spell.system.damage = damage;\n  spell.system.chatFlavor = chatFlavor;\n  spell.system.save = getSave(data);\n  spell.system.scaling = getSpellScaling(data);\n  spell.system.uses = getUses(data, character);\n  spell.system.consume.target = \"\";\n\n  // attach the spell ability id to the spell data so VTT always uses the\n  // correct one, useful if multi-classing and spells have different\n  // casting abilities\n  if (character && character.system.attributes.spellcasting !== data.flags.ddbimporter.dndbeyond.ability) {\n    spell.system.ability = data.flags.ddbimporter.dndbeyond.ability;\n    if (spell.system.save.scaling == \"spell\") {\n      spell.system.save.scaling = data.flags.ddbimporter.dndbeyond.ability;\n    }\n  }\n  if (spell.system.ability === null) spell.system.ability = \"\";\n\n  if (addSpellEffects) {\n    await spellEffectAdjustment(spell);\n    setProperty(spell, \"flags.ddbimporter.effectsApplied\", true);\n  }\n\n  return spell;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\n\nlet getEldritchInvocations = (ddb) => {\n  let damage = \"\";\n  let range = 0;\n\n  const eldritchBlastMods = DDBHelper.filterBaseModifiers(ddb, \"eldritch-blast\").filter((modifier) => modifier.isGranted);\n\n  eldritchBlastMods.forEach((mod) => {\n    switch (mod.subType) {\n      case \"bonus-damage\": {\n        // almost certainly CHA :D\n        const abilityModifierLookup = DICTIONARY.character.abilities.find((ability) => ability.id === mod.statId);\n        if (abilityModifierLookup) {\n          if (damage !== \"\") damage += \" + \";\n          damage += `@abilities.${abilityModifierLookup.value}.mod`;\n        } else if (mod.fixedValue) {\n          if (damage !== \"\") damage += \" + \";\n          damage += `${mod.fixedValue}`;\n        }\n        break;\n      }\n      case \"bonus-range\":\n        range = mod.value;\n        break;\n      default:\n        logger.warn(`Not yet able to process ${mod.subType}, please raise an issue.`);\n    }\n  });\n\n  return {\n    damage: damage,\n    range: range,\n  };\n};\n\nfunction getRangeAdjustmentMultiplier(ddb) {\n  const rangeAdjustmentMods = DDBHelper.filterBaseModifiers(ddb, \"bonus\", \"spell-attack-range-multiplier\").filter((modifier) => modifier.isGranted);\n\n  const multiplier = rangeAdjustmentMods.reduce((current, mod) => {\n    if (Number.isInteger(mod.fixedValue) && mod.fixedValue > current) {\n      current = mod.fixedValue;\n    } else if (Number.isInteger(mod.value) && mod.value > current) {\n      current = mod.value;\n    }\n    return current;\n  }, 1);\n\n  return multiplier;\n}\n\nfunction adjustRange(multiplier, spell) {\n  if (spell.system.actionType === \"rsak\" && Number.isInteger(spell.system.range?.value)) {\n    setProperty(spell, \"system.range.value\", spell.system.range.value * multiplier);\n  }\n  return spell;\n}\n\n/**\n * Some spells we need to fix up or massage because they are modified\n * in interesting ways\n * @param {*} ddb\n * @param {*} items\n */\n/* eslint-disable complexity */\nexport function fixSpells(ddb, items) {\n  // because the effect parsing happens before this, we need to fix some of the spell changes here\n  const usingEffects = ddb === null\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-spell-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-spell-effects\");\n\n  const rangeMultiplier = ddb ? getRangeAdjustmentMultiplier(ddb) : 1;\n\n  items.forEach((spell) => {\n    const name = spell.flags.ddbimporter.originalName || spell.name;\n    logger.debug(`Checking spell ${name} for corrections...`);\n    switch (name) {\n      case \"Melf's Acid Arrow\":\n      case \"Acid Arrow\": {\n        const baseDamage = duplicate(spell.system.damage.parts[0]);\n        const otherDamage = duplicate(spell.system.damage.parts[1]);\n        spell.system.damage.parts = [baseDamage];\n        spell.system.formula = otherDamage[0];\n        break;\n      }\n      // Eldritch Blast is a special little kitten and has some fun Eldritch\n      // Invocations which can adjust it.\n      case \"Eldritch Blast\": {\n        if (!ddb) break;\n        const eldritchBlastMods = getEldritchInvocations(ddb);\n        spell.system.damage.parts[0][0] += \" + \" + eldritchBlastMods[\"damage\"];\n        spell.system.range.value += eldritchBlastMods[\"range\"];\n        break;\n      }\n      case \"Light\": {\n        spell.system.target = { value: 1, width: null, units: \"\", type: \"object\" };\n        break;\n      }\n      case \"Guidance\": {\n        spell.system.target = { value: 1, units: \"\", type: \"creature\" };\n        break;\n      }\n      case \"Aid\": {\n        spell.system.scaling = { mode: \"level\", formula: \"(@item.level - 2) * 5\" };\n        break;\n      }\n      case \"Darkvision\": {\n        spell.system.target.type = \"creature\";\n        break;\n      }\n      // The target/range input data are incorrect on some AOE spells centred\n      // on self.\n      // Range is self with an AoE target of 15 ft cube\n      // i.e. affects all creatures within 5 ft of caster\n      case \"Thunderclap\":\n      case \"Word of Radiance\":\n        spell.system.range = { value: null, units: \"spec\", long: null };\n        spell.system.target = { value: 15, units: \"ft\", type: \"cube\" };\n        break;\n      case \"Thunder Step\":\n        spell.system.range = { value: null, units: \"spec\", long: null };\n        break;\n      case \"Sleep\": {\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"5d8\", \"\"]], versatile: \"\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"level\", formula: \"2d8\" };\n        break;\n      }\n      case \"Ray of Enfeeblement\":\n        spell.system.actionType = \"rsak\";\n        break;\n      case \"Color Spray\": {\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"6d10\", \"\"]], versatile: \"\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"level\", formula: \"2d10\" };\n        break;\n      }\n      case \"Gust of Wind\":\n        spell.system.target = { value: 60, units: \"ft\", type: \"line\", width: 10 };\n        break;\n      case \"Produce Flame\":\n        spell.system.range = { value: 30, units: \"ft\", long: null };\n        break;\n      case \"Hex\": {\n        spell.system.actionType = \"other\";\n        if (usingEffects) {\n          spell.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        }\n        break;\n      }\n      case \"Shadow of Moil\":\n      case \"Cloud of Daggers\":\n      case \"Magic Missile\":\n        spell.system.actionType = \"other\";\n        break;\n      // dnd beyond lists a damage for each type\n      case \"Chaos Bolt\":\n        spell.system.damage = { parts: [[\"2d8\", \"\"], [\"1d6\", \"\"]], versatile: \"\", value: \"\", };\n        break;\n      // dnd beyond lists a damage for each type\n      case \"Chromatic Orb\":\n        spell.system.damage = { parts: [[\"3d8\", \"\"]], versatile: \"\", value: \"\" };\n        spell.system.chatFlavor = \"Choose from Acid, Cold, Fire, Lightning, Poison, Thunder, or Acid\";\n        break;\n      case \"Dragon's Breath\":\n        spell.system.damage = { parts: [[\"3d6\", \"\"]], versatile: \"\", value: \"\" };\n        spell.system.chatFlavor = \"Choose one of Acid, Cold, Fire, Lightning, or Poison.\";\n        break;\n      case \"Hunter's Mark\":\n      case \"Hunter’s Mark\": {\n        spell.system.actionType = \"other\";\n        if (usingEffects) {\n          spell.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        } else {\n          spell.system.damage = { parts: [[\"1d6\", \"\"]], versatile: \"\", value: \"\" };\n        }\n        break;\n      }\n      case \"Call Lightning\": {\n        if (usingEffects) {\n          spell.system.damage = { parts: [], versatile: \"\", value: \"\" };\n          spell.system.save.ability = \"\";\n        }\n        break;\n      }\n      case \"Control Weather\": {\n        spell.system.target.type = \"self\";\n        spell.system.range = { value: 5, units: \"mi\", long: null };\n        break;\n      }\n      case \"Pyrotechnics\":\n        spell.system.target[\"value\"] = 15;\n        break;\n      case \"Absorb Elements\":\n        spell.system.damage = { parts: [[\"1d6\", \"\"]], versatile: \"\", value: \"\" };\n        spell.system.chatFlavor = \"Uses the damage type of the triggered attack: Acid, Cold, Fire, Lightning, or Poison.\";\n        spell.system.target[\"value\"] = 1;\n        break;\n      case \"Booming Blade\":\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"0\", \"thunder\"]], versatile: \"1d8\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"cantrip\", formula: \"1d8\" };\n        spell.system.actionType = \"other\";\n        break;\n      case \"Green-Flame Blade\":\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"0\", \"fire\"]], versatile: \"@mod\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"cantrip\", formula: \"1d8\" };\n        spell.system.actionType = \"other\";\n        break;\n      case \"Toll the Dead\":\n        spell.system.scaling = { mode: \"cantrip\", formula: \"\" };\n        break;\n      case \"Goodberry\":\n        spell.system.damage = { parts: [[\"1\", \"healing\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Flaming Sphere\":\n        spell.system.target[\"value\"] = 2.5;\n        break;\n      case \"Heat Metal\":\n        spell.system.actionType = \"save\";\n        break;\n      case \"Searing Smite\": {\n        if (spell.system.damage.parts.length > 1) {\n          spell.system.formula = spell.system.damage.parts[1][0];\n          spell.system.damage.parts = [spell.system.damage.parts[0]];\n        }\n        spell.system.scaling = { mode: \"level\", formula: \"1d6\" };\n        break;\n      }\n      case \"Spirit Guardians\": {\n        if (!ddb) break;\n        const radiantAlignments = [1, 2, 3, 4, 5, 6, 10, 14];\n        const necroticAlignments = [7, 8, 9, 11];\n        if (radiantAlignments.includes(ddb.character.alignmentId)) {\n          setProperty(spell, \"flags.ddbimporter.damageType\", \"radiant\");\n          spell.system.damage = { parts: [[\"3d8\", \"radiant\"]], versatile: \"\", value: \"\" };\n        } else if (necroticAlignments.includes(ddb.character.alignmentId)) {\n          setProperty(spell, \"flags.ddbimporter.damageType\", \"necrotic\");\n          spell.system.damage = { parts: [[\"3d8\", \"necrotic\"]], versatile: \"\", value: \"\" };\n        }\n        break;\n      }\n      case \"Spike Growth\": {\n        spell.system.actionType = \"other\";\n        break;\n      }\n      case \"Armor of Agathys\": {\n        spell.system.actionType = \"heal\";\n        spell.system.target.type = \"self\";\n        spell.system.damage.parts[0] = [\"5\", \"temphp\"];\n        spell.system.scaling = { mode: \"level\", formula: \"(@item.level - 1) * 5\" };\n        break;\n      }\n      case \"Arms of Hadar\": {\n        spell.system.target.type = \"special\";\n        break;\n      }\n      case \"False Life\": {\n        spell.system.actionType = \"heal\";\n        spell.system.target.type = \"self\";\n        spell.system.damage.parts[0] = [\"1d4 + 4\", \"temphp\"];\n        spell.system.scaling = { mode: \"level\", formula: \"(@item.level - 1) * 5\" };\n        break;\n      }\n      case \"Divine Favor\": {\n        spell.system.actionType = \"util\";\n        spell.system.target.type = \"self\";\n        break;\n      }\n      case \"Bones of the Earth\": {\n        spell.system.target.value = 2.5;\n        break;\n      }\n      case \"Heroes Feast\": {\n        spell.system.duration = { value: 1, units: \"day\" };\n        break;\n      }\n      case \"Heroism\": {\n        spell.system.damage.parts[0] = [\"@mod\", \"temphp\"];\n        break;\n      }\n      case \"Protection from Energy\": {\n        spell.system.target.type = \"creature\";\n        break;\n      }\n      case \"Vitriolic Sphere\": {\n        spell.system.scaling = { mode: \"level\", formula: \"2d4\" };\n        break;\n      }\n      // no default\n    }\n\n    if (rangeMultiplier != 1) {\n      spell = adjustRange(rangeMultiplier, spell);\n    }\n    if (ddb) DDBHelper.addCustomValues(ddb, spell);\n  });\n}\n/* eslint-enable complexity */\n","import { DirectoryPicker } from \"./lib/DirectoryPicker.js\";\n\nconst COMPENDIUMS = [\n  { title: \"Backgrounds\", setting: \"entity-background-compendium\", type: \"Item\" },\n  { title: \"Classes\", setting: \"entity-class-compendium\", type: \"Item\" },\n  { title: \"Subclasses\", setting: \"entity-subclass-compendium\", type: \"Item\" },\n  { title: \"Class Features\", setting: \"entity-feature-compendium\", type: \"Item\" },\n  { title: \"Feats\", setting: \"entity-feat-compendium\", type: \"Item\" },\n  { title: \"Items\", setting: \"entity-item-compendium\", type: \"Item\" },\n  { title: \"Monsters\", setting: \"entity-monster-compendium\", type: \"Actor\" },\n  { title: \"Vehicles\", setting: \"entity-vehicle-compendium\", type: \"Actor\" },\n  { title: \"Races\", setting: \"entity-race-compendium\", type: \"Item\" },\n  { title: \"Racial Traits\", setting: \"entity-trait-compendium\", type: \"Item\" },\n  { title: \"Spells\", setting: \"entity-spell-compendium\", type: \"Item\" },\n  { title: \"Tables\", setting: \"entity-table-compendium\", type: \"RollTable\" },\n  { title: \"Override\", setting: \"entity-override-compendium\", type: \"Item\" },\n  { title: \"Adventures\", setting: \"entity-adventure-compendium\", type: \"Adventure\" },\n];\n\nconst SRD_COMPENDIUM_LOOKUPS = [\n  { type: \"inventory\", name: \"dnd5e.items\" },\n  { type: \"spells\", name: \"dnd5e.spells\" },\n  { type: \"features\", name: \"dnd5e.classfeatures\" },\n  { type: \"races\", name: \"dnd5e.races\" },\n  { type: \"traits\", name: \"dnd5e.races\" },\n  { type: \"features\", name: \"dnd5e.classfeatures\" },\n  { type: \"feat\", name: \"dnd5e.classfeatures\" },\n  { type: \"feats\", name: \"dnd5e.classfeatures\" },\n  { type: \"classes\", name: \"dnd5e.classes\" },\n  { type: \"subclasses\", name: \"dnd5e.subclasses\" },\n  { type: \"weapon\", name: \"dnd5e.items\" },\n  { type: \"consumable\", name: \"dnd5e.items\" },\n  { type: \"tool\", name: \"dnd5e.items\" },\n  { type: \"loot\", name: \"dnd5e.items\" },\n  { type: \"backpack\", name: \"dnd5e.items\" },\n  { type: \"spell\", name: \"dnd5e.spells\" },\n  { type: \"equipment\", name: \"dnd5e.items\" },\n  { type: \"monsters\", name: \"dnd5e.monsters\" },\n  { type: \"monsterfeatures\", name: \"dnd5e.monsterfeatures\" },\n  { type: \"backgrounds\", name: \"dnd5e.backgrounds\" },\n];\n\nconst SUPPORTED_FLAG_GROUPS = [\n  \"dae\",\n  \"maestro\",\n  \"mess\",\n  \"favtab\",\n  \"midi-qol\",\n  \"itemacro\",\n  \"itemmacro\",\n  \"autoanimations\",\n  \"enhancedcombathud\",\n  \"cf\",\n  \"automated-evocations\",\n  \"automated-polymorpher\",\n  \"inventory-plus\",\n  \"obsidian\",\n  \"siftoolkit\",\n  \"advancedspelleffects\",\n  \"gm-notes\",\n  \"greenFlameBladeChoice\",\n  \"boomingBladeChoice\",\n  \"GritNGlory\",\n  \"gng\",\n  \"spellbook-assistant-manager\",\n  \"spell-class-filter-for-5e\",\n  \"forien-unidentified-items\",\n  \"arbron-summoner\",\n];\n\nconst EFFECTS_IGNORE_FLAG_GROUPS = [\n  \"dae\",\n  \"midi-qol\",\n  \"itemacro\",\n  \"itemmacro\",\n];\n\nconst GAME_FOLDER_LOOKUPS = [\n  {\n    type: \"itemSpells\",\n    folder: \"magic-item-spells\",\n    itemType: \"spell\",\n  },\n  {\n    type: \"magicItems\",\n    folder: \"magic-items\",\n    itemType: \"item\",\n  },\n  {\n    type: \"spells\",\n    folder: \"spell\",\n    itemType: \"spell\",\n  },\n  {\n    type: \"monsters\",\n    folder: \"npc\",\n    itemType: \"actor\",\n  },\n];\n\nconst COMPENDIUM_REMOVE_FLAGS = [\n  \"flags.ddbimporter.overrideId\",\n  \"flags.ddbimporter.ignoreItemImport\",\n  \"flags.ddbimporter.retainResourceConsumption\",\n  \"flags.ddbimporter.ignoreIcon\",\n];\n\nconst URLS = {\n  BASE: \"ddb.mrprimate.co.uk\",\n  PROXY: \"https://proxy.ddb.mrprimate.co.uk\",\n  CORS: \"https://images.ddb.mrprimate.co.uk/\",\n  DYNAMIC: \"https://dynamic.ddb.mrprimate.co.uk\",\n};\n\nconst MUNCH_DEFAULTS = [\n  { name: \"munching-policy-update-existing\", needed: true },\n  { name: \"munching-policy-use-srd\", needed: false },\n  { name: \"munching-policy-use-inbuilt-icons\", needed: true },\n  { name: \"munching-policy-use-srd-icons\", needed: false },\n  { name: \"munching-policy-download-images\", needed: true },\n  { name: \"munching-policy-remote-images\", needed: false },\n  { name: \"munching-policy-use-dae-effects\", needed: false },\n  { name: \"munching-policy-hide-description\", needed: false },\n  { name: \"munching-policy-monster-items\", needed: false },\n  { name: \"munching-policy-update-images\", needed: false },\n  { name: \"munching-policy-dae-copy\", needed: false },\n];\n\nconst FILTER_SECTIONS = [\"classes\", \"race\", \"features\", \"actions\", \"inventory\", \"spells\"];\n\nconst COMPANION_SPELLS = [\n  \"Summon Aberration\",\n  \"Summon Beast\",\n  \"Summon Celestial\",\n  \"Summon Construct\",\n  \"Summon Elemental\",\n  \"Summon Fey\",\n  \"Summon Fiend\",\n  \"Summon Shadowspawn\",\n  \"Summon Undead\",\n  \"Summon Draconic Spirit\",\n];\nconst COMPANION_FEATURES = [\n  \"Steel Defender\",\n  \"Artificer Infusions\",\n  \"Summon Wildfire Spirit\",\n  // \"Primal Companion\",\n  \"Drake Companion\",\n  \"Drake Companion: Summon\",\n];\nconst COMPANION_OPTIONS = {\n  \"Primal Companion\": [\n    \"Beast of the Land\",\n    \"Beast of the Sea\",\n    \"Beast of the Sky\",\n  ],\n};\n\nconst DISABLE_FOUNDRY_UPGRADE = {\n  applyFeatures: false,\n  addFeatures: false,\n  promptAddFeatures: false,\n};\n\n// reference to the D&D Beyond popup\nconst POPUPS = {\n  json: null,\n  web: null,\n};\n\nconst MODULE_ID = \"ddb-importer\";\n\nfunction activeUpdate() {\n  const dynamicSync = game.settings.get(MODULE_ID, \"dynamic-sync\");\n  const updateUser = game.settings.get(MODULE_ID, \"dynamic-sync-user\");\n  const gmSyncUser = game.user.isGM && game.user.id == updateUser;\n  return dynamicSync && gmSyncUser;\n}\n\nconst SETTINGS = {\n  MODULE_ID: \"ddb-importer\",\n  FLAG_NAME: \"ddbimporter\",\n  MODULE_NAME: \"D&D Beyond Importer\",\n  COMPENDIUMS: COMPENDIUMS,\n  SRD_COMPENDIUMS: SRD_COMPENDIUM_LOOKUPS,\n  EFFECTS_IGNORE_FLAG_GROUPS,\n  SUPPORTED_FLAG_GROUPS,\n  GAME_FOLDER_LOOKUPS,\n  COMPENDIUM_REMOVE_FLAGS,\n  ADVENTURE_FLAG: \"isDDBAdventure\",\n  ADVENTURE_CSS: \"ddbAdventure\",\n  COMPANIONS: {\n    COMPANION_FEATURES,\n    COMPANION_SPELLS,\n    COMPANION_OPTIONS,\n  },\n  URLS,\n  POPUPS,\n  DISABLE_FOUNDRY_UPGRADE,\n  FILTER_SECTIONS,\n  MUNCH_DEFAULTS,\n  DEFAULT_SETTINGS: {\n    // these settigs are loaded during renderSidebarTab\n    EARLY: {\n      \"log-level\": {\n        name: \"ddb-importer.settings.log-level.name\",\n        hint: \"ddb-importer.settings.log-level.hint\",\n        scope: \"world\",\n        config: true,\n        type: String,\n        choices: {\n          DEBUG: \"DEBUG\",\n          INFO: \"INFO\",\n          WARN: \"WARN\",\n          ERR: \"ERROR \",\n          OFF: \"OFF\",\n        },\n        default: \"INFO\",\n      },\n      \"show-munch-top\": {\n        name: \"ddb-importer.settings.show-munch-top.name\",\n        hint: \"ddb-importer.settings.show-munch-top.hint\",\n        scope: \"world\",\n        config: true,\n        type: Boolean,\n        default: true,\n      },\n      \"patreon-tier\": {\n        scope: \"world\",\n        config: false,\n        type: String,\n        default: null,\n      },\n      \"custom-proxy\": {\n        name: \"ddb-importer.settings.custom-proxy.name\",\n        hint: \"ddb-importer.settings.custom-proxy.hint\",\n        scope: \"world\",\n        config: false,\n        type: Boolean,\n        default: false,\n      },\n      \"encounter-muncher-enabled\": {\n        scope: \"world\",\n        config: false,\n        type: Boolean,\n        default: true,\n      },\n      \"developer-mode\": {\n        scope: \"world\",\n        config: false,\n        type: Boolean,\n        default: false,\n      },\n    },\n    // ready settings\n    READY: {\n      // settings for settings management\n      SETTINGS: {\n        \"auto-create-compendium\": {\n          type: Boolean,\n          default: true,\n        },\n      },\n      COMPENDIUMS: Object.fromEntries(\n        COMPENDIUMS.map((comp) => [comp.setting, {\n          name: comp.title,\n          type: String,\n          default: `DDB ${comp.title}`,\n        }])\n      ),\n      // dir locations\n      DIRECTORIES: {\n        \"image-upload-directory\": {\n          name: \"ddb-importer.settings.image-upload-directory.name\",\n          hint: \"ddb-importer.settings.image-upload-directory.hint\",\n          type: DirectoryPicker.Directory,\n          default: \"[data] ddb-images/characters\",\n        },\n        \"other-image-upload-directory\": {\n          name: \"ddb-importer.settings.other-image-upload-directory.name\",\n          hint: \"ddb-importer.settings.other-image-upload-directory.hint\",\n          type: DirectoryPicker.Directory,\n          default: \"[data] ddb-images/other\",\n        },\n        \"frame-image-upload-directory\": {\n          name: \"ddb-importer.settings.frame-image-upload-directory.name\",\n          hint: \"ddb-importer.settings.frame-image-upload-directory.hint\",\n          type: DirectoryPicker.Directory,\n          default: \"[data] ddb-images/frames\",\n        },\n        \"adventure-import-path\": {\n          name: \"ddb-importer.settings.adventure-import-path.name\",\n          hint: \"ddb-importer.settings.adventure-import-path.hint\",\n          default: \"[data] adventures/import\",\n          type: DirectoryPicker.Directory,\n        },\n        \"adventure-upload-path\": {\n          name: \"ddb-importer.settings.adventure-upload-path.name\",\n          hint: \"ddb-importer.settings.adventure-upload-path.hint\",\n          default: \"[data] ddb-images/adventures\",\n          type: DirectoryPicker.Directory,\n        },\n        \"adventure-misc-path\": {\n          name: \"ddb-importer.settings.adventure-misc-path.name\",\n          hint: \"ddb-importer.settings.adventure-misc-path.hint\",\n          default: \"[data] ddb-images/adventures/misc\",\n          type: DirectoryPicker.Directory,\n        },\n      },\n      UI: {\n        \"monster-link-title\": {\n          name: \"ddb-importer.settings.monster-link-title.name\",\n          hint: \"ddb-importer.settings.monster-link-title.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"character-link-title\": {\n          name: \"ddb-importer.settings.character-link-title.name\",\n          hint: \"ddb-importer.settings.character-link-title.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"link-title-colour-white\": {\n          name: \"ddb-importer.settings.link-title-colour-white.name\",\n          hint: \"ddb-importer.settings.link-title-colour-white.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"show-munch-top\": {\n          name: \"ddb-importer.settings.show-munch-top.name\",\n          hint: \"ddb-importer.settings.show-munch-top.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"show-image-to-players\": {\n          name: \"ddb-importer.settings.show-image-to-players.name\",\n          hint: \"ddb-importer.settings.show-image-to-players.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"show-read-alouds-button\": {\n          name: \"ddb-importer.settings.show-read-alouds-button.name\",\n          hint: \"ddb-importer.settings.show-read-alouds-button.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n      },\n      PERMISSIONS: {\n        \"restrict-to-trusted\": {\n          name: \"ddb-importer.settings.restrict-to-trusted.name\",\n          hint: \"ddb-importer.settings.restrict-to-trusted.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"allow-all-sync\": {\n          name: \"ddb-importer.settings.allow-all-sync.name\",\n          hint: \"ddb-importer.settings.allow-all-sync.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n      },\n      PARSING: {\n        \"use-full-source\": {\n          name: \"ddb-importer.settings.use-full-source.name\",\n          hint: \"ddb-importer.settings.use-full-source.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"use-damage-hints\": {\n          name: \"ddb-importer.settings.use-damage-hints.name\",\n          hint: \"ddb-importer.settings.use-damage-hints.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"add-damage-restrictions-to-hints\": {\n          name: \"ddb-importer.settings.add-damage-restrictions-to-hints.name\",\n          hint: \"ddb-importer.settings.add-damage-restrictions-to-hints.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"embed-macros\": {\n          name: \"ddb-importer.settings.embed-macros.name\",\n          hint: \"ddb-importer.settings.embed-macros.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"add-description-to-chat\": {\n          name: \"ddb-importer.settings.add-description-to-chat.name\",\n          hint: \"ddb-importer.settings.add-description-to-chat.hint\",\n          type: Boolean,\n          default: false,\n        },\n        \"apply-conditions-with-ce\": {\n          name: \"ddb-importer.settings.apply-conditions-with-ce.name\",\n          hint: \"ddb-importer.settings.apply-conditions-with-ce.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n      },\n      // ????\n      MISC: {\n        \"use-webp\": {\n          name: \"ddb-importer.settings.use-webp.name\",\n          hint: \"ddb-importer.settings.use-webp.hint\",\n          type: Boolean,\n          default: false,\n        },\n        \"webp-quality\": {\n          name: \"ddb-importer.settings.webp-quality.name\",\n          hint: \"ddb-importer.settings.webp-quality.hint\",\n          type: Number,\n          default: 0.9,\n        },\n        \"settings-call-muncher\": {\n          type: Boolean,\n          default: false,\n        },\n        \"update-check\": {\n          name: \"ddb-importer.settings.update-check.name\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n      },\n      // character settings\n      CHARACTER: {\n        IMPORT: {\n          \"character-update-policy-use-item-containers\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-create-companions\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"pact-spells-prepared\": {\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-add-character-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-race-damages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-race-speed\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-race-senses\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-race-hp\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-race-spell-bonus\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-effect-class-damages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-class-speed\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-class-senses\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-class-hp\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-class-spell-bonus\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-effect-feat-proficiencies\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-feat-languages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-feat-damages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-feat-speed\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-feat-senses\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-feat-hp\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-feat-spell-bonus\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-effect-feat-ability-bonus\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-background-proficiencies\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-background-languages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-background-damages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-background-speed\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-background-senses\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-background-hp\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-effect-background-spell-bonus\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-effect-background-ability-bonus\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-scalevalue\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-scalevalue-description\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-add-item-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-add-spell-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-generate-ac-feature-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-existing\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-ignore-non-ddb-items\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-override\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-srd\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-name\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-hp\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-hit-die\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-class\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-feat\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-weapon\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-equipment\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-bio\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-spell-use\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-languages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-import-extras\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-inventory\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-currency\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-spell\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-image\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-ddb-spell-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-ddb-generic-item-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-ddb-item-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-inbuilt-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-srd-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-full-description\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-action-and-feature\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-actions-as-features\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-dae-effect-copy\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-active-effect-copy\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-active-effect-character-copy\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n        },\n        SYNC: {\n          \"sync-policy-currency\": {\n            name: \"ddb-importer.settings.sync-policy-currency.name\",\n            hint: \"ddb-importer.settings.sync-policy-currency.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-hitpoints\": {\n            name: \"ddb-importer.settings.sync-policy-hitpoints.name\",\n            hint: \"ddb-importer.settings.sync-policy-hitpoints.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-hitdice\": {\n            name: \"ddb-importer.settings.sync-policy-hitdice.name\",\n            hint: \"ddb-importer.settings.sync-policy-hitdice.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-action-use\": {\n            name: \"ddb-importer.settings.sync-policy-action-use.name\",\n            hint: \"ddb-importer.settings.sync-policy-action-use.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-inspiration\": {\n            name: \"ddb-importer.settings.sync-policy-inspiration.name\",\n            hint: \"ddb-importer.settings.sync-policy-inspiration.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-condition\": {\n            name: \"ddb-importer.settings.sync-policy-condition.name\",\n            hint: \"ddb-importer.settings.sync-policy-condition.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-deathsaves\": {\n            name: \"ddb-importer.settings.sync-policy-deathsaves.name\",\n            hint: \"ddb-importer.settings.sync-policy-deathsaves.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-spells-prepared\": {\n            name: \"ddb-importer.settings.sync-policy-spells-prepared.name\",\n            hint: \"ddb-importer.settings.sync-policy-spells-prepared.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-spells-slots\": {\n            name: \"ddb-importer.settings.sync-policy-spells-slots.name\",\n            hint: \"ddb-importer.settings.sync-policy-spells-slots.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-spells-sync\": {\n            name: \"ddb-importer.settings.sync-policy-spells-sync.name\",\n            hint: \"ddb-importer.settings.sync-policy-spells-sync.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-equipment\": {\n            name: \"ddb-importer.settings.sync-policy-equipment.name\",\n            hint: \"ddb-importer.settings.sync-policy-equipment.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-xp\": {\n            name: \"ddb-importer.settings.sync-policy-xp.name\",\n            hint: \"ddb-importer.settings.sync-policy-xp.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n        },\n        DYNAMIC_SYNC: {\n          \"dynamic-sync-policy-currency\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-hitpoints\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-hitdice\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-action-use\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-inspiration\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-condition\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-deathsaves\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-spells-prepared\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-spells-slots\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-spells-sync\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-equipment\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-xp\": {\n            type: Boolean,\n            default: true,\n          },\n        },\n      },\n      // muncher settings\n      MUNCHER: {\n        COMPENDIUM_FOLDERS: {\n          \"munching-selection-compendium-folders-monster\": {\n            name: \"ddb-importer.settings.munching-selection-compendium-folders-monster.name\",\n            hint: \"ddb-importer.settings.munching-selection-compendium-folders-monster.hint\",\n            config: true,\n            type: String,\n            choices: {\n              TYPE: \"Creature type, e.g. Undead\",\n              CR: \"Challenge Rating\",\n              ALPHA: \"Alphabetical\",\n            },\n            default: \"TYPE\",\n          },\n          \"munching-selection-compendium-folders-spell\": {\n            name: \"ddb-importer.settings.munching-selection-compendium-folders-spell.name\",\n            hint: \"ddb-importer.settings.munching-selection-compendium-folders-spell.hint\",\n            config: true,\n            type: String,\n            choices: {\n              SCHOOL: \"School of Magic\",\n              LEVEL: \"Level\",\n            },\n            default: \"SCHOOL\",\n          },\n          \"munching-selection-compendium-folders-item\": {\n            name: \"ddb-importer.settings.munching-selection-compendium-folders-item.name\",\n            hint: \"ddb-importer.settings.munching-selection-compendium-folders-item.hint\",\n            config: true,\n            type: String,\n            choices: {\n              TYPE: \"Item Type\",\n              RARITY: \"Rarity\",\n            },\n            default: \"TYPE\",\n          },\n        },\n        ADVENTURE: {\n          \"adventure-policy-all-scenes\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"adventure-policy-all-actors-into-world\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"adventure-policy-journal-world-actors\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n        },\n        MUNCH: {\n          \"munching-policy-update-existing\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-srd\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-exclude-legacy\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-legacy-postfix\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-compendium-folders\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-srd-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-srd-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-srd-icons.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-inbuilt-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-inbuilt-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-inbuilt-icons.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-ddb-item-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-ddb-item-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-ddb-item-icons.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-ddb-spell-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-ddb-spell-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-ddb-spell-icons.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-ddb-generic-item-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-ddb-generic-item-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-ddb-generic-item-icons.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-full-token-image\": {\n            name: \"ddb-importer.settings.munching-policy-use-full-token-image.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-full-token-image.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-token-avatar-image\": {\n            name: \"ddb-importer.settings.munching-policy-use-token-avatar-image.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-token-avatar-image.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-remote-images\": {\n            name: \"ddb-importer.settings.munching-policy-remote-images.name\",\n            hint: \"ddb-importer.settings.munching-policy-remote-images.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-add-effects\": {\n            name: \"ddb-importer.settings.munching-policy-add-effects.name\",\n            hint: \"ddb-importer.settings.munching-policy-add-effects.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-add-spell-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-add-monster-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-add-ac-armor-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-download-images\": {\n            name: \"ddb-importer.settings.munching-policy-download-images.name\",\n            hint: \"ddb-importer.settings.munching-policy-download-images.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-dae-copy\": {\n            name: \"ddb-importer.settings.munching-policy-dae-copy.name\",\n            hint: \"ddb-importer.settings.munching-policy-dae-copy.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-dae-effects\": {\n            name: \"ddb-importer.settings.munching-policy-use-dae-effects.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-dae-effects.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-hide-description\": {\n            name: \"ddb-importer.settings.munching-policy-hide-description.name\",\n            hint: \"ddb-importer.settings.munching-policy-hide-description.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-items\": {\n            name: \"ddb-importer.settings.munching-policy-monster-items.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-items.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-homebrew\": {\n            name: \"ddb-importer.settings.munching-policy-monster-homebrew.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-homebrew.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-homebrew-only\": {\n            name: \"ddb-importer.settings.munching-policy-monster-homebrew-only.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-homebrew-only.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-tokenize\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-update-images\": {\n            name: \"ddb-importer.settings.munching-policy-update-images.name\",\n            hint: \"ddb-importer.settings.munching-policy-update-images.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-monster-exact-match\": {\n            name: \"ddb-importer.settings.munching-policy-monster-match.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-match.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-source-filter\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-muncher-sources\": {\n            scope: \"player\",\n            type: Array,\n            default: [],\n          },\n          \"munching-policy-monster-use-item-ac\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-monster-retain-biography\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-set-legendary-resource-bar\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-update-world-monster-update-images\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-update-world-monster-retain-biography\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-monster-bulk-import\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-strip-name\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-item-homebrew\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-item-homebrew-only\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-spell-homebrew\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-spell-homebrew-only\": {\n            type: Boolean,\n            default: false,\n          },\n        },\n        ENCOUNTER: {\n          \"encounter-import-policy-create-scene\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-existing-scene\": {\n            type: Boolean,\n            default: false,\n          },\n          \"encounter-import-policy-missing-characters\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-missing-monsters\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-create-journal\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-roll-monster-initiative\": {\n            type: Boolean,\n            default: false,\n          },\n          \"encounter-import-policy-use-ddb-save\": {\n            type: Boolean,\n            default: false,\n          },\n        },\n      },\n      DYNAMIC_SYNC: {\n        \"dynamic-sync\": {\n          type: Boolean,\n          default: false,\n        },\n        \"dynamic-sync-user\": {\n          type: String,\n          default: \"\",\n        },\n      },\n      PROXY: {\n        \"api-endpoint\": {\n          type: String,\n          default: \"http://localhost:3000\",\n        },\n        \"cors-endpoint\": {\n          type: String,\n          default: URLS.CORS,\n        },\n        \"dynamic-api-endpoint\": {\n          type: String,\n          default: URLS.DYNAMIC,\n        },\n        \"cors-encode\": {\n          type: Boolean,\n          default: false,\n        },\n        \"beta-key\": {\n          type: String,\n          default: \"\",\n        },\n        \"patreon-user\": {\n          type: String,\n          default: null,\n        },\n        \"cobalt-cookie\": {\n          name: \"ddb-importer.settings.cobalt-cookie.name\",\n          hint: \"ddb-importer.settings.cobalt-cookie.hint\",\n          type: String,\n          default: \"\",\n        },\n        \"cobalt-cookie-local\": {\n          name: \"ddb-importer.settings.cobalt-cookie-local.name\",\n          hint: \"ddb-importer.settings.cobalt-cookie-local.hint\",\n          type: Boolean,\n          default: true,\n        },\n        \"campaign-id\": {\n          name: \"ddb-importer.settings.campaign-id.name\",\n          hint: \"ddb-importer.settings.campaign-id.hint\",\n          type: String,\n          default: \"\",\n        },\n      },\n      // dev settings\n      DEV: {\n        \"allow-scene-download\": {\n          type: Boolean,\n          default: false,\n        },\n        \"allow-third-party-scene-download\": {\n          type: Boolean,\n          default: false,\n        },\n        \"third-party-scenes-partial\": {\n          type: Boolean,\n          default: false,\n        },\n        \"third-party-scenes-notes-merged\": {\n          type: Boolean,\n          default: true,\n        },\n        \"allow-note-generation\": {\n          type: Boolean,\n          default: false,\n        },\n        \"debug-json\": {\n          scope: \"player\",\n          type: Boolean,\n          default: false,\n        },\n        \"adventure-muncher-full-config\": {\n          type: Boolean,\n          default: false,\n        },\n      },\n    },\n  },\n  APPLY_GLOBAL_DEFAULTS(settings) {\n    for (const [name, data] of Object.entries(settings)) {\n      settings[name] = mergeObject({ scope: \"world\", config: false }, data);\n    }\n    return settings;\n  },\n  GET_DEFAULT_SETTINGS(early = false) {\n    const clone = foundry.utils.deepClone(SETTINGS.DEFAULT_SETTINGS);\n    const defaultLocationSource = !early && typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge\n      ? \"[forgevtt]\"\n      : \"[data]\";\n\n    for (const [name, data] of Object.entries(clone.READY.DIRECTORIES)) {\n      clone.READY.DIRECTORIES[name].default = data.default.replace(\"[data]\", defaultLocationSource);\n    }\n    let defaultSettings = early\n      ? clone.EARLY\n      : {\n        ...clone.READY.DEV,\n        ...clone.READY.SETTINGS,\n        ...clone.READY.PROXY,\n        ...clone.READY.COMPENDIUMS,\n        ...clone.READY.DIRECTORIES,\n        ...clone.READY.UI,\n        ...clone.READY.PERMISSIONS,\n        ...clone.READY.PARSING,\n        ...clone.READY.MISC,\n        ...clone.READY.CHARACTER.IMPORT,\n        ...clone.READY.CHARACTER.SYNC,\n        ...clone.READY.DYNAMIC_SYNC,\n        ...clone.READY.CHARACTER.DYNAMIC_SYNC,\n        ...clone.READY.MUNCHER.COMPENDIUM_FOLDERS,\n        ...clone.READY.MUNCHER.ADVENTURE,\n        ...clone.READY.MUNCHER.MUNCH,\n        ...clone.READY.MUNCHER.ENCOUNTER,\n      };\n\n    return SETTINGS.APPLY_GLOBAL_DEFAULTS(defaultSettings);\n  },\n  STATUS: {\n    activeUpdate,\n  },\n};\n\nexport default SETTINGS;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are **not** supported.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nexport function isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n//     \"abilities\": {\n// \"str\": {\n//   \"value\": 27,\n//   \"proficient\": 0,\n//   \"min\": 3,\n//   \"mod\": 8,\n//   \"save\": 8,\n//   \"prof\": 0,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 23\n// },\n// \"dex\": {\n//   \"value\": 14,\n//   \"proficient\": 1,\n//   \"min\": 3,\n//   \"mod\": 2,\n//   \"save\": 9,\n//   \"prof\": 7,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 17\n// },\n/**\n * Retrieves character abilities, including proficiency on saving throws\n */\nDDBMonster.prototype._generateAbilities = function _generateAbilities() {\n  // go through every ability\n  DICTIONARY.character.abilities.forEach((ability) => {\n    const value = this.source.stats.find((stat) => stat.statId === ability.id).value || 0;\n    const proficient = this.source.savingThrows.find((stat) => stat.statId === ability.id) ? 1 : 0;\n    const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n    const mod = CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n    this.npc.system.abilities[ability.value]['value'] = value;\n    this.npc.system.abilities[ability.value]['proficient'] = proficient;\n    this.npc.system.abilities[ability.value]['mod'] = mod;\n\n    if (proficient) {\n      this.npc.system.abilities[ability.value]['prof'] = proficiencyBonus;\n      this.npc.system.abilities[ability.value]['saveBonus'] = this.source.savingThrows.find((stat) => stat.statId === ability.id).bonusModifier || 0;\n      this.npc.system.abilities[ability.value]['save'] = mod + proficiencyBonus + this.npc.system.abilities[ability.value]['saveBonus'];\n    }\n\n    this.npc.system.abilities[ability.value]['dc'] = mod + proficiencyBonus + 8;\n  });\n\n  this.abilities = this.npc.system.abilities;\n};\n","import logger from \"../../logger.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport { loadPassedItemsFromCompendium } from \"../../muncher/import.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype.BAD_AC_MONSTERS = [\n  \"arkhan the cruel\"\n];\n\nDDBMonster.prototype._generateAC = async function _generateAC() {\n\n  const ac = {\n    \"flat\": this.source.armorClass,\n    \"calc\": \"\",\n    \"formula\": \"\",\n    \"label\": this.source.armorClassDescription ? this.source.armorClassDescription.replace(\"(\", \"\").replace(\")\", \"\") : \"\",\n  };\n\n  let flatAC = true;\n\n  const stat = this.source.stats.find((stat) => stat.statId === 2).value || 10;\n  const dexBonus = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n\n  let acItems = [];\n\n  const lowerDescription = this.source.armorClassDescription\n    ? this.source.armorClassDescription.toLowerCase()\n    : \"\";\n  const descriptionItems = this.source.armorClassDescription\n    ? lowerDescription.replace(\"(\", \"\").replace(\")\", \"\")\n      .split(\";\")[0]\n      .split(\",\").map((item) => item.trim())\n    : [];\n\n  // arkhan the cruel has Armor Class 23 (obsidian flint dragon plate, shield)\n\n  // archmage 12 (15 with mage armor)\n\n  // Jarlaxle Baenre 24 (+3 leather armor, Suave Defense)\n  // Suave Defense. While Jarlaxle is wearing light or no armor and wielding no shield, his AC includes his Charisma modifier.\n\n  // Eternal flame guardian 17 (breastplate, shield; 15 while using a crossbow)\n\n  let itemsToCheck = [];\n  if (descriptionItems.length > 0) {\n    descriptionItems.forEach((item) => {\n      if (item == \"natural\" || item == \"natural armor\") {\n        ac.calc = \"natural\";\n        flatAC = false;\n\n        if (lowerDescription.includes(\"shield\")) ac.flat = parseInt(ac.flat) - 2;\n        if (lowerDescription.includes(\"ring of protection\")) ac.flat = parseInt(ac.flat) - 1;\n        if (lowerDescription.includes(\"cloak of protection\")) ac.flat = parseInt(ac.flat) - 1;\n        if (lowerDescription.includes(\"+1\") || lowerDescription.includes(\"+ 1\")) ac.flat = parseInt(ac.flat) - 1;\n        if (lowerDescription.includes(\"+2\") || lowerDescription.includes(\"+ 2\")) ac.flat = parseInt(ac.flat) - 2;\n        if (lowerDescription.includes(\"+3\") || lowerDescription.includes(\"+ 3\")) ac.flat = parseInt(ac.flat) - 3;\n      } else if (!item.includes(\"with mage armor\")) {\n        if (item === \"leather armor\") {\n          item = \"leather\";\n        } else if (item === \"hide armor\") {\n          item = \"hide\";\n        } else if (item.startsWith(\"+\")) {\n          const bonusRegex = /(\\+\\d+)(?:\\s+)(.*)/;\n          const matches = item.match(bonusRegex);\n          if (matches) {\n            item = `${matches[2]}, ${matches[1]}`;\n          }\n        }\n        // const type = item.includes(\"ring\") || item.includes(\"cloak\") ? \"trinket\" : \"equipment\";\n        itemsToCheck.push({ name: item, type: \"equipment\", flags: {}, system: { equipped: true } });\n      };\n    });\n  }\n\n  logger.debug(\"Checking for items\", itemsToCheck);\n  const compendium = await CompendiumHelper.getCompendiumType(\"inventory\");\n  const unAttunedItems = await loadPassedItemsFromCompendium(compendium, itemsToCheck, \"inventory\", { monsterMatch: true });\n  const attunedItems = unAttunedItems.map((item) => {\n    if (item.system.attunement === 1) item.system.attunement = 2;\n    return item;\n  });\n\n  logger.debug(\"Found items\", { unAttunedItems, attunedItems });\n  const allItemsMatched = attunedItems.length > 0 && attunedItems.length == itemsToCheck.length;\n  const badACMonster = this.BAD_AC_MONSTERS.includes(this.source.name.toLowerCase());\n\n  if (allItemsMatched && this.useItemAC && ac.calc !== \"natural\" && !badACMonster) {\n    ac.flat = null;\n    ac.calc = \"default\";\n    ac.formula = \"\";\n    flatAC = false;\n  } else if (!this.useItemAC && ac.calc !== \"natural\") {\n    // default monsters with no ac equipment to natural\n    ac.calc = \"natural\";\n    flatAC = false;\n  }\n\n  this.ac = {\n    ac,\n    flatAC,\n    acItems,\n    dexBonus,\n    ddbItems: this.useItemAC ? attunedItems : [], // only add items if we are told too\n    attunedItems,\n    allItemsMatched,\n    badACMonster,\n  };\n\n  logger.debug(`${this.source.name} ac calcs`, this.ac);\n  this.npc.system.attributes.ac = ac;\n  this.npc.flags.ddbimporter.flatAC = flatAC;\n  if (this.useItemAC) this.items.push(...attunedItems);\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype.getAdjustmentsConfig = function getAdjustmentsConfig(type) {\n  const damageAdjustments = CONFIG.DDB.damageAdjustments;\n\n  switch (type) {\n    case \"resistances\":\n      return damageAdjustments.filter((adj) => adj.type == 1);\n    case \"immunities\":\n      return damageAdjustments.filter((adj) => adj.type == 2);\n    case \"vulnerabilities\":\n      return damageAdjustments.filter((adj) => adj.type == 3);\n    case \"conditions\":\n      return CONFIG.DDB.conditions.map((condition) => {\n        return {\n          id: condition.definition.id,\n          name: condition.definition.name,\n          type: condition.definition.type,\n          slug: condition.definition.slug,\n        };\n      });\n    default:\n      return null;\n  }\n};\n\nDDBMonster.prototype.getDamageAdjustments = function getDamageAdjustments(type) {\n  const config = this.getAdjustmentsConfig(type);\n\n  let values = [];\n  let custom = [];\n\n  const damageTypes = DICTIONARY.actions.damageType.filter((d) => d.name !== null).map((d) => d.name);\n\n  this.source.damageAdjustments.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    if (adjustment && damageTypes.includes(adjustment.name.toLowerCase())) {\n      values.push(adjustment.name.toLowerCase());\n    } else if (adjustment && adjustment.slug === \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks\") {\n      values.push(\"physical\");\n    } else if (adjustment) {\n      const midiQolInstalled = game.modules.get(\"midi-qol\")?.active;\n      if (midiQolInstalled) {\n        if (adjustment.name.toLowerCase().includes(\"silvered\")) {\n          values.push(\"silver\");\n        } else if (adjustment.name.toLowerCase().includes(\"adamantine\")) {\n          values.push(\"adamant\");\n        } else if (adjustment.slug === \"damage-from-spells\") {\n          values.push(\"spell\");\n        } else {\n          custom.push(adjustment.name);\n        }\n      } else {\n        custom.push(adjustment.name);\n      }\n    }\n  });\n\n  const adjustments = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n\n  return adjustments;\n};\n\nDDBMonster.prototype._generateDamageImmunities = function _generateDamageImmunities() {\n  this.npc.system.traits.di = this.getDamageAdjustments(\"immunities\");\n};\n\nDDBMonster.prototype._generateDamageResistances = function _generateDamageResistances() {\n  this.npc.system.traits.dr = this.getDamageAdjustments(\"resistances\");\n};\n\nDDBMonster.prototype._generateDamageVulnerabilities = function _generateDamageVulnerabilities() {\n  this.npc.system.traits.dv = this.getDamageAdjustments(\"vulnerabilities\");\n};\n\nDDBMonster.prototype._generateConditionImmunities = function _generateConditionImmunities() {\n  const config = this.getAdjustmentsConfig(\"conditions\");\n\n  let values = [];\n  let custom = [];\n\n  this.source.conditionImmunities.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    const valueAdjustment = DICTIONARY.conditions.find((condition) => condition.label.toLowerCase() == adjustment.name.toLowerCase());\n    if (adjustment && valueAdjustment) {\n      values.push(valueAdjustment.foundry);\n    } else if (adjustment) {\n      custom.push(adjustment.name);\n    }\n  });\n\n  this.npc.system.traits.ci = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n\n};\n","// \"creatureSizes\": [{\n//   \"id\": 2,\n//   \"entityTypeId\": 127108918,\n//   \"name\": \"Tiny\",\n//   \"weightType\": 1\n// }, {\n\n\n//   \"traits\": {\n//     \"size\": \"grg\",\n\n\n//     \"sizeId\": 7,\n\nimport DICTIONARY from '../../dictionary.js';\nimport logger from '../../logger.js';\nimport DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype.getSizeFromId = function getSizeFromId(sizeId) {\n  const size = CONFIG.DDB.creatureSizes.find((s) => s.id == sizeId).name;\n  const sizeData = DICTIONARY.sizes.find((s) => size == s.name);\n\n  if (!sizeData) {\n    logger.warn(`No size found for, using medium`, size);\n    return { name: \"Medium\", value: \"med\", size: 1 };\n  }\n  return sizeData;\n};\n\nDDBMonster.prototype._generateSize = function _generateSize () {\n  const sizeData = this.getSizeFromId(this.source.sizeId);\n  const token = {\n    scale: sizeData.size >= 1 ? 1 : sizeData.size,\n    value: sizeData.size >= 1 ? sizeData.size : 1,\n  };\n\n  this.npc.system.traits.size = sizeData.value;\n  this.npc.prototypeToken.width = token.value;\n  this.npc.prototypeToken.height = token.value;\n  this.npc.prototypeToken.scale = token.scale;\n\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\n//   \"value\": \"\",\n//   \"subtype\": \"\",\n//   \"swarm\": {\n//     \"isSwarm\": false,\n//     \"size\": \"\"\n//   },\n//   \"custom\": \"\"\n\n\nDDBMonster.prototype._generateType = function _generateType() {\n\n  if (this.source.swarm) {\n    // result.swarm.isSwarm = true;\n    // result.swarm.size = getSizeFromId(monster.swarm.sizeId).value;\n    this.npc.system.details.type.swarm = this.getSizeFromId(this.source.swarm.sizeId).value;\n  }\n\n  const type = CONFIG.DDB.monsterTypes.find((c) => this.source.typeId == c.id);\n  if (!type) {\n    this.npc.system.details.type.custom = \"Unknown\";\n  }\n\n  const typeName = type.name.toLowerCase();\n\n  if (CONFIG.DND5E.creatureTypes[typeName]) this.npc.system.details.type.value = typeName;\n\n  this.npc.system.details.type.subtype = CONFIG.DDB.monsterSubTypes\n    .filter((c) => this.source.subTypes.includes(c.id))\n    .map((c) => c.name)\n    .join(\", \");\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n// skills: [\n//   { skillId: 5, value: 9, additionalBonus: null },\n//   { skillId: 14, value: 9, additionalBonus: null }\n// ],\n\n// \"skills\": [{\n//   \"skillId\": 7, # History\n//   \"value\": 8,\n//   \"additionalBonus\": null\n// }, {\n//   \"skillId\": 14, # Perception\n//   \"value\": 6,\n//   \"additionalBonus\": null\n// }],\n\n// \"ste\": {\n//   \"value\": 1,\n//   \"ability\": \"dex\",\n//   \"bonus\": 0,\n//   \"mod\": 2,\n//   \"passive\": 19,\n//   \"prof\": 7,\n//   \"total\": 9\n// },\nDDBMonster.prototype._generateSkills = function _generateSkills () {\n  const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n  const validSkills = DICTIONARY.character.skills.map((skill) => skill.name);\n\n  const keys = Object.keys(this.npc.system.skills);\n  keys\n    .filter((key) => validSkills.includes(key))\n    .forEach((key) => {\n      let skill = this.npc.system.skills[key];\n      const ability = DICTIONARY.character.abilities.find((ab) => ab.value === skill.ability);\n      const stat = this.source.stats.find((stat) => stat.statId === ability.id).value || 10;\n      const mod = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n      const lookupSkill = DICTIONARY.character.skills.find((s) => s.name == key);\n      const monsterSkill = this.source.skills.find((s) => s.skillId == lookupSkill.valueId);\n\n      this.npc.system.skills[key].mod = mod;\n\n      const calculatedScore = proficiencyBonus + mod;\n\n      if (monsterSkill) {\n        this.npc.system.skills[key].value = 1;\n        this.npc.system.skills[key].prof = proficiencyBonus;\n        this.npc.system.skills[key].bonus = monsterSkill.additionalBonus || 0;\n      }\n\n      this.npc.system.skills[key].total = calculatedScore;\n      this.npc.system.skills[key].passive = 10 + calculatedScore;\n\n      if (monsterSkill && monsterSkill.value != calculatedScore) {\n        if (monsterSkill.value == calculatedScore + proficiencyBonus) {\n          this.npc.system.skills[key].passive += proficiencyBonus;\n          this.npc.system.skills[key].value = 2;\n          this.npc.system.skills[key].total += proficiencyBonus;\n          this.npc.system.skills[key].prof += proficiencyBonus;\n          this.npc.system.skills[key].bonus = 0;\n        } else if (monsterSkill.value > calculatedScore + proficiencyBonus) {\n          this.npc.system.skills[key].passive += proficiencyBonus;\n          this.npc.system.skills[key].value = 2;\n          this.npc.system.skills[key].total += proficiencyBonus;\n          this.npc.system.skills[key].prof += proficiencyBonus;\n        }\n      }\n\n    });\n\n  return this.npc.system.skills;\n};\n\n\nDDBMonster.prototype._generateSkillsHTML = function _generateSkillsHTML () {\n  const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n  //  \"skillsHtml\": \"History + 12, Perception + 10\"\n  const skillsHTML = this.source.skillsHtml.split(',');\n  const skillsMaps = skillsHTML.filter((str) => str != '').map((str) => {\n    const skillMatch = str.match(/(\\w+\\s*\\w*\\s*\\w*)(?:\\s*)([+-])(?:\\s*)(\\d+)/);\n    let result = {};\n    if (skillMatch) {\n      result = {\n        name: skillMatch[1].trim(),\n        value: skillMatch[2] + skillMatch[3],\n      };\n    } else {\n      logger.error(`Skill Parsing failed for ${this.source.name}`);\n      logger.debug(skillsHTML);\n      logger.debug(str);\n      logger.debug(skillMatch);\n    }\n    return result;\n  });\n\n  const keys = Object.keys(this.npc.system.skills);\n  const validSkills = DICTIONARY.character.skills.map((skill) => skill.name);\n  keys\n    .filter((key) => validSkills.includes(key))\n    .forEach((key) => {\n      let skill = this.npc.system.skills[key];\n      const ability = DICTIONARY.character.abilities.find((ab) => ab.value === skill.ability);\n      const stat = this.source.stats.find((stat) => stat.statId === ability.id).value || 10;\n      const mod = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n      const lookupSkill = DICTIONARY.character.skills.find((s) => s.name == key);\n      const monsterSkill = this.source.skills.find((s) => s.skillId == lookupSkill.valueId);\n\n      this.npc.system.skills[key].mod = mod;\n\n      if (monsterSkill) {\n        this.npc.system.skills[key].value = 1;\n        this.npc.system.skills[key].prof = proficiencyBonus;\n        this.npc.system.skills[key].bonus = monsterSkill.additionalBonus || 0;\n      }\n      const calculatedScore = this.npc.system.skills[key].prof + mod + this.npc.system.skills[key].bonus;\n      this.npc.system.skills[key].total = calculatedScore;\n      this.npc.system.skills[key].passive = 10 + calculatedScore;\n\n      const htmlSkill = skillsMaps.find((skl) => skl.name == lookupSkill.label);\n\n      if (htmlSkill) {\n        if (htmlSkill.value > calculatedScore) {\n          this.npc.system.skills[key].passive += proficiencyBonus;\n          this.npc.system.skills[key].value = 2;\n          this.npc.system.skills[key].total += proficiencyBonus;\n          this.npc.system.skills[key].prof += proficiencyBonus;\n        }\n      }\n\n    });\n\n  return this.npc.system.skills;\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype.getTextSenses = function getTextSenses() {\n  return this.source.sensesHtml;\n};\n\n//   \"senses\": [{\n//   \"id\": 1,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Blindsight\"\n// }, {\n//   \"id\": 2,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Darkvision\"\n// }, {\n//   \"id\": 3,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Tremorsense\"\n// }, {\n//   \"id\": 4,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Truesight\"\n// }, {\n//   \"id\": 5,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Unknown\"\n// }],\n\nDDBMonster.prototype._generateTokenSenses = function _generateTokenSenses() {\n  const senseLookup = CONFIG.DDB.senses;\n\n  this.source.senses.forEach((sense) => {\n    const senseMatch = senseLookup.find((l) => l.id == sense.senseId);\n    if (senseMatch && sense.notes) {\n      const senseType = DICTIONARY.senseMap[senseMatch.name.toLowerCase()];\n      const rangeMatch = sense.notes.trim().match(/^(\\d+)/);\n      if (rangeMatch) {\n        const value = parseInt(rangeMatch[1]);\n        if (value > 0 && value > this.npc.prototypeToken.sight.range && hasProperty(CONFIG.Canvas.visionModes, senseType)) {\n          setProperty(this.npc.prototypeToken.sight, \"visionMode\", senseType);\n          setProperty(this.npc.prototypeToken.sight, \"range\", value);\n          this.npc.prototypeToken.sight = mergeObject(this.npc.prototypeToken.sight, CONFIG.Canvas.visionModes[senseType].vision.defaults);\n        }\n        if (value > 0 && hasProperty(DICTIONARY.detectionMap, senseMatch.name.toLowerCase())) {\n          const detectionMode = {\n            id: DICTIONARY.detectionMap[senseMatch.name.toLowerCase()],\n            range: value,\n            enabled: true,\n          };\n\n          // only add duplicate modes if they don't exist\n          if (!this.npc.prototypeToken.detectionModes.some((mode) => mode.id === detectionMode.id)) {\n            this.npc.prototypeToken.detectionModes.push(detectionMode);\n          }\n        }\n      }\n    }\n  });\n};\n\n\nDDBMonster.prototype._generateSenses = function _generateSenses() {\n  let senses = {\n    darkvision: 0,\n    blindsight: 0,\n    tremorsense: 0,\n    truesight: 0,\n    units: \"ft\",\n    special: \"\"\n  };\n  const senseLookup = CONFIG.DDB.senses;\n\n  this.source.senses.forEach((sense) => {\n    const senseMatch = senseLookup.find((l) => l.id == sense.senseId);\n    if (senseMatch && sense.notes && senseMatch.name.toLowerCase() in senses) {\n      const rangeMatch = sense.notes.trim().match(/^(\\d+)/);\n      if (rangeMatch) {\n        senses[senseMatch.name.toLowerCase()] = parseInt(rangeMatch[1]);\n      } else {\n        senses.special += `${senseMatch.name}: ${sense.notes}; `;\n      }\n    } else {\n      senses.special += `${senseMatch.name}: ${sense.notes}; `;\n    }\n  });\n\n  this.npc.system.attributes.senses = senses;\n\n};\n\n// \"senses\": [\n//   {\n//       \"senseId\": 1,\n//       \"notes\": \"60 ft.\"\n//   },\n//   {\n//       \"senseId\": 2,\n//       \"notes\": \"120 ft.\"\n//   }\n// ],\n\n// \"senses\": [{\n//   \"senseId\": 1,\n//   \"notes\": \" 60 ft. (blind beyond this radius)\"\n// }],\n\n","import DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype._generateEnvironments = function _generateEnvironments() {\n  this.npc.system.details.environment = this.source.environments.filter((env) =>\n    CONFIG.DDB.environments.some((c) => env == c.id)\n  ).map((env) => {\n    return CONFIG.DDB.environments.find((c) => env == c.id).name;\n  }).join(\", \");\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n//      \"languages\": {\n//   \"value\": [\n//     \"common\",\n//     \"draconic\"\n//   ],\n//   \"custom\": \"\"\n// },\n\nDDBMonster.prototype._generateLanguages = function _generateLanguages () {\n  const config = CONFIG.DDB.languages;\n\n  let values = [];\n  let custom = [];\n\n  this.source.languages.forEach((lng) => {\n    const language = config.find((cfg) => lng.languageId == cfg.id);\n    const foundryLanguage = DICTIONARY.character.languages.find((lang) => lang.name == language.name);\n    if (foundryLanguage && lng.notes == '') {\n      values.push(foundryLanguage.value);\n    } else if (language) {\n      const notes = (lng.notes !== '') ? ` ${lng.notes}` : \"\";\n      custom.push(language.name + notes);\n    }\n  });\n\n  if (this.source.languageNote && !this.source.languageNote.includes(\"--\")) custom.push(this.source.languageNote);\n\n  this.npc.system.traits.languages = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\n// \"hp\": {\n//   \"value\": 367,\n//   \"min\": 0,\n//   \"max\": 367,\n//   \"temp\": 0,\n//   \"tempmax\": 0,\n//   \"formula\": \"21d20 + 147\"\n// },\n\n// \"hitPointDice\": {\n//   \"diceCount\": 21,\n//   \"diceValue\": 20,\n//   \"diceMultiplier\": 0,\n//   \"fixedValue\": 147,\n//   \"diceString\": \"21d20 + 147\"\n// },\n\nDDBMonster.prototype._generateHitPoints = function _generateHitPoints () {\n  this.npc.system.attributes.hp = {\n    value: this.source.averageHitPoints - (this.removedHitPoints ?? 0),\n    min: 0,\n    max: this.source.averageHitPoints,\n    temp: this.temporaryHitPoints ?? 0,\n    tempmax: 0,\n    formula: this.source.hitPointDice.diceString,\n  };\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\n// \"movements\": [\n//   {\n//     \"movementId\": 1,\n//     \"speed\": 40,\n//     \"notes\": null\n// },\n// {\n//     \"movementId\": 4,\n//     \"speed\": 80,\n//     \"notes\": null\n// },\n// {\n//     \"movementId\": 5,\n//     \"speed\": 40,\n//     \"notes\": null\n// }\n// ],\n\n// \"speed\": {\n//   \"value\": \"40 ft.\",\n//   \"special\": \"Fly 80 ft., Swim 40 ft.\"\n// },\nDDBMonster.prototype._generateMovement = function () {\n  let special = [];\n\n  this.npc.system.attributes.movement.units = \"ft\";\n\n  this.source.movements.forEach((monsterMovement) => {\n    const movement = CONFIG.DDB.movements.find((mv) => mv.id == monsterMovement.movementId);\n    this.npc.system.attributes.movement[movement.name.toLowerCase()] = monsterMovement.speed;\n\n    if (monsterMovement.notes && monsterMovement.notes.toLowerCase().includes('hover')) {\n      this.npc.system.attributes.movement.hover = true;\n    }\n\n    if (monsterMovement.notes?.trim() !== \"\") {\n      const specialMovement = `${monsterMovement.speed}ft ${movement.description} (${monsterMovement.notes})`;\n      special.push(specialMovement);\n    }\n  });\n\n  this.movement = {\n    movement: this.npc.system.attributes.movement,\n    special,\n  };\n\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype._generateSource = function _generateSource() {\n  const fullSource = game.settings.get(\"ddb-importer\", \"use-full-source\");\n  const sourceObject = CONFIG.DDB.sources.find((cnf) => cnf.id == this.source.sourceId);\n  const sourceBook = (sourceObject)\n    ? (fullSource) ? sourceObject.description : sourceObject.name\n    : \"Homebrew\";\n  const page = (this.source.sourcePageNumber) ? ` pg ${this.source.sourcePageNumber}` : \"\";\n  this.npc.system.details.source = `${sourceBook}${page}`;\n};\n","import logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n// extracts various attacks and features (not spells)\n// generates and extra descriptions found in these fields\n// feature parsing is handled in a separate class, the DDBFeatureFactory\n// that class breaks down the html into possible actions which it passes to the\n// DDBFeature class which tries to parse the feature for details\nDDBMonster.prototype._generateFeatures = function () {\n\n  this.featureFactory.generateActions(this.source.actionsDescription, \"action\");\n\n  if (this.source.hasLair && this.source.lairDescription != \"\") {\n    this.featureFactory.generateActions(this.source.lairDescription, \"lair\");\n    this.npc.system.resources[\"lair\"] = this.featureFactory.resources[\"lair\"];\n  }\n\n  if (this.source.legendaryActionsDescription != \"\") {\n    this.featureFactory.generateActions(this.source.legendaryActionsDescription, \"legendary\");\n    this.npc.system.resources[\"legact\"] = this.featureFactory.resources[\"legendary\"];\n    if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-set-legendary-resource-bar\")) {\n      this.npc.prototypeToken.bar2 = { attribute: \"resources.legact\" };\n    }\n  }\n\n  if (this.source.specialTraitsDescription != \"\") {\n    this.featureFactory.generateActions(this.source.specialTraitsDescription, \"special\");\n    this.npc.system.resources[\"legres\"] = this.featureFactory.resources[\"resistance\"];\n  }\n\n  this.featureFactory.generateActions(this.source.reactionsDescription, \"reaction\");\n  this.featureFactory.generateActions(this.source.bonusActionsDescription, \"bonus\");\n  this.featureFactory.generateActions(this.source.mythicActionsDescription, \"mythic\");\n\n  this.items.push(\n    ...this.featureFactory.actions,\n    ...this.featureFactory.lair,\n    ...this.featureFactory.legendary,\n    ...this.featureFactory.special,\n    ...this.featureFactory.reactions,\n    ...this.featureFactory.bonus,\n    ...this.featureFactory.mythic,\n  );\n\n  // add any actor descriptions found in action blocks into the biography\n  if (this.featureFactory.characterDescription.unexpected) {\n    logger.warn(`Unexpected description for ${this.source.name}`, { description: this.featureFactory.characterDescription });\n  }\n  this.characterDescription += this.featureFactory.characterDescription.action;\n  this.characterDescription += this.featureFactory.characterDescription.reaction;\n  this.characterDescription += this.featureFactory.characterDescription.special;\n  this.npc.system.details.biography.value += this.characterDescription;\n};\n","import { getAbilityMods } from \"./helpers.js\";\nimport logger from '../../logger.js';\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBMonster from \"../DDBMonster.js\";\nimport DICTIONARY from \"../../dictionary.js\";\n\n\nDDBMonster.prototype.getSpellcasting = function(text) {\n  let spellcasting = \"\";\n  const abilitySearch = /((?:spellcasting ability) (?:is|uses|using) (\\w+)| (\\w+)(?: as \\w+ spellcasting ability))/;\n  const match = text.match(abilitySearch);\n  if (match) {\n    const abilityMatch = match[2] || match[3];\n    spellcasting = abilityMatch.toLowerCase().substr(0, 3);\n  }\n  return spellcasting;\n};\n\nDDBMonster.prototype._generateSpellcasting = function(text) {\n  let spellcasting = this.getSpellcasting(text);\n  this.spellcasting.spellcasting = spellcasting;\n  this.npc.system.attributes.spellcasting = spellcasting;\n};\n\nDDBMonster.prototype._generateSpellLevel = function(text) {\n  let spellLevel = 0;\n  const levelSearch = /is (?:a|an) (\\d+)(?:th|nd|rd|st)(?:-| )level spellcaster/;\n  const match = text.match(levelSearch);\n  if (match) {\n    spellLevel = parseInt(match[1]);\n  }\n  this.spellcasting.spellLevel = spellLevel;\n  this.npc.system.attributes.spellLevel = spellLevel;\n  this.npc.system.details.spellLevel = spellLevel;\n};\n\nDDBMonster.prototype._generateSpelldc = function(text) {\n  let dc = 10;\n  const dcSearch = \"spell\\\\s+save\\\\s+DC\\\\s*(\\\\d+)(?:,|\\\\)|\\\\s)\";\n  const match = text.match(dcSearch);\n  // console.log(\"£££££\")\n  // console.log(match);\n  if (match) {\n    dc = parseInt(match[1]);\n  }\n  this.spellcasting.spelldc = dc;\n  this.npc.system.attributes.spelldc = dc;\n};\n\nDDBMonster.prototype._generateSpellAttackBonus = function(text) {\n  let spellAttackBonus = 0;\n  const dcSearch = \"([+-]\\\\d+)\\\\s+to\\\\s+hit\\\\s+with\\\\s+spell\\\\s+attacks\";\n  const match = text.match(dcSearch);\n  if (match) {\n    const toHit = match[1];\n    const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n    const abilities = getAbilityMods(this.source);\n    const castingAbility = this.getSpellcasting(text);\n    spellAttackBonus = toHit - proficiencyBonus - abilities[castingAbility];\n  }\n  this.spellcasting.spellAttackBonus = spellAttackBonus;\n};\n\n\nDDBMonster.prototype.parseOutInnateSpells = function(text) {\n  // handle innate style spells here\n  // 3/day each: charm person (as 5th-level spell), color spray, detect thoughts, hold person (as 3rd-level spell)\n  // console.log(text);\n  const innateSearch = /^(\\d+)\\/(\\w+)(?:\\s+each)?:\\s+(.*$)/;\n  const innateMatch = text.match(innateSearch);\n  // console.log(innateMatch);\n  if (innateMatch) {\n    const spellArray = innateMatch[3].split(\",\").map((spell) => spell.trim());\n    spellArray.forEach((spell) => {\n      this.spellList.innate.push({ name: spell, type: innateMatch[2], value: innateMatch[1], innate: this.spellList.innateMatch });\n    });\n  }\n\n  // At will: dancing lights\n  const atWillSearch = /^At (?:Will|will):\\s+(.*$)/;\n  const atWillMatch = text.match(atWillSearch);\n  if (atWillMatch) {\n    const spellArray = atWillMatch[1].split(\",\").map((spell) => spell.trim());\n    spellArray.forEach((spell) => {\n      if (this.spellList.innateMatch) {\n        this.spellList.innate.push({ name: spell, type: \"atwill\", value: null, innate: this.spellList.innateMatch });\n      } else {\n        this.spellList.atwill.push(spell);\n      }\n\n    });\n  }\n\n  // last ditch attempt, mephits have some weird formating\n  if (!innateMatch && !atWillMatch) {\n    const mephitMatch = text.match(/(\\d+)\\/(\\w+)(?:.*)?cast (.*),/);\n    if (mephitMatch) {\n      const spell = mephitMatch[3].trim();\n      this.spellList.innate.push({ name: spell, type: mephitMatch[2], value: mephitMatch[1], innate: this.spellList.innateMatch });\n    }\n  }\n};\n\n\n// e.g. The archmage can cast disguise self and invisibility at will and has the following wizard spells prepared:\nDDBMonster.prototype.parseAdditionalAtWillSpells = function(text) {\n  const atWillSearch = /can cast (.*?) at will/;\n  const atWillMatch = text.match(atWillSearch);\n  let atWillSpells = [];\n  if (atWillMatch) {\n    atWillSpells = atWillMatch[1].replace(\" and\", \",\").split(\",\").map((spell) => spell.split('(', 1)[0].trim());\n  }\n\n  this.spellList.atwill.push(...atWillSpells);\n};\n\n\n/**\n * First pass at breaking out spells to cast\n * @param text spell text block\n * @returns\n */\nDDBMonster.prototype.parseOutSpells = function(text) {\n  // console.log(text);\n  const spellLevelSearch = /^(Cantrip|\\d)(?:st|th|nd|rd)?(?:\\s*(?:Level|level))?(?:s)?\\s+\\((at will|at-will|\\d)\\s*(?:slot|slots)?\\):\\s+(.*$)/;\n  const match = text.match(spellLevelSearch);\n  // console.log(match);\n\n  const warlockLevelSearch = /^1st–(\\d)(?:st|th|nd|rd)\\s+level\\s+\\((\\d)\\s+(\\d)(?:st|th|nd|rd)?\\s*(?:Level|level|-level)\\s*(?:slot|slots)?\\):\\s+(.*$)/;\n  const warlockMatch = text.match(warlockLevelSearch);\n\n  if (!match && !warlockMatch) {\n    this.parseOutInnateSpells(text);\n    return;\n  }\n\n  const spellLevel = (match) ? match[1] : 'pact';\n  const slots = (match) ? match[2] : warlockMatch[2];\n  const spellMatches = (match) ? match[3] : warlockMatch[4];\n\n  if (Number.isInteger(parseInt(spellLevel)) && Number.isInteger(parseInt(slots))) {\n    this.npc.system.spells[`spell${spellLevel}`]['value'] = parseInt(slots);\n    this.npc.system.spells[`spell${spellLevel}`]['max'] = slots ?? \"\";\n    this.npc.system.spells[`spell${spellLevel}`]['override'] = parseInt(slots) ?? null;\n    const spellArray = spellMatches.split(\",\").map((spell) => spell.trim());\n    this.spellList.class.push(...spellArray);\n  } else if (spellLevel === 'pact' && Number.isInteger(parseInt(slots))) {\n    this.npc.system.spells[spellLevel]['value'] = parseInt(slots);\n    this.npc.system.spells[spellLevel]['max'] = slots ?? \"\";\n    this.npc.system.spells[spellLevel]['override'] = parseInt(slots) ?? null;\n    this.npc.system.spells[spellLevel]['level'] = warlockMatch[3];\n    const spellArray = spellMatches.split(\",\").map((spell) => spell.trim());\n    this.spellList.pact.push(...spellArray);\n  } else if ([\"at will\", \"at-will\"].includes(slots)) {\n    // at will spells\n    const spellArray = spellMatches.replace(/\\*/g, '').split(\",\").map((spell) => spell.trim());\n    this.spellList.atwill.push(...spellArray);\n  }\n\n};\n\n\nfunction splitEdgeCase(spell) {\n  let result = {\n    name: spell,\n    edge: null,\n  };\n\n  const splitSpell = spell.split(\"(\");\n  if (splitSpell.length > 1) {\n    result.name = splitSpell[0].trim();\n    result.edge = splitSpell[1].split(\")\")[0].trim();\n  }\n\n  return result;\n}\n\nDDBMonster.prototype._generateSpellEdgeCases = function() {\n  [\"pact\", \"class\", \"atwill\"].forEach((spellType) => {\n    this.spellList[spellType].forEach((spellName) => {\n      const edgeCheck = splitEdgeCase(`${spellName}`);\n      if (edgeCheck.edge) {\n        const edgeEntry = {\n          name: edgeCheck.name,\n          type: spellType,\n          edge: edgeCheck.edge,\n        };\n        this.spellList.edgeCases.push(edgeEntry);\n      }\n      spellName = edgeCheck.name;\n    });\n  });\n\n  // innate\n  this.spellList.innate.forEach((spellMap) => {\n    const edgeCheck = splitEdgeCase(spellMap.name);\n    spellMap.name = edgeCheck.name;\n    if (edgeCheck.edge) {\n      const edgeEntry = {\n        name: edgeCheck.name,\n        type: \"innate\",\n        edge: edgeCheck.edge,\n      };\n      this.spellList.edgeCases.push(edgeEntry);\n    }\n  });\n};\n\n\n// <p><em><strong>Innate Spellcasting.</strong></em> The oblex&rsquo;s innate spellcasting ability is Intelligence (spell save DC 15). It can innately cast the following spells, requiring no components:</p>\\r\\n<p>3/day each: charm person (as 5th-level spell), color spray, detect thoughts, hold person (as 3rd-level spell)</p>\n\nDDBMonster.prototype._generateSpells = function() {\n\n  this.spellcasting = {\n    spelldc: 10,\n    spellcasting: \"\", // ability associated\n    spellLevel: 0,\n    spellAttackBonus: 0,\n  };\n  this.spellList = {\n    class: [],\n    pact: [],\n    atwill: [],\n    // {name: \"\", type: \"srt/lng/day\", value: 0} // check these values\n    innate: [],\n    edgeCases: [], // map { name: \"\", type: \"\", edge: \"\" }\n    material: true,\n    innateMatch: false,\n  };\n\n  let dom = new DocumentFragment();\n\n  // some monsters have poor spell formating, reported and might be able to remove in future\n  // https://www.dndbeyond.com/forums/d-d-beyond-general/bugs-support/91228-sir-godfrey-gwilyms-spell-statblock\n  const possibleSpellSources = this.source.specialTraitsDescription + this.source.actionsDescription;\n  let specialTraits = possibleSpellSources.replace(/<br \\/>/g, \"</p><p>\");\n\n  $.parseHTML(specialTraits).forEach((element) => {\n    dom.appendChild(element);\n  });\n\n  dom.childNodes.forEach((node) => {\n    if (node.textContent == \"\\n\") {\n      dom.removeChild(node);\n    }\n  });\n\n  dom.childNodes.forEach((node) => {\n    const spellText = node.textContent.replace(/’/g, \"'\");\n    const trimmedText = spellText.trim();\n\n    const spellCastingRegEx = new RegExp(/^Spellcasting/);\n    const innateSpellCastingRegEx = new RegExp(/^Innate Spellcasting/);\n    const spellcastingMatch = spellCastingRegEx.test(trimmedText);\n    const innateSpellcastingMatch = innateSpellCastingRegEx.test(trimmedText);\n\n    if (spellcastingMatch || innateSpellcastingMatch) {\n      this._generateSpellcasting(spellText);\n      this._generateSpelldc(spellText);\n      this._generateSpellLevel(spellText);\n      this._generateSpellAttackBonus(spellText);\n    }\n\n    const noMaterialSearch = new RegExp(/no material component|no component/);\n    const noMaterialMatch = noMaterialSearch.test(trimmedText);\n\n    if (noMaterialMatch) {\n      this.spellList.material = false;\n    }\n\n    // lets see if the spell block is innate\n    if (innateSpellcastingMatch) {\n      this.spellList.innateMatch = true;\n    } else if (spellcastingMatch) {\n      this.spellList.innateMatch = false;\n    }\n\n    this.parseOutSpells(spellText);\n    this.parseAdditionalAtWillSpells(spellText);\n  });\n\n  this._generateSpellEdgeCases();\n\n  logger.debug(\"Parsed spell list\", this.spellList);\n\n  // this.spellcasting = {\n  //   spelldc,\n  //   spellcasting,\n  //   spellLevel,\n  //   spells,\n  //   spellList,\n  //   spellAttackBonus,\n  // };\n\n  this.npc.flags.monsterMunch['spellList'] = this.spellList;\n\n};\n\n/**\n *\n * @param {[items]} spells Array of Strings or items\n */\nDDBMonster.prototype.retrieveCompendiumSpells = async function(spells) {\n  const compendiumName = await game.settings.get(SETTINGS.MODULE_ID, \"entity-spell-compendium\");\n  const compendiumItems = await CompendiumHelper.retrieveMatchingCompendiumItems(spells, compendiumName);\n  const itemData = compendiumItems.map((i) => {\n    let spell = i.toObject();\n    delete spell._id;\n    return spell;\n  });\n\n  return itemData;\n};\n\nDDBMonster.prototype.getSpellEdgeCase = function(spell, type, spellList) {\n  const edgeCases = spellList.edgeCases;\n  const edgeCase = edgeCases.find((edge) => edge.name.toLowerCase() === spell.name.toLowerCase() && edge.type === type);\n\n  if (edgeCase) {\n    logger.debug(`Spell edge case for ${spell.name}`);\n    switch (edgeCase.edge.toLowerCase()) {\n      case \"self\":\n      case \"self only\":\n        spell.system.target.type = \"self\";\n        logger.debug(\"spell target changed to self\");\n        break;\n      // no default\n    }\n    spell.name = `${spell.name} (${edgeCase.edge})`;\n    // spell.system.description.chat = `<p><b>Special Notes: ${edgeCase.edge}.</b></p>\\n\\n${spell.system.description.chat}`;\n    spell.system.description.value = `<p><b>Special Notes: ${edgeCase.edge}.</b></p>\\n\\n${spell.system.description.value}`;\n\n    const diceSearch = /(\\d+)d(\\d+)/;\n    const diceMatch = edgeCase.edge.match(diceSearch);\n    if (diceMatch) {\n      if (spell.system.damage.parts[0] && spell.system.damage.parts[0][0]) {\n        spell.system.damage.parts[0][0] = diceMatch[0];\n      } else if (spell.system.damage.parts[0]) {\n        spell.system.damage.parts[0] = [diceMatch[0]];\n      } else {\n        spell.system.damage.parts = [[diceMatch[0]]];\n      }\n    }\n\n    // save DC 12\n    const saveSearch = /save DC (\\d+)/;\n    const saveMatch = edgeCase.edge.match(saveSearch);\n    if (saveMatch) {\n      spell.system.save.dc = parseInt(saveMatch[1]);\n      spell.system.save.scaling = \"flat\";\n    }\n\n  }\n\n  // remove material components?\n  if (!spellList.material) {\n    spell.system.materials = {\n      value: \"\",\n      consumed: false,\n      cost: 0,\n      supply: 0\n    };\n    spell.system.components.material = false;\n  }\n\n};\n\nDDBMonster.prototype.addSpells = async function() {\n  // check to see if we have munched flags to work on\n  if (!this.spellList) {\n    return;\n  }\n\n  logger.debug(`Spell List for edgecases`, this.spellList);\n  const atWill = this.spellList.atwill;\n  const klass = this.spellList.class;\n  const innate = this.spellList.innate;\n  const pact = this.spellList.pact;\n\n  if (atWill.length !== 0) {\n    logger.debug(\"Retrieving at Will spells:\", atWill);\n    let spells = await this.retrieveCompendiumSpells(atWill);\n    spells = spells.filter((spell) => spell !== null).map((spell) => {\n      if (spell.system.level == 0) {\n        spell.system.preparation = {\n          mode: \"prepared\",\n          prepared: false,\n        };\n      } else {\n        spell.system.preparation = {\n          mode: \"atwill\",\n          prepared: false,\n        };\n        spell.system.uses = {\n          value: null,\n          max: \"\",\n          per: null,\n          recovery: \"\",\n        };\n      }\n      this.getSpellEdgeCase(spell, \"atwill\", this.spellList);\n      return spell;\n    });\n    this.items.push(...spells);\n  }\n\n  // class spells\n  if (klass.length !== 0) {\n    logger.debug(\"Retrieving class spells:\", klass);\n    let spells = await this.retrieveCompendiumSpells(klass);\n    spells = spells.filter((spell) => spell !== null).map((spell) => {\n      spell.system.preparation = {\n        mode: \"prepared\",\n        prepared: true,\n      };\n      this.getSpellEdgeCase(spell, \"class\", this.spellList);\n      return spell;\n    });\n    this.items.push(...spells);\n  }\n\n  // pact spells\n  if (pact.length !== 0) {\n    logger.debug(\"Retrieving pact spells:\", pact);\n    let spells = await this.retrieveCompendiumSpells(pact);\n    spells = spells.filter((spell) => spell !== null).map((spell) => {\n      spell.system.preparation = {\n        mode: \"pact\",\n        prepared: true,\n      };\n      this.getSpellEdgeCase(spell, \"pact\", this.spellList);\n      return spell;\n    });\n    this.items.push(...spells);\n  }\n\n  // innate spells\n  if (innate.length !== 0) {\n    // innate:\n    // {name: \"\", type: \"srt/lng/day\", value: 0}\n    logger.debug(\"Retrieving innate spells:\", innate);\n    const spells = await this.retrieveCompendiumSpells(innate);\n    const innateSpells = spells.filter((spell) => spell !== null)\n      .map((spell) => {\n        const spellInfo = innate.find((w) => w.name.toLowerCase() == spell.name.toLowerCase());\n        if (spellInfo) {\n          const isAtWill = hasProperty(spellInfo, \"innate\") && !spellInfo.innate;\n          if (spell.system.level == 0) {\n            spell.system.preparation = {\n              mode: \"prepared\",\n              prepared: false,\n            };\n          } else {\n            spell.system.preparation = {\n              mode: isAtWill ? \"atwill\" : \"innate\",\n              prepared: !isAtWill,\n            };\n          }\n          if (isAtWill && spellInfo.type === \"atwill\") {\n            spell.system.uses = {\n              value: null,\n              max: \"\",\n              per: null,\n              recovery: \"\",\n            };\n          } else {\n            const perLookup = DICTIONARY.resets.find((d) => d.id == spellInfo.type);\n            const per = spellInfo.type === \"atwill\"\n              ? null\n              : (perLookup && perLookup.type)\n                ? perLookup.type\n                : \"day\";\n            spell.system.uses = {\n              value: parseInt(spellInfo.value),\n              max: spellInfo.value ?? \"\",\n              per,\n              recovery: \"\",\n            };\n          }\n          this.getSpellEdgeCase(spell, \"innate\", this.spellList);\n        }\n        return spell;\n      });\n    this.items.push(...innateSpells);\n  }\n};\n","import utils from \"../../lib/utils.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n// import { fixCharacterLevels } from \"./filterModifiers.js\";\n\nDDBCharacter.prototype._newPCSkeleton = async function _newPCSkeleton() {\n  const name = (this.source.ddb.character.name === \"\") ? \"Hero With No Name\" : this.source.ddb.character.name;\n\n  this.raw.character = {\n    system: JSON.parse(utils.getTemplate(\"character\")),\n    type: \"character\",\n    effects: [],\n    name: name,\n    // items: [],  // modified to check inventory analysis on update\n    flags: {\n      ddbimporter: {\n        compendium: false,\n        acEffects: [],\n        baseAC: 10,\n        dndbeyond: {\n          totalLevels: null,\n          proficiencies: null,\n          proficienciesIncludingEffects: null,\n          roUrl: this.source.ddb.character.readonlyUrl,\n          characterValues: this.source.ddb.character.characterValues,\n          templateStrings: [],\n          campaign: this.source.ddb.character.campaign,\n        },\n      },\n    },\n  };\n\n  // generate a prototype token\n  this._generateToken();\n\n  return this.raw.character;\n};\n\nDDBCharacter.prototype._generateCharacter = async function _generateCharacter() {\n  // *************************************\n  // PARSING THE CHARACTER\n  // **************************************\n  //\n  // ddb = fixCharacterLevels(ddb);\n\n  // build skeleton this.raw.character\n  await this._newPCSkeleton();\n\n  this.totalLevels = this.source.ddb.character.classes.reduce((prev, cur) => prev + cur.level, 0);\n  this.raw.character.flags.ddbimporter.dndbeyond.totalLevels = this.totalLevels;\n  this._generateProficiencies();\n\n  // proficiency\n  // prettier-ignore\n  this.raw.character.system.attributes.prof = Math.ceil(1 + (0.25 * this.totalLevels));\n\n  // Get supported 5e feats and abilities\n  // We do this first so we can check for them later\n  this._setSpecialTraitFlags();\n\n  this._generateAbilities();\n  this._generateHitDice();\n  this._generateDeathSaves();\n  this._generateExhaustion();\n  this.raw.character.system.attributes.inspiration = this.source.ddb.character.inspiration;\n  this._generateArmorClass();\n  this._generateHitPoints();\n  this._generateInitiative();\n  this._generateSpeed();\n  this._generateSenses();\n  this._generateSpellCasting();\n  this._generateSpellDC();\n  // resources\n  this._generateResources();\n  this._generateMaxPreparedSpells();\n  this.raw.character.system.details.xp.value = this.source.ddb.character.currentXp;\n  this._generateTrait();\n  this._generateIdeal();\n  this._generateFlaw();\n  this._generateBond();\n  this._generateAppearance();\n  this._generateDescription();\n  this._generateAlignment();\n  this._generateBiography();\n  this.raw.character.system.details.race = this.source.ddb.character.race.fullName;\n  this._generateSize();\n  // immunities, resistances, vuls and condition immunities\n  this._generateConditions();\n  this._generateCurrency();\n  await this._generateSkills();\n  this._generateSpellSlots();\n\n  // Extra global bonuses\n  this._generateBonusAbilities();\n  this._generateBonusSpellAttacks();\n  this._generateBonusSpellDC();\n  this._generateBonusWeaponAttacks();\n};\n\n","import logger from \"../../logger.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateToken = function _generateToken() {\n  try {\n    // Default to the most basic token setup.\n    // everything else can be handled by the user / Token Mold\n    let tokenData = {\n      actorLink: true,\n      name: this.source.ddb.character.name,\n      sight: {\n        enabled: true,\n        range: 0,\n        angle: 360,\n        color: null,\n        attenuation: 0,\n        brightness: 0,\n        saturation: 0,\n        contrast: 0,\n        visionMode: \"basic\",\n      },\n      detectionModes: [],\n    };\n    const senses = this.getSenses();\n    // darkvision: 0,\n    // blindsight: 0,\n    // tremorsense: 0,\n    // truesight: 0,\n\n    for (const [key, value] of Object.entries(senses)) {\n      if (value > 0 && value > tokenData.sight.range && hasProperty(DICTIONARY.senseMap, key)) {\n        const visionMode = DICTIONARY.senseMap[key];\n        setProperty(tokenData, \"sight.visionMode\", visionMode);\n        setProperty(tokenData, \"sight.range\", value);\n        tokenData.sight = mergeObject(tokenData.sight, CONFIG.Canvas.visionModes[visionMode].vision.defaults);\n      }\n      if (value > 0 && hasProperty(DICTIONARY.detectionMap, key)) {\n        const detectionMode = {\n          id: DICTIONARY.detectionMap[key],\n          range: value,\n          enabled: true,\n        };\n\n        // only add duplicate modes if they don't exist\n        if (!tokenData.detectionModes.some((mode) => mode.id === detectionMode.id)) {\n          tokenData.detectionModes.push(detectionMode);\n        }\n      }\n    }\n\n    // devilsight? we set the vision mode back to basic\n    const devilSight = senses.special.includes(\"You can see normally in darkness\");\n    if (devilSight) {\n      setProperty(tokenData, \"sight.visionMode\", \"basic\");\n      tokenData.sight = mergeObject(tokenData.sight, CONFIG.Canvas.visionModes.basic.vision.defaults);\n    }\n\n    this.raw.character.prototypeToken = tokenData;\n  } catch (err) {\n    logger.error(err);\n    logger.error(err.stack);\n    throw new Error(\"Please update your D&D 5e system to a newer version\");\n  }\n};\n","import logger from \"../../logger.js\";\n\n/**\n * UTILITY\n * Returns a string representation of friendlyTypename and friendlySubtypeName for an obj[]\n * @param {object[]} arr array of objects\n */\nfunction extractInfo(arr) {\n  return arr.map((e) => `${e.friendlyTypeName} (${e.friendlySubtypeName})`);\n}\n\n/**\n * Extracts basic character information\n * @param {object} data Character JSON\n * returns information about the classes this character chose, including\n * - {string} name\n * - {number} level\n * - {boolean} isStartingClass\n * - {object[]} modifiers (empty, will be filled later)\n * }\n */\nfunction getClassInfo(data) {\n  return data.classes.map((cls) => {\n    return {\n      name:\n        cls.subclassDefinition && cls.subclassDefinition.name\n          ? `${cls.definition.name} (${cls.subclassDefinition.name})`\n          : cls.definition.name,\n      level: cls.level,\n      isStartingClass: cls.isStartingClass,\n      modifiers: [],\n    };\n  });\n}\n\n/**\n * Gets all class features up to a certain class level\n * @param {obj} cls character.classes[] entry\n * @param {*} classLevel level requirement up to which the class features should be extracted\n */\nexport function getClassFeatures(cls, classLevel = 20) {\n  if (\n    cls.subclassDefinition\n    && cls.subclassDefinition.classFeatures\n    && Array.isArray(cls.subclassDefinition.classFeatures)\n  ) {\n    const subclassFeatures = cls.subclassDefinition.classFeatures.map((subclassFeature) => {\n      subclassFeature.className = cls.definition.name;\n      subclassFeature.subclassName = cls.subclassDefinition.name;\n      return subclassFeature;\n    });\n    const result = cls.classFeatures\n      .map((feature) => {\n        const f = feature.definition;\n        f.className = cls.definition.name;\n        f.subclassName = null;\n        return f;\n      })\n      .concat(subclassFeatures)\n      .filter((classFeature) => classFeature.requiredLevel <= classLevel)\n      .sort((a, b) => a.requiredLevel - b.requiredLevel);\n    return result;\n  } else {\n    const result = cls.classFeatures\n      .map((feature) => {\n        const f = feature.definition;\n        f.className = cls.definition.name;\n        f.subclassName = null;\n        return f;\n      })\n      .filter((classFeature) => classFeature.requiredLevel <= classLevel)\n      .sort((a, b) => a.requiredLevel - b.requiredLevel);\n    return result;\n  }\n}\n\n\n/**\n * Checks if a given class is the starting class of this character\n * @param {object} data character data\n * @param {string} className name of the class to check\n * @returns {boolean} true of the class is a starting class, false otherwise\n */\nfunction isStartingClass(data, className) {\n  return data.classes.find((cls) => cls.definition.name === className && cls.isStartingClass);\n}\n\n/**\n * Gets all class modifiers for a given character\n * This filters out all modifiers that do not have an entry in the class features passed in\n * For multiclassing characters, it checks if the given class is the starting class or a multiclass,\n *    then the `.availableToMulticlass` is queried if this modifier is enabled or not\n * @param {obj} cls character.classes[] entry\n * @param {*} classLevel level requirement up to which the class features should be extracted\n */\nfunction getClassModifiers(data, classFeatures, isStartingClass = false) {\n  const modifiers = data.modifiers.class.filter((classModifier) => {\n    // check the class from which this modifier came\n    const componentId = classModifier.componentId;\n    const feature = classFeatures.find((feature) => feature.id === componentId);\n    if (feature !== undefined) {\n      const isFeatureAvailable = classModifier.availableToMulticlass ? true : isStartingClass;\n      logger.debug(\n        `${isFeatureAvailable ? \"  [  AVAIL]\" : \"  [UNAVAIL]\"} Modifier found: ${classModifier.friendlyTypeName} (${\n          classModifier.friendlySubtypeName\n        })`\n      );\n      return isFeatureAvailable;\n    }\n    return false;\n  });\n\n  return modifiers;\n}\n\nexport function getAllClassFeatures(data) {\n  return data.classes\n    .map((cls) => {\n      return getClassFeatures(cls, cls.level);\n    })\n    .flat();\n}\n\nfunction getClassOptionModifiers(data) {\n  const classFeatures = getAllClassFeatures(data);\n\n  const modifiers = data.modifiers.class.filter((classModifier) => {\n    const componentId = classModifier.componentId;\n    const feature = classFeatures.find((feature) => feature.id === componentId);\n\n    if (feature === undefined) {\n      logger.debug(`Modifier found: ${classModifier.friendlyTypeName} (${classModifier.friendlySubtypeName})`);\n      return true;\n    }\n    return false;\n  });\n\n  return modifiers;\n}\n\n/**\n * Filters the modifiers with the utility functions above\n * @param {object} data character data\n * @returns {[object[]]} an array containing an array of filtered modifiers, grouped by class\n */\nfunction filterModifiers(data, classInfo) {\n  // get the classFeatures for all classes\n  data.classes.forEach((cls, index) => {\n    const features = getClassFeatures(cls, cls.level);\n    classInfo[index].modifiers = getClassModifiers(data, features, isStartingClass(data, cls.definition.name));\n  });\n  return classInfo;\n}\n\nexport function fixCharacterLevels(data) {\n  const classInfo = getClassInfo(data.character);\n  const filteredClassInfo = filterModifiers(data.character, classInfo);\n  let classModifiers = getClassOptionModifiers(data.character, classInfo);\n\n  filteredClassInfo.forEach((cls) => {\n    logger.debug(`${cls.isStartingClass ? \"Starting Class\" : \"Multiclass\"}: [lvl${cls.level}] ${cls.name} `);\n    logger.debug(\n      extractInfo(cls.modifiers)\n        .map((s) => `    ${s}`)\n        .join(\"\\n\")\n    );\n    classModifiers = classModifiers.concat(cls.modifiers);\n  });\n  data.character.modifiers.class = classModifiers;\n  return data;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\nimport { generateFixedACEffect, generateBonusACEffect } from \"../../effects/acEffects.js\";\nimport { getAllClassFeatures } from \"./filterModifiers.js\";\n\n/**\n * This excludes shields\n */\nDDBCharacter.prototype.isArmored = function isArmored() {\n  return (\n    this.source.ddb.character.inventory.filter(\n      (item) => item.equipped && item.definition.armorClass && item.definition.armorTypeId !== 4\n    ).length >= 1\n  );\n};\n\n/**\n * This excludes shields\n */\nDDBCharacter.prototype.isUnArmored = function isUnArmored() {\n  return !this.isArmored();\n};\n\nfunction getMinimumBaseAC(modifiers) {\n  let hasBaseArmor = modifiers.filter(\n    (modifier) => modifier.type === \"set\" && modifier.subType === \"minimum-base-armor\" && modifier.isGranted\n  );\n  let baseAC = [];\n  hasBaseArmor.forEach((base) => {\n    baseAC.push(base.value);\n  });\n  return baseAC;\n}\n\nfunction getBaseArmor(ac, armorType, name = \"Racial\") {\n  return {\n    definition: {\n      name: `Base Armor - ${name}`,\n      type: armorType,\n      armorClass: ac,\n      armorTypeId: DICTIONARY.equipment.armorType.find((id) => id.name === armorType).id,\n      grantedModifiers: [],\n      canAttune: false,\n      filterType: \"Armor\",\n    },\n    isAttuned: false,\n  };\n}\n\nfunction getEquippedAC(equippedGear) {\n  return equippedGear.reduce((prev, item) => {\n    let ac = 0;\n    // regular armor\n    if (item.definition.armorClass) {\n      ac += item.definition.armorClass;\n    }\n\n    // magical armor\n    const usingItemEffects = game.settings.get(\"ddb-importer\", \"character-update-policy-add-item-effects\");\n\n    const daeItemEffects = (usingItemEffects\n      && item.equipped && item.definition.filterType !== \"Armor\"\n    );\n\n    if (!daeItemEffects && item.definition.grantedModifiers) {\n      let isAvailable = false;\n      // does an item need attuning\n      if (item.definition.canAttune === true) {\n        if (item.isAttuned === true) {\n          isAvailable = true;\n        }\n      } else {\n        isAvailable = true;\n      }\n\n      if (isAvailable) {\n        item.definition.grantedModifiers.forEach((modifier) => {\n          if (modifier.type === \"bonus\" && modifier.subType === \"armor-class\") {\n            // add this to armor AC\n            ac += modifier.value;\n          }\n        });\n      }\n    }\n    return prev + ac;\n  }, 0);\n}\n\n// returns an array of ac values from provided array of modifiers\nfunction getUnarmoredAC(modifiers, character) {\n  let unarmoredACValues = [];\n  let isUnarmored = modifiers.filter(\n    (modifier) => modifier.type === \"set\" && modifier.subType === \"unarmored-armor-class\" && modifier.isGranted\n  );\n  // if (isUnarmored.length === 0) {\n  //   // Some items will have an unarmoured bonus, but won't set a base, so if we are in this\n  //   // situation, we add a default base ac\n  //   isUnarmored.push({\n  //     statId: 2,\n  //     value: 0,\n  //   });\n  // }\n\n  const ignoreDex = modifiers.some((modifier) => modifier.type === \"ignore\" && modifier.subType === \"unarmored-dex-ac-bonus\");\n\n  const maxUnamoredDexMods = modifiers.filter(\n    (modifier) => modifier.type === \"set\" && modifier.subType === \"ac-max-dex-modifier\" && modifier.isGranted\n  ).map((mods) => mods.value);\n  const maxUnamoredDexMod = ignoreDex ? 0 : Math.min(...maxUnamoredDexMods, 20);\n\n  // console.log(`Max Dex: ${maxUnamoredDexMod}`);\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n\n  isUnarmored.forEach((unarmored) => {\n    let unarmoredACValue = 10;\n    // +DEX\n    // for a case of setting unarmoured ac, the dex won't detract\n    unarmoredACValue += Math.max(0, Math.min(characterAbilities.dex.mod, maxUnamoredDexMod));\n    // +WIS or +CON, if monk or barbarian, draconic resilience === null\n\n    // console.log(`Unarmoured AC Value: ${unarmoredACValue}`);\n    // console.log(unarmored);\n\n    if (unarmored.statId !== null) {\n      let ability = DICTIONARY.character.abilities.find((ability) => ability.id === unarmored.statId);\n      unarmoredACValue += characterAbilities[ability.value].mod;\n    }\n    if (unarmored.value) unarmoredACValue += unarmored.value;\n    unarmoredACValues.push(unarmoredACValue);\n  });\n  // console.warn(unarmoredACValues);\n  return unarmoredACValues;\n}\n\nfunction getDualWieldAC(data, modifiers) {\n  const dualWielding = data.character.characterValues.some((cv) => {\n    const equipped = data.character.inventory.some((item) => item.equipped && item.id == cv.valueId);\n    const dualWielding = cv.typeId === 18;\n    return equipped && dualWielding;\n  });\n  let dualWieldBonus = 0;\n\n  if (dualWielding) {\n    DDBHelper.filterModifiers(modifiers, \"bonus\", \"dual-wield-armor-class\", [\"\", null], true).forEach((bonus) => {\n      dualWieldBonus += bonus.value;\n    });\n  }\n\n  return dualWieldBonus;\n}\n\n// To Do: Rework AC functions as class functions to help reduce complexity in calculation.\n// eslint-disable-next-line complexity\nfunction calculateACOptions(data, character, calculatedArmor) {\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n  let actorBase = 10 + characterAbilities.dex.mod;\n  // generated AC effects\n  let effects = [];\n  // array to assemble possible AC values\n  let armorClassValues = [];\n  // max holders\n  let maxType = \"Unarmored\";\n  let maxValue = actorBase;\n\n  // the presumption here is that you can only wear a shield and a single\n  // additional 'armor' piece. in DDB it's possible to equip multiple armor\n  // types and it works out the best AC for you\n  // we also want to handle unarmored for monks etc.\n  // we might have multiple shields \"equipped\" by accident, so work out\n  // the best one\n  for (let armor = 0; armor < calculatedArmor.armors.length; armor++) {\n    // getEquippedAC fetches any magical AC boost on the items passed\n    let armorAC = getEquippedAC([calculatedArmor.armors[armor]]);\n    let shieldMod = 0;\n\n    if (calculatedArmor.shields.length !== 0) {\n      let maxAC = armorAC;\n      for (let shield = 0; shield < calculatedArmor.shields.length; shield++) {\n        const combinedAC = getEquippedAC([calculatedArmor.armors[armor], calculatedArmor.shields[shield]]);\n        if (combinedAC > maxAC) {\n          shieldMod = combinedAC - armorAC;\n          maxAC = combinedAC;\n        }\n      }\n      armorAC = maxAC;\n    }\n\n    // Determine final AC values based on AC Type\n    // Light Armor: AC + DEX\n    // Medium Armor: AC + DEX (max 2)\n    // Heavy Armor: AC only\n    // Unarmored Defense: Dex mod already included in calculation\n\n    // sometimes the type field can be blank in DDB\n    if (!calculatedArmor.armors[armor].definition.type || calculatedArmor.armors[armor].definition.type === \"\") {\n      const armourTypeId = calculatedArmor.armors[armor].definition.armorTypeId;\n      const acType = DICTIONARY.equipment.armorType.find((a) => a.id === armourTypeId);\n      if (acType) calculatedArmor.armors[armor].definition.type = acType.name;\n    }\n    let effect = null;\n    let acValue;\n\n    switch (calculatedArmor.armors[armor].definition.type) {\n      case \"Natural Armor\": {\n        let acCalc = 0;\n        // Tortles don't get to add an unarmored ac bonus for their shell\n        const ignoreUnarmouredACBonus = DDBHelper.filterBaseModifiers(data, \"ignore\", \"unarmored-dex-ac-bonus\");\n        if (ignoreUnarmouredACBonus) {\n          acCalc = armorAC + calculatedArmor.miscACBonus;\n          // console.log(armorAC);\n          // console.log(gearAC);\n          // console.log(miscACBonus);\n        } else {\n          acCalc = armorAC + calculatedArmor.miscACBonus + calculatedArmor.unarmoredACBonus;\n        }\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + calculatedArmor.gearAC,\n          type: \"Natural\",\n          acCalc,\n          shieldMod,\n        };\n        if (acCalc > actorBase) actorBase = acCalc - shieldMod;\n        effect = generateFixedACEffect(acValue.value, `AC ${calculatedArmor.armors[armor].definition.name} (Natural): ${acValue.value}`, true);\n        break;\n      }\n      case \"Unarmored Defense\": {\n        const acCalc = armorAC + calculatedArmor.miscACBonus + calculatedArmor.unarmoredACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + calculatedArmor.gearAC,\n          type: \"Unarmored Defense\",\n          acCalc,\n          shieldMod,\n        };\n        if (acCalc > actorBase) actorBase = acCalc - shieldMod;\n        effect = generateFixedACEffect(acValue.value, `AC ${calculatedArmor.armors[armor].definition.name} (Unarmored Defense): ${acValue.value}`);\n        break;\n      }\n      case \"Unarmored\": {\n        const base = armorAC + calculatedArmor.miscACBonus + calculatedArmor.unarmoredACBonus;\n        const acCalc = base + characterAbilities.dex.mod;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + calculatedArmor.gearAC,\n          type: \"Unarmored\",\n          acCalc,\n          shieldMod,\n        };\n        if (acCalc > actorBase) actorBase = acCalc - shieldMod;\n        effect = generateFixedACEffect(`${acValue.value} + @abilities.dex.mod`, `AC ${calculatedArmor.armors[armor].definition.name} (Unarmored): ${acValue.value}`, true, 15);\n        break;\n      }\n      case \"Heavy Armor\": {\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc,\n          type: \"Heavy\",\n          acCalc,\n          shieldMod,\n        };\n        effect = generateFixedACEffect(acValue.value, `AC ${calculatedArmor.armors[armor].definition.name} (Heavy): ${acValue.value}`);\n        break;\n      }\n      case \"Medium Armor\": {\n        const maxDexMedium = Math.max(...DDBHelper.filterBaseModifiers(data, \"set\", \"ac-max-dex-armored-modifier\", [\"\", null], true)\n          .map((mod) => mod.value), 2);\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + Math.min(maxDexMedium, characterAbilities.dex.mod),\n          type: \"Medium\",\n          acCalc,\n          shieldMod,\n        };\n        effect = generateFixedACEffect(`${acCalc} + {@abilities.dex.mod, ${maxDexMedium}}kl`, `AC ${calculatedArmor.armors[armor].definition.name} (Medium): ${acValue.value}`);\n        break;\n      }\n      case \"Light Armor\": {\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + characterAbilities.dex.mod,\n          type: \"Light\",\n          acCalc,\n          shieldMod,\n        };\n        effect = generateFixedACEffect(`${acCalc} + @abilities.dex.mod`, `AC ${calculatedArmor.armors[armor].definition.name} (Light): ${acValue.value}`);\n        break;\n      }\n      default: {\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + characterAbilities.dex.mod,\n          type: \"Other\",\n          acCalc,\n          shieldMod,\n        };\n        effect = generateFixedACEffect(`${acCalc} + @abilities.dex.mod`, `AC ${calculatedArmor.armors[armor].definition.name}: ${acValue.value}`, false, 22);\n        break;\n      }\n    }\n    if (effect) {\n      effect.flags.ddbimporter.itemId = calculatedArmor.armors[armor].id;\n      effect.flags.ddbimporter.entityTypeId = calculatedArmor.armors[armor].entityTypeId;\n      effects.push(effect);\n    }\n    armorClassValues.push(acValue);\n    if (acValue.value >= maxValue) {\n      maxType = acValue.type;\n      maxValue = acValue.value;\n    }\n  }\n\n  logger.debug(\"Final AC Choices:\", armorClassValues);\n  return {\n    actorBase,\n    armorClassValues,\n    effects,\n    maxType,\n    maxValue,\n  };\n}\n\n\nDDBCharacter.prototype._generateOverrideArmorClass = function _generateOverrideArmorClass(overRideAC) {\n  const overRideEffect = generateFixedACEffect(overRideAC.value, `AC Override: ${overRideAC.value}`);\n\n  this.raw.character.system.attributes.ac = {\n    flat: overRideAC.value,\n    calc: \"flat\",\n    formula: \"\",\n  };\n  this.raw.character.effects = this.raw.character.effects.concat(overRideEffect);\n  this.raw.character.flags.ddbimporter.acEffects = [overRideEffect];\n  this.raw.character.flags.ddbimporter.baseAC = overRideAC.value;\n  this.raw.character.flags.ddbimporter.autoAC = deepClone(this.raw.character.system.attributes.ac);\n  this.raw.character.flags.ddbimporter.overrideAC = {\n    flat: overRideAC.value,\n    calc: \"flat\",\n    formula: \"\",\n  };\n  this.raw.character.flags.ddbimporter.fixedAC = {\n    type: \"Number\",\n    label: \"Armor Class\",\n    value: overRideAC.value,\n  };\n};\n\n\nDDBCharacter.prototype._generateArmorClass = function _generateArmorClass() {\n  const overRideAC = this.source.ddb.character.characterValues.find((val) => val.typeId === 1);\n\n  if (overRideAC) {\n    this._generateOverrideArmorClass(overRideAC);\n    return;\n  }\n\n  // get a list of equipped armor\n  // we make a distinction so we can loop over armor\n  let equippedArmor = this.source.ddb.character.inventory.filter(\n    (item) => item.equipped && item.definition.filterType === \"Armor\"\n  );\n  let baseAC = 10;\n  // for things like fighters fighting style\n  let miscACBonus = 0;\n  let bonusEffects = [];\n  // lets get equipped gear\n  const equippedGear = this.source.ddb.character.inventory.filter(\n    (item) => item.equipped && item.definition.filterType !== \"Armor\"\n  );\n  const unarmoredACBonus = DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"bonus\", \"unarmored-armor-class\")\n    .reduce((prev, cur) => prev + cur.value, 0);\n\n  // lets get the AC for all our non-armored gear, we'll add this later\n  const gearAC = getEquippedAC(equippedGear);\n\n  // While not wearing armor, lets see if we have special abilities\n  if (this.isUnArmored()) {\n    // unarmored abilities from Class/Race?\n    const unarmoredSources = [\n      DDBHelper.getChosenClassModifiers(this.source.ddb),\n      this.source.ddb.character.modifiers.race,\n      this.source.ddb.character.modifiers.feat,\n      DDBHelper.getActiveItemModifiers(this.source.ddb, true),\n    ];\n    unarmoredSources.forEach((modifiers) => {\n      const unarmoredAC = Math.max(getUnarmoredAC(modifiers, this.raw.character));\n      if (unarmoredAC) {\n        // we add this as an armored type so we can get magical item bonuses\n        // e.g. ring of protection\n        equippedArmor.push(getBaseArmor(unarmoredAC, \"Unarmored Defense\", \"Unarmored defense\"));\n      }\n    });\n  } else {\n    // check for things like fighters fighting style defense\n    const armorBonusSources = [DDBHelper.getChosenClassModifiers(this.source.ddb), this.source.ddb.character.modifiers.race].flat();\n    const armoredBonuses = armorBonusSources.filter(\n      (modifier) => modifier.subType === \"armored-armor-class\" && modifier.isGranted\n    );\n    const effect = generateBonusACEffect(armoredBonuses, \"AC: Armored Misc Bonuses\", \"armored-armor-class\", null);\n    if (effect.changes.length > 0) bonusEffects.push(effect);\n  }\n\n  // Generic AC bonuses like Warforfed Integrated Protection\n  // item modifiers are loaded by ac calcs\n  const miscModifiers = [\n    DDBHelper.getChosenClassModifiers(this.source.ddb),\n    DDBHelper.getModifiers(this.source.ddb, \"race\"),\n    DDBHelper.getModifiers(this.source.ddb, \"background\"),\n    DDBHelper.getModifiers(this.source.ddb, \"feat\")\n  ];\n\n  DDBHelper.filterModifiers(miscModifiers, \"bonus\", \"armor-class\", [\"\", null], true).forEach((bonus) => {\n    const component = DDBHelper.findComponentByComponentId(this.source.ddb, bonus.componentId);\n    const name = component ? component.definition?.name ?? component.name : `AC: Misc (${bonus.friendlySubtypeName})`;\n    const effect = generateBonusACEffect([bonus], name, \"armor-class\", null);\n    if (effect.changes.length > 0) bonusEffects.push(effect);\n  });\n\n  this.source.ddb.character.characterValues.filter((value) =>\n    (value.typeId === 3 || value.typeId === 2)\n    && value.value !== 0\n  ).forEach((custom) => {\n    const name = custom.notes && custom.notes.trim() !== \"\" ? custom.notes : \"AC: Custom Bonus\";\n    const effect = generateBonusACEffect([], name, \"custom\", null);\n    const key = game.modules.get(\"dae\")?.active\n      ? \"system.attributes.ac.value\"\n      : \"system.attributes.ac.bonus\";\n    effect.changes.push({\n      key,\n      value: custom.value,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 30,\n    });\n    bonusEffects.push(effect);\n  });\n\n  miscACBonus += getDualWieldAC(this.source.ddb, miscModifiers);\n\n  // Each racial armor appears to be slightly different!\n  // We care about Tortles and Lizardfolk here as they can use shields, but their\n  // modifier is set differently\n  switch (this.source.ddb.character.race.fullName) {\n    case \"Lizardfolk\":\n      baseAC = Math.max(getUnarmoredAC(this.source.ddb.character.modifiers.race, this.raw.character));\n      equippedArmor.push(getBaseArmor(baseAC, \"Natural Armor\", this.source.ddb.character.race.fullName));\n      break;\n    case \"Autognome\":\n    case \"Thri-kreen\":\n    case \"Loxodon\":\n    case \"Tortle\":\n      baseAC = Math.max(getMinimumBaseAC(this.source.ddb.character.modifiers.race, this.raw.character), getUnarmoredAC(this.source.ddb.character.modifiers.race, this.raw.character));\n      equippedArmor.push(getBaseArmor(baseAC, \"Natural Armor\", this.source.ddb.character.race.fullName));\n      break;\n    default:\n      equippedArmor.push(getBaseArmor(baseAC, \"Unarmored\"));\n  }\n\n  const shields = equippedArmor.filter((shield) => shield.definition.armorTypeId === 4);\n  const armors = equippedArmor.filter((armour) => armour.definition.armorTypeId !== 4);\n\n  logger.debug(\"Calculated GearAC: \" + gearAC);\n  logger.debug(\"Unarmoured AC Bonus:\" + unarmoredACBonus);\n  logger.debug(\"Calculated MiscACBonus: \" + miscACBonus);\n  logger.debug(\"Equipped AC Options: \", equippedArmor);\n  logger.debug(\"Armors: \", armors);\n  logger.debug(\"Shields: \", shields);\n\n  const calculatedArmor = {\n    gearAC,\n    unarmoredACBonus,\n    miscACBonus,\n    equippedArmor,\n    armors,\n    shields,\n  };\n  const results = calculateACOptions(this.source.ddb, this.raw.character, calculatedArmor);\n\n  logger.debug(\"Calculated AC Results:\", results);\n  // get the max AC we can use from our various computed values\n  // const max = Math.max(...results.armorClassValues.map((type) => type.value));\n\n  //\n  // DND5E.armorClasses = {\n  //   \"default\": {\n\n\n  // const draconic = ddb.classes[0].classFeatures[1].definition\n  const classFeatures = getAllClassFeatures(this.source.ddb.character);\n  logger.debug(\"Class features\", classFeatures);\n\n  let calc = \"default\";\n  let flat = null;\n  if (classFeatures.some((kf) =>\n    kf.className === \"Sorcerer\"\n    && kf.subclassName === \"Draconic Bloodline\"\n    && kf.name === \"Draconic Resilience\"\n  )) calc = \"draconic\";\n\n  if (classFeatures.some((kf) =>\n    kf.className === \"Monk\"\n    && kf.subclassName === null\n    && kf.name === \"Unarmored Defense\"\n  )) calc = \"unarmoredMonk\";\n\n  if (classFeatures.some((kf) =>\n    kf.className === \"Barbarian\"\n    && kf.subclassName === null\n    && kf.name === \"Unarmored Defense\"\n  )) calc = \"unarmoredBarb\";\n\n  if (results.maxType === \"Natural\") {\n    calc = \"natural\";\n    flat = results.actorBase;\n  }\n\n  logger.debug(\"AC Results:\", {\n    fixed: {\n      type: \"Number\",\n      label: \"Armor Class\",\n      value: results.maxValue,\n    },\n    base: results.actorBase,\n    effects: results.effects,\n    bonusEffects: bonusEffects,\n    override: {\n      flat: results.maxValue,\n      calc: \"flat\",\n      formula: \"\",\n    },\n    auto: {\n      flat,\n      calc,\n      formula: \"\",\n    },\n  });\n\n  this.raw.character.system.attributes.ac = {\n    flat,\n    calc,\n    formula: \"\",\n  };\n  this.raw.character.effects = this.raw.character.effects.concat(bonusEffects);\n\n  this.raw.character.flags.ddbimporter.acEffects = results.effects;\n  this.raw.character.flags.ddbimporter.baseAC = results.actorBase;\n  this.raw.character.flags.ddbimporter.autoAC = deepClone(this.raw.character.system.attributes.ac);\n  this.raw.character.flags.ddbimporter.overrideAC = {\n    flat: results.maxValue,\n    calc: \"flat\",\n    formula: \"\",\n  };\n\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._setSpecialTraitFlags = function _setSpecialTraitFlags() {\n  this.raw.character.flags.dnd5e = {\n    powerfulBuild: false,\n    savageAttacks: false,\n    elvenAccuracy: false,\n    halflingLucky: false,\n    initiativeAdv: false,\n    initiativeAlert: false,\n    jackOfAllTrades: false,\n    weaponCriticalThreshold: 20,\n    observantFeat: false,\n    remarkableAthlete: false,\n    reliableTalent: false,\n    diamondSoul: false,\n    meleeCriticalDamageDice: 0,\n    wildMagic: false,\n    spellSniper: false,\n  };\n\n  // powerful build/equine build\n  this.raw.character.flags.dnd5e.powerfulBuild = this.source.ddb.character.race.racialTraits.some(\n    (trait) => trait.definition.name === \"Equine Build\" || trait.definition.name === \"Powerful Build\"\n  );\n\n  // savage attacks\n  const savageAttacks = this.source.ddb.character.race.racialTraits.some(\n    (trait) => trait.definition.name === \"Savage Attacks\"\n  );\n  this.raw.character.flags.dnd5e.savageAttacks = savageAttacks;\n  if (savageAttacks) this.raw.character.flags.dnd5e.meleeCriticalDamageDice += 1;\n\n  // halfling lucky\n  this.raw.character.flags.dnd5e.halflingLucky = this.source.ddb.character.race.racialTraits.some(\n    (trait) => trait.definition.name === \"Lucky\"\n  );\n\n  // elven accuracy\n  this.raw.character.flags.dnd5e.elvenAccuracy = this.source.ddb.character.feats.some(\n    (feat) => feat.definition.name === \"Elven Accuracy\"\n  );\n\n  // alert feat\n  this.raw.character.flags.dnd5e.initiativeAlert = this.source.ddb.character.feats.some(\n    (feat) => feat.definition.name === \"Alert\"\n  );\n\n  // advantage on initiative\n  this.raw.character.flags.dnd5e.initiativeAdv\n    = DDBHelper.filterBaseModifiers(this.source.ddb, \"advantage\", \"initiative\").length > 0;\n\n  // initiative half prof\n  this.raw.character.flags.dnd5e.initiativeHalfProf\n    = DDBHelper.filterBaseModifiers(this.source.ddb, \"half-proficiency\", \"initiative\").length > 0;\n\n  // observant\n  this.raw.character.flags.dnd5e.observantFeat = this.source.ddb.character.feats.some(\n    (feat) => feat.definition.name === \"Observant\"\n  );\n\n  // weapon critical threshold\n  // fighter improved crit\n  // remarkable athlete\n  this.source.ddb.character.classes.forEach((cls) => {\n    if (cls.subclassDefinition) {\n      // Improved Critical\n      const improvedCritical = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Improved Critical\" && cls.level >= feature.requiredLevel\n      );\n      const superiorCritical = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Superior Critical\" && cls.level >= feature.requiredLevel\n      );\n\n      if (superiorCritical) {\n        this.raw.character.flags.dnd5e.weaponCriticalThreshold = 18;\n      } else if (improvedCritical && this.raw.character.flags.dnd5e.weaponCriticalThreshold > 19) {\n        this.raw.character.flags.dnd5e.weaponCriticalThreshold = 19;\n      }\n\n      // Remarkable Athlete\n      this.raw.character.flags.dnd5e.remarkableAthlete = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Remarkable Athlete\" && cls.level >= feature.requiredLevel\n      );\n\n      // wild magic surge for 5e Helpers\n      this.raw.character.flags.dnd5e.wildMagic = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Wild Magic Surge\" && cls.level >= feature.requiredLevel\n      );\n    }\n\n    // Brutal Critical\n    this.raw.character.flags.dnd5e.meleeCriticalDamageDice += cls.definition.classFeatures.filter(\n      (feature) => feature.name === \"Brutal Critical\" && cls.level >= feature.requiredLevel\n    ).length;\n\n    // Diamond Soul\n    this.raw.character.flags.dnd5e.diamondSoul = cls.definition.classFeatures.some(\n      (feature) => feature.name === \"Diamond Soul\" && cls.level >= feature.requiredLevel\n    );\n\n    // Jack of All Trades\n    this.raw.character.flags.dnd5e.jackOfAllTrades = cls.definition.classFeatures.some(\n      (feature) => feature.name === \"Jack of All Trades\" && cls.level >= feature.requiredLevel\n    );\n\n    // Reliable Talent\n    this.raw.character.flags.dnd5e.reliableTalent = cls.definition.classFeatures.some(\n      (feature) => feature.name === \"Reliable Talent\" && cls.level >= feature.requiredLevel\n    );\n  });\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._getCustomProficiencies = function _getCustomProficiencies(type) {\n  const profGroup = CONFIG.DDB.proficiencyGroups.find((group) => group.label == type);\n  const profCharacterValues = this.source.ddb.character.characterValues.filter(\n    (value) =>\n      profGroup.customAdjustments.includes(parseInt(value.typeId))\n      && profGroup.entityTypeIds.includes(parseInt(value.valueTypeId))\n      && value.value == 3\n  );\n  const customProfs = CONFIG.DDB[type.toLowerCase()]\n    .filter((prof) => profCharacterValues.some((value) => value.valueId == prof.id))\n    .map((prof) => prof.name);\n\n  return customProfs;\n};\n\nDDBCharacter.prototype._getCoreProficiencies = function _getCoreProficiencies(includeItemEffects = false) {\n  return DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"proficiency\", null, null, includeItemEffects)\n    .map((proficiency) => {\n      return { name: proficiency.friendlySubtypeName };\n    });\n};\n\n\nDDBCharacter.prototype.getArmorProficiencies = function getArmorProficiencies(proficiencyArray) {\n  let values = [];\n  let custom = [];\n\n  // lookup the characters's proficiencies in the DICT\n  let allProficiencies = DICTIONARY.character.proficiencies.filter((prof) => prof.type === \"Armor\");\n  proficiencyArray.forEach((prof) => {\n    if (prof.name === \"Light Armor\" && !values.includes(\"lgt\")) {\n      values.push(\"lgt\");\n    }\n    if (prof.name === \"Medium Armor\" && !values.includes(\"med\")) {\n      values.push(\"med\");\n    }\n    if (prof.name === \"Heavy Armor\" && !values.includes(\"hvy\")) {\n      values.push(\"hvy\");\n    }\n    if (prof.name === \"Shields\" && !values.includes(\"shl\")) {\n      values.push(\"shl\");\n    }\n    if (allProficiencies.find((p) => p.name === prof.name) !== undefined && !custom.includes(prof.name)) {\n      custom.push(prof.name);\n    }\n  });\n\n  if (this.source?.ddb) {\n    // load custom proficiencies in characterValues\n    const customProfs = this._getCustomProficiencies(\"Armor\");\n    custom = custom.concat(customProfs);\n  }\n  return {\n    value: [...new Set(values)],\n    custom: [...new Set(custom)].join(\";\"),\n  };\n};\n\n//\n// DND5E.toolProficiencies = {\n// \"art\": \"Artisan's Tools\",\n// \"disg\": \"Disguise Kit\",\n// \"forg\": \"Forgery Kit\",\n// \"game\": \"Gaming Set\",\n// \"herb\": \"Herbalism Kit\",\n// \"music\": \"Musical Instrument\",\n// \"navg\": \"Navigator's Tools\",\n// \"pois\": \"Poisoner's Kit\",\n// \"thief\": \"Thieves' Tools\",\n// \"vehicle\": \"Vehicle (Land or Water)\"\n// };\n//\nDDBCharacter.prototype.getToolProficiencies = function getToolProficiencies(proficiencyArray) {\n  let values = [];\n  let custom = [];\n\n  // lookup the characters's proficiencies in the DICT\n  let allToolProficiencies = DICTIONARY.character.proficiencies\n    .filter((prof) => prof.type === \"Tool\")\n    .map((prof) => {\n      return prof;\n    });\n\n  proficiencyArray.forEach((prof) => {\n    // Some have values we can match too in foundry, others have to be custom imported\n    switch (prof.name) {\n      default: {\n        const allProfMatch = allToolProficiencies.find((allProf) => allProf.name === prof.name);\n        if (allProfMatch && allProfMatch.baseTool && allProfMatch.baseTool !== \"\") {\n          values.push(allProfMatch.baseTool);\n        } else if (allProfMatch) {\n          custom.push(prof.name);\n        }\n      }\n    }\n  });\n\n  if (this.source?.ddb) {\n    // Custom proficiencies!\n    this.source.ddb.character.customProficiencies.forEach((proficiency) => {\n      if (proficiency.type === 2) {\n        // type 2 is TOOL, 1 is SKILL, 3 is LANGUAGE\n        custom.push(proficiency.name);\n      }\n    });\n\n    // load custom proficiencies in characterValues\n    const customProfs = this._getCustomProficiencies(\"Tools\");\n    custom = custom.concat(customProfs);\n  }\n\n  return {\n    value: [...new Set(values)],\n    custom: [...new Set(custom)].join(\";\"),\n  };\n};\n\nDDBCharacter.prototype.getWeaponProficiencies = function getWeaponProficiencies(proficiencyArray) {\n  let values = [];\n  let custom = [];\n\n  // lookup the characters's proficiencies in the DICT\n  const allProficiencies = DICTIONARY.character.proficiencies.filter((prof) => prof.type === \"Weapon\");\n  proficiencyArray.forEach((prof) => {\n    if (prof.name === \"Simple Weapons\" && !values.includes(\"sim\")) {\n      values.push(\"sim\");\n    }\n    if (prof.name === \"Martial Weapons\" && !values.includes(\"mar\")) {\n      values.push(\"mar\");\n    }\n    // new  1.5\n    const systemWeaponIds = CONFIG.DND5E.weaponIds;\n    const dnd5eNameArray = prof.name.toLowerCase().split(\",\");\n    const dnd5eName = dnd5eNameArray.length === 2\n      ? `${dnd5eNameArray[1].trim()}${dnd5eNameArray[0].trim()}`\n      : prof.name.toLowerCase();\n    if (systemWeaponIds && dnd5eName in systemWeaponIds) {\n      if (!values.includes(dnd5eName)) values.push(dnd5eName);\n    } else if (allProficiencies.some((p) => p.name === prof.name) && !custom.includes(prof.name)) {\n      custom.push(prof.name);\n    }\n  });\n\n  if (this.source?.ddb) {\n    // load custom proficiencies in characterValues\n    const customProfs = this._getCustomProficiencies(\"Weapons\");\n    custom = custom.concat(customProfs);\n  }\n\n  return {\n    value: [...new Set(values)],\n    custom: [...new Set(custom)].join(\"; \"),\n  };\n};\n\nDDBCharacter.prototype.getLanguagesFromModifiers = function getLanguagesFromModifiers(modifiers) {\n  let languages = [];\n  let custom = [];\n\n  modifiers\n    .filter((mod) => mod.type === \"language\")\n    .forEach((language) => {\n      let result = DICTIONARY.character.languages.find((lang) => lang.name === language.friendlySubtypeName);\n      if (result) {\n        languages.push(result.value);\n      } else {\n        custom.push(language.friendlySubtypeName);\n      }\n    });\n\n  if (this.source?.ddb) {\n    this.source.ddb.character.customProficiencies.forEach((proficiency) => {\n      if (proficiency.type === 3) {\n        // type 3 is LANGUAGE, 1 is SKILL, 2 is TOOL\n        custom.push(proficiency.name);\n      }\n    });\n\n    // load custom proficiencies in characterValues\n    const customProfs = this._getCustomProficiencies(\"Languages\");\n    custom = custom.concat(customProfs);\n  }\n\n  return {\n    value: languages,\n    custom: custom.map((entry) => utils.capitalize(entry)).join(\";\"),\n  };\n};\n\nDDBCharacter.prototype._generateLanguages = function _generateLanguages() {\n  const modifiers = DDBHelper.filterBaseModifiers(this.source.ddb, \"language\");\n  this.raw.character.system.traits.languages = this.getLanguagesFromModifiers(modifiers);\n};\n\nDDBCharacter.prototype._generateProficiencies = function _generateProficiencies() {\n  const customProficiencies = [\n    ...this._getCustomProficiencies(\"Armor\"),\n    ...this._getCustomProficiencies(\"Tools\"),\n    ...this._getCustomProficiencies(\"Weapons\"),\n    ...this._getCustomProficiencies(\"Languages\"),\n  ].map((proficiency) => {\n    return { name: proficiency };\n  });\n\n  this.proficiencies = this._getCoreProficiencies(false).concat(customProficiencies);\n  this.proficienciesIncludingEffects = this._getCoreProficiencies(true).concat(customProficiencies);\n\n  this.raw.character.flags.ddbimporter.dndbeyond.proficiencies = this.proficiencies;\n  this.raw.character.flags.ddbimporter.dndbeyond.proficienciesIncludingEffects = this.proficienciesIncludingEffects;\n\n  this.raw.character.system.traits.weaponProf = this.getWeaponProficiencies(this.proficiencies);\n  this.raw.character.system.traits.armorProf = this.getArmorProficiencies(this.proficiencies);\n  this.raw.character.system.traits.toolProf = this.getToolProficiencies(this.proficiencies);\n  this._generateLanguages();\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { generateBaseSkillEffect } from \"../../effects/effects.js\";\nimport logger from \"../../logger.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._isHalfProficiencyRoundedUp = function _isHalfProficiencyRoundedUp (skill, modifiers = null) {\n  const longAbility = DICTIONARY.character.abilities\n    .filter((ability) => skill.ability === ability.value)\n    .map((ability) => ability.long)[0];\n\n  const roundUp = (modifiers)\n    ? DDBHelper.filterModifiers(modifiers, \"half-proficiency-round-up\", `${longAbility}-ability-checks`)\n    : DDBHelper.filterBaseModifiers(this.source?.ddb, \"half-proficiency-round-up\", `${longAbility}-ability-checks`, [\"\", null], true);\n  return Array.isArray(roundUp) && roundUp.length;\n};\n\nDDBCharacter.prototype.getSkillProficiency = function getSkillProficiency (skill, modifiers = null) {\n  if (!modifiers) {\n    modifiers = [\n      DDBHelper.getChosenClassModifiers(this.source.ddb, true),\n      DDBHelper.getModifiers(this.source.ddb, \"race\", true),\n      DDBHelper.getModifiers(this.source.ddb, \"background\", true),\n      DDBHelper.getModifiers(this.source.ddb, \"feat\", true),\n      DDBHelper.getActiveItemModifiers(this.source.ddb, true),\n    ].flat();\n  }\n\n  const skillMatches = modifiers\n    .filter((modifier) => modifier.friendlySubtypeName === skill.label)\n    .map((mod) => mod.type);\n\n  const halfProficiency = modifiers.find(\n    (modifier) =>\n    // Jack of All trades/half-rounded down\n      (modifier.type === \"half-proficiency\" && modifier.subType === \"ability-checks\")\n        // e.g. champion for specific ability checks\n        || this._isHalfProficiencyRoundedUp(skill, modifiers)\n  ) !== undefined\n    ? 0.5\n    : 0;\n\n  const proficient = skillMatches.includes(\"expertise\") ? 2 : skillMatches.includes(\"proficiency\") ? 1 : halfProficiency;\n\n  return proficient;\n};\n\nDDBCharacter.prototype.getCustomSkillProficiency = function getCustomSkillProficiency(skill) {\n  // Overwrite the proficient value with any custom set over rides\n  if (this.source.ddb.character.characterValues) {\n    const customProficiency = this.source.ddb.character.characterValues.find(\n      (value) => value.typeId === 26 && value.valueId == skill.valueId && value.value\n    );\n    if (customProficiency) {\n      return DICTIONARY.character.customSkillProficiencies.find((prof) => prof.value === customProficiency.value)\n        .proficient;\n    }\n  }\n  return undefined;\n};\n\nDDBCharacter.prototype.getCustomSkillAbility = function getCustomSkillAbility(skill) {\n  // Overwrite the proficient value with any custom set over rides\n  let mod;\n  if (this.source.ddb.character.characterValues) {\n    const customAbility = this.source.ddb.character.characterValues.find(\n      (value) => value.typeId === 27 && value.valueId == skill.valueId\n    );\n    if (customAbility) {\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.id == customAbility.value);\n      if (ability)\n        mod = ability.value;\n    }\n  }\n  return mod;\n};\n\nDDBCharacter.prototype.getCustomSkillBonus = function getCustomSkillBonus(skill) {\n  // Get any custom skill bonuses\n  if (this.source.ddb.character.characterValues) {\n    const customBonus = this.source.ddb.character.characterValues.filter(\n      (value) => (value.typeId == 24 || value.typeId == 25) && value.valueId == skill.valueId\n    ).reduce((total, bonus) => {\n      return total + bonus.value;\n    }, 0);\n\n    if (customBonus) {\n      return customBonus;\n    }\n  }\n  return 0;\n};\n\nDDBCharacter.prototype._setSpecialSkills = function _setSpecialSkills() {\n  this.source.ddb.character.classes.forEach((klass) => {\n    if (klass.subclassDefinition) {\n      const silverTongue = klass.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Silver Tongue\" && klass.level >= feature.requiredLevel\n      );\n      if (silverTongue) {\n        this.raw.character.system.skills[\"per\"].bonuses.minimum = 10;\n        this.raw.character.system.skills[\"dec\"].bonuses.minimum = 10;\n      }\n    }\n  });\n};\n\nDDBCharacter.prototype._generateCustomSkills = async function _generateCustomSkills() {\n  if (!game.modules.get(\"dnd5e-custom-skills\")?.active) return;\n  const version = game.modules.get(\"dnd5e-custom-skills\")?.version;\n  const newEnough = foundry.utils.isNewerVersion(version, \"1.1.2\");\n  if (!newEnough) return;\n\n  const customSkillData = this.source.ddb.character.customProficiencies\n    .filter((prof) => prof.type === 1 && Number.isInteger(prof.statId))\n    .map((prof) => {\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.id == prof.statId);\n      return {\n        ability: ability.value,\n        label: prof.name,\n        proficiencyLevel: prof.proficiencyLevel,\n        miscBonus: prof.miscBonus,\n        magicBonus: prof.magicBonus,\n        override: prof.override,\n      };\n    });\n\n  const skillData = {};\n\n  for (let i = 0; i < customSkillData.length; i++) {\n    skillData[i] = customSkillData[i];\n  }\n\n  const customSkills = await window.dnd5eCustomSkills(\"add\", { skills: skillData });\n\n  for (const [key, value] of Object.entries(customSkills.skills.list)) {\n    if (value.applied || value.applied === 1) {\n      const customSkillMatch = customSkillData.find((customSkill) => customSkill.label === value.label);\n      if (customSkillMatch) {\n        logger.debug(`Adding custom skill ${value.label}`, { key, value, customSkillMatch });\n        const prof = DICTIONARY.character.customSkillProficiencies.find((proficiency) =>\n          proficiency.value === customSkillMatch.proficiencyLevel\n        ).proficient;\n        const miscBonus = customSkillMatch.miscBonus && customSkillMatch.miscBonus !== \"\" && customSkillMatch.miscBonus !== 0\n          ? `+ ${customSkillMatch.miscBonus}`\n          : \"\";\n        const magicBonus = customSkillMatch.magicBonus && customSkillMatch.magicBonus !== \"\" && customSkillMatch.magicBonus !== 0\n          ? ` + ${customSkillMatch.magicBonus}`\n          : \"\";\n        if (customSkillMatch) {\n          this.raw.character.system.skills[key] = {\n            type: \"Number\",\n            label: value.label,\n            ability: value.ability,\n            value: prof,\n            mod: utils.calculateModifier(value),\n            bonus: 0,\n            bonuses: {\n              \"check\": `${(miscBonus + magicBonus).trim()}`,\n              \"passive\": \"\",\n              \"minimum\": null,\n            },\n          };\n        }\n      }\n    }\n  }\n};\n\nDDBCharacter.prototype._generateSkills = async function _generateSkills() {\n  const addEffects = game.modules.get(\"dae\")?.active;\n\n  if (!addEffects) this.raw.character.flags['skill-customization-5e'] = {};\n  DICTIONARY.character.skills.forEach((skill) => {\n    const customProficient = this.getCustomSkillProficiency(skill);\n    // we use !== undefined because the return value could be 0, which is falsey\n    const proficient = customProficient !== undefined ? customProficient : this.getSkillProficiency(skill);\n\n    // some abilities round half prof up, some down\n    const proficiencyBonus = this._isHalfProficiencyRoundedUp(skill)\n      ? Math.ceil(2 * this.raw.character.system.attributes.prof * proficient)\n      : Math.floor(2 * this.raw.character.system.attributes.prof * proficient);\n\n    // Skill bonuses\n    const skillModifierBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", skill.subType)\n      .map((skl) => skl.value)\n      .reduce((a, b) => a + b, 0) ?? 0;\n    const customSkillBonus = this.getCustomSkillBonus(skill);\n    const skillBonus = skillModifierBonus + customSkillBonus;\n    const value = this.raw.character.system.abilities[skill.ability].value + proficiencyBonus + skillBonus;\n    const customAbility = this.getCustomSkillAbility(skill);\n    const ability = customAbility !== undefined ? customAbility : skill.ability;\n\n    // custom skill ability over ride effects\n    if (customAbility) {\n      const label = \"Skill Ability Changes\";\n      const change = {\n        key: `data.skills.${skill.name}.ability`,\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: `${customAbility}`,\n        priority: \"20\"\n      };\n\n      const changeIndex = this.raw.character.effects.findIndex((effect) => effect.label === label);\n      if (changeIndex >= 0) {\n        this.raw.character.effects[changeIndex].changes.push(change);\n      } else {\n        let skillEffect = generateBaseSkillEffect(this.source.ddb.character.id, label);\n        skillEffect.changes.push(change);\n        this.raw.character.effects.push(skillEffect);\n      }\n    }\n\n    this.raw.character.system.skills[skill.name] = {\n      type: \"Number\",\n      label: skill.label,\n      ability: ability,\n      value: proficient,\n      mod: utils.calculateModifier(value),\n      bonus: 0,\n      bonuses: {\n        check: `${skillBonus}`,\n        passive: \"\",\n        minimum: null,\n      },\n    };\n  });\n\n  await this._generateCustomSkills();\n  this._setSpecialSkills();\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\n// import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateAbilitiesOverrides = function _generateAbilitiesOverrides() {\n  DICTIONARY.character.abilities.forEach((ability) => {\n    this.abilities.overrides[ability.value]\n      = this.source.ddb.character.overrideStats.find((stat) => stat.id === ability.id).value || 0;\n  });\n  this.raw.character.flags.ddbimporter.dndbeyond.abilityOverrides = this.abilities.overrides;\n};\n\nDDBCharacter.prototype._getCustomSaveProficiency = function _getCustomSaveProficiency(ability) {\n  // Overwrite the proficient value with any custom set over rides\n  if (this.source.ddb.character.characterValues) {\n    const customProficiency = this.source.ddb.character.characterValues.find(\n      (value) => value.typeId === 41 && value.valueId == ability.id && value.value\n    );\n    if (customProficiency) {\n      if (customProficiency.value === 1) {\n        return 0;\n      }\n      // Foundry does not support half proficiencies or expertise here\n      return 1;\n    }\n  }\n  return undefined;\n};\n\nDDBCharacter.prototype._getCustomSaveBonus = function _getCustomSaveBonus(ability) {\n  // Get any custom skill bonuses\n  if (this.source.ddb.character.characterValues) {\n    const customBonus = this.source.ddb.character.characterValues\n      .filter((value) => (value.typeId == 40 || value.typeId == 39) && value.valueId == ability.id)\n      .reduce((total, bonus) => {\n        return total + bonus.value;\n      }, 0);\n\n    if (customBonus) {\n      return customBonus;\n    }\n  }\n  return 0;\n};\n\n/**\n * Retrieves character abilities, including proficiency on saving throws\n * @param {obj} includeExcludedEffects Include effects from dae added items?\n */\nDDBCharacter.prototype._getAbilities = function _getAbilities(includeExcludedEffects = false) {\n  let result = {};\n  DICTIONARY.character.abilities.forEach((ability) => {\n    result[ability.value] = {\n      value: 0,\n      min: 3,\n      max: 20,\n      proficient: 0,\n    };\n\n    const stat = this.source.ddb.character.stats.find((stat) => stat.id === ability.id).value || 0;\n    const abilityScoreMaxBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", \"ability-score-maximum\", [null, \"\"], includeExcludedEffects)\n      .filter((mod) => mod.statId === ability.id)\n      .reduce((prev, cur) => prev + cur.value, 0);\n    const bonusStatRestrictions = [\n      null,\n      \"\",\n      \"+2 to score maximum\",\n      \"+4 to score maximum\",\n      \"+2 to maximum score\",\n      \"+4 to maximum score\",\n      \"Can't be an Ability Score you already increased with this trait.\",\n    ];\n    const bonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", `${ability.long}-score`, bonusStatRestrictions, includeExcludedEffects)\n      .filter((mod) => mod.entityId === ability.id)\n      .reduce((prev, cur) => prev + cur.value, 0);\n    const setAbilities = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"set\", `${ability.long}-score`, [null, \"\", \"if not already higher\"], includeExcludedEffects)\n      .map((mod) => mod.value);\n    const modRestrictions = [\"Your maximum is now \", \"Maximum of \"];\n    const cappedBonusExp = new RegExp(`(?:${modRestrictions.join(\"|\")})(\\\\d*)`);\n    const cappedBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", `${ability.long}-score`, false, includeExcludedEffects)\n      .filter(\n        (mod) =>\n          mod.entityId === ability.id\n          && mod.restriction\n          && modRestrictions.some((m) => mod.restriction.startsWith(m))\n      )\n      .reduce(\n        (prev, cur) => {\n          const restricted = cur.restriction ? cappedBonusExp.exec(cur.restriction) : undefined;\n          const max = restricted ? restricted[1] : 20;\n          return {\n            value: prev.value + cur.value,\n            cap: Math.max(prev.cap, max),\n          };\n        },\n        { value: 0, cap: 20 + abilityScoreMaxBonus }\n      );\n    // applied regardless of cap\n    const bonusStat = this.source.ddb.character.bonusStats.find((stat) => stat.id === ability.id).value || 0;\n    // over rides all other calculations if present\n    const overrideStat = this.source.ddb.character.overrideStats.find((stat) => stat.id === ability.id).value || 0;\n\n    const setAbility = Math.max(...[0, ...setAbilities]);\n    const calculatedStat = stat + bonus + cappedBonus.value;\n    // bonus gets added regardlesss of normal caps\n    const maxAdjustedStat = Math.min(cappedBonus.cap, calculatedStat) + bonusStat;\n    // some items will set the ability score if lower\n    const setAbilityState = maxAdjustedStat > setAbility ? maxAdjustedStat : setAbility;\n    // Is there a hard over ride?\n    const overRiddenStat = overrideStat === 0 ? setAbilityState : overrideStat;\n    const customProficiency = this._getCustomSaveProficiency(ability);\n\n    const proficient = customProficiency\n      ? customProficiency\n      : DDBHelper.filterBaseModifiers(this.source.ddb, \"proficiency\", `${ability.long}-saving-throws`, [null, \"\"], includeExcludedEffects).length > 0\n        ? 1\n        : 0;\n\n    // update value, mod and proficiency\n    result[ability.value].value = overRiddenStat;\n    result[ability.value].mod = utils.calculateModifier(result[ability.value].value);\n    result[ability.value].proficient = proficient;\n    result[ability.value].max = Math.max(cappedBonus.cap, overRiddenStat);\n  });\n\n  return result;\n};\n\nDDBCharacter.prototype._getAbilitiesBonuses = function (includeExcludedEffects = false) {\n\n  let result = {};\n  DICTIONARY.character.abilities.forEach((ability) => {\n    result[ability.value] = {\n      bonuses: {\n        check: \"\",\n        save: \"\",\n        checkMinimum: null,\n        saveMinimum: null,\n      },\n    };\n\n    const checkBonusModifiers = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", `${ability.long}-ability-checks`, [null, \"\"], includeExcludedEffects);\n    const checkBonus = DDBHelper.getModifierSum(checkBonusModifiers, this.raw.character);\n    if (checkBonus && checkBonus !== \"\") {\n      result[ability.value].bonuses.check = `+ ${checkBonus}`;\n    }\n\n    const saveBonusModifiers = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", `${ability.long}-saving-throws`, [null, \"\"], includeExcludedEffects);\n    const modifiersSaveBonus = DDBHelper.getModifierSum(saveBonusModifiers, this.raw.character);\n    const customSaveBonus = this._getCustomSaveBonus(ability);\n\n    if (modifiersSaveBonus && modifiersSaveBonus !== \"\" && parseInt(modifiersSaveBonus)) {\n      if (customSaveBonus) {\n        const totalSave = parseInt(customSaveBonus) + parseInt(modifiersSaveBonus);\n        // console.warn(\"totalSave\", totalSave);\n        result[ability.value].bonuses.save = `+ ${totalSave}`;\n      } else {\n        result[ability.value].bonuses.save = `+ ${modifiersSaveBonus}`;\n      }\n    } else if (modifiersSaveBonus && modifiersSaveBonus !== \"\") {\n      if (customSaveBonus) {\n        result[ability.value].bonuses.save = `+ ${modifiersSaveBonus} + ${customSaveBonus}`;\n      } else {\n        result[ability.value].bonuses.save = `+ ${modifiersSaveBonus}`;\n      }\n    } else if (customSaveBonus) {\n      result[ability.value].bonuses.save = `+ ${customSaveBonus}`;\n    }\n  });\n\n  return result;\n};\n\n/**\n * Retrieves character abilities, including proficiency on saving throws\n * @param {obj} includeExcludedEffects Include effects from dae added items?\n */\nDDBCharacter.prototype._generateBaseAbilities = function (includeExcludedEffects = false) {\n  this.raw.character.system.abilities = this._getAbilities(includeExcludedEffects);\n};\n\n\n/**\n * Generates character abilities, including proficiency on saving throws\n */\nDDBCharacter.prototype._generateAbilities = function _generateAbilities() {\n  // go through every ability\n\n  // we need to populate some base abilities to work out bonuses\n  this._generateBaseAbilities(false);\n\n  this.abilities.core = mergeObject(this._getAbilities(false), this._getAbilitiesBonuses(false));\n  this.abilities.withEffects = mergeObject(this._getAbilities(true), this._getAbilitiesBonuses(true));\n  this.raw.character.system.abilities = this.abilities.core;\n  this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities = this.abilities.withEffects;\n\n  this._generateAbilitiesOverrides();\n\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateHitPoints = function _generateHitPoints() {\n  const constitutionHP = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities.con.mod * this.raw.character.flags.ddbimporter.dndbeyond.totalLevels;\n  const baseHitPoints = this.source.ddb.character.baseHitPoints || 0;\n  const bonusHitPoints = this.source.ddb.character.bonusHitPoints || 0;\n  const overrideHitPoints = this.source.ddb.character.overrideHitPoints || 0;\n  const removedHitPoints = this.source.ddb.character.removedHitPoints || 0;\n  const temporaryHitPoints = this.source.ddb.character.temporaryHitPoints || 0;\n\n  // get all hit points features\n  const bonusHitPointFeatures = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", \"hit-points-per-level\");\n  const bonusHitPointFeaturesWithEffects = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", \"hit-points-per-level\", [\"\", null], true);\n\n  // get their values\n  const bonusHitPointValues = bonusHitPointFeatures.map((bonus) => {\n    const cls = DDBHelper.findClassByFeatureId(this.source.ddb, bonus.componentId);\n    if (cls) {\n      return cls.level * bonus.value;\n    } else {\n      return this.raw.character.flags.ddbimporter.dndbeyond.totalLevels * bonus.value;\n    }\n  });\n\n  const bonusHitPointValuesWithEffects = bonusHitPointFeaturesWithEffects.map((bonus) => {\n    const cls = DDBHelper.findClassByFeatureId(this.source.ddb, bonus.componentId);\n    if (cls) {\n      return cls.level * bonus.value;\n    } else {\n      return this.raw.character.flags.ddbimporter.dndbeyond.totalLevels * bonus.value;\n    }\n  });\n\n  // sum up the bonus HP per class level\n  const totalBonusHitPoints = bonusHitPointValues.reduce((prev, cur) => prev + cur, 0);\n  const totalBonusHPWithEffects = bonusHitPointValuesWithEffects.reduce((prev, cur) => prev + cur, 0);\n  const bonusHPEffectDiff = totalBonusHPWithEffects - totalBonusHitPoints;\n\n  // add the result to the base hitpoints\n  // baseHitPoints += totalBonusHitPoints;\n\n  const totalHitPoints = overrideHitPoints === 0\n    ? constitutionHP + baseHitPoints + bonusHitPoints + totalBonusHitPoints\n    : overrideHitPoints;\n\n  this.raw.character.system.attributes.hp = {\n    value: totalHitPoints - removedHitPoints + bonusHPEffectDiff,\n    min: 0,\n    max: totalHitPoints,\n    temp: temporaryHitPoints,\n    tempmax: bonusHitPoints,\n  };\n};\n\nDDBCharacter.prototype._generateHitDice = function _generateHitDice() {\n  const used = this.source.ddb.character.classes.reduce((prev, cls) => prev + cls.hitDiceUsed, 0);\n  const total = this.source.ddb.character.classes.reduce((prev, cls) => prev + cls.level, 0);\n  this.raw.character.system.attributes.hd = total - used;\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateInitiative = function _generateInitiative() {\n  const initMods = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", \"initiative\");\n  const initiativeBonus = DDBHelper.getModifierSum(initMods, this.raw.character);\n\n  // If we have the alert Feat set, lets sub 5 so it's correct\n  this.raw.character.system.attributes.init = this.raw.character.flags.dnd5e.initiativeAlert\n    ? {\n      ability: \"dex\",\n      bonus: Number.isInteger(Number.parseInt(initiativeBonus)) ? Number.parseInt(initiativeBonus) - 5 : `${initiativeBonus} - 5`,\n    }\n    : {\n      ability: \"dex\",\n      bonus: Number.isInteger(Number.parseInt(initiativeBonus)) ? Number.parseInt(initiativeBonus) : initiativeBonus,\n    };\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateDeathSaves = function _generateDeathSaves () {\n  this.raw.character.system.attributes.death = {\n    success: this.source.ddb.character.deathSaves.successCount || 0,\n    failure: this.source.ddb.character.deathSaves.failCount || 0,\n  };\n};\n\nDDBCharacter.prototype._generateExhaustion = function _generateExhaustion() {\n  const condition = this.source.ddb.character.conditions.find((condition) => parseInt(condition.id) === 4);\n  this.raw.character.system.attributes.exhaustion = condition\n    ? parseInt(condition.level)\n    : 0;\n};\n\nDDBCharacter.prototype.getGenericConditionAffect = function getGenericConditionAffect(condition, typeId) {\n  const damageTypes = DICTIONARY.character.damageAdjustments\n    .filter((type) => type.kind === condition && type.type === typeId)\n    .map((type) => type.value);\n\n  let result = DDBHelper\n    .filterBaseModifiers(this.source.ddb, condition)\n    .filter((modifier) => modifier.isGranted && damageTypes.includes(modifier.subType)\n      && (modifier.restriction === \"\" || !modifier.restriction))\n    .map((modifier) => {\n      const entry = DICTIONARY.character.damageAdjustments.find(\n        (type) => type.type === typeId && type.kind === modifier.type && type.value === modifier.subType\n      );\n      return entry ? entry.foundryValue || entry.value : undefined;\n    });\n\n  result = result.concat(\n    this.source.ddb.character.customDefenseAdjustments\n      .filter((adjustment) => adjustment.type === typeId)\n      .map((adjustment) => {\n        const entry = DICTIONARY.character.damageAdjustments.find(\n          (type) =>\n            (type.id === adjustment.id || type.id === adjustment.adjustmentId)\n            && type.type === adjustment.type\n            && type.kind === condition\n        );\n        return entry ? entry.foundryValue || entry.value : undefined;\n      })\n      .filter((adjustment) => adjustment !== undefined)\n  );\n\n  return result;\n};\n\nDDBCharacter.prototype._generateConditions = function _generateConditions() {\n  this.raw.character.system.traits.di = {\n    custom: \"\",\n    value: this.getGenericConditionAffect(\"immunity\", 2),\n  };\n  this.raw.character.system.traits.dr = {\n    custom: \"\",\n    value: this.getGenericConditionAffect(\"resistance\", 2),\n  };\n  this.raw.character.system.traits.dv = {\n    custom: \"\",\n    value: this.getGenericConditionAffect(\"vulnerability\", 2),\n  };\n  this.raw.character.system.traits.ci = {\n    custom: \"\",\n    value: this.getGenericConditionAffect(\"immunity\", 1),\n  };\n};\n","import DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateCurrency = function _generateCurrency() {\n  this.raw.character.system.currency = {\n    pp: this.source.ddb.character.currencies.pp,\n    gp: this.source.ddb.character.currencies.gp,\n    ep: this.source.ddb.character.currencies.ep,\n    sp: this.source.ddb.character.currencies.sp,\n    cp: this.source.ddb.character.currencies.cp,\n  };\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype.getSenses = function getSenses() {\n  let senses = {\n    darkvision: 0,\n    blindsight: 0,\n    tremorsense: 0,\n    truesight: 0,\n    units: \"ft\",\n    special: \"\"\n  };\n\n  // custom senses\n  if (this.source.ddb.character.customSenses) {\n    this.source.ddb.character.customSenses\n      .filter((sense) => sense.distance)\n      .forEach((sense) => {\n        const s = DICTIONARY.character.senses.find((s) => s.id === sense.senseId);\n        if (s && sense.distance && Number.isInteger(sense.distance)) {\n          senses[s.name.toLowerCase()] = parseInt(sense.distance);\n        } else {\n          senses.special += `${sense.distance}; `;\n        }\n      });\n  }\n\n  // Base senses\n  for (const senseName in senses) {\n    DDBHelper.filterBaseModifiers(this.source.ddb, \"set-base\", senseName).forEach((sense) => {\n      if (Number.isInteger(sense.value) && sense.value > senses[senseName]) {\n        senses[senseName] = parseInt(sense.value);\n      }\n    });\n  }\n\n  // Devils Sight gives bright light to 120 foot instead of normal darkvision\n  DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"set-base\", \"darkvision\", [\n      \"You can see normally in darkness, both magical and nonmagical\",\n    ])\n    .forEach((sense) => {\n      if (Number.isInteger(sense.value) && sense.value > senses['darkvision']) {\n        senses['darkvision'] = parseInt(sense.value);\n        senses.special += \"You can see normally in darkness, both magical and nonmagical.\";\n      }\n    });\n\n  // Magical bonuses and additional, e.g. Gloom Stalker\n  DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"sense\", \"darkvision\", [\"\", null, \"plus 60 feet if wearer already has Darkvision\"])\n    .forEach((mod) => {\n      const hasSense = mod.subType in senses;\n      if (hasSense && mod.value && Number.isInteger(mod.value)) {\n        senses[mod.subType] += parseInt(mod.value);\n      } else {\n        senses.special += ` ${mod.value},`;\n      }\n    });\n\n  return senses;\n\n};\n\nDDBCharacter.prototype._generateSenses = function _generateSenses() {\n  this.raw.character.system.attributes.senses = this.getSenses();\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateSpeed = function _generateSpeed() {\n\n  // For all processing, we take into account the regular movement types of this character\n  let movementTypes = {};\n  let setToWalking = {};\n  for (const type in this.source.ddb.character.race.weightSpeeds.normal) {\n    // if (data.character.race.weightSpeeds.normal[type] !== 0) {\n    movementTypes[type] = this.source.ddb.character.race.weightSpeeds.normal[type];\n    setToWalking[type] = false;\n    // }\n  }\n\n\n  // get bonus speed mods\n  let restriction = [\"\", null, \"unless your speed is already higher\"];\n  // Check for equipped Heavy Armor\n  const wearingHeavy = this.source.ddb.character.inventory.some((item) => item.equipped && item.definition.type === \"Heavy Armor\");\n  // Accounts for Barbarian Class Feature - Fast Movement\n  if (!wearingHeavy) restriction.push(\"while you aren’t wearing heavy armor\");\n\n  // build base speeds\n  for (let type in movementTypes) {\n    // is there a 'inntate-speed-[type]ing' race/class modifier?\n    const innateType = DICTIONARY.character.speeds.find((s) => s.type === type).innate;\n    let innateSpeeds = this.source.ddb.character.modifiers.race.filter(\n      (modifier) => modifier.type === \"set\" && modifier.subType === `innate-speed-${innateType}`\n    );\n    let base = movementTypes[type];\n\n    innateSpeeds.forEach((speed) => {\n      // take the highest value\n      if (speed.value === null && speed.modifierSubTypeId == 182 && speed.modifierTypeId == 9) {\n        setToWalking[type] = true;\n      } else if (speed.value > base) {\n        base = speed.value;\n      }\n    });\n\n    // overwrite the (perhaps) changed value\n    movementTypes[type] = base;\n  }\n\n  const bonusSpeed = DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"bonus\", \"speed\", restriction)\n    .reduce((speed, feat) => speed + feat.value, 0);\n\n  // speed bonuses\n  for (let type in movementTypes) {\n    let innateBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", `speed-${type}ing`, restriction)\n      .reduce((speed, feat) => speed + feat.value, 0);\n\n    // overwrite the (perhaps) changed value\n    if (movementTypes[type] !== 0) movementTypes[type] += bonusSpeed + innateBonus;\n  }\n\n  // unarmored movement for barbarians and monks\n  if (this.isUnArmored()) {\n    DDBHelper.getChosenClassModifiers(this.source.ddb)\n      .filter((modifier) => modifier.type === \"bonus\" && modifier.subType === \"unarmored-movement\")\n      .forEach((bonusSpeed) => {\n        for (let type in movementTypes) {\n          if (movementTypes[type] !== 0) movementTypes[type] += bonusSpeed.value;\n        }\n      });\n  }\n\n  // new ranger deft explorer sets speeds, leaves value null, use walking\n  for (let type in movementTypes) {\n    const innateType = DICTIONARY.character.speeds.find((s) => s.type === type).innate;\n    // is there a 'inntate-speed-[type]ing' race/class modifier?\n    let innateSpeeds = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"set\", `innate-speed-${innateType}`, restriction);\n    let base = movementTypes[type];\n\n    innateSpeeds.forEach((speed) => {\n      // take the highest value\n      if (speed.value > base) {\n        base = speed.value;\n      } else if (!speed.value && movementTypes['walk']) {\n        base = movementTypes['walk'];\n      }\n    });\n\n    // overwrite the (perhaps) changed value\n    movementTypes[type] = base;\n  }\n\n\n  // is there a custom seed over-ride?\n  if (this.source.ddb.character.customSpeeds) {\n    this.source.ddb.character.customSpeeds.forEach((speed) => {\n      const type = DICTIONARY.character.speeds.find((s) => s.id === speed.movementId).type;\n      if (speed.distance) {\n        movementTypes[type] = speed.distance;\n      }\n    });\n  }\n\n  for (let type in setToWalking) {\n    if (setToWalking[type] && movementTypes[\"walk\"] > movementTypes[type]) {\n      movementTypes[type] = movementTypes[\"walk\"];\n    }\n  }\n\n  this.raw.character.system.attributes.movement = {\n    burrow: movementTypes['burrow'] || 0,\n    climb: movementTypes['climb'] || 0,\n    fly: movementTypes['fly'] || 0,\n    swim: movementTypes['swim'] || 0,\n    walk: movementTypes['walk'] || 0,\n    units: \"ft\",\n    hover: false,\n  };\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateSize = function _generateSize() {\n  const size = DICTIONARY.character.actorSizes.find(\n    (size) => size.name === this.source.ddb.character.race.size || size.id === this.source.ddb.character.race.sizeId\n  );\n  this.raw.character.system.traits.size = size ? size.value : \"med\";\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\n// is there a spell casting ability?\nfunction hasSpellCastingAbility (spellCastingAbilityId) {\n  return DICTIONARY.character.abilities.some((ability) => ability.id === spellCastingAbilityId);\n};\n\n// convert spellcasting ability id to string used by foundry\nfunction convertSpellCastingAbilityId(spellCastingAbilityId) {\n  return DICTIONARY.character.abilities.find((ability) => ability.id === spellCastingAbilityId).value;\n};\n\nfunction getSpellCastingAbility(klass) {\n  let spellCastingAbility = undefined;\n  if (hasSpellCastingAbility(klass.definition.spellCastingAbilityId)) {\n    // check to see if class has a spell casting ability\n    spellCastingAbility = convertSpellCastingAbilityId(klass.definition.spellCastingAbilityId);\n  } else if (\n    klass.subclassDefinition\n    && hasSpellCastingAbility(klass.subclassDefinition.spellCastingAbilityId)\n  ) {\n    // some subclasses attach a spellcasting ability, e.g. Arcane Trickster\n    spellCastingAbility = convertSpellCastingAbilityId(klass.subclassDefinition.spellCastingAbilityId);\n  }\n  return spellCastingAbility;\n}\n\nDDBCharacter.prototype._generateSpellCasting = function _generateSpellCasting() {\n  let result = [];\n  this.source.ddb.character.classSpells.forEach((playerClass) => {\n    let classInfo = this.source.ddb.character.classes.find((cls) => cls.id === playerClass.characterClassId);\n    const spellCastingAbility = getSpellCastingAbility(classInfo);\n    if (spellCastingAbility !== undefined) {\n      const characterAbilities = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities;\n      let abilityModifier = utils.calculateModifier(characterAbilities[spellCastingAbility].value);\n      result.push({ label: spellCastingAbility, value: abilityModifier });\n    }\n  });\n  // we need to decide on one spellcasting ability, so we take the one with the highest modifier\n  if (result.length === 0) {\n    this.raw.character.system.attributes.spellcasting = \"\";\n  } else {\n    this.raw.character.system.attributes.spellcasting = result\n      .sort((a, b) => {\n        if (a.value > b.value) return -1;\n        if (a.value < b.value) return 1;\n        return 0;\n      })\n      .map((entry) => entry.label)[0];\n  }\n};\n\nDDBCharacter.prototype._generateSpellDC = function _generateSpellDC() {\n  if (this.raw.character.system.attributes.spellcasting === \"\") {\n    this.raw.character.system.attributes.spelldc = 10;\n  } else {\n    const characterAbilities = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities;\n    const dc = 8 + characterAbilities[this.raw.character.system.attributes.spellcasting].mod + this.raw.character.system.attributes.prof;\n    this.raw.character.system.attributes.spelldc = dc;\n  }\n};\n\nDDBCharacter.prototype.getCasterInfo = function getCasterInfo() {\n  return this.source.ddb.character.classes\n    .filter((cls) => {\n      return cls.definition.canCastSpells || (cls.subclassDefinition && cls.subclassDefinition.canCastSpells);\n    })\n    .map((cls) => {\n      // the class total level\n      let casterLevel = cls.level;\n      // class name\n      const name = cls.definition.name;\n\n      // get the casting level if the character is a multiclassed spellcaster\n      if (cls.definition.spellRules && cls.definition.spellRules.multiClassSpellSlotDivisor) {\n        casterLevel = Math.floor(casterLevel / cls.definition.spellRules.multiClassSpellSlotDivisor);\n      } else {\n        casterLevel = 0;\n      }\n      // Blood hunters are weird\n      if ([\"Blood Hunter\"].includes(name)) {\n        casterLevel = cls.level;\n      }\n\n      const cantrips\n        = cls.definition.spellRules\n        && cls.definition.spellRules.levelCantripsKnownMaxes\n        && Array.isArray(cls.definition.spellRules.levelCantripsKnownMaxes)\n          ? cls.definition.spellRules.levelCantripsKnownMaxes[casterLevel + 1]\n          : 0;\n\n      if ([\"Warlock\", \"Blood Hunter\"].includes(name)) {\n        // pact casting doesn't count towards multiclass spells casting\n        // we still add an entry to get cantrip info\n        const levelSpellSlots = cls.definition.spellRules.levelSpellSlots[casterLevel];\n        const maxLevel = levelSpellSlots.indexOf(Math.max(...levelSpellSlots)) + 1;\n        const maxSlots = Math.max(...levelSpellSlots);\n        const currentSlots = this.source.ddb.character.pactMagic.find((pact) => pact.level === maxLevel).used;\n        if ([\"Blood Hunter\"].includes(name)) {\n          this.spellSlots.pact = { value: maxSlots - currentSlots, max: maxSlots, override: maxSlots };\n        } else {\n          this.spellSlots.pact = { value: maxSlots - currentSlots, max: maxSlots };\n        }\n        return {\n          name,\n          casterLevel: 0,\n          slots: cls.definition.spellRules.levelSpellSlots[0],\n          cantrips,\n        };\n      } else {\n        return {\n          name,\n          casterLevel,\n          slots: cls.definition.spellRules.levelSpellSlots[cls.level],\n          cantrips,\n        };\n      }\n    });\n};\n\nDDBCharacter.prototype._generateSpellSlots = function _generateSpellSlots() {\n  // get the caster information from all classes and subclasses\n  const casterInfo = this.getCasterInfo();\n\n  let result = null;\n  if (casterInfo.length !== 1) {\n    const multiClassSpellSlots = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0], // 0\n      [2, 0, 0, 0, 0, 0, 0, 0, 0], // 1\n      [3, 0, 0, 0, 0, 0, 0, 0, 0], // 2\n      [4, 2, 0, 0, 0, 0, 0, 0, 0], // 3\n      [4, 3, 0, 0, 0, 0, 0, 0, 0], // 4\n      [4, 3, 2, 0, 0, 0, 0, 0, 0], // 5\n      [4, 3, 3, 0, 0, 0, 0, 0, 0], // 6\n      [4, 3, 3, 1, 0, 0, 0, 0, 0], // 7\n      [4, 3, 3, 2, 0, 0, 0, 0, 0], // 8\n      [4, 3, 3, 3, 1, 0, 0, 0, 0], // 9\n      [4, 3, 3, 3, 2, 0, 0, 0, 0], // 10\n      [4, 3, 3, 3, 2, 1, 0, 0, 0], // 11\n      [4, 3, 3, 3, 2, 1, 0, 0, 0], // 12\n      [4, 3, 3, 3, 2, 1, 1, 0, 0], // 13\n      [4, 3, 3, 3, 2, 1, 1, 0, 0], // 14\n      [4, 3, 3, 3, 2, 1, 1, 1, 0], // 15\n      [4, 3, 3, 3, 2, 1, 1, 1, 0], // 16\n      [4, 3, 3, 3, 2, 1, 1, 1, 1], // 17\n      [4, 3, 3, 3, 3, 1, 1, 1, 1], // 18\n      [4, 3, 3, 3, 3, 2, 1, 1, 1], // 19\n      [4, 3, 3, 3, 3, 2, 2, 1, 1], // 20\n    ];\n    const casterLevelTotal = casterInfo.reduce((prev, cur) => prev + cur.casterLevel, 0);\n    const cantripsTotal = casterInfo.reduce((prev, cur) => prev + cur.cantrips, 0);\n    result = [cantripsTotal, ...multiClassSpellSlots[casterLevelTotal]];\n  } else {\n    result = [casterInfo[0].cantrips, ...casterInfo[0].slots];\n  }\n\n  for (let i = 0; i < result.length; i++) {\n    const currentSlots = this.source.ddb.character.spellSlots.filter((slot) => slot.level === i).map((slot) => slot.used) || 0;\n    this.spellSlots[\"spell\" + i] = {\n      value: result[i] - currentSlots,\n      max: result[i],\n    };\n  }\n  this.raw.character.system.spells = this.spellSlots;\n};\n\nDDBCharacter.prototype._generateMaxPreparedSpells = function _generateMaxPreparedSpells() {\n  let max = 0;\n\n  this.source.ddb.character.classes\n    .filter((klass) => {\n      return (klass.definition.canCastSpells || (klass.subclassDefinition?.canCastSpells));\n    })\n    .forEach((klass) => {\n      const spellCastingAbility = getSpellCastingAbility(klass);\n      if (spellCastingAbility !== undefined) {\n        const characterAbilities = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities;\n        const abilityModifier = utils.calculateModifier(characterAbilities[spellCastingAbility].value);\n        if (klass.definition.spellPrepareType === 1 || klass.subclassDefinition?.spellPrepareType === 1) {\n          max += abilityModifier + klass.level;\n        } else if (klass.definition.spellPrepareType === 2 || klass.subclassDefinition?.spellPrepareType === 2) {\n          max += abilityModifier + Math.floor(klass.level / 2);\n        }\n\n      }\n    });\n\n  this.raw.character.system.details.maxPreparedSpells = max;\n};\n","import DDBCharacter from \"../DDBCharacter.js\";\nimport DDBRace from \"../race/DDBRace.js\";\n\nDDBCharacter.prototype._generateRace = async function _generateRace() {\n  const traits = this.source.ddb.character.race.racialTraits.map((r) => r.definition);\n  const compendiumRacialTraits = await DDBRace.getRacialTraitsLookup(traits, false);\n  const race = new DDBRace(this.source.ddb.character.race, compendiumRacialTraits);\n  const builtRace = await race.buildRace();\n  delete builtRace.sort;\n  this.raw.race = builtRace;\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype.resourceList = function resourceList() {\n  const resources = [this.source.ddb.character.actions.race, this.source.ddb.character.actions.class, this.source.ddb.character.actions.feat]\n    .flat()\n    .filter((action) =>\n      action.limitedUse\n        && (action.limitedUse.maxUses || action.limitedUse.statModifierUsesId || action.limitedUse.useProficiencyBonus));\n\n  return resources;\n};\n\nDDBCharacter.prototype.getSortedByUsedResourceList = function getSortedByUsedResourceList() {\n  // get all resources\n  const allResources = this.resourceList();\n  const resources = allResources\n    .map((action) => {\n      let maxUses = (action.limitedUse.maxUses && action.limitedUse.maxUses !== -1) ? action.limitedUse.maxUses : 0;\n\n      if (action.limitedUse.statModifierUsesId) {\n        const ability = DICTIONARY.character.abilities.find(\n          (ability) => ability.id === action.limitedUse.statModifierUsesId\n        ).value;\n\n        switch (action.limitedUse.operator) {\n          case 2: {\n            maxUses *= this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n            break;\n          }\n          case 1:\n          default:\n            maxUses += this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n        }\n      }\n\n      if (action.limitedUse.useProficiencyBonus) {\n        switch (action.limitedUse.proficiencyBonusOperator) {\n          case 2: {\n            maxUses *= this.raw.character.system.attributes.prof;\n            break;\n          }\n          case 1:\n          default:\n            maxUses += this.raw.character.system.attributes.prof;\n        }\n      }\n\n      return {\n        label: action.name,\n        value: maxUses - action.limitedUse.numberUsed,\n        max: maxUses,\n        sr: action.limitedUse.resetType === 1,\n        lr: action.limitedUse.resetType === 1 || action.limitedUse.resetType === 2 || action.limitedUse.resetType === 3,\n      };\n    })\n    // sort by maxUses, I guess one wants to track the most uses first, because it's used more often\n    .sort((a, b) => {\n      if (a.max > b.max) return -1;\n      if (a.max < b.max) return 1;\n      return 0;\n    });\n  return resources;\n};\n\nconst sheetResources = [\n  \"primary\",\n  \"secondary\",\n  \"tertiary\",\n  \"fourth\",\n  \"fifth\",\n  \"sixth\",\n  \"seventh\",\n  \"eighth\",\n  \"ninth\",\n  \"tenth\",\n  \"eleventh\",\n  \"twelfth\",\n  \"thirteenth\",\n  \"fourteenth\",\n  \"fifteenth\",\n  \"sixteenth\",\n  \"seventeenth\",\n  \"eighteenth\",\n  \"nineteenth\",\n  \"twentieth\",\n];\n\nDDBCharacter.prototype._generateResources = function _generateResources(numberOfResources = 3) {\n  // get all resources\n  const allResources = this.getSortedByUsedResourceList();\n\n  let result = {};\n\n  const resourceSelectionType = hasProperty(this.raw.character, \"flags.ddbimporter.resources\")\n    ? getProperty(this.raw.character, \"flags.ddbimporter.resources\")\n    : { type: \"default\" };\n\n  switch (resourceSelectionType.type) {\n    case \"custom\": {\n      const customResourceSelection = getProperty(this.raw.character, \"flags.ddbimporter.resources\");\n      for (let i = 0; i < sheetResources.length && i < numberOfResources; i++) {\n        const resourceLookupName = customResourceSelection[sheetResources[i]];\n\n        const resource = resourceLookupName && resourceLookupName !== \"\"\n          ? allResources.find((r) => r.label === resourceLookupName)\n          : { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n        result[sheetResources[i]] = resource || { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n      };\n      break;\n    }\n    case \"disable\": {\n      for (let i = 0; i < sheetResources.length && i < numberOfResources; i++) {\n        result[sheetResources[i]] = { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n      };\n      break;\n    }\n    default: {\n      const usedResources = allResources.slice(0, numberOfResources);\n      for (let i = 0; i < sheetResources.length && i < numberOfResources; i++) {\n        const resource = usedResources.length > i ? usedResources[i] : { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n        result[sheetResources[i]] = resource;\n      };\n      break;\n    }\n  }\n\n  this.raw.character.system.resources = result;\n};\n\nDDBCharacter.prototype.getResourceList = function getResourceList() {\n  return this.getSortedByUsedResourceList();\n};\n\nfunction generateResourceSelectionFromForm(formData, type) {\n  const primary = formData.find((r) => r.name === \"primary-select\" && r.value !== \"\");\n  const secondary = formData.find((r) => r.name === \"secondary-select\" && r.value !== \"\");\n  const tertiary = formData.find((r) => r.name === \"tertiary-select\" && r.value !== \"\");\n  const ask = formData.find((r) => r.name === \"ask-resources\")?.value === \"on\";\n\n  const resourceSelection = {\n    type: type,\n    primary: type === \"custom\" && primary ? primary.value : \"\",\n    secondary: type === \"custom\" && secondary ? secondary.value : \"\",\n    tertiary: type === \"custom\" && tertiary ? tertiary.value : \"\",\n    ask,\n  };\n  return resourceSelection;\n}\n\nDDBCharacter.prototype.setResourceType = function setResourceType(resourceSelection) {\n  setProperty(this.raw.character, \"flags.ddbimporter.resources\", resourceSelection);\n  this._generateResources();\n};\n\nfunction setDefaultResources(sortedResources, resourceSelection) {\n  if (sortedResources.length >= 1) {\n    resourceSelection.primary = sortedResources[0].label;\n  }\n  if (sortedResources.length >= 2) {\n    resourceSelection.secondary = sortedResources[1].label;\n  }\n  if (sortedResources.length >= 3) {\n    resourceSelection.tertiary = sortedResources[2].label;\n  }\n  return resourceSelection;\n}\n\n// this.source.ddb, this.raw.character\nDDBCharacter.prototype.resourceSelectionDialog = async function resourceSelectionDialog() {\n  const currentActor = game.actors.get(this.currentActorId);\n  return new Promise((resolve) => {\n    let currentResourceSelection = hasProperty(currentActor, \"flags.ddbimporter.resources.type\")\n      ? getProperty(currentActor, \"flags.ddbimporter.resources\")\n      : {\n        ask: true,\n        type: \"default\",\n        primary: \"\",\n        secondary: \"\",\n        tertiary: \"\",\n      };\n\n    const sortedResources = this.getSortedByUsedResourceList();\n\n    if (currentResourceSelection.type === \"default\") {\n      currentResourceSelection = setDefaultResources(sortedResources, currentResourceSelection);\n    }\n\n    if (currentResourceSelection.ask || !hasProperty(currentResourceSelection, \"ask\")) {\n      const resources = sortedResources.map((resource) => {\n        let resourceArray = [];\n        if (resource.sr) resourceArray.push(\"SR\");\n        if (resource.lr) resourceArray.push(\"LR\");\n        if (!resource.sr && !resource.lr) resourceArray.push(\"Other\");\n        resource.resetString = resourceArray.join(\", \");\n        switch (resource.label) {\n          case currentResourceSelection.primary:\n            resource.primary = true;\n            break;\n          case currentResourceSelection.secondary:\n            resource.secondary = true;\n            break;\n          case currentResourceSelection.tertiary:\n            resource.tertiary = true;\n            break;\n          // no default\n        }\n        return resource;\n      });\n\n      const dialog = new Dialog({\n        title: `Choose Resources for ${this.raw.character.name}`,\n        content: {\n          \"resources\": resources,\n          \"character\": this.raw.character.name,\n          \"img\": this.source.ddb.character.decorations?.avatarUrl\n            ? this.source.ddb.character.decorations.avatarUrl\n            : CONST.DEFAULT_TOKEN,\n          \"cssClass\": \"character-resource-selection sheet\"\n        },\n        buttons: {\n          default: {\n            icon: '<i class=\"fas fa-list-ol\"></i>',\n            label: \"Default\",\n            callback: async () => {\n              const formData = $('.character-resource-selection').serializeArray();\n              let resourceSelection = generateResourceSelectionFromForm(formData, \"default\");\n              resourceSelection = setDefaultResources(resources, resourceSelection);\n              this.setResourceType(resourceSelection);\n              resolve(this.raw.character);\n            }\n          },\n          custom: {\n            icon: '<i class=\"fas fa-sort\"></i>',\n            label: \"Use selected\",\n            callback: async () => {\n              const formData = $('.character-resource-selection').serializeArray();\n              const resourceSelection = generateResourceSelectionFromForm(formData, \"custom\");\n              this.setResourceType(resourceSelection);\n              resolve(this.raw.character);\n            }\n          },\n          disable: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"None\",\n            callback: async () => {\n              const formData = $('.character-resource-selection').serializeArray();\n              const resourceSelection = generateResourceSelectionFromForm(formData, \"disable\");\n              this.setResourceType(resourceSelection);\n              resolve(this.raw.character);\n            }\n          }\n        },\n        default: \"default\",\n        close: () => resolve(this.raw.character),\n      },\n      {\n        width: 400,\n        classes: [\"dialog\", \"character-resource-selection\"],\n        template: \"modules/ddb-importer/handlebars/resources.hbs\",\n      });\n      dialog.render(true);\n    } else {\n      this.setResourceType(currentResourceSelection);\n      resolve(this.raw.character);\n    }\n  });\n};\n\nconst resourceFeatureLinkMap = {\n  \"Channel Divinity\": [\"Channel Divinity:\"],\n  \"Superiority Dice\": [\"Manoeuvres:\", \"Maneuvers:\"],\n  \"Sorcery Points\": [\"Metamagic - \", \"Metamagic:\"],\n  \"Bardic Inspiration\": [\n    \"Mote of Potential\", \"Unsettling Words\", \"Mantle of Inspiration\",\n    \"Cutting Words\", \"Peerless Skill\", \"Tales from Beyond\", \"Blade Flourish\",\n    \"Defensive Flourish\", \"Slashing Flourish\", \"Mobile Flourish\",\n    \"Psychic Blades\",\n  ],\n  \"Wild Shape\": [\"Symbiotic Entity\", \"Starry Form\", \"Wild Companion\", \"Summon Wildfire Spirit\"],\n  \"Grit Points\": [\n    \"Trick Shots:\", \"Bullying Shot\", \"Dazing Shot\", \"Deadeye Shot\", \"Disarming Shot\",\n    \"Forceful Shot\", \"Piercing Shot\", \"Violent Shot\", \"Winging Shot\",\n  ],\n  \"Psionic Power: Psionic Energy\": [\n    \"Psionic Power: Psionic Strike\", \"Psionic Power: Protective Field\", \"Guarded Mind\",\n    \"Psionic Power: Psi-Bolstered Knack\", \"Soul Blades: Homing Strikes\", \"Soul Blades: Psychic Teleportation\",\n    \"Psionic Power: Recovery\",\n  ],\n  \"Ki Points\": [\n    \"Ki-Fueled Attack\", \"Flurry of Blows\", \"Patient Defense\", \"Step of the Wind\",\n    \"Deflect Missiles Attack\", \"Arms of the Astral Self: Summon\", \"Stunning Strike\",\n    \"Empty Body\", \"Diamond Soul\", \"Visage of the Astral Self\", \"Quickened Healing\",\n    \"Focused Aim\", \"Sharpen the Blade\", \"Deft Strike\", \"Shadow Arts\",\n    \"Extort Truth\", \"Mind of Mercury\", \"Debilitating Barrage\", \"Tipsy Sway\",\n    \"Drunkard’s Luck\", \"Drunkard's Luck\", \"Touch of the Long Death\",\n    \"Quivering Palm\", \"Radiant Sun Bolt\", \"Searing Arc Strike\",\n    \"Breath of Winter\", \"Clench of the North Wind\", \"Eternal Mountain Defense\",\n    \"Fangs of the Fire Snake\", \"Fist of Four Thunders\", \"Fist of Unbroken Air\",\n    \"Flames of the Phoenix\", \"Gong of the Summit\", \"Mist Stance\",\n    \"Ride the Wind\", \"River of Hungry Flame\", \"Rush of the Gale Spirits\",\n    \"Shape the Flowing River\", \"Sweeping Cinder Strike\", \"Water Whip\",\n    \"Wave of Rolling Earth\", \"Hand of Healing\", \"Hand of Harm\", \"Hand of Ultimate Mercy\",\n  ],\n};\n\nconst resourceSpellLinkMap = {\n  \"Ki Points\": [\n    { name: \"Astral Projection\", cost: 8, lookupName: \"Empty Body\" },\n    { name: \"Darkness\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Darkvision\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Pass Without Trace\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Silence\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Burning Hands\", cost: 2, lookupName: \"Searing Arc Strike\" },\n    { name: \"Cone of Cold\", cost: 6, lookupName: \"Breath of Winter\" },\n    { name: \"Hold Person\", cost: 3, lookupName: \"Clench of the North Wind\" },\n    { name: \"Stoneskin\", cost: 5, lookupName: \"Eternal Mountain Defense\" },\n    { name: \"Thunderwave\", cost: 2, lookupName: \"Fist of Four Thunders\" },\n    { name: \"Fireball\", cost: 4, lookupName: \"Flames of the Phoenix\" },\n    { name: \"Shatter\", cost: 3, lookupName: \"Gong of the Summit\" },\n    { name: \"Gaseous Form\", cost: 4, lookupName: \"Mist Stance\" },\n    { name: \"Fly\", cost: 4, lookupName: \"Ride the Wind\" },\n    { name: \"Wall of Fire\", cost: 5, lookupName: \"River of Hungry Flame\" },\n    { name: \"Gust of Wind\", cost: 2, lookupName: \"Rush of the Gale Spirits\" },\n    { name: \"Burning Hands\", cost: 2, lookupName: \"Sweeping Cinder Strike\" },\n    { name: \"Wall of Stone\", cost: 6, lookupName: \"Wave of Rolling Earth\" },\n  ],\n};\n\nDDBCharacter.prototype.autoLinkResources = async function autoLinkResources() {\n  // loop over resourceFeatureLinkMap\n  const possibleItems = this.currentActor.items.toObject();\n  let toUpdate = [];\n\n  for (const [key, values] of Object.entries(resourceFeatureLinkMap)) {\n    logger.debug(`Checking ${key}`, values);\n    const parent = possibleItems.find((doc) => {\n      const name = doc.flags.ddbimporter?.originalName || doc.name;\n      return name === key;\n    });\n\n    if (parent) {\n      logger.debug(\"parent\", parent);\n      values.forEach((value) => {\n        logger.debug(`Checking ${value}`);\n        const children = possibleItems.filter((doc) => {\n          const name = doc.flags.ddbimporter?.originalName || doc.name;\n          return name.startsWith(value);\n        });\n\n        if (children) {\n          logger.debug(`Found children`, children);\n          children.forEach((child) => {\n            if (getProperty(child, \"flags.ddbimporter.retainResourceConsumption\")) return;\n            logger.debug(\"child\", child);\n            const update = {\n              _id: child._id\n            };\n            const charge = getProperty(child, \"system.consume.amount\") ?? 1;\n            setProperty(update, \"system.consume\", {\n              type: \"charges\",\n              target: parent._id,\n              amount: charge,\n            });\n            toUpdate.push(update);\n          });\n        }\n      });\n    }\n  }\n\n  for (const [key, values] of Object.entries(resourceSpellLinkMap)) {\n    logger.debug(`Checking ${key}`, values);\n    const parent = possibleItems.find((doc) => {\n      const name = doc.flags.ddbimporter?.originalName || doc.name;\n      return name === key;\n    });\n    if (parent) {\n      logger.debug(\"parent\", parent);\n      values.forEach((value) => {\n        logger.debug(`Checking ${value.name}`, value);\n        const child = possibleItems.find((doc) => {\n          const name = doc.flags.ddbimporter?.originalName || doc.name;\n          const lookupName = doc.flags.ddbimporter?.dndbeyond?.lookupName || \"NO_LOOKUP_NAME\";\n          return name === value.name && value.lookupName === lookupName;\n        });\n\n        if (child) {\n          if (getProperty(child, \"flags.ddbimporter.retainResourceConsumption\")) return;\n          logger.debug(\"child\", child);\n          const update = {\n            _id: child._id\n          };\n          setProperty(update, \"system.consume\", {\n            type: \"charges\",\n            target: parent._id,\n            amount: value.cost,\n          });\n          toUpdate.push(update);\n        }\n      });\n    }\n  }\n\n  logger.debug(\"toUpdate\", toUpdate);\n\n  const results = await this.currentActor.updateEmbeddedDocuments(\"Item\", toUpdate);\n  logger.debug(\"resource Update results\", results);\n};\n","/* eslint-disable no-continue */\nimport utils from \"../../lib/utils.js\";\n\n// Import parsing functions\nimport { getLookups } from \"./metadata.js\";\nimport { fixSpells } from \"./special.js\";\nimport { parseSpell } from \"./parseSpell.js\";\nimport { hasSpellCastingAbility, convertSpellCastingAbilityId } from \"./ability.js\";\n\n\nexport async function getItemSpells(ddb, character) {\n  let items = [];\n  const proficiencyModifier = character.system.attributes.prof;\n  const lookups = getLookups(ddb.character);\n\n  // feat spells are handled slightly differently\n  for (const spell of ddb.character.spells.item) {\n    if (!spell.definition) continue;\n\n    const itemInfo = lookups.item.find((it) => it.id === spell.componentId);\n    if (!itemInfo) continue;\n\n    const active\n      = (!itemInfo.canEquip && !itemInfo.canAttune) // if item just gives a thing\n      || itemInfo.isAttuned // if it is attuned (assume equipped)\n      || (!itemInfo.canAttune && itemInfo.equipped); // can't attune but is equipped\n    // for item spells the spell dc is often on the item spell\n    let spellDC = 8;\n    if (spell.overrideSaveDc) {\n      spellDC = spell.overrideSaveDc;\n    } else if (spell.spellCastingAbilityId) {\n      // If the spell has an ability attached, use that\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(character.flags.ddbimporter.dndbeyond.effectAbilities[spellCastingAbility].value);\n      spellDC = 8 + proficiencyModifier + abilityModifier;\n    } else {\n      spellDC = null;\n    }\n\n    // add some data for the parsing of the spells into the data structure\n    spell.flags = {\n      ddbimporter: {\n        dndbeyond: {\n          lookup: \"item\",\n          lookupName: itemInfo.name,\n          lookupId: itemInfo.id,\n          level: spell.castAtLevel,\n          dc: spellDC,\n          limitedUse: itemInfo.limitedUse,\n          nameOverride: `${spell.definition.name} (${itemInfo.name})`,\n          overrideDC: !!spell.overrideSaveDc,\n          spellLimitedUse: spell.limitedUse,\n          castAtLevel: spell.castAtLevel,\n          active: active,\n        },\n      },\n    };\n\n    // eslint-disable-next-line no-await-in-loop\n    items.push(await parseSpell(spell, character));\n  }\n\n  if (items) fixSpells(ddb, items);\n\n  return items;\n}\n","import DDBCharacter from \"../DDBCharacter.js\";\nimport { getItemSpells } from \"../spells/getItemSpells.js\";\nimport logger from \"../../logger.js\";\n\nDDBCharacter.prototype._generateInventory = async function _generateInventory() {\n  this.raw.itemSpells = await getItemSpells(this.source.ddb, this.raw.character);\n  logger.debug(\"Item Spells parse complete\");\n  this.raw.inventory = await this.getInventory();\n  logger.debug(\"Inventory parse complete\");\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\n/**\n * Gets global bonuses to attacks and damage\n * Supply a list of maps that have the fvtt tyoe and ddb sub type, e,g,\n * { fvttType: \"attack\", ddbSubType: \"magic\" }\n  {\n    \"attack\": \"\",\n    \"damage\": \"\",\n  },\n * @param {*} lookupTable\n */\nDDBCharacter.prototype.getGlobalBonusAttackModifiers = function(lookupTable) {\n  let result = {\n    attack: \"\",\n    damage: \"\",\n  };\n  const diceFormula = /\\d*d\\d*/;\n\n  let lookupResults = {\n    attack: {\n      sum: 0,\n      diceString: \"\",\n    },\n    damage: {\n      sum: 0,\n      diceString: \"\",\n    },\n  };\n\n  lookupTable.forEach((b) => {\n    const lookupResult = DDBHelper.getModifierSum(DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", b.ddbSubType), this.raw.character);\n    const lookupMatch = diceFormula.test(lookupResult);\n\n    // if a match then a dice string\n    if (lookupMatch || !Number.isInteger(parseInt(lookupResult))) {\n      lookupResults[b.fvttType].diceString += lookupResult === \"\" ? lookupResult : \" + \" + lookupResult;\n    } else {\n      lookupResults[b.fvttType].sum += parseInt(lookupResult);\n    }\n  });\n\n  // loop through outputs from lookups and build a response\n  [\"attack\", \"damage\"].forEach((fvttType) => {\n    if (lookupResults[fvttType].diceString === \"\") {\n      if (lookupResults[fvttType].sum !== 0) {\n        result[fvttType] = `${lookupResults[fvttType].sum}`;\n      }\n    } else {\n      result[fvttType] = lookupResults[fvttType].diceString;\n      if (lookupResults[fvttType].sum !== 0) {\n        result[fvttType] += \" + \" + lookupResults[fvttType].sum;\n      }\n    }\n  });\n\n  return result;\n};\n\n/**\n * Gets global bonuses to spell attacks and damage\n * Most likely from items such as wand of the warmage\n * supply type as 'ranged' or 'melee'\n  {\n    \"attack\": \"\",\n    \"damage\": \"\",\n  },\n * @param {*} type\n */\nDDBCharacter.prototype.getBonusSpellAttacks = function(type) {\n  // I haven't found any matching global spell damage boosting mods in ddb\n  const bonusLookups = [\n    { fvttType: \"attack\", ddbSubType: \"spell-attacks\" },\n    { fvttType: \"attack\", ddbSubType: `${type}-spell-attacks` },\n    { fvttType: \"attack\", ddbSubType: \"warlock-spell-attacks\" },\n  ];\n\n  return this.getGlobalBonusAttackModifiers(bonusLookups);\n};\n\nDDBCharacter.prototype._generateBonusSpellAttacks = function() {\n  this.raw.character.system.bonuses.rsak = this.getBonusSpellAttacks(\"ranged\");\n  this.raw.character.system.bonuses.msak = this.getBonusSpellAttacks(\"melee\");\n};\n\n\n/**\n * Gets global bonuses to weapon attacks and damage\n * Most likely from items such as wand of the warmage\n * supply type as 'ranged' or 'melee'\n  {\n    \"attack\": \"\",\n    \"damage\": \"\",\n  },\n * @param {*} type\n */\nDDBCharacter.prototype.getBonusWeaponAttacks = function(type) {\n  // global melee damage is not a ddb type, in that it's likely to be\n  // type specific. The only class one I know of is the Paladin Improved Smite\n  // which will be handled in the weapon import later.\n  const bonusLookups = [\n    { fvttType: \"attack\", ddbSubType: `${type}-attacks` },\n    { fvttType: \"attack\", ddbSubType: \"weapon-attacks\" },\n    { fvttType: \"attack\", ddbSubType: `${type}-weapon-attacks` },\n  ];\n\n  return this.getGlobalBonusAttackModifiers(bonusLookups);\n};\n\nDDBCharacter.prototype._generateBonusWeaponAttacks = function() {\n  this.raw.character.system.bonuses.mwak = this.getBonusWeaponAttacks(\"melee\");\n  this.raw.character.system.bonuses.rwak = this.getBonusWeaponAttacks(\"ranged\");\n};\n\n/**\n * Gets global bonuses to ability checks, saves and skills\n * These can come from Paladin auras or items etc\n  \"abilities\": {\n    \"check\": \"\",\n    \"save\": \"\",\n    \"skill\": \"\"\n  },\n * @param {*} this.raw.character\n */\nDDBCharacter.prototype._generateBonusAbilities = function() {\n  let result = {\n    \"check\": \"\",\n    \"save\": \"\",\n    \"skill\": \"\",\n  };\n  const bonusLookup = [\n    { fvttType: \"check\", ddbSubType: \"ability-checks\" },\n    { fvttType: \"save\", ddbSubType: \"saving-throws\" },\n    { fvttType: \"skill\", ddbSubType: \"skill-checks\" },\n  ];\n\n  bonusLookup.forEach((b) => {\n    const mods = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", b.ddbSubType);\n    const bonus = DDBHelper.getModifierSum(mods, this.raw.character);\n    if (bonus !== 0 && bonus !== \"\") result[b.fvttType] = `+ ${bonus}`.trim().replace(/\\+\\s*\\+/, \"+\");\n  });\n  this.raw.character.system.bonuses.abilities = result;\n};\n\nDDBCharacter.prototype._generateBonusSpellDC = function() {\n  let result = {\n    \"dc\": \"\",\n  };\n  const bonusLookup = [\n    { fvttType: \"dc\", ddbSubType: \"spell-save-dc\" },\n    { fvttType: \"dc\", ddbSubType: \"warlock-spell-save-dc\" },\n  ];\n\n  const bonus = bonusLookup.map((b) => {\n    return DDBHelper.getModifierSum(DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", b.ddbSubType), this.raw.character);\n  })\n    .filter((b) => b && b !== 0 && String(b).trim() !== \"\")\n    .reduce((previous, current) => {\n      return previous !== \"\" ? [previous, current].join(\" + \") : current;\n    }, \"\");\n\n  if (bonus && String(bonus).trim() !== \"\") {\n    result[\"dc\"] = bonus;\n  }\n\n  this.raw.character.system.bonuses.spell = result;\n};\n","// import DICTIONARY from '../dictionary.js';\nimport utils from \"../../../lib/utils.js\";\nimport DDBHelper from \"../../../lib/DDBHelper.js\";\n\nexport function getDivineSmiteSpell(feature) {\n  const restriction = \"Against undead or fiends\";\n\n  const damageTagInfo = DDBHelper.getDamageTag({ subType: \"radiant\", restriction: \"\" });\n  const regularDamage = utils.parseDiceString(\"2d8\", \"\", damageTagInfo.damageTag).diceString;\n  const extraDamageTagInfo = DDBHelper.getDamageTag({ subType: \"radiant\", restriction });\n  const extraDamage = utils.parseDiceString(\"1d8\", \"\", extraDamageTagInfo.damageTag).diceString;\n\n  let result = {\n    flags: {},\n    name: \"Divine Smite\",\n    type: \"spell\",\n    img: \"icons/skills/melee/weapons-crossed-swords-yellow-teal.webp\",\n    system: {\n      description: {\n        value: feature.system.description.value,\n        chat: \"\",\n        unidentified: \"\"\n      },\n      source: \"PHB PG. 85\",\n      activation: {\n        type: \"special\",\n        cost: null,\n        condition: \"\",\n      },\n      duration: {\n        value: null,\n        units: \"\",\n      },\n      target: {\n        value: 1,\n        units: \"\",\n        type: \"enemy\",\n      },\n      range: {\n        value: null,\n        long: null,\n        units: \"\",\n      },\n      uses: {\n        value: 0,\n        max: 0,\n        per: \"\",\n      },\n      consume: {\n        type: \"\",\n        target: \"\",\n        amount: null,\n      },\n      ability: \"\",\n      actionType: \"other\",\n      attackBonus: 0,\n      chatFlavor: \"\",\n      critical: null,\n      damage: {\n        parts: [\n          [`${regularDamage}`, \"radiant\"],\n        ],\n        versatile: \"\",\n      },\n      formula: \"\",\n      save: {\n        ability: \"\",\n        dc: null,\n        scaling: \"spell\",\n      },\n      level: 1,\n      school: \"\",\n      components: {\n        value: \"\",\n        vocal: false,\n        somatic: false,\n        material: false,\n        ritual: false,\n        concentration: false,\n      },\n      materials: {\n        value: \"\",\n        consumed: false,\n        cost: 0,\n        supply: 0,\n      },\n      preparation: {\n        mode: \"always\",\n        prepared: true,\n      },\n      scaling: {\n        mode: \"level\",\n        formula: \"1d8\",\n      },\n    },\n  };\n\n  result.system.formula = `${regularDamage} + ${extraDamage}`;\n  result.system.chatFlavor = `Use Other damage ${restriction.toLowerCase()}`;\n  if (game.modules.get(\"midi-qol\")?.active) {\n    result.system.activation.condition = `[\"undead\", \"fiend\"].includes(\"@raceOrType\")`;\n  }\n\n  return result;\n}\n\n","import DDBCharacter from \"../DDBCharacter.js\";\nimport { getDivineSmiteSpell } from \"./additions/divineSmite.js\";\n\nDDBCharacter.prototype._addSpecialAdditions = function _addSpecialAdditions() {\n  const checkList = this.data.features.concat(this.data.actions);\n  const divineSmite = checkList.find((f) => f.name === \"Divine Smite\" && f.type === \"feat\");\n  if (divineSmite) {\n    this.data.spells.push(getDivineSmiteSpell(divineSmite));\n  }\n};\n","//\n// Attempts to parse information from ddb about items to build a magicitems\n// compatible set of metadata.\n//\n// https://gitlab.com/riccisi/foundryvtt-magic-items/\n//\n// Wand of Entangle Target example\n//\n// flags\": {\n// \"magicitems\": {\n//       \"enabled\": true,\n//       \"charges\": \"7\",\n//       \"chargeType\": \"c1\",\n//       \"destroy\": true,\n//       \"destroyCheck\": \"d1\",\n//       \"rechargeable\": true,\n//       \"recharge\": \"1d6+1\",\n//       \"rechargeType\": \"t2\",\n//       \"rechargeUnit\": \"r2\",\n//       \"spells\": {\n//           \"0\": {\n//               \"id\": \"af8QUpphSZMoi2yb\",\n//               \"name\": \"Entangle\",\n//               \"pack\": \"world.spellsdndbeyond\",\n//               \"img\": \"iconizer/Spell_Nature_StrangleVines.png\",\n//               \"baseLevel\": \"1\",\n//               \"level\": \"1\",\n//               \"consumption\": \"1\",\n//               \"upcast\": \"1\",\n//               \"upcastCost\": \"1\"\n//           }\n//       }\n// \"feats\": {},\n// \"tables\": {},\n// \"equipped\": true,\n// \"attuned\": true,\n// \"destroyFlavorText\": \"reaches 0 charges: it crumbles into ashes and is destroyed.\",\n// \"sorting\": \"l\"\n\n// }\n//\n//\n//\nimport DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\n\nconst MAGICITEMS = {\n  DAILY: \"r1\",\n  SHORT_REST: \"r4\",\n  LONG_REST: \"r5\",\n  CHARGE_TYPE_WHOLE_ITEM: \"c1\",\n  CHARGE_TYPE_PER_SPELL: \"c2\",\n  NUMERIC_RECHARGE: \"t1\",\n  FORMULA_RECHARGE: \"t2\",\n  DestroyCheckAlways: \"d1\",\n  DestroyCheck1D20: \"d2\",\n};\n\n\nfunction getRechargeFormula(description, maxCharges) {\n  if (description === \"\") {\n    return `${maxCharges}`;\n  }\n\n  let chargeMatchFormula = /regains (\\dd\\d* \\+ \\d) expended charges/i;\n  let chargeMatchFixed = /regains (\\d*) /i;\n  let chargeMatchLastDitch = /(\\dd\\d* \\+ \\d)/i;\n  let chargeNextDawn = /can't be used this way again until the next/i;\n\n  let matchFormula = chargeMatchFormula.exec(description);\n  let matchFixed = chargeMatchFixed.exec(description);\n  let matchLastDitch = chargeMatchLastDitch.exec(description);\n\n  let match = maxCharges;\n  if (matchFormula && matchFormula[1]) {\n    match = matchFormula[1];\n  } else if (matchFixed && matchFixed[1]) {\n    match = matchFixed[1];\n  } else if (matchLastDitch && matchLastDitch[1]) {\n    match = matchLastDitch[1];\n  } else if (description.search(chargeNextDawn) !== -1) {\n    match = maxCharges;\n  }\n\n  return `${match}`;\n}\n\nfunction getPerSpell(useDescription, itemDescription) {\n  if (useDescription === \"\") {\n    // some times 1 use per day items, like circlet of blasting have nothing in\n    // the limited use description, fall back to this\n    let limitedUse = /can't be used this way again until the next/i;\n    if (itemDescription.search(limitedUse) !== -1) {\n      return 1;\n    }\n    return false;\n  }\n\n  let perSpell = /each ([A-z]*|\\n*) per/i;\n  let match = perSpell.exec(useDescription);\n  if (match) {\n    match = DICTIONARY.magicitems.nums.find((num) => num.id == match[1]).value;\n  } else {\n    match = false;\n  }\n  return match;\n}\n\nfunction checkDestroy(description) {\n  let destroy = /expend the .* last charge/i;\n  if (description.search(destroy) !== -1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction checkD20Destroy(description) {\n  let destroy = /roll a d20.*destroyed/i;\n  if (description.search(destroy) !== -1) {\n    return MAGICITEMS.DestroyCheck1D20;\n  } else {\n    return MAGICITEMS.DestroyCheckAlways;\n  }\n}\n\n// returns the default magicitem flags\nfunction buildMagicItemSpell(chargeType, itemSpell) {\n  let consumption = chargeType == MAGICITEMS.CHARGE_TYPE_PER_SPELL ? 1 : itemSpell.system.level;\n  let castLevel = itemSpell.system.level;\n  let upcast = itemSpell.system.level;\n\n  // Do we have charge use data on spell?\n  if (itemSpell.flags.ddbimporter.dndbeyond.spellLimitedUse) {\n    const limitedUse = itemSpell.flags.ddbimporter.dndbeyond.spellLimitedUse;\n\n    if (\n      chargeType == MAGICITEMS.CHARGE_TYPE_WHOLE_ITEM\n      && !!limitedUse.minNumberConsumed\n      && itemSpell.system.level !== 0\n    ) {\n      consumption = limitedUse.minNumberConsumed;\n      if (limitedUse.maxNumberConsumed) {\n        upcast = itemSpell.system.level - limitedUse.minNumberConsumed + limitedUse.maxNumberConsumed;\n      }\n    }\n\n    if (itemSpell.flags.ddbimporter.dndbeyond.castAtLevel) {\n      castLevel = itemSpell.flags.ddbimporter.dndbeyond.castAtLevel;\n    }\n  }\n  const spellName = hasProperty(itemSpell, \"flags.ddbimporter.originalName\")\n    ? itemSpell.flags.ddbimporter.originalName\n    : itemSpell.name;\n\n  return {\n    id: \"\",\n    name: spellName,\n    img: \"\",\n    pack: \"\",\n    baseLevel: itemSpell.system.level,\n    level: castLevel,\n    consumption,\n    upcast,\n    upcastCost: 1,\n  };\n}\n\nfunction getMagicItemSpells(itemId, chargeType, itemSpells) {\n  let spells = {};\n\n  for (let spellIndex = 0, i = 0; i < itemSpells.length; i++) {\n    if (itemSpells[i].flags.ddbimporter.dndbeyond.lookupId === itemId) {\n      spells[spellIndex] = buildMagicItemSpell(chargeType, itemSpells[i]);\n      spellIndex++;\n    }\n  }\n\n  return spells;\n}\n\nfunction createDefaultMagicItemFlags() {\n  return {\n    enabled: true,\n    charges: 0,\n    chargeType: MAGICITEMS.CHARGE_TYPE_WHOLE_ITEM, // c1 charge whole item, c2 charge per spells\n    rechargeable: false,\n    recharge: \"0\", // recharge amount/formula\n    rechargeType: MAGICITEMS.FORMULA_RECHARGE, // t1 fixed amount, t2 formula\n    rechargeUnit: \"\", // r1 daily, r2 dawn, r3 sunset, r4vshort rest, r5 long rest\n    destroy: false, // destroy on depleted?\n    destroyCheck: MAGICITEMS.DestroyCheckAlways, // d1 always, 1d20\n    spells: {},\n    feats: {},\n    tables: {},\n    equipped: true,\n    attuned: false,\n    destroyFlavorText: game.modules.get(\"magicitems\")?.active\n      ? game.i18n.localize(\"MAGICITEMS.MagicItemDestroy\")\n      : \"reaches 0 charges: it crumbles into ashes and is destroyed.\",\n    sorting: \"l\"\n  };\n}\n\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction getMagicItemResetType(description) {\n  let resetType = null;\n\n  const chargeMatchFormula = /expended charges (?:\\w) at (\\w)/i;\n  const usedAgainFormula = /(?:until|when) you (?:take|finish) a (short|long|short or long) rest/i;\n  const chargeNextDawnFormula = /can't be used this way again until the next (dawn|dusk)/i;\n\n  const chargeMatch = chargeMatchFormula.exec(description);\n  const untilMatch = usedAgainFormula.exec(description);\n  const dawnMatch = chargeNextDawnFormula.exec(description);\n\n  if (chargeMatch && chargeMatch[1]) {\n    resetType = capitalize(`${chargeMatch[1]}Rest`);\n  } else if (untilMatch && untilMatch[1]) {\n    switch (untilMatch[1]) {\n      case \"short or long\":\n        resetType = \"ShortRest\";\n        break;\n      default:\n        resetType = capitalize(`${untilMatch[1]}Rest`);\n    }\n  } else if (dawnMatch && dawnMatch[1]) {\n    resetType = capitalize(`${dawnMatch[1]}Rest`);\n  }\n\n  return resetType;\n}\n\n\nfunction parseMagicItemsModule(data, itemSpells, characterItem) {\n  // this builds metadata for the magicitems module to use\n  // https://gitlab.com/riccisi/foundryvtt-magic-items/\n\n  if (data.definition.magic) {\n    // default magicitem data\n    let magicItem = createDefaultMagicItemFlags();\n    magicItem.equipped = data.definition.canEquip;\n\n    if (!characterItem) {\n      const maxUses = \"has (\\\\d*) charges\";\n      const maxUsesMatches = maxUses.exec(data.definition.description);\n      const limitedUse = {\n        maxUses: (maxUsesMatches && maxUsesMatches[1]) ? maxUsesMatches[1] : null,\n        numberUsed: 0,\n        resetType: getMagicItemResetType(data.definition.description),\n        resetTypeDescription: data.definition.description,\n      };\n\n      if (limitedUse.maxUses || limitedUse.resetType) data.limitedUse = limitedUse;\n    }\n\n    if (data.limitedUse) {\n      // if the item is x per spell\n      const perSpell = getPerSpell(data.limitedUse.resetTypeDescription, data.definition.description);\n      if (perSpell) {\n        magicItem.charges = perSpell;\n        magicItem.recharge = `${perSpell}`;\n        magicItem.rechargeUnit = MAGICITEMS.DAILY;\n        magicItem.rechargeable = true;\n        magicItem.rechargeType = MAGICITEMS.NUMERIC_RECHARGE;\n        magicItem.chargeType = MAGICITEMS.CHARGE_TYPE_PER_SPELL;\n      } else {\n        magicItem.charges = data.limitedUse.maxUses;\n        magicItem.recharge = getRechargeFormula(data.limitedUse.resetTypeDescription, magicItem.charges);\n\n        if (data.limitedUse.resetType) {\n          magicItem.rechargeUnit = DICTIONARY.magicitems.rechargeUnits.find(\n            (reset) => reset.id == data.limitedUse.resetType\n          ).value;\n        }\n        magicItem.rechargeable = true;\n      }\n\n      magicItem.destroy = checkDestroy(data.limitedUse.resetTypeDescription);\n      magicItem.destroyCheck = checkD20Destroy(data.limitedUse.resetTypeDescription);\n    }\n\n    magicItem.spells = getMagicItemSpells(data.definition.id, magicItem.chargeType, itemSpells);\n\n    return magicItem;\n  } else {\n    return {\n      enabled: false,\n    };\n  }\n}\n\nfunction parseItemsWithSpellsModule(item, data, itemSpells, characterItem) {\n\n  if (!characterItem) {\n    logger.debug(\"Non character item magic item additions are not supported\");\n  }\n\n  const thisItemSpells = itemSpells.filter((spell) =>\n    spell.flags.ddbimporter.dndbeyond.lookup === \"item\"\n    && spell.flags.ddbimporter.dndbeyond.lookupId === item.flags.ddbimporter.definitionId\n  );\n\n  if (thisItemSpells.length === 0) return item;\n\n  const perSpell = getPerSpell(data.limitedUse?.resetTypeDescription ?? \"\", data.definition.description);\n\n  const iSpells = thisItemSpells.map((itemSpell) => {\n    const isPerSpell = Number.isInteger(perSpell);\n    const chargeType = isPerSpell\n      ? MAGICITEMS.CHARGE_TYPE_PER_SPELL\n      : MAGICITEMS.CHARGE_TYPE_WHOLE_ITEM;\n\n    // c1 charge whole item, c2 charge per spells\n    const spellData = buildMagicItemSpell(chargeType, itemSpell);\n\n    const resetType = data.limitedUse?.resetType\n      ? DICTIONARY.magicitems.rechargeUnits.find((reset) => reset.id == data.limitedUse.resetType).value\n      : undefined;\n\n    const uses = isPerSpell\n      ? { max: spellData.charges, per: resetType ?? \"\" }\n      : { max: \"\", per: \"\" };\n    const consume = isPerSpell\n      ? { amount: null }\n      : { amount: spellData.consumption };\n\n    const save = getProperty(itemSpell, \"flags.ddbimporter.dndbeyond.overrideDC\")\n      ? { scaling: \"flat\", dc: itemSpell.flags.ddbimporter.dndbeyond?.dc }\n      : { scaling: \"spell\" };\n    const preparation = isPerSpell\n      ? { mode: \"atwill\" }\n      : undefined;\n\n    return {\n      uuid: \"\",\n      changes: {\n        system: {\n          level: Number.parseInt(spellData.level),\n          uses,\n          consume,\n          save,\n          preparation,\n        },\n      },\n      flags: {\n        ddbimporter: {\n          spellName: spellData.name,\n        },\n        // \"items-with-spells-5e\": {\n        //   \"parent-item\": \"\",\n        // },\n      },\n    };\n  });\n\n  item.flags[\"items-with-spells-5e\"] = {\n    \"item-spells\": iSpells,\n  };\n  return item;\n}\n\nexport function parseMagicItem(item, data, itemSpells, characterItem = true) {\n  if (game.modules.get(\"magicitems\")?.active) {\n    item.flags.magicitems = parseMagicItemsModule(data, itemSpells, characterItem);\n  } else if (game.modules.get(\"items-with-spells-5e\")?.active) {\n    item = parseItemsWithSpellsModule(item, data, itemSpells, characterItem);\n  }\n  return item;\n}\n\n","// import DICTIONARY from \"../../dictionary.js\";\n// import logger from \"../../logger.js\";\n\nfunction prepItem(item) {\n  if (item.name.startsWith(\"Potion of\")) {\n    if (!item.system.duration) item.system.duration = { units: \"\", value: null };\n    if (!item.system.target) item.system.target = { value: null, width: null, units: \"\", type: \"creature\" };\n    if (!item.system.range) item.system.range = { value: null, long: null, units: \"\", type: \"touch\" };\n  } else if (item.name.startsWith(\"Vicious\")) {\n    setProperty(item, \"data.critical\", { damage: \"+ 7\", threshold: null });\n  }\n}\n\n/**\n * Some items we need to fix up or massage because they are modified\n * in interesting ways\n * @param {*} ddb\n * @param {*} items\n */\nexport function fixItems(items) {\n  items.forEach((item) => {\n    prepItem(item);\n    const name = item.flags.ddbimporter.originalName || item.name;\n    switch (name) {\n      case \"Potion of Healing\":\n        item.system.damage = { parts: [[\"2d4 + 2\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        break;\n      case \"Potion of Healing (Greater)\":\n      case \"Potion of Greater Healing\":\n        item.system.damage = { parts: [[\"4d4 + 4\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        item.flags[\"ddbimporter\"][\"dndbeyond\"][\"alternativeNames\"] = [\"Potion of Greater Healing\"];\n        break;\n      case \"Potion of Healing (Superior)\":\n      case \"Potion of Superior Healing\":\n        item.system.damage = { parts: [[\"8d4 + 8\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        item.flags[\"ddbimporter\"][\"dndbeyond\"][\"alternativeNames\"] = [\n          \"Potion of Superior Healing\",\n          \"potion of superior healing\",\n        ];\n        break;\n      case \"Potion of Healing (Supreme)\":\n      case \"Potion of Supreme Healing\":\n        item.system.damage = { parts: [[\"10d4 + 20\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        item.flags[\"ddbimporter\"][\"dndbeyond\"][\"alternativeNames\"] = [\"Potion of Supreme Healing\"];\n        break;\n      case \"Iron Bands of Binding\":\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.uses = { value: 1, max: \"1\", per: \"day\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.save = { ability: \"str\", dc: 20, scaling: \"flat\" };\n        item.system.target = { value: 1, width: null, units: \"any\", type: \"creature\" };\n        break;\n      case \"Far Realm Shard\": {\n        item.system.activation.type = \"special\";\n        item.system.actionType = \"save\";\n        item.system.damage = { parts: [[\"3d6[psychic]\", \"psychic\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"cha\",\n          dc: null,\n          scaling: \"spell\",\n        };\n        break;\n      }\n      case \"Acid (vial)\": {\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 1, width: null, units: \"any\", type: \"creature\" };\n        item.system.range = { value: 20, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"2d6[acid]\", \"acid\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Bead of Force\": {\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 10, width: null, units: \"ft\", type: \"radius\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.duration = { units: \"minute\", value: 1 };\n        item.system.uses = { value: 1, max: \"1\", per: \"\" };\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"5d4[force]\", \"force\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 15,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      case \"Alchemist's Fire (flask)\":\n      case \"Alchemist's Fire\": {\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 1, width: null, units: \"any\", type: \"creature\" };\n        item.system.range = { value: 20, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"1d4[fire]\", \"fire\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 10,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      case \"Bomb\": {\n        item.type = \"consumable\";\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 5, width: null, units: \"ft\", type: \"radius\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"3d6[fire]\", \"fire\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 12,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      case \"Grenade, Fragmentation\": {\n        item.type = \"consumable\";\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 20, width: null, units: \"ft\", type: \"radius\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"5d6[piercing]\", \"piercing\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 15,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      // no default\n    }\n  });\n}\n","import {\n  baseItemEffect,\n} from \"./effects.js\";\n\nimport { loadMacroFile, generateMacroChange, generateItemMacroFlag } from \"./macros.js\";\n\nasync function woundingWeaponEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n\n  effect.transfer = false;\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  effect.flags.dae.stackable = \"count\";\n  effect.flags.dae.transfer = false;\n  effect.duration = {\n    startTime: null,\n    seconds: null,\n    rounds: 400,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n\n  const itemMacroText = await loadMacroFile(\"item\", \"wounding.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  effect.changes.push(generateMacroChange());\n  document.effects.push(effect);\n\n  return document;\n}\n\nasync function lifeStealingEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  const itemMacroText = await loadMacroFile(\"item\", \"lifeStealing.js\");\n  document.flags[\"itemacro\"] = generateItemMacroFlag(document, itemMacroText);\n  setProperty(document, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]ItemMacro\");\n  document.effects.push(effect);\n  return document;\n}\n\nconst RESTRICTION_MAPPINGS = [\n  {\n    // name: \"Extra Critical\",\n    ddb: [\"20 on the Attack Roll\"],\n    restriction: `@workflow.diceRoll === 20`,\n  },\n  {\n    name: \"of Life Stealing\",\n    ddb: [\"20 on the Attack Roll, Not Construct or Undead\"],\n    restriction: `@workflow.diceRoll === 20 && !([\"construct\", \"undead\"].includes(\"@raceOrType\"))`,\n    effect: true,\n    effectFunction: lifeStealingEffect,\n  },\n  {\n    name: \"Bloodaxe\",\n    ddb: [\"to creatures that aren’t constructs or undead\"],\n    restriction: `!([\"construct\", \"undead\"].includes(\"@raceOrType\"))`,\n  },\n  {\n    // name: \"Plants\",\n    ddb: [\"against a plant (an ordinary plant or a creature with the Plant type) or a wooden object that isn’t being worn or carried\"],\n    restriction: `[\"plant\"].includes(\"@raceOrType\")`\n  },\n  //  \"Javelin of Lightning\"\n  {\n    name: \"Javelin of Lightning\",\n    ddb: [\"On Hit or DC 13 Dexterity Save for Half Damage\"],\n    restriction: ``,\n    save: true,\n    macro: true,\n  },\n  {\n    name: \"Zariel\",\n    ddb: [\"3d10 radiant if you’re wielding the weapon with two hands\"],\n    restriction: ``,\n  },\n  {\n    // name: \"Undead\",\n    ddb: [\n      \"Against Undead Targets\",\n      \"Against undead targets.\",\n      \"(Against undead)\",\n      \"An undead creature hit by the weapon takes an extra 1d8 radiant damage.\"\n    ],\n    restriction: `[\"undead\"].includes(\"@raceOrType\")`,\n  },\n  {\n    // name: \"Dragon\",\n    ddb: [\"When you hit a dragon with this weapon\"],\n    restriction: `[\"dragon\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"of Wounding\",\n    ddb: [\"Per Wound, DC 15 Constitution Save Ends Effect\"],\n    restriction: \"\",\n    effect: true,\n    effectFunction: woundingWeaponEffect,\n  },\n  {\n    name: \"Markovia\",\n    ddb: [\"Against Fiends or Undead\", \"Against a fiend or an undead\"],\n    restriction: `[\"fiend\", \"undead\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Riteknife\",\n    ddb: [\"For each soul imprisoned in the dagger\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Oathbow\",\n    ddb: [\"Against Sworn Enemy\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Matalotok\",\n    ddb: [\"30-foot-radius sphere\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Mastix\",\n    ddb: [\"regain hit points equal to half the amount of necrotic damage dealt\"],\n    restriction: \"\",\n    macro: true,\n  },\n  {\n    name: \"Mace of Disruption\",\n    ddb: [\"Special\"],\n    nameMatch: \"Mace of Disruption\",\n    restriction: `[\"fiend\", \"undead\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Gurt\",\n    ddb: [\"plus an extra 2d12 slashing damage if the target is human\"],\n    restriction: `[\"human\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Grovelthrash\",\n    ddb: [\"If you do, you take 1d6 psychic damage\"],\n    restriction: `false`,\n  },\n  {\n    // name: \"Giants\",\n    ddb: [\"Against Giants\"],\n    restriction: `[\"giant\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Flame Tongue\",\n    ddb: [\"While Flaming\"],\n    restriction: \"\",\n  },\n  {\n    name: \"Dwarven Thrower\",\n    ddb: [\"On hit with a ranged attack against Giants\", \"When Thrown (+2d8 against Giants)\"],\n    restriction: `[\"giant\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Dragon's Wrath\",\n    ddb: [\n      \"On a hit, the weapon deals an extra damage of the type dealt by the dragon’s breath weapon. (Wakened)\",\n      \"On a hit, the weapon deals an extra damage of the type dealt by the dragon’s breath weapon. (Stirring)\",\n      \"On a hit, the weapon deals an extra damage of the type dealt by the dragon’s breath weapon. (Ascendant)\",\n\n    ],\n    restriction: ``,\n  },\n  {\n    name: \"Dagger of Venom\",\n    ddb: [\"DC 15 Constitution Save Negates\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Yagas Pestle\",\n    ddb: [\"Per Charge (Max 3)\"],\n    restriction: `false`,\n  },\n];\n\nexport async function addRestrictionFlags(document) {\n\n  if (!game.modules.get(\"midi-qol\")?.active) return document;\n  const restrictions = getProperty(document, \"flags.ddbimporter.dndbeyond.restrictions\");\n  if (!restrictions || restrictions.length == 0) return document;\n  const name = document.flags.ddbimporter.originalName || document.name;\n\n  const nameMatch = RESTRICTION_MAPPINGS.find((r) => {\n    return r.name && name.toLowerCase()[0].includes(r.name.toLowerCase());\n  });\n  const restriction = nameMatch\n    ? nameMatch\n    : RESTRICTION_MAPPINGS.find((r) => {\n      return r.ddb.map((m) => m.toLowerCase())[0].includes(restrictions[0].toLowerCase());\n    });\n\n  if (restriction) {\n    let restrictionText = restriction.restriction;\n\n    if (document.system.attunement > 0 && ![\"\", \"false\"].includes(restriction.restriction)) {\n      restrictionText += ` && @item.attunement !== 1`;\n    }\n    setProperty(document, \"system.activation.condition\", restrictionText);\n    if (restriction.effectRestrictionACtivation) {\n      setProperty(document, \"flags.midi-qol.effectActivation\", true);\n    }\n\n    if (restriction.effect) {\n      document = await restriction.effectFunction(document);\n    }\n  }\n\n  // effects needed for:\n  // mace of disruption\n  // oathbow\n  // sharpness - needs light effect\n  // sunswords\n  // \"Javelin of Lightning\"\n  // dwarven thrower\n  // axe of dwarfish lords\n\n  return document;\n}\n","// this function enriches a bunch of items for the item collection module\n// the actual moving of items to containers is done after the actor is imported\n// this just adds some needed flags to the items\nexport function fixForItemCollections(ddb, items) {\n  const isItemCollectionsInstalled = game.modules.get(\"itemcollection\")?.active;\n\n  if (!isItemCollectionsInstalled) return items;\n\n  items.forEach((item) => {\n    if (getProperty(item, \"flags.ddbimporter.dndbeyond.isContainer\") === true) {\n      item.type = \"backpack\";\n    }\n    if (item.type === \"backpack\") {\n      setProperty(item, \"flags.itemcollection.bagWeight\", item.system.weight);\n      setProperty(item, \"flags.itemcollection.bagPrice\", item.system.cost);\n      setProperty(item, \"flags.core.sheetClass\", \"dnd5e.ItemSheet5eWithBags\");\n    }\n    if (hasProperty(item, \"flags.ddbimporter.id\")\n      && hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      && item.flags.ddbimporter.containerEntityId === ddb.character.id\n    ) {\n      setProperty(item, \"flags.itemcollection.contentsData\", []);\n    }\n  });\n\n  return items;\n}\n\n","import DICTIONARY from \"../../dictionary.js\";\nimport { parseTags } from \"../../lib/DDBTemplateStrings.js\";\n\nexport function getDescription(data) {\n  const chatSnippet = data.definition.snippet ? data.definition.snippet : \"\";\n  const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n\n  const attunementText = data.definition.canAttune && data.definition.attunementDescription && data.definition.attunementDescription !== \"\"\n    ? `<div class=\"item-attunement\"><i>Requires attunement by a ${data.definition.attunementDescription}</i></div>`\n    : \"\";\n\n  return {\n    value: parseTags(data.definition.description + attunementText),\n    chat: chatAdd ? parseTags(chatSnippet) : \"\",\n    unidentified: data.definition.type,\n  };\n}\n\nexport function getItemRarity(data) {\n  const tmpRarity = data.definition.rarity;\n  const isMundaneItem = data.definition?.rarity === \"Common\" && !data.definition.magic;\n  const rarity = data.definition.rarity && !isMundaneItem\n    ? tmpRarity.charAt(0).toLowerCase() + tmpRarity.slice(1).replace(/\\s/g, \"\")\n    : \"\";\n  return rarity;\n}\n\n/**\n * Checks if the character can attune to an item and if yes, if he is attuned to it.\n */\nexport function getAttuned(data) {\n  if (data.definition.canAttune !== undefined && data.definition.canAttune === true) {\n    return data.isAttuned;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks if the character can equip an item and if yes, if he is has it currently equipped.\n */\nexport function getEquipped(data) {\n  if (data.definition.canEquip !== undefined && data.definition.canEquip === true) {\n    return data.equipped;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Gets Limited uses information, if any\n * uses: { value: 0, max: 0, per: null }\n */\nexport function getUses(data) {\n  if (data.limitedUse !== undefined && data.limitedUse !== null) {\n    let resetType = DICTIONARY.resets.find((reset) => reset.id == data.limitedUse.resetType);\n    return {\n      max: data.limitedUse.maxUses,\n      value: data.limitedUse.numberUsed\n        ? data.limitedUse.maxUses - data.limitedUse.numberUsed\n        : data.limitedUse.maxUses,\n      per: resetType ? resetType.value : \"\",\n      description: data.limitedUse.resetTypeDescription,\n    };\n  } else {\n    return { value: 0, max: 0, per: null };\n  }\n}\n\nexport function getConsumableUses(data) {\n  if (data.limitedUse) {\n    let uses = getUses(data);\n    if (uses.per === \"\") uses.per = \"charges\";\n    uses.autoUse = false;\n    uses.autoDestroy = true;\n    return uses;\n  } else {\n    // default\n    return { value: 1, max: 1, per: \"charges\", autoUse: false, autoDestroy: true };\n  }\n}\n\n/**\n * Checks the proficiency of the character with this specific weapon\n * @param {obj} data Item data\n * @param {string} weaponType The DND5E weaponType\n * @param {array} proficiencies The character's proficiencies as an array of `{ name: 'PROFICIENCYNAME' }` objects\n */\nexport function getWeaponProficient(data, weaponType, proficiencies) {\n  // if it's a simple weapon and the character is proficient in simple weapons:\n  if (\n    proficiencies.find((proficiency) => proficiency.name === \"Simple Weapons\")\n    && weaponType.indexOf(\"simple\") !== -1\n  ) {\n    return true;\n  } else if (\n    proficiencies.find((proficiency) => proficiency.name === \"Martial Weapons\")\n    && weaponType.indexOf(\"martial\") !== -1\n  ) {\n    return true;\n  } else {\n    const proficient = proficiencies.some((proficiency) => proficiency.name.toLowerCase() === data.definition.type.toLowerCase());\n    return proficient;\n  }\n};\n\n/**\n * Searches for a magical attack bonus granted by this weapon\n * @param {obj} data item data\n */\nexport function getMagicalBonus(data) {\n  let boni = data.definition.grantedModifiers.filter(\n    (mod) => mod.type === \"bonus\" && mod.subType === \"magic\" && mod.value && mod.value !== 0\n  );\n  let bonus = boni.reduce((prev, cur) => prev + cur.value, 0);\n  return bonus;\n}\n\nexport function getAttunement(item) {\n  if (item.isAttuned) {\n    return 2;\n  } else if (item.definition.canAttune) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport function getBaseItem(data) {\n  let baseItem = \"\";\n  let toolType = \"\";\n\n  if (data.definition.filterType === \"Weapon\") {\n    baseItem = data.definition.type.toLowerCase().split(\",\").reverse().join(\"\").replace(/\\s/g, \"\");\n  } else if (data.definition.filterType === \"Armor\" && data.definition.baseArmorName) {\n    baseItem = data.definition.baseArmorName.toLowerCase().split(\",\").reverse().join(\"\").replace(/\\s/g, \"\");\n  } else if (data.definition.filterType === \"Other Gear\"\n    && ((data.definition.gearTypeId === 1 && data.definition.subType === \"Tool\")\n      || (data.definition.gearTypeId === 11))) {\n    const toolProficiencies = DICTIONARY.character.proficiencies\n      .filter((prof) => prof.type === \"Tool\")\n      .map((prof) => {\n        return prof;\n      });\n\n    const baseTool = toolProficiencies.find((allProf) => allProf.name.toLowerCase() === data.definition.name.toLowerCase());\n    if (baseTool && baseTool.baseTool && baseTool.baseTool !== \"\") {\n      baseItem = baseTool.baseTool;\n      toolType = baseTool.toolType;\n    }\n  } else if (data.definition.filterType === \"Staff\") {\n    baseItem = \"quarterstaff\";\n  }\n\n\n  return { baseItem, toolType };\n}\n\nexport function getQuantity(data) {\n  return data.definition.quantity\n    ? data.definition.quantity\n    : data.quantity\n      ? data.quantity\n      : 1;\n}\n\nexport function getSingleItemWeight(data) {\n  const bundleSize = data.definition?.bundleSize ? data.definition.bundleSize : 1;\n  const totalWeight = data.definition?.weight ? data.definition.weight : 0;\n  const weight = totalWeight / bundleSize;\n  return weight;\n}\n\nexport function getCapacity(data) {\n\n  const capacity = (data.definition.capacityWeight !== null)\n    ? {\n      \"type\": \"weight\",\n      \"value\": data.definition.capacityWeight,\n      \"weightless\": data.definition.weightMultiplier === 0,\n    }\n    : {};\n\n  return capacity;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getUses, getWeaponProficient, getMagicalBonus, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n/**\n * Gets the DND5E weapontype (simpleM, martialR etc.) as string\n * Supported Types only: Simple/Martial Melee/Ranged and Ammunition (Firearms in D&DBeyond)\n * @param {obj} data item data\n */\nfunction getWeaponType(data) {\n  const type = DICTIONARY.weapon.weaponType.find(\n    (type) => type.categoryId === data.definition.categoryId\n  );\n  const range = DICTIONARY.weapon.weaponRange.find(\n    (type) => type.attackType === data.definition.attackType\n  );\n\n  if (type && range) {\n    return `${type.value}${range.value}`;\n  } else {\n    return \"simpleM\";\n  }\n}\n\n/**\n * Gets the weapons's properties (Finesse, Reach, Heavy etc.)\n * @param {obj} data Item data\n */\nfunction getProperties(data) {\n  let result = {};\n  DICTIONARY.weapon.properties.forEach((property) => {\n    if (data.definition.properties && Array.isArray(data.definition.properties)) {\n      result[property.value] = data.definition.properties.some((prop) => prop.name === property.name);\n    }\n    if (\n      !result[property.value]\n      && data.definition.grantedModifiers\n      && Array.isArray(data.definition.grantedModifiers)\n    ) {\n      result[property.value] = data.definition.grantedModifiers.some(\n        (prop) => prop.type === \"weapon-property\" && prop.friendlySubtypeName === property.name\n      );\n    }\n  });\n  return result;\n}\n\n/**\n * Gets the range(s) of a given weapon\n */\nfunction getRange(data, weaponProperties) {\n  // range: { value: null, long: null, units: '' },\n  // sometimes reach weapons have their range set as 5. it's not clear why.\n  const shortRange = data.definition.range ? data.definition.range : 5;\n  const reach = weaponProperties.rch && data.definition.range == 5 ? 5 : 0;\n  return {\n    value: shortRange + reach,\n    long: (data.definition.longRange && data.definition.longRange != data.definition.range)\n      ? data.definition.longRange + reach\n      : \"\",\n    units: \"ft\",\n  };\n};\n\n/**\n * Gets the ability which the to hit modifier is baed on\n * Melee: STR\n * Ranged: DEX\n * Finesse: STR || DEX\n * Thrown: STR, unless Finesse, then STR || DEX\n * @param {obj} data item data\n * @param {obj} weaponProperties weapon properties\n * @param {obj} weaponRange weapon range information\n * @param {obj} abilities character abilities (scores)\n */\nfunction getAbility(weaponProperties, weaponRange) {\n  // finesse weapons can choose freely, so we choose the higher one\n  if (weaponProperties.fin) {\n    return null;\n  }\n\n  // thrown, but not finesse weapon: STR\n  if (weaponProperties.thr) {\n    return \"str\";\n  }\n\n  // if it's a ranged weapon, and not a reach weapon (long = 10 (?))\n  if (weaponRange.long > 5 && !weaponProperties.rch) {\n    return \"dex\";\n  }\n  // the default is STR\n  return null;\n}\n\n/**\n * Searches for a magical attack bonus granted by this weapon\n * @param {obj} data item data\n * @param {obj} flags\n */\nfunction getWeaponMagicalBonus(data, flags) {\n  const bonus = getMagicalBonus(data);\n  if (flags.classFeatures.includes(\"Improved Pact Weapon\") && bonus === 0) {\n    return 1;\n  } else {\n    return bonus;\n  }\n};\n\n/**\n *\n * @param {obj} data item data\n * @param {obj} flags\n * /* damage: { parts: [], versatile: '' }, * /\n */\nfunction getDamage(data, flags) {\n  const magicalDamageBonus = getWeaponMagicalBonus(data, flags);\n  // we can safely make these assumptions about GWF and Dueling because the\n  // flags are only added for melee attacks\n  const greatWeaponFighting = flags.classFeatures.includes(\"greatWeaponFighting\") ? \"r<=2\" : \"\";\n  const offHand = flags.classFeatures.includes(\"OffHand\");\n  const twoWeapon = flags.classFeatures.includes(\"Two-Weapon Fighting\");\n  const twoHanded = data.definition.properties.find((property) => property.name === \"Two-Handed\");\n  const melee = data.definition.attackType === 1;\n  const dueling = flags.classFeatures.includes(\"Dueling\") && !twoHanded && melee ? \" + 2\" : \"\";\n  const mod = (offHand && !twoWeapon) ? \"\" : \" + @mod\";\n\n  const baseDamageTagData = DDBHelper.getDamageTagForItem(data);\n  const damageTag = baseDamageTagData.damageTag;\n  const damageType = baseDamageTagData.damageType;\n\n  const versatile = data.definition.properties\n    .filter((property) => property.name === \"Versatile\")\n    .map((versatile) => {\n      if (versatile && versatile.notes) {\n        return (\n          utils.parseDiceString(versatile.notes + ` + ${magicalDamageBonus}`, null, damageTag, greatWeaponFighting).diceString + mod\n        );\n      } else {\n        return \"\";\n      }\n    })[0];\n\n  let parts = [];\n\n  // if we have greatweapon fighting style and this is two handed, add the roll tweak\n  // else if we have duelling we add the bonus here (assumption- if you have dueling\n  // you're going to use it! (DDB also makes this assumption))\n  const fightingStyleDiceMod = twoHanded ? greatWeaponFighting : \"\";\n\n  // if we are a martial artist and the weapon is eligable we may need to use a bigger dice type.\n  // this martial arts die info is addedd to the weapon flags before parse weapon is called\n  const martialArtsDie = flags.martialArtsDie;\n\n  if (Number.isInteger(data.definition.fixedDamage)) {\n    parts.push([\n      utils.parseDiceString(data.definition.fixedDamage + ` + ${magicalDamageBonus}`, `${mod}${dueling}`, damageTag, fightingStyleDiceMod)\n        .diceString,\n      damageType,\n    ]);\n  } else if (data.definition.damage && data.definition.damage.diceString && damageType) {\n    let diceString = data.definition.damage.diceString;\n    if (martialArtsDie.diceValue && data.definition.damage.diceValue && martialArtsDie.diceValue > data.definition.damage.diceValue) {\n      diceString = martialArtsDie.diceString;\n    }\n\n    // if there is a magical damage bonus, it probably should only be included into the first damage part.\n    parts.push([\n      utils.parseDiceString(diceString + ` + ${magicalDamageBonus}`, `${mod}${dueling}`, damageTag, fightingStyleDiceMod)\n        .diceString,\n      damageType,\n    ]);\n  }\n\n  // additional damage parts with no restrictions\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\" && (!mod.restriction || mod.restriction === \"\"))\n    .forEach((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      const damagePart = die ? die.diceString : mod.value;\n      if (damagePart) {\n        const subDamageTagData = DDBHelper.getDamageTagForMod(mod);\n        const damageParsed = utils.parseDiceString(damagePart, \"\", subDamageTagData.damageTag).diceString;\n        parts.push([`${damageParsed}`, subDamageTagData.damageType]);\n      }\n    });\n\n\n  let chatFlavors = [];\n  let otherFormulas = [];\n  let restrictions = [];\n  // loop over restricted damage types\n  // we do this so we can either break this out for midi users\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\" && mod.restriction && mod.restriction !== \"\")\n    .forEach((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      const damagePart = die ? die.diceString : `${mod.value}`;\n      if (damagePart) {\n        const subDamageTagData = DDBHelper.getDamageTagForMod(mod);\n        const damageParsed = utils.parseDiceString(damagePart, \"\", subDamageTagData.damageTag).diceString;\n        restrictions.push(mod.restriction);\n        otherFormulas.push(damageParsed);\n        chatFlavors.push(`[${damagePart}] ${mod.restriction}`);\n      }\n    });\n\n  const otherFormula = otherFormulas.join(\" + \");\n  const chatFlavor = chatFlavors.length === 0 ? \"\" : `Roll Other damage: ${chatFlavors.join(\", \")}`;\n\n  // add damage modifiers from other sources like improved divine smite\n  if (flags.damage.parts) {\n    flags.damage.parts.forEach((part) => {\n      parts.push(part);\n    });\n  }\n\n  const result = {\n    parts,\n    versatile,\n  };\n\n  return [result, otherFormula, chatFlavor, restrictions];\n}\n\nfunction getActionType(data) {\n  if (data.definition.attackType === 1) {\n    return \"mwak\";\n  } else {\n    return \"rwak\";\n  }\n}\n\nexport default function parseWeapon(data, character, flags) {\n  let weapon = {\n    name: data.definition.name,\n    type: \"weapon\",\n    system: JSON.parse(utils.getTemplate(\"weapon\")),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n          damage: flags.damage,\n          classFeatures: flags.classFeatures,\n        },\n      },\n    },\n  };\n\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n  const characterProficiencies = character.flags.ddbimporter.dndbeyond.proficienciesIncludingEffects;\n\n  weapon.system.weaponType = getWeaponType(data);\n  weapon.system.properties = getProperties(data);\n\n  const proficientFeatures = [\"pactWeapon\", \"kensaiWeapon\"];\n  if (flags.classFeatures.some((feat) => proficientFeatures.includes(feat))) {\n    weapon.system.proficient = true;\n  } else {\n    weapon.system.proficient = getWeaponProficient(data, weapon.system.weaponType, characterProficiencies);\n  }\n\n  weapon.system.description = getDescription(data);\n  weapon.system.source = DDBHelper.parseSource(data.definition);\n  weapon.system.quantity = getQuantity(data);\n  weapon.system.weight = getSingleItemWeight(data);\n  weapon.system.equipped = getEquipped(data);\n  weapon.system.rarity = getItemRarity(data);\n  weapon.system.identified = true;\n  weapon.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  if (flags.classFeatures.includes(\"OffHand\")) weapon.system.activation.type = \"bonus\";\n\n  weapon.system.range = getRange(data, weapon.system.properties);\n  weapon.system.uses = getUses(data);\n  weapon.system.ability = getAbility(weapon.system.properties, weapon.system.range);\n  const mockAbility = weapon.system.ability === null\n    ? weapon.system.properties.fin ? \"dex\" : \"str\"\n    : weapon.system.ability;\n\n  // warlocks can use cha for their Hex weapon\n  if (flags.classFeatures.includes(\"hexWarrior\")) {\n    if (characterAbilities.cha.value >= characterAbilities[mockAbility].value) {\n      weapon.system.ability = \"cha\";\n    }\n  }\n  // kensai monks\n  if (flags.classFeatures.includes(\"kensaiWeapon\") || flags.classFeatures.includes(\"monkWeapon\")) {\n    if (characterAbilities.dex.value >= characterAbilities[mockAbility].value) {\n      weapon.system.ability = \"dex\";\n    }\n  }\n  if (flags.magicItemAttackInt && (data.definition.magic || weapon.system.properties.mgc)) {\n    if (characterAbilities.int.value > characterAbilities[mockAbility].value) {\n      weapon.system.ability = \"int\";\n    }\n  }\n\n  weapon.system.actionType = getActionType(data);\n  weapon.system.attackBonus = getWeaponMagicalBonus(data, flags);\n\n  [\n    weapon.system.damage,\n    weapon.system.formula,\n    weapon.system.chatFlavor,\n    weapon.flags.ddbimporter.dndbeyond.restrictions,\n  ] = getDamage(data, flags);\n\n\n  return weapon;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getMagicalBonus, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n/**\n * Gets the range(s) of a given weapon\n */\nfunction getRange(data) {\n  // range: { value: null, long: null, units: '' },\n  return {\n    value: data.definition.range ? data.definition.range : null,\n    long: data.definition.longRange ? data.definition.longRange : null,\n    units: (data.definition.range || data.definition.range) ? \"ft.\" : \"\",\n  };\n}\n\n/**\n *\n * @param {obj} data item data\n * @param {obj} weaponProperties weapon properties\n * /* damage: { parts: [], versatile: '' }, * /\n */\nlet getDamage = (data, magicalDamageBonus) => {\n  let parts = [];\n\n  // first damage part\n  // blowguns and other weapons rely on ammunition that provides the damage parts\n  if (data.definition.damage && data.definition.damage.diceString && data.definition.damageType) {\n    // if there is a magical damage bonus, it probably should only be included into the first damage part.\n    parts.push([\n      utils.parseDiceString(data.definition.damage.diceString + `+${magicalDamageBonus}`).diceString,\n      data.definition.damageType.toLowerCase(),\n    ]);\n  }\n\n  // additional damage parts\n  // Note: For the time being, restricted additional bonus parts are not included in the damage\n  //       The Saving Throw Freature within Foundry is not fully implemented yet, to this will/might change\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\" && mod.restriction && mod.restriction.length === 0)\n    .forEach((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      if (die) {\n        parts.push([die.diceString, mod.subType]);\n      } else if (mod.value) {\n        parts.push([mod.value, mod.subType]);\n      }\n    });\n\n  let result = {\n    // label: utils.parseDiceString(parts.map(part => part[0]).join(' + ')).diceString,\n    parts: parts,\n    versatile: \"\",\n  };\n\n  return result;\n};\n\nexport default function parseAmmunition(data, itemType) {\n  /**\n   * MAIN parseWeapon\n   */\n  let template = JSON.parse(utils.getTemplate(\"consumable\"));\n  let ammunition = {\n    name: data.definition.name,\n    type: \"consumable\",\n    system: template,\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: itemType,\n        },\n      },\n    },\n  };\n\n  ammunition.system.description = getDescription(data);\n  ammunition.system.source = DDBHelper.parseSource(data.definition);\n  ammunition.system.properties = {};\n  ammunition.system.quantity = getQuantity(data);\n  ammunition.system.weight = getSingleItemWeight(data);\n  ammunition.system.equipped = getEquipped(data);\n  ammunition.system.rarity = getItemRarity(data);\n  ammunition.system.identified = true;\n  ammunition.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  ammunition.system.range = getRange(data);\n  ammunition.system.ability = \"\";\n  ammunition.system.actionType = \"rwak\";\n  ammunition.system.attackBonus = getMagicalBonus(data);\n  ammunition.system.damage = getDamage(data, getMagicalBonus(data));\n  ammunition.system.consumableType = \"ammo\";\n\n  return ammunition;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getWeaponProficient, getMagicalBonus, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n/**\n * Gets the DND5E weapontype (simpleM, martialR etc.) as string\n * Supported Types only: Simple/Martial Melee/Ranged and Ammunition (Firearms in D&DBeyond)\n * @param {obj} data item data\n */\nfunction getWeaponType(data) {\n  const weaponBehavior = data.definition.weaponBehaviors[0];\n  const type = DICTIONARY.weapon.weaponType.find((type) => type.categoryId === weaponBehavior.categoryId);\n  const range = DICTIONARY.weapon.weaponRange.find((type) => type.attackType === weaponBehavior.attackType);\n\n  if (type && range) {\n    return `${type.value}${range.value}`;\n  } else {\n    return \"simpleM\";\n  }\n}\n\n/**\n * Gets the weapons's properties (Finesse, Reach, Heavy etc.)\n * @param {obj} data Item data\n */\nfunction getProperties(data) {\n  let weaponBehavior = data.definition.weaponBehaviors[0];\n  let result = {};\n  DICTIONARY.weapon.properties.forEach((property) => {\n    if (weaponBehavior.properties && Array.isArray(weaponBehavior.properties)) {\n      result[property.value] = weaponBehavior.properties.find((prop) => prop.name === property.name) !== undefined;\n    }\n  });\n  return result;\n}\n\n\n/**\n * Gets the range(s) of a given weapon\n */\nfunction getRange(data) {\n  // range: { value: null, long: null, units: '' },\n  let weaponBehavior = data.definition.weaponBehaviors[0];\n  return {\n    value: weaponBehavior.range ? weaponBehavior.range : 5,\n    long: weaponBehavior.longRange ? weaponBehavior.longRange : 5,\n    units: \"ft.\",\n  };\n}\n\n/**\n * Gets the ability which the to hit modifier is baed on\n * Melee: STR\n * Ranged: DEX\n * Finesse: STR || DEX\n * Thrown: STR, unless Finesse, then STR || DEX\n * @param {obj} weaponProperties weapon properties\n * @param {obj} weaponRange weapon range information\n * @param {obj} abilities character abilities (scores)\n */\nfunction getAbility(weaponProperties, weaponRange, abilities) {\n  // finesse weapons can choose freely, so we choose the higher one\n  if (weaponProperties.fin) {\n    return abilities.str.value > abilities.dex.value ? \"str\" : \"dex\";\n  }\n\n  // thrown, but not finesse weapon: STR\n  if (weaponProperties.thr) {\n    return \"str\";\n  }\n\n  // if it's a ranged weapon, and hot a reach weapon (long = 10 (?))\n  if (weaponRange.long !== 5 && !weaponProperties.rch) {\n    return \"dex\";\n  }\n\n  // the default is STR\n  return \"str\";\n}\n\n/**\n *\n * @param {obj} data item data\n * @param {obj} weaponProperties weapon properties\n * /* damage: { parts: [], versatile: '' }, * /\n */\nfunction getDamage(data, magicalDamageBonus) {\n  let weaponBehavior = data.definition.weaponBehaviors[0];\n  let versatile = weaponBehavior.properties.find((property) => property.name === \"Versatile\");\n  if (versatile && versatile.notes) {\n    versatile = utils.parseDiceString(versatile.notes + `+${magicalDamageBonus}`).diceString;\n  } else {\n    versatile = \"\";\n  }\n\n  let parts = [];\n\n  // first damage part\n  // blowguns and other weapons rely on ammunition that provides the damage parts\n  if (weaponBehavior.damage && weaponBehavior.damage.diceString && weaponBehavior.damageType) {\n    parts.push([\n      utils.parseDiceString(weaponBehavior.damage.diceString + `+${magicalDamageBonus}`).diceString,\n      weaponBehavior.damageType.toLowerCase(),\n    ]);\n  }\n\n  // additional damage parts\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\")\n    .forEach((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      if (die?.diceString) {\n        parts.push([die.diceString, mod.subType]);\n      } else if (mod.value) {\n        parts.push([`${mod.value}`, mod.subType]);\n      }\n    });\n\n  let result = {\n    // label: utils.parseDiceString(parts.map(part => part[0]).join(' + ')).diceString,\n    parts: parts,\n    versatile: versatile,\n  };\n\n  return result;\n}\n\nexport default function parseStaff(data, character) {\n  let template = JSON.parse(utils.getTemplate(\"weapon\"));\n  let staff = {\n    name: data.definition.name,\n    type: \"weapon\",\n    system: template,\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n        },\n      },\n    },\n  };\n\n  staff.system.weaponType = getWeaponType(data);\n  staff.system.properties = getProperties(data);\n  staff.system.proficient = getWeaponProficient(data, staff.system.weaponType, character.flags.ddbimporter.dndbeyond.proficienciesIncludingEffects);\n  staff.system.description = getDescription(data);\n  staff.system.source = DDBHelper.parseSource(data.definition);\n  staff.system.quantity = getQuantity(data);\n  staff.system.weight = getSingleItemWeight(data);\n  staff.system.equipped = getEquipped(data);\n  staff.system.rarity = getItemRarity(data);\n  staff.system.identified = true;\n  staff.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  staff.system.range = getRange(data);\n  staff.system.ability = getAbility(staff.system.properties, staff.system.range, character.flags.ddbimporter.dndbeyond.effectAbilities);\n  staff.system.actionType = staff.system.range.long === 5 ? \"mwak\" : \"rwak\";\n  staff.system.attackBonus = getMagicalBonus(data);\n  staff.system.damage = getDamage(data, getMagicalBonus(data));\n\n  return staff;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getUses, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n/**\n * Gets the DND5E weapontype (simpleM, martialR etc.) as string\n * Supported Types only: Simple/Martial Melee/Ranged and Ammunition (Firearms in D&DBeyond)\n * @param {obj} data item data\n */\nfunction getArmorType(data, character, flags) {\n  // get the generic armor type\n  const nameEntry = DICTIONARY.equipment.armorType.find((type) => type.name === data.definition.type);\n  const idEntry = DICTIONARY.equipment.armorType.find((type) => type.id === data.definition.armorTypeId);\n\n  // get the armor class\n  const baseArmorClass = data.definition.armorClass;\n  const bonusArmorClass = data.definition.grantedModifiers.reduce((prev, cur) => {\n    if (cur.type === \"bonus\" && cur.subType === \"armor-class\" && Number.isInteger(cur.value)) {\n      return prev + cur.value;\n    } else {\n      return prev;\n    }\n  }, 0);\n\n  // console.warn(\"datadefinition\",data.definition)\n  // console.warn(\"baseArmorClass\",baseArmorClass)\n  // console.warn(\"bonusArmorClass\",bonusArmorClass)\n\n  // get the max dex modifier (Medium Armor: 2, Heavy: 0)\n  let maxDexModifier;\n  const armorType = nameEntry !== undefined ? nameEntry.value : idEntry !== undefined ? idEntry.value : \"medium\";\n\n  switch (armorType) {\n    case \"heavy\":\n      maxDexModifier = 0;\n      break;\n    case \"medium\":\n      maxDexModifier = flags.maxMediumArmorDex || 2;\n      break;\n    default:\n      maxDexModifier = null;\n      break;\n  }\n\n  const itemDexMaxAdjustment = DDBHelper.getModifierSum(DDBHelper.filterModifiers(data.definition.grantedModifiers, \"set\", \"ac-max-dex-modifier\"), character);\n  if (maxDexModifier !== null && Number.isInteger(itemDexMaxAdjustment) && itemDexMaxAdjustment > maxDexModifier) {\n    maxDexModifier = itemDexMaxAdjustment;\n  }\n\n  return {\n    type: armorType,\n    value: baseArmorClass + bonusArmorClass,\n    dex: maxDexModifier,\n  };\n}\n\n/**\n * Gets the strength requirement to wear this armor, if any\n * @param {obj} data Item data\n */\nfunction getStrength(data) {\n  return data.definition.strengthRequirement ?? 0; // in future null might be permitted again\n}\n\n/**\n * Wearing this armor can give a disadvantage on stealth checks\n */\nfunction getStealthPenalty(data) {\n  return data.definition.stealthCheck === 2;\n}\n\n/**\n * Checks the proficiency of the character with this specific weapon\n * @param {obj} data Item data\n * @param {array} proficiencies The character's proficiencies as an array of `{ name: 'PROFICIENCYNAME' }` objects\n */\nfunction getProficient(data, proficiencies) {\n  // Proficiency in armor category (Light Armor, Shield)\n  if (proficiencies.find((proficiency) => proficiency.name === data.definition.type) !== -1) return true;\n  // Specific proficiency\n  if (proficiencies.find((proficiency) => proficiency.name === data.definition.baseArmorName) !== -1) return true;\n  return false;\n}\n\nexport default function parseArmor(data, character, flags) {\n  let armor = {\n    name: data.definition.name,\n    type: \"equipment\",\n    system: JSON.parse(utils.getTemplate(\"equipment\")),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n        },\n      },\n    },\n  };\n\n  armor.system.armor = getArmorType(data, character, flags);\n  armor.system.strength = getStrength(data);\n  armor.system.stealth = getStealthPenalty(data);\n  armor.system.proficient = getProficient(data, character.flags.ddbimporter.dndbeyond.proficienciesIncludingEffects);\n  armor.system.description = getDescription(data);\n  armor.system.source = DDBHelper.parseSource(data.definition);\n  armor.system.quantity = getQuantity(data);\n  armor.system.weight = getSingleItemWeight(data);\n  armor.system.equipped = getEquipped(data);\n  armor.system.rarity = getItemRarity(data);\n  armor.system.identified = true;\n  armor.system.uses = getUses(data);\n\n  return armor;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport {\n  getItemRarity,\n  getEquipped,\n  getUses,\n  getSingleItemWeight,\n  getQuantity,\n  getDescription,\n  getCapacity,\n} from \"./common.js\";\n\nexport default function parseWonderous(data) {\n  /**\n   * MAIN parseEquipment\n   */\n  let item = {\n    name: data.definition.name,\n    type: \"equipment\",\n    system: JSON.parse(utils.getTemplate(\"equipment\")),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n        },\n      },\n    },\n  };\n\n  //\n  // \"armor\": {\n  // \"type\": \"trinket\",\n  // \"value\": 10,\n  // \"dex\": null\n  // }\n  item.system.armor = {\n    type: \"trinket\",\n    value: 10,\n    dex: null,\n  };\n\n  /* \"strength\": 0 */\n  item.system.strength = 0;\n\n  /* \"stealth\": false,*/\n  item.system.stealth = false;\n  item.system.proficient = true;\n  item.system.description = getDescription(data);\n  item.system.source = DDBHelper.parseSource(data.definition);\n  item.system.quantity = getQuantity(data);\n  item.system.weight = getSingleItemWeight(data);\n  item.system.equipped = getEquipped(data);\n  item.system.rarity = getItemRarity(data);\n  item.system.identified = true;\n  item.system.uses = getUses(data);\n  item.system.capacity = getCapacity(data);\n\n  return item;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getConsumableUses, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n\nfunction getActionType(data) {\n  if (data.definition.tags.includes(\"Healing\")) {\n    return \"heal\";\n  } else if (data.definition.tags.includes(\"Damage\")) {\n    // ranged spell attack. This is a good guess\n    return \"rsak\";\n  } else {\n    return \"other\";\n  }\n}\n\nfunction getDamage(data, actionType) {\n  let damage = { parts: [], versatile: \"\" };\n  // is this a damage potion\n  switch (actionType) {\n    case \"heal\": {\n      // healing potion\n      // we only get the first matching modifier\n      const healingModifier = data.definition.grantedModifiers.find(\n        (mod) => mod.type === \"bonus\" && mod.subType === \"hit-points\"\n      );\n      if (healingModifier) {\n        const healingDie = healingModifier.dice ? healingModifier.dice : healingModifier.die ? healingModifier.die : undefined;\n        if (healingDie?.diceString) {\n          damage.parts = [[healingDie.diceString + \"[healing] \", \"healing\"]];\n        } else if (healingModifier.fixedValue) {\n          damage.parts = [[healingModifier.fixedValue + \"[healing] \", \"healing\"]];\n        }\n      }\n      break;\n    }\n    case \"rsak\": {\n      // damage potion\n      const damageModifier = data.definition.grantedModifiers.find((mod) => mod.type === \"damage\" && (mod.dice || mod.die));\n      if (damageModifier) {\n        const damageDie = damageModifier.dice ? damageModifier.dice : damageModifier.die ? damageModifier.die : undefined;\n        if (damageDie?.diceString) {\n          damage.parts = [[damageDie.diceString + `[${damageModifier.subType}] `, damageModifier.subType]];\n        } else if (damageModifier.fixedValue) {\n          damage.parts = [[damageModifier.fixedValue + `[${damageModifier.subType}] `, damageModifier.subType]];\n        }\n      }\n      break;\n    }\n    // no default\n  }\n  return damage;\n}\n\nfunction getDuration(data) {\n  let duration = {\n    value: null,\n    units: \"\",\n  };\n\n  if (data.definition.duration) {\n    if (data.definition.duration.durationUnit !== null) {\n      duration.units = data.definition.duration.durationUnit.toLowerCase();\n    } else {\n      duration.units = data.definition.duration.durationType.toLowerCase().substring(0, 4);\n    }\n    if (data.definition.duration.durationInterval) duration.value = data.definition.duration.durationInterval;\n  } else {\n    const durationArray = [\n      { foundryUnit: \"day\", descriptionMatches: [\"day\", \"days\"] },\n      { foundryUnit: \"hour\", descriptionMatches: [\"hour\", \"hours\"] },\n      { foundryUnit: \"inst\", descriptionMatches: [\"instant\", \"instantaneous\"] },\n      { foundryUnit: \"minute\", descriptionMatches: [\"minute\", \"minutes\"] },\n      { foundryUnit: \"month\", descriptionMatches: [\"month\", \"months\"] },\n      { foundryUnit: \"perm\", descriptionMatches: [\"permanent\"] },\n      { foundryUnit: \"round\", descriptionMatches: [\"round\", \"rounds\"] },\n      // { foundryUnit: \"spec\", descriptionMatches: [null] },\n      { foundryUnit: \"turn\", descriptionMatches: [\"turn\", \"turns\"] },\n      { foundryUnit: \"year\", descriptionMatches: [\"year\", \"years\"] },\n    ];\n    // attempt to parse duration\n    const descriptionUnits = durationArray.map((unit) => unit.descriptionMatches).flat().join(\"|\");\n    const durationExpression = new RegExp(`(\\\\d*)(?:\\\\s)(${descriptionUnits})`);\n    const durationMatch = data.definition.description.match(durationExpression);\n\n    if (durationMatch) {\n      duration.units = durationArray.find((duration) => duration.descriptionMatches.includes(durationMatch[2])).foundryUnit;\n      duration.value = durationMatch[1];\n    }\n  }\n  return duration;\n}\n\n\nexport default function parsePotion(data, itemType) {\n  let potion = {\n    name: data.definition.name,\n    type: \"consumable\",\n    system: JSON.parse(utils.getTemplate(\"consumable\")),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: itemType,\n        },\n      },\n    },\n  };\n\n  potion.system.consumableType = \"potion\";\n  potion.system.uses = getConsumableUses(data);\n  potion.system.description = getDescription(data);\n  potion.system.source = DDBHelper.parseSource(data.definition);\n  potion.system.quantity = getQuantity(data);\n  potion.system.weight = getSingleItemWeight(data);\n  potion.system.equipped = getEquipped(data);\n  potion.system.rarity = getItemRarity(data);\n  potion.system.identified = true;\n  potion.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  potion.system.duration = getDuration(data);\n  potion.system.actionType = getActionType(data);\n  potion.system.damage = getDamage(data, getActionType(data));\n\n  return potion;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getConsumableUses, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n\nexport default function parseScroll(data) {\n  let scroll = {\n    name: data.definition.name,\n    type: \"consumable\",\n    system: JSON.parse(utils.getTemplate(\"consumable\")),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n        },\n      },\n    },\n  };\n\n  scroll.system.consumableType = \"scroll\";\n  scroll.system.uses = getConsumableUses(data);\n  scroll.system.description = getDescription(data);\n  scroll.system.source = DDBHelper.parseSource(data.definition);\n  scroll.system.quantity = getQuantity(data);\n  scroll.system.weight = getSingleItemWeight(data);\n  scroll.system.equipped = getEquipped(data);\n  scroll.system.rarity = getItemRarity(data);\n  scroll.system.identified = true;\n  scroll.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  scroll.system.actionType = \"other\";\n\n  return scroll;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getUses, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\nfunction isHalfProficiencyRoundedUp(data, ab) {\n  const longAbility = DICTIONARY.character.abilities\n    .filter((ability) => ab === ability.value)\n    .map((ability) => ability.long)[0];\n  const roundUp = DDBHelper.filterBaseModifiers(data, \"half-proficiency-round-up\", `${longAbility}-ability-checks`);\n  return Array.isArray(roundUp) && roundUp.length;\n}\n\nfunction getProficiency(data, toolName, ability) {\n  const modifiers = [\n    DDBHelper.getChosenClassModifiers(data, true),\n    DDBHelper.getModifiers(data, \"race\", true),\n    DDBHelper.getModifiers(data, \"background\", true),\n    DDBHelper.getModifiers(data, \"feat\", true),\n    DDBHelper.getActiveItemModifiers(data, true),\n  ]\n    .flat()\n    .filter((modifier) => modifier.friendlySubtypeName === toolName)\n    .map((mod) => mod.type);\n\n  const halfProficiency\n    = DDBHelper.getChosenClassModifiers(data).find(\n      (modifier) =>\n        // Jack of All trades/half-rounded down\n        (modifier.type === \"half-proficiency\" && modifier.subType === \"ability-checks\")\n        // e.g. champion for specific ability checks\n        || isHalfProficiencyRoundedUp(data, ability)\n    ) !== undefined\n      ? 0.5\n      : 0;\n\n  const proficient = modifiers.includes(\"expertise\") ? 2 : modifiers.includes(\"proficiency\") ? 1 : halfProficiency;\n\n  return proficient;\n}\n\nexport default function parseTool(ddb, data, itemType) {\n  /**\n   * MAIN parseTool\n   */\n  let tool = {\n    name: data.definition.name,\n    type: \"tool\",\n    system: JSON.parse(utils.getTemplate(\"tool\")),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: itemType,\n        },\n      },\n    },\n  };\n\n  const defaultAbility = DICTIONARY.character.proficiencies.find((prof) => prof.name === tool.name);\n\n  tool.system.ability = defaultAbility?.ability ?? \"dex\";\n  tool.system.description = getDescription(data);\n  tool.system.proficient = (ddb) ? getProficiency(ddb, tool.name, tool.system.ability) : 0;\n  tool.system.source = DDBHelper.parseSource(data.definition);\n  tool.system.quantity = getQuantity(data);\n  tool.system.weight = getSingleItemWeight(data);\n  tool.system.equipped = getEquipped(data);\n  tool.system.rarity = getItemRarity(data);\n  tool.system.identified = true;\n  tool.system.uses = getUses(data);\n\n  return tool;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getConsumableUses, getSingleItemWeight, getQuantity, getDescription, getCapacity } from \"./common.js\";\nimport DICTIONARY from \"../../dictionary.js\";\n\nfunction getItemType(data) {\n  let result = {\n    type: \"loot\"\n  };\n\n  if (data.definition.isContainer) {\n    return {\n      type: \"backpack\",\n    };\n  } else if (data.definition.name.startsWith(\"Lantern,\")\n    || [\"Lamp\", \"Healer's Kit\"].includes(data.definition.name)\n  ) {\n    return {\n      type: \"consumable\",\n      consumableType: \"trinket\",\n    };\n  }\n\n  const itemTypes = data.definition.tags && Array.isArray(data.definition.tags)\n    ? [data.definition.type.toLowerCase(), ...data.definition.tags.map((t) => t.toLowerCase())]\n    : [data.definition.type.toLowerCase()];\n\n  let itemType = itemTypes\n    .map((itemType) => {\n      if (itemType === \"container\") return \"backpack\";\n      if (itemType === \"consumable\") return \"consumable\";\n      return DICTIONARY.types.full.find((t) => t.indexOf(itemType) !== -1 || itemType.indexOf(t) !== -1);\n    })\n    .reduce(\n      (itemType, currentType) => (currentType !== undefined && itemType === undefined ? currentType : itemType),\n      undefined\n    );\n\n  if (!itemType) {\n    const isConsumable\n      = data.definition.type === \"Gear\"\n      && data.definition.subType === \"Adventuring Gear\"\n      && data.definition.tags.includes('Utility')\n      && ((data.definition.tags.includes('Damage')\n      && data.definition.tags.includes('Combat'))\n      || data.definition.tags.includes('Healing'));\n    if (isConsumable) itemType = \"consumable\";\n  }\n\n  if (itemType) {\n    result.type = itemType;\n    if (itemType === \"consumable\") {\n      if (data.definition.name.includes('vial') || data.definition.name.includes('flask')) {\n        result.consumableType = \"potion\";\n      } else if (data.definition.name.startsWith(\"Ration\")) {\n        result.consumableType = \"food\";\n      } else {\n        result.consumableType = \"trinket\";\n      }\n    }\n  }\n\n  return result;\n}\n\nexport default function parseLoot(data, itemType) {\n  const type = getItemType(data);\n\n  let loot = {\n    name: data.definition.name,\n    type: type.type,\n    system: JSON.parse(utils.getTemplate(\"loot\")), // was: tool\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: itemType,\n        },\n      },\n    },\n  };\n\n  if (type.consumableType) {\n    loot.system.consumableType = type.consumableType;\n    loot.system.uses = getConsumableUses(data);\n  }\n  loot.system.description = getDescription(data);\n  loot.system.source = DDBHelper.parseSource(data.definition);\n  loot.system.quantity = getQuantity(data);\n  loot.system.weight = getSingleItemWeight(data);\n  loot.system.equipped = getEquipped(data);\n  loot.system.rarity = getItemRarity(data);\n  loot.system.identified = true;\n  loot.system.cost = data.definition.cost;\n\n  if (type.type === \"backpack\") {\n    loot.system.capacity = getCapacity(data);\n  }\n  return loot;\n}\n","import utils from \"../../lib/utils.js\";\nimport { getItemRarity, getEquipped, getSingleItemWeight, getQuantity } from \"./common.js\";\n\nexport default function parseCustomItem(data) {\n  let customItem = {\n    name: data.definition.name,\n    type: \"loot\",\n    system: JSON.parse(utils.getTemplate(\"loot\")),\n    flags: {\n      ddbimporter: {\n        id: data.id,\n        custom: true,\n        dndbeyond: {\n          type: \"Custom Item\",\n        },\n      },\n    },\n  };\n\n  let description = data.definition.description && data.definition.description !== \"null\"\n    ? data.definition.description\n    : \"\";\n  description = data.definition.notes\n    ? description + `<p><blockquote>${data.definition.notes}</blockquote></p>`\n    : description;\n\n  const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n  customItem.system.description = {\n    value: description,\n    chat: chatAdd ? description : \"\",\n    unidentified: description,\n  };\n\n  customItem.system.source = \"Custom item\";\n  customItem.system.quantity = getQuantity(data);\n  customItem.system.weight = getSingleItemWeight(data);\n  customItem.system.price = data.definition.cost ? data.definition.cost : 0;\n  customItem.system.equipped = getEquipped(data);\n  customItem.system.identified = true;\n  customItem.system.rarity = getItemRarity(data);\n\n  return customItem;\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\nimport logger from \"../../logger.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\n\n// magicitems support\nimport { parseMagicItem } from \"./magicify.js\";\n\nimport { fixItems } from \"./special.js\";\n\n// effects support\nimport { generateEffects } from \"../../effects/effects.js\";\nimport { generateBaseACItemEffect } from \"../../effects/acEffects.js\";\nimport { parseInfusion } from \"./infusions.js\";\nimport { addRestrictionFlags } from \"../../effects/restrictions.js\";\nimport { midiItemEffects } from \"../../effects/specialEquipment.js\";\n\n// tables\nimport { generateTable } from \"../../muncher/table.js\";\n\n// item collections\nimport { fixForItemCollections } from \"./itemCollections.js\";\n\n// type: weapon\nimport parseWeapon from \"./weapon.js\";\nimport parseAmmunition from \"./ammunition.js\";\nimport parseStaff from \"./staves.js\";\n\n// type: armor\nimport parseArmor from \"./armor.js\";\n\n// tyoe: wonderous item\nimport parseWonderous from \"./wonderous.js\";\n\n// type: consumables\nimport parsePotion from \"./potion.js\";\nimport parseScroll from \"./scroll.js\";\n\n// type: tool\nimport parseTool from \"./tool.js\";\n\n// other loot\nimport parseLoot from \"./loot.js\";\nimport parseCustomItem from \"./custom.js\";\n\nimport { getAttunement, getBaseItem } from \"./common.js\";\n\n\nfunction getItemFromGearTypeIdOne(ddb, data) {\n  let item = {};\n\n  switch (data.definition.subType) {\n    case \"Potion\":\n      item = parsePotion(data, data.definition.subType);\n      break;\n    case \"Tool\":\n      item = parseTool(ddb, data, data.definition.subType);\n      break;\n    case \"Ammunition\":\n      item = parseAmmunition(data, data.definition.subType);\n      break;\n    default:\n      item = parseLoot(data, data.definition.subType);\n  }\n  return item;\n}\n\nfunction otherGear(ddb, data) {\n  let item = {};\n\n  switch (data.definition.gearTypeId) {\n    case 1:\n      item = getItemFromGearTypeIdOne(ddb, data);\n      break;\n    case 4:\n      item = parseLoot(data, \"Mount\");\n      break;\n    case 5:\n      item = parsePotion(data, \"Poison\");\n      break;\n    case 6:\n      item = parsePotion(data, \"Potion\");\n      break;\n    case 11:\n      item = parseTool(ddb, data, \"Tool\");\n      break;\n    case 12:\n    case 17:\n    case 19:\n      item = parseLoot(data, \"Vehicle\");\n      break;\n    case 16:\n      item = parseLoot(data, \"Equipment Pack\");\n      break;\n    case 18:\n      // Change to parseGemstone (consummable) ?\n      item = parseLoot(data, \"Gemstone\");\n      break;\n    default:\n      logger.warn(\"Other Gear type missing from \" + data.definition.name, data);\n  }\n  return item;\n}\n\nfunction addExtraDDBFlags(data, item) {\n  item.flags.ddbimporter['id'] = data.id;\n  item.flags.ddbimporter['entityTypeId'] = data.entityTypeId;\n\n  if (data.definition.avatarUrl) item.flags.ddbimporter.dndbeyond['avatarUrl'] = data.definition.avatarUrl.split('?')[0];\n  if (data.definition.largeAvatarUrl) item.flags.ddbimporter.dndbeyond['largeAvatarUrl'] = data.definition.largeAvatarUrl.split('?')[0];\n  if (data.definition.filterType) {\n    const filter = DICTIONARY.items.find((i) => i.filterType === data.definition.filterType);\n    if (filter) item.flags.ddbimporter.dndbeyond['filterType'] = filter.filterType;\n  }\n\n  // container info\n  if (data.containerEntityId) setProperty(item, \"flags.ddbimporter.containerEntityId\", data.containerEntityId);\n  if (data.containerEntityTypeId) setProperty(item, \"flags.ddbimporter.containerEntityTypeId\", data.containerEntityTypeId);\n\n  setProperty(item, \"flags.ddbimporter.dndbeyond.isConsumable\", data.definition.isConsumable);\n  setProperty(item, \"flags.ddbimporter.dndbeyond.isContainer\", data.definition.isContainer);\n  setProperty(item, \"flags.ddbimporter.dndbeyond.isCustomItem\", data.definition.isCustomItem);\n  setProperty(item, \"flags.ddbimporter.dndbeyond.isHomebrew\", data.definition.isHomebrew);\n  setProperty(item, \"flags.ddbimporter.dndbeyond.isMonkWeapon\", data.definition.isMonkWeapon);\n  setProperty(item, \"flags.ddbimporter.dndbeyond.isPack\", data.definition.isPack);\n  setProperty(item, \"flags.ddbimporter.dndbeyond.levelInfusionGranted\", data.definition.levelInfusionGranted);\n\n  return item;\n}\n\nfunction enrichFlags(data, item) {\n  if (data.definition.magic) {\n    setProperty(item, \"system.properties.mgc\", true);\n  }\n  if (data.definition?.entityTypeId) item.flags.ddbimporter['definitionEntityTypeId'] = data.definition.entityTypeId;\n  if (data.definition?.id) item.flags.ddbimporter['definitionId'] = data.definition.id;\n  if (data.entityTypeId) item.flags.ddbimporter['entityTypeId'] = data.entityTypeId;\n  if (data.id) item.flags.ddbimporter['id'] = data.id;\n  if (data.definition?.tags) item.flags.ddbimporter.dndbeyond['tags'] = data.definition.tags;\n  if (data.definition?.sources) item.flags.ddbimporter.dndbeyond['sources'] = data.definition.sources;\n  if (data.definition?.stackable) item.flags.ddbimporter.dndbeyond['stackable'] = data.definition.stackable;\n}\n\n// the filter type \"Other Gear\" represents the equipment while the other filters represents the magic items in ddb\nexport function parseItem(ddb, ddbItem, character, flags) {\n  try {\n    // is it a weapon?\n    let item = {};\n    if (ddbItem.definition.filterType) {\n      switch (ddbItem.definition.filterType) {\n        case \"Weapon\": {\n          if (ddbItem.definition.type === \"Ammunition\" || ddbItem.definition.subType === \"Ammunition\") {\n            item = parseAmmunition(ddbItem, \"Ammunition\");\n          } else {\n            item = parseWeapon(ddbItem, character, flags);\n          }\n          break;\n        }\n        case \"Armor\":\n          item = parseArmor(ddbItem, character, flags);\n          break;\n        case \"Wondrous item\":\n        case \"Ring\":\n        case \"Wand\":\n        case \"Rod\":\n          item = parseWonderous(ddbItem);\n          break;\n        case \"Staff\":\n          item = parseStaff(ddbItem, character);\n          break;\n        case \"Potion\":\n          item = parsePotion(ddbItem, ddbItem.definition.type);\n          break;\n        case \"Scroll\":\n          item = parseScroll(ddbItem);\n          break;\n        case \"Other Gear\":\n          item = otherGear(ddb, ddbItem);\n          break;\n        default:\n          logger.warn(\"Item filterType not implemented for \" + ddbItem.definition.name, ddbItem);\n          break;\n      }\n    } else {\n      // try parsing it as a custom item\n      item = parseCustomItem(ddbItem);\n    }\n    const baseItem = getBaseItem(ddbItem);\n    setProperty(item, \"system.baseItem\", baseItem.baseItem);\n    setProperty(item, \"system.toolType\", baseItem.toolType);\n    item.system.attunement = getAttunement(ddbItem);\n    if (ddbItem.definition.cost) item.system.price = ddbItem.definition.cost;\n\n    item = addExtraDDBFlags(ddbItem, item);\n    item = DDBHelper.addCustomValues(ddb, item);\n    enrichFlags(ddbItem, item);\n\n    return item;\n  } catch (err) {\n    logger.warn(\n      `Unable to parse item: ${ddbItem.definition.name}, ${ddbItem.definition.type}/${ddbItem.definition.filterType}. ${err.message}`,\n      ddbItem\n    );\n    logger.error(err.stack);\n    return { // return empty strut\n      name: ddbItem.definition.name,\n      flags: {\n        ddbimporter: {\n          dndbeyond: {\n          },\n        },\n      },\n    };\n  }\n}\n\n\n/**\n * We get extra damage to a weapon attack here, for example Improved\n * Divine Smite\n * @param {*} data\n * @param {*} restrictions (array)\n */\nfunction getExtraDamage(ddb, restrictions) {\n  return DDBHelper.filterBaseModifiers(ddb, \"damage\", null, restrictions).map((mod) => {\n    const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n    if (die) {\n      return [die.diceString, mod.subType];\n    } else if (mod.value) {\n      return [mod.value, mod.subType];\n    } else {\n      return [null, null];\n    }\n  });\n}\n\nfunction isMartialArtists(classes) {\n  return classes.some((cls) => cls.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\"));\n}\n\nfunction getWarlockFeatures(ddb, weapon) {\n  // Some features, notably hexblade abilities we scrape out here\n  const warlockFeatures = ddb.character.characterValues\n    .filter(\n      (characterValue) =>\n        characterValue.value\n        && characterValue.valueId == weapon.id\n        && DICTIONARY.character.characterValuesLookup.some(\n          (entry) => entry.typeId == characterValue.typeId\n        )\n    )\n    .map(\n      (characterValue) =>\n        DICTIONARY.character.characterValuesLookup.find(\n          (entry) => entry.typeId == characterValue.typeId\n        ).name\n    );\n\n  // Any Pact Weapon Features\n  const pactFeatures = ddb.character.options.class\n    .filter(\n      (option) =>\n        warlockFeatures.includes(\"pactWeapon\")\n        && option.definition.name\n        && DICTIONARY.character.pactFeatures.includes(option.definition.name)\n    )\n    .map((option) => option.definition.name);\n\n  const features = warlockFeatures.concat(pactFeatures);\n  return features;\n}\n\nfunction getMonkFeatures(ddb, weapon) {\n  const kenseiWeapon = DDBHelper.getChosenClassModifiers(ddb).some((mod) =>\n    mod.friendlySubtypeName === weapon.definition.type\n    && mod.type === \"kensei\"\n  );\n\n  const monkWeapon = DDBHelper.getChosenClassModifiers(ddb).some((mod) =>\n    mod.friendlySubtypeName === weapon.definition.type\n    && mod.type == \"monk-weapon\"\n  ) || (weapon.definition.isMonkWeapon && isMartialArtists(ddb.character.classes));\n\n  let features = [];\n\n  if (kenseiWeapon) features.push(\"kenseiWeapon\");\n  if (monkWeapon) features.push(\"monkWeapon\");\n\n  return features;\n}\n\n\nfunction getMartialArtsDie(ddb) {\n  let result = {\n    diceCount: null,\n    diceMultiplier: null,\n    diceString: null,\n    diceValue: null,\n    fixedValue: null,\n  };\n\n  const die = ddb.character.classes\n    // is a martial artist\n    .filter((cls) => cls.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\"))\n    // get class features\n    .map((cls) => cls.classFeatures)\n    .flat()\n    // filter relevant features, those that are martial arts and have a levelscaling hd\n    .filter((feature) => feature.definition.name === \"Martial Arts\" && feature.levelScale && feature.levelScale.dice)\n    // get this dice object\n    .map((feature) => feature.levelScale.dice);\n\n  if (die && die.length > 0) {\n    result = die[0];\n  }\n\n  return result;\n\n}\n\nfunction getClassFeatures(ddb, weapon) {\n  const warlockFeatures = getWarlockFeatures(ddb, weapon);\n  const monkFeatures = getMonkFeatures(ddb, weapon);\n  return warlockFeatures.concat(monkFeatures);\n}\n\nfunction getItemFlags(ddbCharacter, ddbItem) {\n  const ddb = ddbCharacter.source.ddb;\n  const character = ddbCharacter.raw.character;\n  let flags = {\n    damage: {\n      parts: [],\n    },\n    // Some features, notably hexblade abilities we scrape out here\n    classFeatures: getClassFeatures(ddb, ddbItem),\n    martialArtsDie: getMartialArtsDie(ddb),\n    maxMediumArmorDex: Math.max(...DDBHelper.filterBaseModifiers(ddb, \"set\", \"ac-max-dex-armored-modifier\").map((mod) => mod.value), 2),\n    magicItemAttackInt: DDBHelper.filterBaseModifiers(ddb, \"bonus\", \"magic-item-attack-with-intelligence\").length > 0,\n  };\n\n  if (flags.classFeatures.includes(\"Lifedrinker\")) {\n    flags.damage.parts.push([\"@mod\", \"necrotic\"]);\n  }\n  // const addItemEffects = game.settings.get(\"ddb-importer\", \"character-update-policy-add-item-effects\");\n  const addCharacterEffects = game.settings.get(\"ddb-importer\", \"character-update-policy-add-character-effects\");\n\n  // for melee attacks get extras\n  if (ddbItem.definition.attackType === 1) {\n    // get improved divine smite etc for melee attacks\n    const extraDamage = getExtraDamage(ddb, [\"Melee Weapon Attacks\"]);\n\n    if (!!extraDamage.length > 0) {\n      flags.damage.parts = flags.damage.parts.concat(extraDamage);\n    }\n    // do we have great weapon fighting?\n    if (DDBHelper.hasChosenCharacterOption(ddb, \"Great Weapon Fighting\")) {\n      flags.classFeatures.push(\"greatWeaponFighting\");\n    }\n    // do we have dueling fighting style?\n    if (DDBHelper.hasChosenCharacterOption(ddb, \"Dueling\") && !addCharacterEffects) {\n      flags.classFeatures.push(\"Dueling\");\n    }\n    // do we have two weapon fighting style?\n    if (DDBHelper.hasChosenCharacterOption(ddb, \"Two-Weapon Fighting\")) {\n      flags.classFeatures.push(\"Two-Weapon Fighting\");\n    }\n    if (DDBHelper.getCustomValueFromCharacter(ddbItem, character, 18)) {\n      flags.classFeatures.push(\"OffHand\");\n    }\n  }\n  // ranged fighting style is added as a global modifier elsewhere\n  // as is defensive style\n\n  return flags;\n}\n\nasync function getIcon(item, ddbItem) {\n  if (ddbItem.definition?.avatarUrl || ddbItem.definition?.largeAvatarUrl) {\n    const url = ddbItem.definition?.avatarUrl ?? ddbItem.definition?.largeAvatarUrl;\n    const downloadOptions = { type: \"item\", name: `custom-${item.name}`, download: true };\n    const img = await FileHelper.getImagePath(url, downloadOptions);\n    if (img) {\n      // eslint-disable-next-line require-atomic-updates\n      item.img = img;\n      setProperty(item, \"flags.ddbimporter.keepIcon\", true);\n    }\n  }\n  return item;\n}\n\n\n// TO DO: revisit to break up item parsing\nDDBCharacter.prototype.getInventory = async function getInventory() {\n\n  let items = [];\n  // first, check custom name, price or weight\n  this.source.ddb.character.characterValues.forEach((cv) => {\n    // try to find a matching item based on the characterValues (an array of custom adjustements to different parts of the character)\n    let item = this.source.ddb.character.inventory.find((item) => item.id === cv.valueId);\n    if (item) {\n      // check if this property is in the list of supported ones, based on our DICT\n      let property = DICTIONARY.item.characterValues.find((entry) => entry.typeId === cv.typeId);\n      // overwrite the name, weight or price with the custom value\n      if (property && cv.value.length !== 0) item.definition[property.value] = cv.value;\n    }\n  });\n\n  // now parse all items\n  const daeInstalled = game.modules.get(\"dae\")?.active;\n  const compendiumItem = this.raw.character.flags.ddbimporter.compendium;\n  const addEffects = (compendiumItem)\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-item-effects\");\n  const generateArmorACEffect = (compendiumItem)\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-ac-armor-effects\")\n    : false;\n\n  for (let ddbItem of this.source.ddb.character.inventory) {\n    const originalName = ddbItem.definition.name;\n    ddbItem.definition.name = DDBHelper.getName(this.source.ddb, ddbItem, this.raw.character);\n    const flags = getItemFlags(this, ddbItem);\n\n    const updateExisting = compendiumItem\n      ? game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\")\n      : false;\n    ddbItem.definition.description = generateTable(ddbItem.definition.name, ddbItem.definition.description, updateExisting);\n\n    let item = Object.assign({}, parseItem(this.source.ddb, ddbItem, this.raw.character, flags));\n\n    if (item) {\n      item = parseMagicItem(item, ddbItem, this.raw.itemSpells);\n      item.flags.ddbimporter.originalName = originalName;\n      item.flags.ddbimporter.version = CONFIG.DDBI.version;\n      if (!item.effects) item.effects = [];\n      if (!item.name || item.name === \"\") item.name = \"Item\";\n\n      if (daeInstalled && addEffects) item = generateEffects(this.source.ddb, this.raw.character, ddbItem, item, compendiumItem, \"item\");\n      // if this is a piece of armor and not generating effects don't generate ac\n      if (item.type === \"equipment\" && item.system.armor?.type && ![\"trinket\", \"clothing\"].includes(item.system.armor.type)) {\n        if (daeInstalled && generateArmorACEffect) {\n          item = generateBaseACItemEffect(this.source.ddb, this.raw.character, ddbItem, item, compendiumItem);\n        }\n      } else {\n        // always generate other item ac effects\n        item = generateBaseACItemEffect(this.source.ddb, this.raw.character, ddbItem, item, compendiumItem);\n      }\n\n      // eslint-disable-next-line no-await-in-loop\n      if (addEffects) item = await addRestrictionFlags(item);\n\n      if (!compendiumItem) item = parseInfusion(this.source.ddb, this.raw.character, item, ddbItem, compendiumItem);\n      // eslint-disable-next-line no-await-in-loop\n      item = await midiItemEffects(item);\n      // eslint-disable-next-line no-await-in-loop\n      item = await getIcon(item, ddbItem);\n\n      items.push(item);\n    }\n  }\n\n  fixItems(items);\n  items = fixForItemCollections(this.source.ddb, items);\n  return items;\n};\n","import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { fixFeatures, getDescription, addFeatEffects, addExtraEffects, setLevelScales } from \"./special.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nfunction parseFeature(feat, ddb, character, source, type) {\n  let features = [];\n  // filter proficiencies and Ability Score Improvement\n  const name = feat.definition ? feat.definition.name : feat.name;\n  let item = {\n    name: name.replace(\"’\", \"'\").trim(),\n    type: \"feat\",\n    system: JSON.parse(utils.getTemplate(\"feat\")),\n    flags: {\n      ddbimporter: {\n        id: feat.definition?.id ? feat.definition.id : feat.id,\n        type: type,\n        entityTypeId: feat.definition?.entityTypeId ? feat.definition.entityTypeId : feat.entityTypeId,\n        dndbeyond: {\n          requiredLevel: feat.requiredLevel,\n          displayOrder:\n            feat.definition && feat.definition.displayOrder ? feat.definition.displayOrder : feat.displayOrder,\n        },\n      },\n      obsidian: {\n        source: {\n          type: type,\n        },\n      },\n    },\n  };\n\n  setProperty(item, \"system.type.value\", type);\n\n  logger.debug(`Getting Feature ${item.name}`);\n\n  const klassAction = DDBHelper.findComponentByComponentId(ddb, feat.id);\n  if (klassAction) {\n    setProperty(item.flags, \"ddbimporter.dndbeyond.levelScale\", klassAction.levelScale);\n    setProperty(item.flags, \"ddbimporter.dndbeyond.levelScales\", klassAction.definition?.levelScales);\n    setProperty(item.flags, \"ddbimporter.dndbeyond.limitedUse\", klassAction.definition?.limitedUse);\n  }\n\n  if (!klassAction) {\n    const classOption = [ddb.character.options.race, ddb.character.options.class, ddb.character.options.feat]\n      .flat()\n      .find((option) => option.definition.id === feat.componentId);\n    if (classOption) {\n      const classOptionLink = DDBHelper.findComponentByComponentId(ddb, classOption.componentId);\n      if (classOptionLink) {\n        setProperty(item.flags, \"ddbimporter.dndbeyond.levelScale\", classOptionLink.levelScale);\n        setProperty(item.flags, \"ddbimporter.dndbeyond.levelScales\", classOptionLink.definition?.levelScales);\n        setProperty(item.flags, \"ddbimporter.dndbeyond.limitedUse\", classOptionLink.definition?.limitedUse);\n      }\n    }\n  }\n\n  if (feat?.requiredLevel) {\n    const klass = ddb.character.classes.find((klass) =>\n      (feat.classId && (klass.definition.id === feat.classId || klass.subclassDefinition?.id === feat.classId))\n      || (feat.className && klass.definition.name === feat.className\n        && ((!feat.subclassName || feat.subclassName === \"\")\n          || (feat.subclassName && klass.subclassDefinition?.name === feat.subclassName))\n      )\n    );\n    if (klass && feat.requiredLevel > klass.level) return [];\n  }\n\n  logger.debug(`Searching for ${name} choices`);\n\n  // Add choices to the textual description of that feat\n  let choices = DDBHelper.getChoices(ddb, type, feat);\n\n  if (type === \"background\") {\n    logger.debug(`Found background ${feat.name}`);\n    logger.debug(`Found ${choices.map((c) => c.label).join(\",\")}`);\n    item.system.description = getDescription(ddb, character, feat, true);\n    item.system.description.value += `<h3>Choices</h3><ul>`;\n    item.system.source = source;\n    choices.forEach((choice) => {\n      let choiceItem = duplicate(item);\n      item = addFeatEffects(ddb, character, feat, choiceItem, choice, type);\n      item.system.description.value += `<li>${choice.label}</li>`;\n    });\n    item.system.description.value += `</ul>`;\n    features.push(item);\n    item.type = \"background\";\n    item.img = \"icons/skills/trades/academics-book-study-purple.webp\";\n    item.name = item.name.split(\"Background: \").pop();\n\n  } else if (choices.length > 0) {\n    logger.debug(`Found ${choices.map((c) => c.label).join(\",\")}`);\n    choices.forEach((choice) => {\n      logger.debug(`Adding choice ${choice.label}`);\n      let choiceItem = duplicate(item);\n      let choiceFeat = feat.definition ? duplicate(feat.definition) : duplicate(feat);\n\n      if (item.name === choice.label) return;\n\n      choiceItem.name = choice.label\n        ? `${choiceItem.name}: ${choice.label}`\n        : choiceItem.name;\n      choiceItem.name = choiceItem.name.replace(\"’\", \"'\");\n      if (choice.wasOption && choice.description) {\n        choiceFeat.description = choice.description;\n        choiceFeat.snippet = choice.snippet ? choice.snippet : \"\";\n      } else {\n        if (choiceFeat.description) {\n          choiceFeat.description = choice.description\n            ? choiceFeat.description + \"<h3>\" + choice.label + \"</h3>\" + choice.description\n            : choiceFeat.description;\n        }\n        if (choiceFeat.snippet) {\n          choiceFeat.snippet = choice.description\n            ? choiceFeat.snippet + \"<h3>\" + choice.label + \"</h3>\" + choice.description\n            : choiceFeat.snippet;\n        }\n      }\n      // add these flags in so they can be used by the description parser\n      setProperty(choiceFeat, \"flags.ddbimporter.dndbeyond.choice\", choice);\n\n      choiceItem.system.description = getDescription(ddb, character, choiceFeat, false);\n      choiceItem.system.source = source;\n      choiceItem.flags.ddbimporter.dndbeyond.choice = {\n        label: choice.label,\n        choiceId: choice.choiceId,\n        componentId: choice.componentId,\n        componentTypeId: choice.componentTypeId,\n        parentChoiceId: choice.parentChoiceId,\n        subType: choice.subType,\n        wasOption: choice.wasOption,\n        entityTypeId: choice.entityTypeId,\n        type: choice.type,\n      };\n\n      choiceItem = addFeatEffects(ddb, character, feat, choiceItem, choice, type);\n      features.push(choiceItem);\n    });\n  } else {\n    item.system.description = getDescription(ddb, character, feat, true);\n    item.system.source = source;\n    item = addFeatEffects(ddb, character, feat, item, undefined, type);\n\n    features.push(item);\n  }\n\n  return features;\n}\n\nfunction isDuplicateFeature(items, item) {\n  return items.some((dup) => dup.name === item.name && dup.system.description.value === item.system.description.value);\n}\n\nfunction getNameMatchedFeature(items, item) {\n  return items.find((dup) => dup.name === item.name && item.flags.ddbimporter.type === dup.flags.ddbimporter.type);\n}\n\nconst SKIPPED_FEATURES = [\n  \"Hit Points\",\n  \"Languages\",\n  \"Bonus Proficiency\",\n  \"Speed\",\n];\nfunction includedFeatureNameCheck(featName) {\n  const nameAllowed = !featName.startsWith(\"Proficiencies\")\n    && !featName.startsWith(\"Ability Score\")\n    && !featName.startsWith(\"Size\")\n    && !SKIPPED_FEATURES.includes(featName);\n\n  return nameAllowed;\n}\n\n\nfunction parseClassFeatures(ddb, character) {\n  // class and subclass traits\n  let classItems = [];\n  let classesFeatureList = [];\n  let subClassesFeatureList = [];\n  let processedClassesFeatureList = [];\n  const excludedFeatures = ddb.character.optionalClassFeatures\n    .filter((f) => f.affectedClassFeatureId)\n    .map((f) => f.affectedClassFeatureId);\n\n  // subclass features can often be duplicates of class features.\n  ddb.character.classes.forEach((klass) => {\n    const classFeatures = klass.definition.classFeatures.filter(\n      (feat) =>\n        includedFeatureNameCheck(feat.name)\n        && feat.requiredLevel <= klass.level\n    );\n    const klassName = klass.definition.name;\n    const klassFeatureList = classFeatures\n      .filter((feat) => !excludedFeatures.includes(feat.id))\n      .map((feat) => {\n        let items = parseFeature(feat, ddb, character, klassName, \"class\");\n        return items.map((item) => {\n          item.flags.ddbimporter.dndbeyond.class = klassName;\n          item.flags.ddbimporter.class = klass.definition.name;\n          item.flags.ddbimporter.subclass = hasProperty(klass, \"subclassDefinition.name\")\n            ? klass.subclassDefinition.name\n            : undefined;\n          item.flags.obsidian.source.text = klassName;\n          // add feature to all features list\n          classesFeatureList.push(duplicate(item));\n          return item;\n        });\n      })\n      .flat()\n      .sort((a, b) => {\n        return a.flags.ddbimporter.dndbeyond.displayOrder - b.flags.ddbimporter.dndbeyond.displayOrder;\n      });\n\n    klassFeatureList.forEach((item) => {\n      // have we already processed an identical item?\n      if (!isDuplicateFeature(processedClassesFeatureList, item)) {\n        const existingFeature = getNameMatchedFeature(classItems, item);\n        const duplicateFeature = isDuplicateFeature(classItems, item);\n        if (existingFeature && !duplicateFeature) {\n          const levelAdjustment = `<h3>${klassName}: Level ${item.flags.ddbimporter.dndbeyond.requiredLevel}</h3>${item.system.description.value}`;\n          existingFeature.system.description.value += levelAdjustment;\n        } else if (!existingFeature) {\n          classItems.push(item);\n        }\n      }\n    });\n    processedClassesFeatureList = processedClassesFeatureList.concat(classesFeatureList, klassFeatureList);\n\n    // subclasses\n    if (klass.subclassDefinition && klass.subclassDefinition.classFeatures) {\n      let subClassItems = [];\n      const subFeatures = klass.subclassDefinition.classFeatures.filter(\n        (feat) =>\n          includedFeatureNameCheck(feat.name)\n          && feat.requiredLevel <= klass.level\n          && !excludedFeatures.includes(feat.id)\n      );\n      const subKlassName = `${klassName} : ${klass.subclassDefinition.name}`;\n      const subKlassFeatureList = subFeatures\n        .map((feat) => {\n          let subClassItems = parseFeature(feat, ddb, character, subKlassName, \"class\");\n          return subClassItems.map((item) => {\n            item.flags.ddbimporter.dndbeyond.class = subKlassName;\n            item.flags.obsidian.source.text = klassName;\n            item.flags.ddbimporter.class = klass.definition.name;\n            item.flags.ddbimporter.subclass = hasProperty(klass, \"subclassDefinition.name\")\n              ? klass.subclassDefinition.name\n              : undefined;\n            // add feature to all features list\n            subClassesFeatureList.push(duplicate(item));\n            return item;\n          });\n        })\n        .flat()\n        .sort((a, b) => {\n          return a.flags.ddbimporter.dndbeyond.displayOrder - b.flags.ddbimporter.dndbeyond.displayOrder;\n        });\n\n      // parse out duplicate features from class features\n      subKlassFeatureList.forEach((item) => {\n        if (!isDuplicateFeature(classesFeatureList, item)) {\n          const existingFeature = getNameMatchedFeature(subClassItems, item);\n          const duplicateFeature = isDuplicateFeature(subClassItems, item);\n          if (existingFeature && !duplicateFeature) {\n            const levelAdjustment = `<h3>${subKlassName}: At Level ${item.flags.ddbimporter.dndbeyond.requiredLevel}</h3>${item.system.description.value}`;\n            existingFeature.system.description.value += levelAdjustment;\n          } else if (!existingFeature) {\n            subClassItems.push(item);\n          }\n        }\n      });\n      // add features to list to indicate processed\n      processedClassesFeatureList = processedClassesFeatureList.concat(subClassesFeatureList, subKlassFeatureList);\n\n      // now we take the unique subclass features and add to class\n      subClassItems.forEach((item) => {\n        const existingFeature = getNameMatchedFeature(classItems, item);\n        const duplicateFeature = isDuplicateFeature(classItems, item);\n        if (existingFeature && !duplicateFeature) {\n          const levelAdjustment = `<h3>${subKlassName}: At Level ${item.flags.ddbimporter.dndbeyond.requiredLevel}</h3>${item.system.description.value}`;\n          existingFeature.system.description.value += levelAdjustment;\n        } else if (!existingFeature) {\n          classItems.push(item);\n        }\n      });\n    }\n  });\n  return classItems;\n}\n\nDDBCharacter.prototype._generateFeatures = async function _generateFeatures() {\n  const ddb = this.source.ddb;\n  const character = this.raw.character;\n  const classes = this.raw.classes;\n  let items = [];\n\n  const excludedOriginFeatures = ddb.character.optionalOrigins\n    .filter((f) => f.affectedRacialTraitId)\n    .map((f) => f.affectedRacialTraitId);\n\n  // racial traits\n  logger.debug(\"Parsing racial traits\");\n  ddb.character.race.racialTraits\n    .filter(\n      (trait) => includedFeatureNameCheck(trait.definition.name) && !trait.definition.hideInSheet && !excludedOriginFeatures.includes(trait.definition.id))\n    .forEach((feat) => {\n      const source = DDBHelper.parseSource(feat.definition);\n      const features = parseFeature(feat, ddb, character, source, \"race\");\n      features.forEach((item) => {\n        const existingFeature = getNameMatchedFeature(items, item);\n        const duplicateFeature = isDuplicateFeature(items, item);\n        if (existingFeature && !duplicateFeature) {\n          existingFeature.system.description.value += `<h3>Racial Trait Addition</h3>${item.system.description.value}`;\n        } else if (!existingFeature) {\n          items.push(item);\n        }\n      });\n    });\n\n  // class and subclass traits\n  logger.debug(\"Parsing class and subclass features\");\n  let classItems = parseClassFeatures(ddb, character);\n\n  // optional class features\n  logger.debug(\"Parsing optional class features\");\n  if (ddb.classOptions) {\n    ddb.classOptions\n      .forEach((feat) => {\n        logger.debug(`Parsing Optional Feature ${feat.name}`);\n        const source = DDBHelper.parseSource(feat);\n        const feats = parseFeature(feat, ddb, character, source, \"class\");\n        feats.forEach((item) => {\n          items.push(item);\n        });\n      });\n  }\n\n  // now we loop over class features and add to list, removing any that match racial traits, e.g. Darkvision\n  logger.debug(\"Removing matching traits\");\n  classItems\n    .forEach((item) => {\n      const existingFeature = getNameMatchedFeature(items, item);\n      const duplicateFeature = isDuplicateFeature(items, item);\n      if (existingFeature && !duplicateFeature) {\n        const klassAdjustment = `<h3>${item.flags.ddbimporter.dndbeyond.class}</h3>${item.system.description.value}`;\n        existingFeature.system.description.value += klassAdjustment;\n      } else if (!existingFeature) {\n        items.push(item);\n      }\n    });\n\n  // add feats\n  logger.debug(\"Parsing feats\");\n  ddb.character.feats\n    .forEach((feat) => {\n      const source = DDBHelper.parseSource(feat.definition);\n      const feats = parseFeature(feat, ddb, character, source, \"feat\");\n      feats.forEach((item) => {\n        items.push(item);\n      });\n    });\n\n  logger.debug(\"Parsing backgrounds\");\n  const backgroundFeature = this.getBackgroundData();\n  const backgroundSource = DDBHelper.parseSource(backgroundFeature.definition);\n  const backgroundFeat = parseFeature(backgroundFeature, ddb, character, backgroundSource, \"background\");\n  backgroundFeat.forEach((item) => {\n    items.push(item);\n  });\n\n  logger.debug(\"Feature fixes\");\n  setLevelScales(classes, items);\n  fixFeatures(items);\n  this.raw.features = await addExtraEffects(ddb, items, character);\n};\n","import logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\nimport DDBCompanionFactory from \"./DDBCompanionFactory.js\";\n\nDDBCharacter.prototype.addCompanionsToDocuments = async function() {\n  for (const factory of this.companionFactories) {\n    // eslint-disable-next-line no-await-in-loop\n    const worldActors = await factory.getExistingWorldCompanions({ limitToFactory: true });\n    const summons = worldActors\n      .map((actor) => {\n        return {\n          name: actor.name,\n          uuid: `Actor.${actor.id}`,\n        };\n      });\n    if (factory.originDocument) {\n      setProperty(factory.originDocument, \"flags.arbron-summoner.summons\", summons);\n      setProperty(factory.originDocument, \"system.actionType\", \"summon\");\n    }\n  }\n};\n\nDDBCharacter.prototype.getClassFeature = function(name) {\n  const klass = this.source.ddb.character.classes\n    .find((k) => k.classFeatures.some((f) => f.definition.name == name));\n  return klass?.classFeatures?.find((f) => f.definition.name == name);\n};\n\nDDBCharacter.prototype._findDDBSpell = function(name) {\n  const spells = [];\n  this.source.ddb.character.classSpells.forEach((playerClass) => {\n    spells.push(...playerClass.spells);\n  });\n\n  const klassSpell = spells.find((s) => s.definition?.name === name);\n  if (klassSpell) return klassSpell;\n\n  // Parse any spells granted by class features, such as Barbarian Totem\n  const extraKlass = this.source.ddb.character.spells.class.find((s) => s.definition?.name === name);\n  if (extraKlass) return extraKlass;\n\n  // Race spells are handled slightly differently\n  const race = this.source.ddb.character.spells.race.find((s) => s.definition?.name === name);\n  if (race) return race;\n\n  // feat spells are handled slightly differently\n  const feat = this.source.ddb.character.spells.feat.find((s) => s.definition?.name === name);\n  if (feat) return feat;\n\n  // background spells are handled slightly differently\n  if (!this.source.ddbdb.character.spells.background) this.source.ddb.character.spells.background = [];\n  const background = this.source.ddb.character.spells.background.find((s) => s.definition?.name === name);\n  if (background) return background;\n\n  return undefined;\n};\n\nDDBCharacter.prototype._parseCompanion = async function(html, type, originDocument) {\n  const ddbCompanionFactory = new DDBCompanionFactory(this, html, { type, originDocument });\n  await ddbCompanionFactory.parse();\n  this.companionFactories.push(ddbCompanionFactory);\n};\n\nDDBCharacter.prototype._importCompanions = async function() {\n  for (const factory of this.companionFactories) {\n    // eslint-disable-next-line no-await-in-loop\n    await factory.updateOrCreateCompanions();\n  }\n};\n\nDDBCharacter.prototype._getCompanionSpell = async function(name) {\n  const spell = this.data.spells.find((s) => s.name === name || s.flags.ddbimporter?.originalName === name);\n  if (!spell) return;\n  const ddbSpell = this._findDDBSpell(spell.flags.ddbimporter?.originalName ?? spell.name);\n  if (!ddbSpell) return;\n  await this._parseCompanion(ddbSpell.definition.description, \"spell\", spell);\n};\n\nDDBCharacter.prototype._getCompanionFeature = async function(featureName) {\n  const feature = this.data.features.concat(this.data.actions).find((s) =>\n    s.name === featureName || s.flags.ddbimporter?.originalName === featureName\n  );\n  if (!feature) return;\n  const ddbFeature = this.getClassFeature(featureName);\n  if (!ddbFeature) return;\n  await this._parseCompanion(ddbFeature.definition.description, \"feature\", feature);\n};\n\nDDBCharacter.prototype._getCompanionOption = async function(parentFeature, childName) {\n  const feature = this.data.features.concat(this.data.actions).find((s) =>\n    s.name === parentFeature\n    || s.flags.ddbimporter?.originalName === parentFeature\n    || s.name === `${parentFeature}: ${childName}`\n    || s.flags.ddbimporter?.originalName === `${parentFeature}: ${childName}`\n  );\n  if (!feature) return;\n  const ddbOption = this.source.ddb.character.options.class.find((o) => o.definition.name == childName);\n  if (!ddbOption) return;\n  await this._parseCompanion(ddbOption.definition.description, \"feature\", feature);\n};\n\nDDBCharacter.prototype.generateCompanions = async function() {\n  if (!game.modules.get(\"arbron-summoner\")?.active) {\n    logger.warn(\"Companion Parsing requires the Arbron Summoner module\");\n    return;\n  }\n\n  for (const name of SETTINGS.COMPANIONS.COMPANION_FEATURES) {\n    // eslint-disable-next-line no-await-in-loop\n    await this._getCompanionFeature(name);\n  }\n  for (const name of SETTINGS.COMPANIONS.COMPANION_SPELLS) {\n    // eslint-disable-next-line no-await-in-loop\n    await this._getCompanionSpell(name);\n  }\n  for (const [parentFeature, childNames] of Object.entries(SETTINGS.COMPANIONS.COMPANION_OPTIONS)) {\n    for (const name of childNames) {\n      // eslint-disable-next-line no-await-in-loop\n      await this._getCompanionOption(parentFeature, name);\n    }\n  }\n\n  await this._importCompanions();\n\n  this.companions = this.companionFactories.map((factory) => factory.companions);\n\n  logger.debug(\"parsed companions\", {\n    factories: this.companionFactories,\n    parsed: this.companions,\n  });\n\n  await this.addCompanionsToDocuments();\n  // different types of companion\n  // ranger beast companions, classic and new\n  // ranger drake warden\n  // ranger other?\n  // artificer steel defender\n  // artificer homunculus\n  // new summon spells\n  // classic summons (not handled here)\n  // druid circle of fire companion\n\n};\n\n","// monster parser\nimport \"./DDBMonster.js\";\n// load files with extensions here. this will add the functions to the class\nimport \"./monster/abilities.js\";\nimport \"./monster/ac.js\";\nimport \"./monster/conditions.js\";\nimport \"./monster/size.js\";\nimport \"./monster/type.js\";\nimport \"./monster/skills.js\";\nimport \"./monster/senses.js\";\nimport \"./monster/environments.js\";\nimport \"./monster/languages.js\";\nimport \"./monster/hp.js\";\nimport \"./monster/movement.js\";\nimport \"./monster/source.js\";\nimport \"./monster/features.js\";\nimport \"./monster/spells.js\";\n\n// character parser\nimport \"./DDBCharacter.js\";\n// load files with extensions here. this will add the functions to the class\nimport \"./character/index.js\";\nimport \"./character/token.js\";\nimport \"./character/ac.js\";\nimport \"./character/specialTraits.js\";\nimport \"./character/proficiencies.js\";\nimport \"./character/skills.js\";\nimport \"./character/abilities.js\";\nimport \"./character/hp.js\";\nimport \"./character/initiative.js\";\nimport \"./character/effects.js\";\nimport \"./character/currency.js\";\nimport \"./character/senses.js\";\nimport \"./character/speed.js\";\nimport \"./character/bio.js\";\nimport \"./character/size.js\";\nimport \"./character/spellCasting.js\";\nimport \"./character/race.js\";\nimport \"./character/resources.js\";\nimport \"./character/inventory.js\";\nimport \"./character/globalBonuses.js\";\n\nimport \"./special/character.js\";\n\nimport \"./item/index.js\";\n\nimport \"./features/features.js\";\n\nimport \"./companions/companions.js\";\n","import \"../../parser/extendParsers.js\";\n","import FileHelper from \"../../lib/FileHelper.js\";\n\nfunction downloadLog() {\n  FileHelper.download(JSON.stringify(CONFIG.debug.ddbimporter.log), `ddbimporter-log-data.json`, \"application/json\");\n  setProperty(CONFIG.debug, \"ddbimporter.log\", []);\n}\n\nexport default function () {\n  const enabledDebugLogging = false;\n\n  const defaults = {\n    record: enabledDebugLogging,\n    log: [],\n    download: downloadLog,\n  };\n\n  setProperty(CONFIG.debug, \"ddbimporter\", defaults);\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\n\n\nexport function getCondition(conditionName) {\n  return DICTIONARY.conditions.find((condition) => condition.label === conditionName);\n}\n\nexport async function getActiveConditions(actor) {\n  const conditions = await Promise.all(DICTIONARY.conditions.filter(async (condition) => {\n    const conditionApplied = await game.dfreds.effectInterface.hasEffectApplied(condition.label, actor.uuid);\n    return conditionApplied;\n  }));\n  return conditions;\n}\n\nasync function effectAppliedAndActive(condition, actor) {\n  return actor.effects.some(\n    (activeEffect) =>\n      activeEffect?.flags?.isConvenient\n      && activeEffect?.label == condition.label\n      && !activeEffect?.disabled\n  );\n}\n\nexport async function getActorConditionStates(actor, ddb, keepLocal = false) {\n  const conditions = await Promise.all(DICTIONARY.conditions\n    .filter((condition) => Number.isInteger(condition.ddbId)) // only ddb conditions\n    .map(async (condition) => {\n      const conditionApplied = await effectAppliedAndActive(condition, actor);\n      const ddbCondition = ddb.character.conditions.some((conditionState) =>\n        conditionState.id === condition.ddbId\n        && conditionState.level === condition.levelId\n      );\n      // eslint-disable-next-line require-atomic-updates\n      condition.ddbCondition = ddbCondition;\n      // eslint-disable-next-line require-atomic-updates\n      condition.applied = conditionApplied;\n      // eslint-disable-next-line require-atomic-updates\n      condition.needsUpdate = (ddbCondition && !conditionApplied) || (!ddbCondition && conditionApplied && !keepLocal);\n      return condition;\n    }));\n  return conditions;\n}\n\n/**\n * Set conditions\n * @param {*} ddb\n * @param {*} actor\n */\nexport async function setConditions(actor, ddb, keepLocal = false) {\n  const dfConditionsOn = game.modules.get(\"dfreds-convenient-effects\")?.active;\n  const useCEConditions = game.settings.get(SETTINGS.MODULE_ID, \"apply-conditions-with-ce\");\n  if (dfConditionsOn && useCEConditions) {\n    const conditionStates = await getActorConditionStates(actor, ddb, keepLocal);\n    // console.warn(conditionStates);\n    logger.debug(`Condition states for ${actor.name}`, conditionStates);\n    await Promise.all(conditionStates.map(async (condition) => {\n      // console.warn(condition);\n      if (condition.needsUpdate) {\n        const state = condition.conditionApplied ? \"off\" : \"on\";\n        logger.info(`Toggling condition to ${state} for ${condition.label} to ${actor.name} (${actor.uuid})`);\n        await game.dfreds.effectInterface.toggleEffect(condition.label, { uuids: [actor.uuid] });\n      } else {\n        const state = condition.conditionApplied ? \"on\" : \"off\";\n        logger.info(`Condition ${condition.label} ignored (currently ${state}) for ${actor.name} (${actor.uuid})`);\n      }\n      return condition;\n    }));\n  }\n}\n","export function getItemCollectionItems(actor) {\n  const characterId = getProperty(actor, \"flags.ddbimporter.dndbeyond.characterId\");\n  if (!game.modules.get(\"itemcollection\")?.active && !Number.isInteger(characterId)) return [];\n  const topLevelItems = actor.items\n    .filter((item) =>\n      hasProperty(item, \"flags.ddbimporter.id\")\n      && hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      && item.flags.ddbimporter.containerEntityId === parseInt(characterId)\n      && !item.flags.ddbimporter?.ignoreItemImport\n    );\n\n  const itemCollectionItems = topLevelItems\n    .map((topLevelItem) => {\n      const containerId = getProperty(topLevelItem, \"flags.ddbimporter.id\");\n      const containerEntityTypeId = getProperty(topLevelItem, \"flags.ddbimporter.entityTypeId\");\n      const items = (getProperty(topLevelItem.flags, \"itemcollection.contentsData\") ?? [])\n        .map((item) => {\n          setProperty(item, \"flags.ddbimporter.containerEntityId\", containerId);\n          setProperty(item, \"flags.ddbimporter.containerEntityTypeId\", containerEntityTypeId);\n          setProperty(item, \"flags.ddbimporter.updateDocumentId\", topLevelItem.id);\n          return item;\n        });\n      return items;\n    })\n    .flat();\n  return itemCollectionItems;\n}\n\n/* eslint-disable no-await-in-loop */\nexport async function addContainerItemsToContainers(ddb, actor) {\n  if (!game.modules.get(\"itemcollection\")?.active || !game.settings.get(\"ddb-importer\", \"character-update-policy-use-item-containers\")) return;\n\n  const topLevelItems = actor.items\n    .filter((item) =>\n      hasProperty(item, \"flags.ddbimporter.id\")\n      && hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      && item.flags.ddbimporter.containerEntityId === ddb.character.id\n      && !item.flags.ddbimporter?.ignoreItemImport\n    );\n\n  for (const topLevelItem of topLevelItems) {\n    const itemsToImport = actor.items\n      .filter((item) =>\n        hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n        && item.flags.ddbimporter.containerEntityId === topLevelItem.flags.ddbimporter.id\n      )\n      .map((item) => {\n        return duplicate(item);\n      });\n\n    if (itemsToImport.length > 0) {\n      const itemsToDelete = itemsToImport.map((item) => item._id);\n      await actor.deleteEmbeddedDocuments(\"Item\", itemsToDelete);\n      await topLevelItem.createEmbeddedDocuments(\"Item\", itemsToImport, { keepId: true });\n    }\n\n  }\n}\n\nexport async function addContainerItemsToActor(ddb, actor) {\n  if (!game.modules.get(\"itemcollection\")?.active || !game.settings.get(\"ddb-importer\", \"character-update-policy-use-item-containers\")) return;\n\n  const topLevelItems = actor.items\n    .filter((item) =>\n      hasProperty(item, \"flags.ddbimporter.id\")\n      && hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      && item.flags.ddbimporter.containerEntityId === ddb.character.id\n      && hasProperty(item, \"flags.itemcollection.contentsData\")\n      && item.flags.itemcollection.contentsData.length > 0\n      && !item.flags.ddbimporter?.ignoreItemImport\n    );\n\n  for (const topLevelItem of topLevelItems) {\n    const itemsToImport = duplicate(getProperty(topLevelItem.flags, \"itemcollection.contentsData\") ?? [])\n      .map((item) => {\n        if (hasProperty(item, \"flags.ddbimporter.updateDocumentId\")) {\n          delete item.flags.ddbimporter.updateDocumentId;\n        }\n        return item;\n      });\n    const itemsToDelete = itemsToImport.map((item) => item._id);\n    // const currency = duplicate(topLevelItem.system.currency);\n    await topLevelItem.deleteEmbeddedDocuments(\"Item\", itemsToDelete);\n    await actor.createEmbeddedDocuments(\"Item\", itemsToImport, { keepId: true });\n  }\n}\n","import logger from \"../logger.js\";\nimport utils from \"../lib/utils.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport SETTINGS from \"../settings.js\";\nimport { isEqual } from \"../../vendor/lowdash/isequal.js\";\nimport { getCampaignId } from \"../lib/Settings.js\";\nimport { looseItemNameMatch } from \"../muncher/import.js\";\nimport { getCobalt, checkCobalt } from \"../lib/Secrets.js\";\nimport { getActorConditionStates, getCondition } from \"../parser/special/conditions.js\";\nimport { getItemCollectionItems } from \"../parser/special/itemCollections.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\n\nfunction getFoundryItems(actor) {\n  const characterId = actor.flags.ddbimporter.dndbeyond.characterId;\n  const itemCollections = getItemCollectionItems(actor);\n  const actorItems = duplicate(actor.items).map((item) => {\n    // set the container entity id to the id of the character, if the character is the \"container\"\n    setProperty(item, \"flags.ddbimporter.containerEntityId\", parseInt(characterId));\n    delete item.flags.ddbimporter.updateDocumentId;\n    return item;\n  });\n  return actorItems.concat(itemCollections);\n}\n\nasync function getUpdateItemIndex() {\n  if (hasProperty(CONFIG, \"DDBI.update.itemIndex\")) return getProperty(CONFIG, \"DDBI.update.itemIndex\");\n  const compendium = await CompendiumHelper.getCompendiumType(\"item\", false);\n\n  const indexFields = [\n    \"name\",\n    \"type\",\n    \"flags.ddbimporter.definitionId\",\n    \"flags.ddbimporter.definitionEntityTypeId\",\n  ];\n  // eslint-disable-next-line require-atomic-updates\n  const itemIndex = await compendium.getIndex({ fields: indexFields });\n  setProperty(CONFIG, \"DDBI.update.itemIndex\", itemIndex);\n\n  return itemIndex;\n}\n\nasync function getCompendiumItemInfo(item) {\n  const index = await getUpdateItemIndex();\n  const match = await looseItemNameMatch(item, index, true, false, true);\n  return match;\n}\n\n// flavor is just useful for debugging\nasync function updateCharacterCall(actor, path, bodyContent, flavor) {\n  const characterId = actor.flags.ddbimporter.dndbeyond.characterId;\n  const cobaltCookie = getCobalt(actor.id);\n  const dynamicSync = SETTINGS.STATUS.activeUpdate();\n  const parsingApi = dynamicSync\n    ? DDBProxy.getDynamicProxy()\n    : DDBProxy.getProxy();\n  const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n  const campaignId = getCampaignId();\n  const proxyCampaignId = campaignId === \"\" ? null : campaignId;\n  const coreBody = {\n    cobalt: cobaltCookie,\n    betaKey,\n    characterId,\n    campaignId: proxyCampaignId,\n    dynamicSync,\n    customApiVersion: 5.1,\n  };\n  const body = { ...coreBody, ...bodyContent };\n\n  const url = dynamicSync\n    ? `${parsingApi}/dynamic/update/${path}`\n    : `${parsingApi}/proxy/update/${path}`;\n\n  logger.debug(\"Update info:\", {\n    url,\n    path,\n    characterId,\n    bodyContent,\n    dynamicSync,\n    flavor,\n  });\n\n  return new Promise((resolve, reject) => {\n    fetch(url, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data.success) {\n          const errorData = {\n            url,\n            path,\n            errorData: data,\n            bodyContent,\n            characterId,\n            dynamicSync,\n            flavor,\n          };\n          logger.error(`Update failed for ${actor.name}:`, errorData);\n          ui.notifications.error(`Update failed: (${actor.name}) ${data.message} (see console log (F12) for more details)`);\n          resolve(data);\n        }\n        logger.debug(`${path} updated, response`, data);\n        return data;\n      })\n      .then((data) => resolve(data))\n      .catch((error) => {\n        const errorData = {\n          error,\n          bodyContent,\n          characterId,\n          dynamicSync,\n        };\n        logger.error(`Setting ${path} failed`, errorData);\n        logger.error(error.stack);\n        reject(error);\n      });\n  });\n}\n\nasync function updateDDBSpellSlotsPact(actor) {\n  return new Promise((resolve) => {\n    let spellSlotPackData = {\n      spellslots: {},\n      pact: true,\n    };\n    spellSlotPackData.spellslots[`level${actor.system.spells.pact.level}`] = actor.system.spells.pact.value;\n    const spellPactSlots = updateCharacterCall(actor, \"spell/slots\", spellSlotPackData, \"Pact Spell Slots\");\n    resolve(spellPactSlots);\n  });\n}\n\nasync function spellSlotsPact(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-slots\")) resolve();\n    if (\n      actor.system.spells.pact.max > 0\n      && ddbData.character.character.system.spells.pact.value !== actor.system.spells.pact.value\n    ) {\n      resolve(updateDDBSpellSlotsPact(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDynamicDDBSpellSlots(actor, update) {\n  return new Promise((resolve) => {\n    let spellSlotData = { spellslots: {}, update: false };\n    for (let i = 1; i <= 9; i++) {\n      let spellData = actor.system.spells[`spell${i}`];\n      if (spellData.max > 0 && update.system.spells[`spell${i}`]) {\n        const used = spellData.max - spellData.value;\n        spellSlotData.spellslots[`level${i}`] = used;\n        spellSlotData[\"update\"] = true;\n      }\n    }\n    if (spellSlotData[\"update\"]) {\n      resolve(updateCharacterCall(actor, \"spells/slots\", spellSlotData, \"Spell slots\"));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function spellSlots(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-slots\")) resolve();\n\n    let spellSlotData = { spellslots: {}, update: false };\n    for (let i = 1; i <= 9; i++) {\n      let spellData = actor.system.spells[`spell${i}`];\n      if (spellData.max > 0 && ddbData.character.character.system.spells[`spell${i}`].value !== spellData.value) {\n        const used = spellData.max - spellData.value;\n        spellSlotData.spellslots[`level${i}`] = used;\n        spellSlotData[\"update\"] = true;\n      }\n    }\n    if (spellSlotData[\"update\"]) {\n      resolve(updateCharacterCall(actor, \"spells/slots\", spellSlotData, \"Spell slots\"));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBCurrency(actor) {\n  return new Promise((resolve) => {\n    const value = {\n      pp: Number.isInteger(actor.system.currency.pp) ? actor.system.currency.pp : 0,\n      gp: Number.isInteger(actor.system.currency.gp) ? actor.system.currency.gp : 0,\n      ep: Number.isInteger(actor.system.currency.ep) ? actor.system.currency.ep : 0,\n      sp: Number.isInteger(actor.system.currency.sp) ? actor.system.currency.sp : 0,\n      cp: Number.isInteger(actor.system.currency.cp) ? actor.system.currency.cp : 0,\n    };\n\n    resolve(updateCharacterCall(actor, \"currency\", value, \"Currency\"));\n\n  });\n}\n\nasync function currency(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-currency\")) resolve();\n\n    const value = {\n      pp: Number.isInteger(actor.system.currency.pp) ? actor.system.currency.pp : 0,\n      gp: Number.isInteger(actor.system.currency.gp) ? actor.system.currency.gp : 0,\n      ep: Number.isInteger(actor.system.currency.ep) ? actor.system.currency.ep : 0,\n      sp: Number.isInteger(actor.system.currency.sp) ? actor.system.currency.sp : 0,\n      cp: Number.isInteger(actor.system.currency.cp) ? actor.system.currency.cp : 0,\n    };\n\n    const same = isEqual(ddbData.character.character.system.currency, value);\n\n    if (!same) {\n      resolve(updateCharacterCall(actor, \"currency\", value));\n    } else {\n      resolve();\n    }\n\n  });\n}\n\nasync function updateDDBXP(actor) {\n  return new Promise((resolve) => {\n    resolve(updateCharacterCall(actor, \"xp\", { currentXp: actor.system.details.xp.value ?? 0 }, \"XP\"));\n  });\n}\n\nasync function xp(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-xp\")) resolve();\n    const same = ddbData.character.character.system.details.xp.value === actor.system.details.xp.value;\n\n    if (!same) {\n      resolve(updateDDBXP(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBHitPoints(actor) {\n  return new Promise((resolve) => {\n    const temporaryHitPoints = actor.system.attributes.hp.temp ?? 0;\n    const removedHitPoints = actor.system.attributes.hp.max - (actor.system.attributes.hp.value ?? 0);\n    const hitPointData = {\n      removedHitPoints,\n      temporaryHitPoints,\n    };\n    resolve(updateCharacterCall(actor, \"hitpoints\", hitPointData, \"HP\"));\n  });\n}\n\nasync function hitPoints(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitpoints\")) resolve();\n    const same\n      = ddbData.character.character.system.attributes.hp.value === (actor.system.attributes.hp.value ?? 0)\n      && ddbData.character.character.system.attributes.hp.temp === (actor.system.attributes.hp.temp ?? 0);\n\n    if (!same) {\n      resolve(updateDDBHitPoints(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBInspiration(actor) {\n  return new Promise((resolve) => {\n    const inspiration = updateCharacterCall(actor, \"inspiration\", {\n      inspiration: actor.system.attributes.inspiration,\n    }, \"Inspiration\");\n    resolve(inspiration);\n  });\n}\n\nasync function inspiration(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-inspiration\")) resolve();\n    const same = ddbData.character.character.system.attributes.inspiration === actor.system.attributes.inspiration;\n\n    if (!same) {\n      resolve(updateDDBInspiration(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBExhaustion(actor) {\n  return new Promise((resolve) => {\n    let exhaustionData = {\n      conditionId: 4,\n      addCondition: false,\n    };\n    if (actor.system.attributes.exhaustion !== 0) {\n      exhaustionData[\"level\"] = actor.system.attributes.exhaustion;\n      exhaustionData[\"totalHP\"] = actor.system.attributes.hp.max;\n      exhaustionData[\"addCondition\"] = true;\n    }\n    resolve(updateCharacterCall(actor, \"condition\", exhaustionData, \"Exhaustion\"));\n  });\n}\n\n\nasync function exhaustion(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-condition\")) resolve();\n    const same = ddbData.character.character.system.attributes.exhaustion === actor.system.attributes.exhaustion;\n\n    if (!same) {\n      resolve(updateDDBExhaustion(actor));\n    } else {\n      resolve();\n    }\n\n  });\n}\n\nasync function updateDDBCondition(actor, condition) {\n  return new Promise((resolve) => {\n    const conditionData = {\n      conditionId: condition.ddbId,\n      addCondition: condition.applied,\n      level: null,\n      totalHP: actor.system.attributes.hp.max,\n    };\n\n    resolve(updateCharacterCall(actor, \"condition\", conditionData, { condition }));\n  });\n}\n\nasync function conditions(actor, ddbData) {\n  return new Promise((resolve) => {\n    const dfConditionsOn = game.modules.get(\"dfreds-convenient-effects\")?.active;\n    const useCEConditions = game.settings.get(SETTINGS.MODULE_ID, \"apply-conditions-with-ce\");\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-condition\") || !dfConditionsOn || !useCEConditions) resolve([]);\n    getActorConditionStates(actor, ddbData.ddb).then((conditions) => {\n      let results = [];\n      conditions.forEach((condition) => {\n        // exhaustion handled separately\n        if (condition.needsUpdate && condition.ddbId !== 4) {\n          results.push(updateDDBCondition(actor, condition));\n        }\n      });\n      resolve(results);\n    });\n  });\n}\n\nasync function updateDDBDeathSaves(actor) {\n  return new Promise((resolve) => {\n    const deathSaveData = {\n      failCount: actor.system.attributes.death.failure ?? 0,\n      successCount: actor.system.attributes.death.success ?? 0,\n    };\n    resolve(updateCharacterCall(actor, \"deathsaves\", deathSaveData, \"Death Saves\"));\n  });\n}\n\nasync function deathSaves(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-deathsaves\")) resolve();\n    const same = isEqual(ddbData.character.character.system.attributes.death, actor.system.attributes.death);\n\n    if (!same) {\n      resolve(updateDDBDeathSaves(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBHitDice(actor, klass, update) {\n  return new Promise((resolve) => {\n    if (klass.flags?.ddbimporter?.id) {\n      let hitDiceData = {\n        classHitDiceUsed: {},\n        resetMaxHpModifier: false,\n      };\n      hitDiceData.classHitDiceUsed[klass.flags.ddbimporter.id] = update.system.hitDiceUsed;\n      resolve(updateCharacterCall(actor, \"hitdice\", { shortRest: hitDiceData }, \"Hit Dice\"));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function hitDice(actor, ddbData) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitdice\")) resolve();\n\n    const ddbClasses = ddbData.character.classes;\n\n    const klasses = actor.items.filter(\n      (item) => item.type === \"class\" && item.flags.ddbimporter.id && item.flags.ddbimporter.definitionId\n    );\n\n    let hitDiceData = {\n      classHitDiceUsed: {},\n      resetMaxHpModifier: false,\n    };\n\n    klasses.forEach((klass) => {\n      const classMatch = ddbClasses.find((ddbClass) => ddbClass.flags.ddbimporter.id === klass.flags.ddbimporter.id);\n      if (classMatch && classMatch.system.hitDiceUsed !== klass.system.hitDiceUsed) {\n        hitDiceData.classHitDiceUsed[klass.flags.ddbimporter.id] = klass.system.hitDiceUsed;\n      }\n    });\n\n    const same = isEqual({}, hitDiceData.classHitDiceUsed);\n    if (!same) {\n      resolve(updateCharacterCall(actor, \"hitdice\", { shortRest: hitDiceData }));\n    }\n\n    resolve();\n  });\n}\n\nasync function updateSpellsPrepared(actor, spellPreparedData) {\n  return new Promise((resolve) => {\n    resolve(updateCharacterCall(actor, \"spell/prepare\", spellPreparedData, \"Spells Prepared\"));\n  });\n}\n\nasync function updateDDBSpellsPrepared(actor, spells) {\n  let promises = [];\n\n  const preparedSpells = spells.filter((spell) =>\n    spell.type === \"spell\"\n    && spell.system.preparation?.mode === \"prepared\"\n    && spell.flags.ddbimporter?.dndbeyond?.characterClassId\n    && !spell.flags.ddbimporter.dndbeyond.granted\n  ).map((spell) => {\n    let spellPreparedData = {\n      spellInfo: {\n        spellId: spell.flags.ddbimporter.definitionId,\n        characterClassId: spell.flags.ddbimporter.dndbeyond.characterClassId,\n        entityTypeId: spell.flags.ddbimporter.entityTypeId,\n        id: spell.flags.ddbimporter.id,\n        prepared: spell.system.preparation.prepared === true,\n      }\n    };\n    logger.debug(`Updating spell prepared state for ${spell.name} to ${spellPreparedData.spellInfo.prepared}`);\n    return spellPreparedData;\n  });\n\n  preparedSpells.forEach((spellPreparedData) => {\n    promises.push(updateSpellsPrepared(actor, spellPreparedData));\n  });\n\n  return Promise.all(promises);\n}\n\nasync function spellsPrepared(actor, ddbData) {\n  if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-prepared\")) return [];\n  const ddbSpells = ddbData.character.spells;\n\n  const preparedSpells = actor.items.filter((item) => {\n    const spellMatch = ddbSpells.find((s) =>\n      s.name === item.name\n      && item.system.preparation?.mode === \"prepared\"\n      && item.flags.ddbimporter?.dndbeyond?.characterClassId\n      && item.flags.ddbimporter?.dndbeyond?.characterClassId === s.flags.ddbimporter?.dndbeyond?.characterClassId\n    );\n    if (!spellMatch) return false;\n    const select = item.type === \"spell\"\n      && item.system.preparation?.mode === \"prepared\"\n      && item.system.preparation.prepared !== spellMatch.system.preparation?.prepared;\n    return spellMatch && select;\n  });\n\n  const results = updateDDBSpellsPrepared(actor, preparedSpells);\n\n  return results;\n}\n\nasync function updateItemsWithDDBInfo(itemsToAdd) {\n  return Promise.all(itemsToAdd.map(async (item) => {\n    if (!item.flags.ddbimporter?.definitionId && !item.flags.ddbimporter?.definitionEntityTypeId) {\n      const ddbCompendiumMatch = await getCompendiumItemInfo(item);\n      logger.debug(`Found item`, ddbCompendiumMatch);\n      if (ddbCompendiumMatch\n        && ddbCompendiumMatch.flags?.ddbimporter?.definitionId\n        && ddbCompendiumMatch.flags?.ddbimporter?.definitionEntityTypeId\n      ) {\n        logger.debug(`Adding ${item.name} from DDB compendium match:`, ddbCompendiumMatch);\n        setProperty(item, \"flags.ddbimporter.definitionId\", ddbCompendiumMatch.flags.ddbimporter.definitionId);\n        setProperty(item, \"flags.ddbimporter.definitionEntityTypeId\", ddbCompendiumMatch.flags.ddbimporter.definitionEntityTypeId);\n        setProperty(item, \"name\", ddbCompendiumMatch.name);\n        setProperty(item, \"type\", ddbCompendiumMatch.type);\n      }\n    }\n    return item;\n  }));\n}\n\nfunction generateItemsToAdd(actor, itemsToAdd) {\n  const results = {\n    items: [],\n    toAdd: [],\n    custom: [],\n  };\n\n  for (let i = 0; i < itemsToAdd.length; i++) {\n    let item = itemsToAdd[i];\n    if (item.flags.ddbimporter?.definitionId && item.flags.ddbimporter?.definitionEntityTypeId) {\n      const containerEntityId = hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n        ? parseInt(item.flags.ddbimporter.containerEntityId)\n        : parseInt(actor.flags.ddbimporter.dndbeyond.characterId);\n      const containerEntityTypeId = hasProperty(item, \"flags.ddbimporter.containerEntityTypeId\")\n        ? parseInt(item.flags.ddbimporter.containerEntityTypeId)\n        : parseInt(\"1581111423\");\n      results.toAdd.push({\n        containerEntityId,\n        containerEntityTypeId,\n        entityId: parseInt(item.flags.ddbimporter.definitionId),\n        entityTypeId: parseInt(item.flags.ddbimporter.definitionEntityTypeId),\n        quantity: parseInt(item.system.quantity),\n      });\n    } else {\n      results.custom.push(item);\n    }\n    results.items.push(item);\n  }\n  return results;\n}\n\nasync function deleteDDBCustomItems(actor, itemsToDelete) {\n  return new Promise((resolve) => {\n    let customItemResults = [];\n    for (let i = 0; i < itemsToDelete.length; i++) {\n      const item = itemsToDelete[i];\n      const customData = {\n        itemState: \"DELETE\",\n        customValues: {\n          characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n          id: item.flags.ddbimporter.definitionId,\n          mappingId: item.flags.ddbimporter.id,\n          partyId: null,\n        }\n      };\n      if (getProperty(customData, \"customValues.id\") !== undefined\n        && getProperty(customData, \"customValues.mappingId\") !== undefined\n      ) {\n        const result = updateCharacterCall(actor, \"custom/item\", customData, { name: item.name }).then((data) => {\n          setProperty(item, \"flags.ddbimporter.delete\", data);\n          setProperty(item, \"flags.ddbimporter.custom\", true);\n          setProperty(item, \"flags.ddbimporter.dndbeyond.isCustomItem\", true);\n          return item;\n        });\n        customItemResults.push(result);\n      } else {\n        logger.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n        ui.notifications.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n      }\n    }\n\n    resolve(customItemResults);\n  });\n}\n\nasync function addDDBCustomItems(actor, itemsToAdd) {\n  let customItemResults = [];\n  for (let i = 0; i < itemsToAdd.length; i++) {\n    const item = itemsToAdd[i];\n    const containerEntityId = hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      ? parseInt(item.flags.ddbimporter.containerEntityId)\n      : parseInt(actor.flags.ddbimporter.dndbeyond.characterId);\n    const containerEntityTypeId = hasProperty(item, \"flags.ddbimporter.containerEntityTypeId\")\n      ? parseInt(item.flags.ddbimporter.containerEntityTypeId)\n      : parseInt(\"1581111423\");\n    const customData = {\n      itemState: \"NEW\",\n      customValues: {\n        characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n        containerEntityId,\n        containerEntityTypeId,\n        name: item.name,\n        description: utils.stripHtml(item.system.description.value),\n        quantity: parseInt(item.system.quantity),\n        cost: null,\n        weight: Number.isInteger(item.system.weight) ? parseInt(item.system.weight) : 0,\n      }\n    };\n    const result = updateCharacterCall(actor, \"custom/item\", customData, { name: item.name }).then((data) => {\n      setProperty(item, \"flags.ddbimporter.id\", data.data.addItems[0].id);\n      setProperty(item, \"flags.ddbimporter.custom\", true);\n      setProperty(item, \"flags.ddbimporter.dndbeyond.isCustomItem\", true);\n      setProperty(item, \"flags.ddbimporter.definitionId\", data.data.addItems[0].definition.id);\n      setProperty(item, \"flags.ddbimporter.containerEntityId\", data.data.addItems[0].definition.containerEntityId);\n      setProperty(item, \"flags.ddbimporter.containerEntityTypeId\", data.data.addItems[0].definition.containerEntityTypeId);\n      return item;\n    });\n    customItemResults.push(result);\n  }\n\n  return Promise.all(customItemResults);\n}\n\nasync function addDDBEquipment(actor, itemsToAdd) {\n  const ddbEnrichedItems = await updateItemsWithDDBInfo(itemsToAdd);\n  const generatedItemsToAddData = generateItemsToAdd(actor, ddbEnrichedItems);\n\n  logger.debug(`Generated items data`, generatedItemsToAddData);\n\n  const addItemData = {\n    equipment: generatedItemsToAddData.toAdd,\n  };\n\n  const customItems = await addDDBCustomItems(actor, generatedItemsToAddData.custom);\n  logger.debug(\"Adding custom items:\", customItems);\n\n  try {\n    const customItemResults = await actor.updateEmbeddedDocuments(\"Item\", customItems);\n    logger.debug(\"customItemResults\", customItemResults);\n  } catch (err) {\n    logger.error(`Unable to update character with equipment, got the error:`, err);\n    logger.error(err.stack);\n    logger.error(`Update payload:`, customItems);\n  }\n\n  if (addItemData.equipment.length > 0) {\n    const itemResults = await updateCharacterCall(actor, \"equipment/add\", addItemData, \"Adding equipment\");\n    try {\n      const itemUpdates = itemResults.data.addItems\n        .filter((addedItem) => ddbEnrichedItems.some((i) =>\n          i.flags.ddbimporter\n          && i.flags.ddbimporter.definitionId === addedItem.definition.id\n          && i.flags.ddbimporter.definitionEntityTypeId === addedItem.definition.entityTypeId\n        ))\n        .map((addedItem) => {\n          let updatedItem = ddbEnrichedItems.find((i) =>\n            i.flags.ddbimporter\n            && i.flags.ddbimporter.definitionId === addedItem.definition.id\n            && i.flags.ddbimporter.definitionEntityTypeId === addedItem.definition.entityTypeId\n          );\n          setProperty(updatedItem, \"flags.ddbimporter.id\", addedItem.id);\n          setProperty(updatedItem, \"flags.ddbimporter.containerEntityId\", addedItem.containerEntityId);\n          setProperty(updatedItem, \"flags.ddbimporter.containerEntityTypeId\", addedItem.containerEntityTypeId);\n          return updatedItem;\n        });\n\n      const characterItems = itemUpdates.filter((i) => !hasProperty(i, \"flags.ddbimporter.updateDocumentId\"));\n      const containerItems = itemUpdates.filter((i) => hasProperty(i, \"flags.ddbimporter.updateDocumentId\"));\n      const containerIds = [...new Set(containerItems.map((i) => i.flags.ddbimporter.updateDocumentId))];\n\n      logger.debug(\"Character item updates:\", characterItems);\n      logger.debug(\"Container item updates:\", containerItems);\n      logger.debug(\"Character custom item updates:\", customItems);\n\n      try {\n        if (characterItems.length > 0) await actor.updateEmbeddedDocuments(\"Item\", characterItems);\n        if (customItems.length > 0) await actor.updateEmbeddedDocuments(\"Item\", customItems);\n        for (const containerId of containerIds) {\n          const containerItemsToUpdate = containerItems\n            .filter((i) => i.flags.ddbimporter.updateDocumentId === containerId)\n            .map((i) => {\n              delete i.flags.ddbimporter.updateDocumentId;\n              return i;\n            });\n          const containerDocument = actor.getEmbeddedDocument(\"Item\", containerId);\n          // eslint-disable-next-line max-depth\n          if (containerItemsToUpdate.length > 0) {\n            logger.debug(`Updating container ${containerDocument.name} with items:`, containerItemsToUpdate);\n            // eslint-disable-next-line no-await-in-loop\n            await containerDocument.updateEmbeddedDocuments(\"Item\", containerItemsToUpdate);\n          }\n        }\n      } catch (err) {\n        logger.error(`Unable to update character with equipment, got the error:`, err);\n        logger.error(`Update payload:`, itemUpdates);\n        logger.error(`Update custom payload:`, customItems);\n        logger.error(`Update containerIds:`, containerIds);\n      }\n\n    } catch (err) {\n      logger.error(`Unable to filter updated equipment, got the error:`, err);\n      logger.error(`itemsToAdd`, itemsToAdd);\n      logger.error(`ddbEnrichedItems`, ddbEnrichedItems);\n      logger.error(`equipmentToAdd`, generatedItemsToAddData);\n      logger.error(`itemResults`, itemResults);\n      logger.error(`customItems`, customItems);\n    }\n\n    return itemResults;\n  } else {\n    return [];\n  }\n}\n\nasync function addEquipment(actor, ddbData) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  const ddbItems = ddbData.character.inventory;\n\n  const items = getFoundryItems(actor);\n  const itemsToAdd = items.filter((item) =>\n    !item.flags.ddbimporter?.action\n    && item.system.quantity !== 0\n    && DICTIONARY.types.inventory.includes(item.type)\n    && !item.flags.ddbimporter?.custom\n    && (!item.flags.ddbimporter?.id\n    || !ddbItems.some((s) => s.flags.ddbimporter?.id === item.flags.ddbimporter?.id && s.type === item.type))\n  );\n\n  return addDDBEquipment(actor, itemsToAdd);\n}\n\n\n// updates custom names on regular items\nasync function updateDDBCustomNames(actor, items) {\n  let promises = [];\n\n  items.forEach((item) => {\n    const customData = {\n      customValues: {\n        characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n        contextId: null,\n        contextTypeId: null,\n        notes: null,\n        typeId: 8,\n        value: item.name.replaceAll(\"[Infusion]\", \"\").trim(),\n        valueId: `${item.flags.ddbimporter.id}`,\n        valueTypeId: `${item.flags.ddbimporter.entityTypeId}`,\n      }\n    };\n    // custom name on standard equipment\n    promises.push(updateCharacterCall(actor, \"equipment/custom\", customData, \"Updating custom names\"));\n  });\n\n  return Promise.all(promises);\n\n}\n\n// updates names of items and actions\nasync function updateCustomNames(actor, ddbData) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  const ddbItems = ddbData.character.inventory;\n\n  const foundryItems = getFoundryItems(actor);\n\n  const itemsToName = foundryItems.filter((item) =>\n    item.system.quantity !== 0\n    && (DICTIONARY.types.inventory.includes(item.type) || item.flags.ddbimporter?.action)\n    && item.flags.ddbimporter?.id\n    && ddbItems.some((ddbItem) =>\n      ddbItem.flags.ddbimporter?.id === item.flags.ddbimporter.id\n      && ddbItem.type === item.type\n      && ddbItem.name.replaceAll(\"[Infusion]\", \"\").trim() !== item.name.replaceAll(\"[Infusion]\", \"\").trim()\n    )\n  );\n\n  return updateDDBCustomNames(actor, itemsToName);\n}\n\nasync function removeDDBEquipment(actor, itemsToRemove) {\n  let promises = [];\n\n  itemsToRemove.forEach((item) => {\n    if (item.flags?.ddbimporter?.id) {\n      logger.debug(`Removing item ${item.name}`);\n      if (item.flags?.ddbimporter?.custom) {\n        promises.push(deleteDDBCustomItems(actor, [item]));\n      } else {\n        promises.push(updateCharacterCall(actor, \"equipment/remove\", { itemId: parseInt(item.flags.ddbimporter.id) }, \"Removing equipment\"));\n      }\n    }\n  });\n\n  return Promise.all(promises);\n}\n\nasync function removeEquipment(actor, ddbData) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  const ddbItems = ddbData.character.inventory;\n\n  const items = getFoundryItems(actor);\n  const itemsToRemove = ddbItems.filter((item) =>\n    (!items.some((s) => (item.flags.ddbimporter?.id === s.flags.ddbimporter?.id && s.type === item.type) && !s.flags.ddbimporter?.action)\n    || items.some((s) => (item.flags.ddbimporter?.id === s.flags.ddbimporter?.id && s.type === item.type) && !s.flags.ddbimporter?.action && s.system.quantity == 0))\n    && DICTIONARY.types.inventory.includes(item.type)\n    && item.flags.ddbimporter?.id\n  );\n\n  return removeDDBEquipment(actor, itemsToRemove);\n}\n\nasync function updateDDBEquipmentStatus(actor, updateItemDetails, ddbItems) {\n  const itemsToEquip = updateItemDetails.itemsToEquip || [];\n  const itemsToAttune = updateItemDetails.itemsToAttune || [];\n  const itemsToCharge = updateItemDetails.itemsToCharge || [];\n  const itemsToQuantity = updateItemDetails.itemsToQuantity || [];\n  const itemsToName = updateItemDetails.itemsToName || [];\n  const customItems = updateItemDetails.customItems || [];\n  const itemsToMove = updateItemDetails.itemsToMove || [];\n\n  let promises = [];\n\n  itemsToMove.forEach((item) => {\n    const itemData = {\n      itemId: item.flags.ddbimporter.id,\n      containerEntityId: item.flags.ddbimporter.containerEntityId,\n      containerEntityTypeId: item.flags.ddbimporter.containerEntityTypeId,\n    };\n    promises.push(updateCharacterCall(actor, \"equipment/move\", itemData, { name: item.name }));\n  });\n  itemsToEquip.forEach((item) => {\n    const itemData = { itemId: item.flags.ddbimporter.id, value: item.system.equipped };\n    promises.push(updateCharacterCall(actor, \"equipment/equipped\", itemData, { name: item.name }));\n  });\n  itemsToAttune.forEach((item) => {\n    const itemData = { itemId: item.flags.ddbimporter.id, value: (item.system.attunement === 2) };\n    promises.push(updateCharacterCall(actor, \"equipment/attuned\", itemData, { name: item.name }));\n  });\n  itemsToCharge.forEach((item) => {\n    const itemData = {\n      itemId: item.flags.ddbimporter.id,\n      charges: parseInt(item.system.uses.max) - parseInt(item.system.uses.value),\n    };\n    if (Number.isInteger(itemData.charges)) {\n      promises.push(updateCharacterCall(actor, \"equipment/charges\", itemData, { name: item.name }));\n    }\n  });\n  itemsToQuantity.forEach((item) => {\n    const itemData = {\n      itemId: item.flags.ddbimporter.id,\n      quantity: parseInt(item.system.quantity),\n    };\n    promises.push(updateCharacterCall(actor, \"equipment/quantity\", itemData, { name: item.name }));\n  });\n  itemsToName.forEach((item) => {\n    // historically items may not have this metadata\n    const entityTypeId = item.flags?.ddbimporter?.entityTypeId\n      ? item.flags.ddbimporter.entityTypeId\n      : ddbItems.find((dItem) => dItem.id === item.flags.ddbimporter.id).entityTypeId;\n    const customData = {\n      customValues: {\n        characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n        contextId: null,\n        contextTypeId: null,\n        notes: null,\n        typeId: 8,\n        value: item.name.replaceAll(\"[Infusion]\", \"\").trim(),\n        valueId: `${item.flags.ddbimporter.id}`,\n        valueTypeId: `${entityTypeId}`,\n      }\n    };\n    const flavor = { detail: \"Updating Name\", name: item.name, originalName: item.flags?.ddbimporter?.originalName };\n    promises.push(updateCharacterCall(actor, \"equipment/custom\", customData, flavor));\n  });\n\n  customItems\n    .filter((item) => {\n      const isValid = getProperty(item, \"flags.ddbimporter.id\") !== undefined\n       && getProperty(item, \"flags.ddbimporter.definitionId\") !== undefined;\n      if (!isValid) {\n        logger.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n        ui.notifications.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n      }\n      return isValid;\n    })\n    .forEach((item) => {\n      const customData = {\n        itemState: \"UPDATE\",\n        customValues: {\n          characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n          id: item.flags.ddbimporter.definitionId,\n          mappingId: item.flags.ddbimporter.id,\n          name: item.name,\n          description: utils.stripHtml(item.system.description.value),\n          // revist these need to be ints\n          // weight: `${item.data.weight}`,\n          // cost: ${item.data.price},\n          cost: null,\n          weight: Number.isInteger(item.system.weight) ? parseInt(item.system.weight) : 0,\n          quantity: parseInt(item.system.quantity),\n        }\n      };\n      promises.push(updateCharacterCall(actor, \"custom/item\", customData, \"Updating Custom Item\"));\n    });\n\n  return Promise.all(promises);\n}\n\n\nasync function equipmentStatus(actor, ddbData, addEquipmentResults) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  // reload the actor following potential updates to equipment\n  let ddbItems = ddbData.ddb.character.inventory;\n  let customDDBItems = ddbData.ddb.character.customItems;\n  if (addEquipmentResults?.system) {\n    actor = game.actors.get(actor.id);\n    ddbItems = ddbItems.concat(addEquipmentResults.system.addItems);\n  }\n\n  const foundryItems = getFoundryItems(actor);\n\n  const itemsToEquip = foundryItems.filter((item) =>\n    hasProperty(item, \"system.equipped\")\n    && hasProperty(item, \"flags.ddbimporter.id\")\n    && !getProperty(item, \"flags.ddbimporter.action\")\n    && !getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && item.system.equipped !== dItem.equipped\n    )\n  );\n  const itemsToAttune = foundryItems.filter((item) =>\n    hasProperty(item, \"system.attunement\")\n    && hasProperty(item, \"flags.ddbimporter.id\")\n    && !getProperty(item, \"flags.ddbimporter.action\")\n    && !getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && ((item.system.attunement === 2) !== dItem.isAttuned)\n    )\n  );\n  const itemsToCharge = foundryItems.filter((item) =>\n    hasProperty(item, \"system.uses\")\n    && hasProperty(item, \"flags.ddbimporter.id\")\n    && !getProperty(item, \"flags.ddbimporter.action\")\n    && !getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && Number.isInteger(parseInt(item.system.uses?.max)) && Number.isInteger(parseInt(dItem.limitedUse?.numberUsed))\n      && ((parseInt(item.system.uses.max) - parseInt(item.system.uses.value)) !== dItem.limitedUse.numberUsed)\n    )\n  );\n  const itemsToQuantity = foundryItems.filter((item) =>\n    hasProperty(item, \"system.quantity\")\n    && item.system.quantity !== 0\n    && !getProperty(item, \"system.armor.type\")\n    && ((item.type !== \"weapon\" && item.type !== \"armor\") || getProperty(item, \"flags.ddbimporter.dndbeyond.stackable\"))\n    && hasProperty(item, \"flags.ddbimporter.id\")\n    && !getProperty(item, \"flags.ddbimporter.action\")\n    && !getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && item.system.quantity !== dItem.quantity\n    )\n  );\n  // this is for items that have been added and might have a different name\n  const itemsToName = foundryItems.filter((item) =>\n    hasProperty(item, \"flags.ddbimporter.id\")\n    && item.system?.quantity !== 0\n    && !getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      item.flags.ddbimporter.originalName === dItem.definition.name\n      && item.flags.ddbimporter.originalName !== item.name.replaceAll(\"[Infusion]\", \"\").trim()\n      && getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && item.name.replaceAll(\"[Infusion]\", \"\").trim() !== dItem.definition.name\n    )\n  );\n\n  // update.name || update.data?.description || update.data?.weight || update.data?.price || update.data?.quantity\n  const customItems = foundryItems.filter((item) =>\n    hasProperty(item, \"flags.ddbimporter.id\")\n    && item.system?.quantity !== 0\n    && (getProperty(item, \"flags.ddbimporter.custom\") === true || getProperty(item, \"flags.ddbimporter.isCustom\") === true)\n    && customDDBItems.some((dItem) => dItem.id === item.flags.ddbimporter.id\n      && (\n        item.name !== dItem.name\n        || utils.stripHtml(item.system.description.value) != dItem.description\n        || (hasProperty(item, \"system.quantity\") && item.system.quantity != dItem.quantity)\n        || (hasProperty(item, \"system.weight\") && item.system.weight != dItem.weight)\n        //  ||\n        // item.data.price != dItem.cost\n      )\n    )\n  );\n\n  const itemsToMove = game.modules.get(\"itemcollection\")?.active\n    ? foundryItems.filter((item) =>\n      hasProperty(item, \"flags.ddbimporter.id\")\n      && !getProperty(item, \"flags.ddbimporter.action\")\n      && hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      && ddbItems.some((dItem) =>\n        item.flags.ddbimporter.id === dItem.id\n        && parseInt(item.flags.ddbimporter.containerEntityId) !== parseInt(dItem.containerEntityId)\n      ))\n    : [];\n\n  const itemsToUpdate = {\n    itemsToEquip,\n    itemsToAttune,\n    itemsToCharge,\n    itemsToQuantity,\n    itemsToName,\n    customItems,\n    itemsToMove,\n  };\n\n  return updateDDBEquipmentStatus(actor, itemsToUpdate, ddbItems);\n\n}\n\nasync function updateActionUseStatus(actor, actionData, actionName) {\n  return new Promise((resolve) => {\n    resolve(updateCharacterCall(actor, \"action/use\", actionData, `Action Use for ${actionName}`));\n  });\n}\n\nasync function updateDDBActionUseStatus(actor, actions) {\n  let promises = [];\n  actions.forEach((action) => {\n    const actionData = {\n      actionId: action.flags.ddbimporter.id,\n      entityTypeId: action.flags.ddbimporter.entityTypeId,\n      uses: parseInt(action.system.uses.max) - parseInt(action.system.uses.value)\n    };\n    promises.push(updateActionUseStatus(actor, actionData, action.name));\n  });\n  return Promise.all(promises);\n}\n\nasync function actionUseStatus(actor, ddbData) {\n  const syncActionReady = actor.flags.ddbimporter?.syncActionReady;\n  if (syncActionReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-action-use\")) return [];\n\n  let ddbActions = ddbData.character.actions;\n\n  const foundryItems = getFoundryItems(actor);\n\n  const actionsToChange = foundryItems.filter((item) =>\n    (item.flags.ddbimporter?.action || item.type === \"feat\")\n    && item.flags.ddbimporter?.id && item.flags.ddbimporter?.entityTypeId\n    && ddbActions.some((dItem) =>\n      item.flags.ddbimporter.id === dItem.flags.ddbimporter.id\n      && item.flags.ddbimporter.entityTypeId === dItem.flags.ddbimporter.entityTypeId\n      && item.name === dItem.name && item.type === dItem.type\n      && Number.isInteger(parseInt(item.system.uses?.value))\n      && Number.parseInt(item.system.uses.value) !== Number.parseInt(dItem.system.uses.value)\n    )\n  );\n  const actionChanges = updateDDBActionUseStatus(actor, actionsToChange);\n\n  return actionChanges;\n}\n\nexport async function updateDDBCharacter(actor) {\n  const cobaltCheck = await checkCobalt(actor.id);\n\n  if (cobaltCheck.success) {\n    logger.debug(`Cobalt checked`);\n  } else {\n    logger.error(`Cobalt cookie expired, please reset`);\n    logger.error(cobaltCheck.message);\n    throw cobaltCheck.message;\n  }\n\n  const characterId = actor.flags.ddbimporter.dndbeyond.characterId;\n  const syncId = actor.flags[\"ddb-importer\"]?.syncId ? actor.flags[\"ddb-importer\"].syncId + 1 : 0;\n\n  const ddbCharacterOptions = {\n    currentActor: actor,\n    characterId,\n    resourceSelection: false\n  };\n  const getOptions = {\n    syncId,\n    localCobaltPostFix: actor.id,\n  };\n  const ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n  const activeUpdateState = ddbCharacter.getCurrentDynamicUpdateState();\n  await ddbCharacter.disableDynamicUpdates();\n  let ddbData = await ddbCharacter.getCharacterData(getOptions);\n\n  if (!ddbCharacter.source.ddb.character.canEdit) {\n    logger.debug(\"Update DDB\", { ddbCharacter, ddbData });\n    throw new Error(\"User is not allowed to edit character on D&D Beyond.\");\n  }\n\n  logger.debug(\"Current actor:\", duplicate(actor));\n  logger.debug(\"DDB Parsed data:\", ddbData);\n\n  let singlePromises = []\n    .concat(\n      currency(actor, ddbData),\n      hitPoints(actor, ddbData),\n      hitDice(actor, ddbData),\n      spellSlots(actor, ddbData),\n      spellSlotsPact(actor, ddbData),\n      inspiration(actor, ddbData),\n      exhaustion(actor, ddbData),\n      deathSaves(actor, ddbData),\n      xp(actor, ddbData),\n    ).flat();\n\n  const singleResults = await Promise.all(singlePromises);\n  const spellsPreparedResults = await spellsPrepared(actor, ddbData);\n  const actionStatusResults = await actionUseStatus(actor, ddbData);\n  const nameUpdateResults = await updateCustomNames(actor, ddbData);\n  const addEquipmentResults = await addEquipment(actor, ddbData);\n  const removeEquipmentResults = await removeEquipment(actor, ddbData);\n  const equipmentStatusResults = await equipmentStatus(actor, ddbData, addEquipmentResults);\n  const conditionResults = await conditions(actor, ddbData);\n  // if a known/choice spellcaster\n  // and new spell/ spells removed\n  // for each spell add or remove, e.g.\n  // const spellsData = {\n  //   characterClassId: 52134801,\n  //   spellId: 2019,\n  //   id: 136157,\n  //   entityTypeId: 435869154,\n  //   remove: true,\n  // };\n  // const spellSlots = updateCharacterCall(actor, \"spells\", spellsData);\n  // promises.push(spellSlots);\n\n  actor.setFlag(\"ddb-importer\", \"syncId\", syncId);\n  await ddbCharacter.setActiveSyncSpellsFlag(true);\n\n  // we can now process item attunements and uses (not yet done)\n\n  const results = singleResults.concat(\n    nameUpdateResults,\n    addEquipmentResults,\n    spellsPreparedResults,\n    removeEquipmentResults,\n    equipmentStatusResults,\n    actionStatusResults,\n    conditionResults,\n  ).filter((result) => result !== undefined);\n\n  logger.debug(\"Update results\", results);\n  await ddbCharacter.updateDynamicUpdates(activeUpdateState);\n\n  return results;\n}\n\n// Called when characters are updated\n// will dynamically sync status back to DDB\nasync function activeUpdateActor(actor, update) {\n  // eslint-disable-next-line complexity\n  return new Promise((resolve) => {\n\n    const promises = [];\n\n    const actorActiveUpdate = actor.flags.ddbimporter?.activeUpdate;\n\n    if (actorActiveUpdate) {\n      const syncHP = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-hitpoints\");\n      const syncCurrency = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-currency\");\n      const syncSpellSlots = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-spells-slots\");\n      const syncInspiration = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-inspiration\");\n      const syncConditions = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-condition\");\n      const syncDeathSaves = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-deathsaves\");\n      const syncXP = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-xp\");\n\n\n      if (syncHP && update.system?.attributes?.hp) {\n        logger.debug(\"Updating DDB Hitpoints...\");\n        promises.push(updateDDBHitPoints(actor));\n      }\n      if (syncCurrency && update.system?.currency) {\n        logger.debug(\"Updating DDB Currency...\");\n        promises.push(updateDDBCurrency(actor));\n      }\n      if (syncSpellSlots && update.system?.spells) {\n        const spellKeys = Object.keys(update.system.spells);\n        if (spellKeys.includes(\"pact\")) {\n          logger.debug(\"Updating DDB SpellSlots Pack...\");\n          promises.push(updateDDBSpellSlotsPact(actor));\n        }\n        const spellLevelKeys = [\"spell1\", \"spell2\", \"spell3\", \"spell4\", \"spell5\", \"spell6\", \"spell7\", \"spell8\", \"spell9\"];\n        const foundSpells = spellKeys.some((spellKey) => spellLevelKeys.includes(spellKey));\n        if (foundSpells) {\n          logger.debug(\"Updating DDB SpellSlots...\");\n          promises.push(updateDynamicDDBSpellSlots(actor, update));\n        }\n      }\n      if (syncInspiration\n        && (update.system?.attributes?.inspiration === true || update.system?.attributes?.inspiration === false)\n      ) {\n        logger.debug(\"Updating DDB Inspiration...\");\n        promises.push(updateDDBInspiration(actor));\n      }\n      if (syncConditions && update.system?.attributes?.exhaustion) {\n        logger.debug(\"Updating DDB Exhaustion...\");\n        promises.push(updateDDBExhaustion(actor));\n      }\n      if (syncDeathSaves && update.system?.attributes?.death) {\n        logger.debug(\"Updating DDB DeathSaves...\");\n        promises.push(updateDDBDeathSaves(actor));\n      }\n      if (syncXP && update.system?.attributes?.xp) {\n        logger.debug(\"Updating DDB XP...\");\n        promises.push(updateDDBXP(actor));\n      }\n    }\n    resolve(promises);\n\n  });\n}\n\nconst DISABLE_FOUNDRY_UPGRADE = {\n  applyFeatures: false,\n  addFeatures: false,\n  promptAddFeatures: false,\n};\n\nasync function generateDynamicItemChange(actor, document, update) {\n  const updateItemDetails = {\n    itemsToEquip: [],\n    itemsToAttune: [],\n    itemsToCharge: [],\n    itemsToQuantity: [],\n    itemsToName: [],\n    customItems: [],\n    itemsToMove: [],\n  };\n\n  // console.warn(\"Document\", document);\n  // console.warn(\"ItemUpdate\", update);\n\n  if (getProperty(document, \"flags.ddbimporter.custom\") === true || getProperty(document, \"flags.ddbimporter.isCustom\") === true) {\n    if (update.name || update.system?.description || update.system?.weight || update.system?.price || update.system?.quantity) {\n      updateItemDetails.customItems.push(duplicate(document));\n    }\n  } else {\n    if (update.system?.uses) {\n      updateItemDetails.itemsToCharge.push(duplicate(document));\n    }\n    if (update.system?.attunement) {\n      updateItemDetails.itemsToAttune.push(duplicate(document));\n    }\n    if (update.system?.quantity) {\n      // if its a weapon or armor we actually need to push a new one\n      if (!document.flags.ddbimporter?.dndbeyond?.stackable && update.system.quantity > 1) {\n        // Some items are not stackable on DDB\n\n        await document.update({ system: { quantity: 1 } });\n        let newDocument = duplicate(document.toObject());\n        delete newDocument._id;\n        delete newDocument.flags.ddbimporter.id;\n\n        let results = [];\n        for (let i = 1; i < update.system.quantity; i++) {\n          logger.debug(`Adding item # ${i}`);\n          // eslint-disable-next-line no-await-in-loop\n          let newDoc = await actor.createEmbeddedDocuments(\"Item\", [newDocument], DISABLE_FOUNDRY_UPGRADE);\n          results.push(newDoc);\n          // new doc/item push to ddb handled by the add item hook\n        }\n        return results;\n      } else {\n        updateItemDetails.itemsToQuantity.push(duplicate(document));\n      }\n    }\n    if (update.system?.equipped) {\n      updateItemDetails.itemsToEquip.push(duplicate(document));\n    }\n    if (update.name) {\n      updateItemDetails.itemsToName.push(duplicate(document));\n    }\n    if (update.flags?.itemcollection?.contentsData && hasProperty(document, \"flags.ddbimporter.id\")) {\n      const newItems = [];\n      const moveItems = [];\n      for (const item of update.flags.itemcollection.contentsData) {\n        setProperty(item, \"flags.ddbimporter.containerEntityId\", document.flags.ddbimporter.id);\n        setProperty(item, \"flags.ddbimporter.containerEntityTypeId\", document.flags.ddbimporter.entityTypeId);\n        if (parseInt(item.flags.ddbimporter.id) === 0) {\n          setProperty(item, \"flags.ddbimporter.updateDocumentId\", document.id);\n          newItems.push(item);\n        } else {\n          moveItems.push(item);\n        }\n      }\n\n      addDDBEquipment(actor, newItems);\n      updateItemDetails.itemsToMove.push(...moveItems);\n    }\n  }\n\n  logger.debug(\"UpdateItemDetails\", updateItemDetails);\n\n  return updateDDBEquipmentStatus(actor, updateItemDetails, []);\n\n}\n\nasync function updateSpellPrep(actor, document) {\n  return new Promise((resolve) => {\n    const spellSyncFlag = actor.flags.ddbimporter?.activeSyncSpells;\n    if (spellSyncFlag) {\n      logger.debug(\"Updating DDB SpellsPrepared...\");\n      // get spells class\n      const klassName = document.flags.ddbimporter?.dndbeyond?.class;\n      const klass = actor.items.find((item) => item.name === klassName && item.type === \"class\");\n      if (klass) {\n        resolve(updateDDBSpellsPrepared(actor, [document]));\n      } else {\n        resolve([]);\n      }\n    } else {\n      logger.warn(\"Unable to sync spell prep status until character is imported or updated to DDB\");\n      resolve([]);\n    }\n  });\n}\n\n// Called when characters items are updated\n// will dynamically sync status back to DDB\nasync function activeUpdateUpdateItem(document, update) {\n  // eslint-disable-next-line complexity\n  return new Promise((resolve) => {\n\n    // we check to see if this is actually an embedded item\n    const parentActor = document.parent;\n    const actorActiveUpdate = parentActor && parentActor.flags.ddbimporter?.activeUpdate;\n\n    if (!parentActor || !actorActiveUpdate) {\n      resolve([]);\n    } else {\n      logger.debug(\"Preparing to sync item change to DDB...\");\n      const action = document.flags.ddbimporter?.action || document.type === \"feat\";\n      const syncEquipment = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-equipment\");\n      const syncActionUse = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-action-use\");\n      const syncHD = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-hitdice\");\n      const syncSpellsPrepared = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-spells-prepared\");\n      const isDDBItem = document.flags.ddbimporter?.id;\n      const customItem = document.flags.ddbimporter?.custom || false;\n\n      const customNameAllowed = DICTIONARY.types.inventory.includes(document.type) || document.flags.ddbimporter?.action;\n      if (!customItem && update.name && customNameAllowed) {\n        updateDDBCustomNames(parentActor, [document.toObject()]);\n      }\n\n      logger.debug(\"active update item details\", { action, syncActionUse, isDDBItem });\n      // is this a DDB action, or do we treat this as an item?\n      if (action && syncActionUse && isDDBItem) {\n        if (update.system?.uses) {\n          logger.debug(\"Updating action uses\", update);\n          updateDDBActionUseStatus(parentActor, [duplicate(document)]);\n        } else {\n          resolve([]);\n        }\n      } else if (document.type === \"class\" && syncHD && update.system?.hitDiceUsed) {\n        logger.debug(\"Updating hitdice on DDB\");\n        resolve(updateDDBHitDice(parentActor, document, update));\n      } else if (document.type === \"spell\" && syncSpellsPrepared\n        && update.system?.preparation && document.system.preparation.mode === \"prepared\"\n      ) {\n        logger.debug(\"Updating DDB SpellsPrepared...\");\n        updateSpellPrep(parentActor, document).then((results) => {\n          logger.debug(\"Spell prep results\", results);\n          const failures = results.find((result) => result.success !== true);\n          const ddbCharacterOptions = {\n            currentActor: parentActor,\n            characterId: undefined,\n            resourceSelection: false\n          };\n          // when update is refactored to a class, change this\n          const ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n          if (failures) ddbCharacter.setActiveSyncSpellsFlag(false);\n          resolve(results);\n        });\n      } else if (syncEquipment && !action) {\n        resolve(generateDynamicItemChange(parentActor, document, update));\n      }\n    }\n  });\n}\n\n\n// Called when characters items are added/deleted\n// will dynamically sync status back to DDB\nasync function activeUpdateAddOrDeleteItem(document, state) {\n  return new Promise((resolve) => {\n    let promises = [];\n\n    const syncEquipment = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-equipment\");\n    // we check to see if this is actually an embedded item\n    const parentActor = document.parent;\n    const actorActiveUpdate = parentActor && getProperty(parentActor, \"flags.ddbimporter.activeUpdate\");\n\n    if (parentActor && actorActiveUpdate && syncEquipment) {\n      logger.debug(`Checking to see if ${state.toLowerCase()} can be added to DDB...`);\n      const action = document.flags.ddbimporter?.action || [\"feat\", \"class\", \"subclass\", \"spell\", \"background\", \"race\"].includes(document.type);\n      if (!action) {\n        logger.debug(`Attempting to ${state.toLowerCase()} new Item`, document);\n\n        switch (state) {\n          case \"CREATE\": {\n            const characterId = parseInt(parentActor.flags.ddbimporter.dndbeyond.characterId);\n            const containerId = document.flags?.ddbimporter?.containerEntityId;\n            if (Number.isInteger(containerId) && characterId != parseInt(containerId)) {\n              // update item container\n              logger.debug(`Moving item from container`, document);\n              document.update({\n                \"flags.ddbimporter.containerEntityId\": characterId,\n              });\n              const itemData = {\n                itemId: parseInt(document.flags.ddbimporter.id),\n                containerEntityId: characterId,\n                containerEntityTypeId: 1581111423,\n              };\n              const flavor = { summary: \"Moving item to character\", name: document.name, containerId: duplicate(containerId) };\n              promises.push(updateCharacterCall(parentActor, \"equipment/move\", itemData, flavor));\n            } else {\n              logger.debug(`Creating item`, document);\n              promises.push(addDDBEquipment(parentActor, [document.toObject()]));\n            }\n            break;\n          }\n          case \"DELETE\": {\n            const collectionItems = getItemCollectionItems(parentActor);\n            const collectionItemDDBIds = collectionItems\n              .filter((item) => hasProperty(item, \"flags.ddbimporter.id\"))\n              .map((item) => item.flags.ddbimporter.id);\n            if (hasProperty(document, \"flags.ddbimporter.id\")\n              && collectionItemDDBIds.includes(document.flags.ddbimporter.id)\n            ) {\n              // we don't have to handle deletes as the item collection move is handled above\n              logger.debug(`Moving item to container`, document);\n            } else {\n              promises.push(removeDDBEquipment(parentActor, [document.toObject()]));\n            }\n            break;\n          }\n          // no default\n        }\n      }\n    }\n    resolve(promises);\n  });\n}\n\n// called when effects are added/deleted/updated\nasync function activeUpdateEffectTrigger(document, state) {\n  return new Promise((resolve) => {\n    let promises = [];\n\n    const syncConditions = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-condition\");\n    // we check to see if this is actually an embedded item\n    const parentActor = document.parent;\n    const actorActiveUpdate = parentActor && parentActor.flags.ddbimporter?.activeUpdate;\n\n    if (parentActor && actorActiveUpdate && syncConditions) {\n      logger.debug(`Preparing to ${state.toLowerCase()} condition on DDB...`);\n      // is it a condition?\n      // is it a suitable type?\n      const isConvenient = document.system?.flags?.isConvenient;\n      const condition = getCondition(document.system?.label);\n      // exhaustion is a special case, but also a condition effect, handled by character update\n      const notExhaustion = condition ? condition.ddbId !== 4 : false;\n\n      if (isConvenient && condition && notExhaustion) {\n        logger.debug(`Attempting to ${state.toLowerCase()} Condition`, document);\n        switch (state) {\n          case \"CREATE\":\n            condition.applied = true;\n            promises.push(updateDDBCondition(parentActor, condition));\n            break;\n          case \"UPDATE\":\n            condition.applied = !document.system.disabled;\n            promises.push(updateDDBCondition(parentActor, condition));\n            break;\n          case \"DELETE\":\n            condition.applied = false;\n            promises.push(updateDDBCondition(parentActor, condition));\n            break;\n          // no default\n        }\n      }\n    }\n    resolve(promises);\n  });\n}\n\nexport function activateUpdateHooks() {\n  // check to make sure we can sync back, currently only works for 1 gm user\n  if (SETTINGS.STATUS.activeUpdate()) {\n    Hooks.on(\"updateActor\", activeUpdateActor);\n    Hooks.on(\"updateItem\", activeUpdateUpdateItem);\n    Hooks.on(\"createItem\", (document) => activeUpdateAddOrDeleteItem(document, \"CREATE\"));\n    Hooks.on(\"deleteItem\", (document) => activeUpdateAddOrDeleteItem(document, \"DELETE\"));\n    // conditions syncing relies of Conv Effects\n    const dfConditionsOn = game.modules.get(\"dfreds-convenient-effects\")?.active;\n    const useCEConditions = game.settings.get(SETTINGS.MODULE_ID, \"apply-conditions-with-ce\");\n    if (dfConditionsOn && useCEConditions) {\n      Hooks.on(\"createActiveEffect\", (document) => activeUpdateEffectTrigger(document, \"CREATE\"));\n      Hooks.on(\"updateActiveEffect\", (document) => activeUpdateEffectTrigger(document, \"UPDATE\"));\n      Hooks.on(\"deleteActiveEffect\", (document) => activeUpdateEffectTrigger(document, \"DELETE\"));\n    }\n  }\n}\n","import DICTIONARY from \"../dictionary.js\";\nimport { generateOverrideChange } from \"./effects.js\";\n\nfunction buildBaseOverrideEffect(label) {\n  let effect = {\n    changes: [],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    origin: \"Ability.Override\",\n    label,\n    tint: \"\",\n    disabled: false,\n    transfer: true,\n    selectedKey: [],\n    icon: \"icons/svg/anchor.svg\",\n    flags: {\n      dae: { transfer: true },\n      ddbimporter: { disabled: false, itemId: null, entityTypeId: null }\n    },\n  };\n  return effect;\n}\n\n\nexport function abilityOverrideEffects(overrides) {\n  let effects = buildBaseOverrideEffect(\"Ability Overrides\");\n\n  DICTIONARY.character.abilities.forEach((ability) => {\n    if (overrides[ability.value] === 0) return;\n    effects.changes.push(generateOverrideChange(overrides[ability.value], 50, `system.abilities.${ability.value}.value`));\n  });\n\n  return effects;\n}\n","import utils from \"./utils.js\";\nimport FileHelper from \"./FileHelper.js\";\nimport CompendiumHelper from \"./CompendiumHelper.js\";\nimport MuncherSettings from \"../muncher/MuncherSettings.js\";\nimport logger from \"../logger.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\nimport {\n  copySupportedItemFlags,\n  addMagicItemSpells,\n  getCompendiumItems,\n  getSRDCompendiumItems,\n  copySRDIcons,\n  getDDBEquipmentIcons,\n  getDDBSpellSchoolIcons,\n  getDDBGenericItemIcons,\n  addItemEffectIcons,\n  retainExistingIcons,\n  getIndividualOverrideItems,\n} from \"../muncher/import.js\";\nimport { addItemsDAESRD } from \"../muncher/dae.js\";\nimport { copyInbuiltIcons } from \"../icons/index.js\";\nimport { updateDDBCharacter } from \"../updater/character.js\";\nimport { generateCharacterExtras } from \"../parser/extras/extras.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport { getCobalt, isLocalCobalt, deleteLocalCobalt } from \"./Secrets.js\";\nimport { DDBCookie } from \"./Settings.js\";\nimport { abilityOverrideEffects } from \"../effects/abilityOverrides.js\";\nimport { setConditions } from \"../parser/special/conditions.js\";\nimport { addContainerItemsToContainers, addContainerItemsToActor } from \"../parser/special/itemCollections.js\";\nimport SETTINGS from \"../settings.js\";\n\nexport default class DDBCharacterManager extends FormApplication {\n  constructor(options, actor, ddbCharacter = null) {\n    super(options);\n    this.actor = game.actors.get(actor._id);\n    this.migrateMetadata();\n    this.actorOriginal = duplicate(this.actor);\n    logger.debug(\"Current Actor (Original):\", this.actorOriginal);\n    this.result = {};\n    this.nonMatchedItemIds = [];\n    this.settings = {};\n    this.ddbCharacter = ddbCharacter;\n  }\n\n  migrateMetadata() {\n    if (this.actor.flags?.ddbimporter?.dndbeyond) {\n      const url = this.actor.flags.ddbimporter.dndbeyond.url;\n\n      if (url && !this.actor.flags.ddbimporter.characterId) {\n        const characterId = DDBCharacter.getCharacterId(url);\n        if (characterId) {\n          this.actor.flags.ddbimporter.dndbeyond.characterId = characterId;\n          this.actor.flags.ddbimporter.dndbeyond.url = url;\n        } else {\n          // clear the url, because it's malformed anyway\n          this.actor.flags.ddbimporter.dndbeyond.url = null;\n        }\n      }\n    }\n  }\n\n  static renderPopup(type, url) {\n    if (SETTINGS.POPUPS[type] && !SETTINGS.POPUPS[type].close) {\n      SETTINGS.POPUPS[type].focus();\n      SETTINGS.POPUPS[type].location.href = url;\n    } else {\n      const ratio = window.innerWidth / window.innerHeight;\n      const width = Math.round(window.innerWidth * 0.5);\n      const height = Math.round(window.innerWidth * 0.5 * ratio);\n      SETTINGS.POPUPS[type] = window.open(\n        url,\n        \"ddb_sheet_popup\",\n        `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n      );\n    }\n    return true;\n  }\n\n  /**\n   * Define default options\n   */\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.title = game.i18n.localize(\"ddb-importer.module-name\");\n    options.template = \"modules/ddb-importer/handlebars/character.hbs\";\n    options.width = 900;\n    options.height = \"auto\";\n    options.classes = [\"ddbimporter\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"form\", initial: \"import\" }];\n\n    return options;\n  }\n\n  showCurrentTask(title, message = null, isError = false) {\n    let element = $(this.html).find(\".task-name\");\n    element.html(`<h2 ${isError ? \" style='color:red'\" : \"\"}>${title}</h2>${message ? `<p>${message}</p>` : \"\"}`);\n    $(this.html).parent().parent().css(\"height\", \"auto\");\n  }\n\n  static getCharacterUpdatePolicyTypes(invert = false) {\n    let itemTypes = [\"background\", \"race\"];\n\n    if (invert) {\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-class\")) {\n        itemTypes.push(\"class\");\n        itemTypes.push(\"subclass\");\n      }\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-feat\")) itemTypes.push(\"feat\");\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-weapon\")) itemTypes.push(\"weapon\");\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-equipment\"))\n        itemTypes = itemTypes.concat(DICTIONARY.types.equipment);\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-spell\")) itemTypes.push(\"spell\");\n    } else {\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-class\")) {\n        itemTypes.push(\"class\");\n        itemTypes.push(\"subclass\");\n      }\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-feat\")) itemTypes.push(\"feat\");\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-weapon\")) itemTypes.push(\"weapon\");\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-equipment\"))\n        itemTypes = itemTypes.concat(DICTIONARY.types.equipment);\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-spell\")) itemTypes.push(\"spell\");\n    }\n    return itemTypes;\n  }\n\n  /**\n   * Returns a combined array of all items to process, filtered by the user's selection on what to skip and what to include\n   * @param {object} result object containing all character items sectioned as individual properties\n   * @param {array[string]} sections an array of object properties which should be filtered\n   */\n  filterItemsByUserSelection(invert = false) {\n    let items = [];\n    const validItemTypes = DDBCharacterManager.getCharacterUpdatePolicyTypes(invert);\n\n    for (const section of SETTINGS.FILTER_SECTIONS) {\n      items = items.concat(this.result[section]).filter((item) => validItemTypes.includes(item.type));\n    }\n    return items;\n  }\n\n  filterActorItemsByUserSelection(invert = false) {\n    const validItemTypes = DDBCharacterManager.getCharacterUpdatePolicyTypes(invert);\n\n    const items = this.actorOriginal.items.filter((item) => validItemTypes.includes(item.type));\n\n    return items;\n  }\n\n  /**\n   * Loops through a characters items and updates flags\n   * @param {*} items\n   */\n  async copySupportedCharacterItemFlags(items) {\n    items.forEach((item) => {\n      const originalItem = this.actorOriginal.items.find(\n        (originalItem) => item.name === originalItem.name && item.type === originalItem.type\n      );\n      if (originalItem) {\n        copySupportedItemFlags(originalItem, item);\n      }\n    });\n  }\n\n  copyExistingJournalNotes() {\n    if (!this.actorOriginal) return;\n    const journalFields = [\n      \"notes1name\",\n      \"notes2name\",\n      \"notes3name\",\n      \"notes4name\",\n      \"notes1\",\n      \"notes2\",\n      \"notes3\",\n      \"notes4\",\n      \"notes\",\n    ];\n    journalFields.forEach((field) => {\n      if (this.actorOriginal.system.details[field]) {\n        this.actor.system.details[field] = this.actorOriginal.system.details[field];\n      }\n    });\n  }\n\n  async copyCharacterItemEffects(items) {\n    return new Promise((resolve) => {\n      resolve(\n        items.map((item) => {\n          const originalItem = this.actorOriginal.items.find((originalItem) =>\n            item.name === originalItem.name\n            && item.type === originalItem.type\n            && item.flags?.ddbimporter?.id === originalItem.flags?.ddbimporter?.id\n          );\n          if (originalItem) {\n            if (!item.effects) item.effects = [];\n            if (originalItem.effects) {\n              logger.info(`Copying Effects for ${originalItem.name}`);\n              item.effects = originalItem.effects.map((m) => {\n                delete m._id;\n                return m;\n              });\n            }\n          }\n          return item;\n        })\n      );\n    });\n  }\n\n  /**\n   * Removes items\n   * @param {*} items\n   * @param {*} itemsToRemove\n   */\n  static async removeItems(items, itemsToRemove) {\n    return new Promise((resolve) => {\n      resolve(\n        items.filter(\n          (item) =>\n            !itemsToRemove.some((originalItem) => {\n              const originalNameMatch = originalItem.flags?.ddbimporter?.originalItemName\n                ? originalItem.flags.ddbimporter.originalItemName === item.name\n                : false;\n              const nameMatch = item.name === originalItem.name || originalNameMatch;\n              return nameMatch && item.type === originalItem.type;\n            })\n        )\n      );\n    });\n  }\n\n  /**\n   * Deletes items from the inventory bases on which sections a user wants to update\n   * Possible sections:\n   * - class\n   * - feat\n   * - weapon\n   * - equipment\n   * - inventory: consumable, loot, tool and backpack\n   * - spell\n   */\n  async clearItemsByUserSelection(excludedList = []) {\n    const includedItems = DDBCharacterManager.getCharacterUpdatePolicyTypes();\n    // collect all items belonging to one of those inventory item categories\n    const ownedItems = this.actor.getEmbeddedCollection(\"Item\");\n    const toRemove = ownedItems\n      .filter(\n        (item) =>\n          includedItems.includes(item.type)\n          && !excludedList.some((excluded) => excluded._id === item.id)\n          && !this.nonMatchedItemIds.includes(item.id)\n      )\n      .filter((item) => !item.flags.ddbimporter?.ignoreItemImport)\n      .map((item) => item.id);\n\n    logger.debug(\"Removing the following character items\", toRemove);\n    if (toRemove.length > 0) {\n      await this.actor.deleteEmbeddedDocuments(\"Item\", toRemove, {\n        itemsWithSpells5e: { alsoDeleteChildSpells: false }\n      });\n    }\n    return toRemove;\n  }\n\n  async updateImage(data) {\n    logger.debug(\"Checking if image needs updating\");\n    // updating the image?\n    let imagePath = this.actor.img;\n    const decorations = data.character.decorations;\n    const userHasPermission = !(game.settings.get(\"ddb-importer\", \"restrict-to-trusted\") && !game.user.isTrusted);\n    if (\n      userHasPermission\n      && decorations?.avatarUrl\n      && decorations.avatarUrl !== \"\"\n      && (!imagePath || imagePath.includes(\"mystery-man\") || this.settings.updatePolicyImage)\n    ) {\n      this.showCurrentTask(\"Uploading avatar image\");\n      const filename = utils.referenceNameString(`${data.character.id}-${data.character.name}`);\n\n      const uploadDirectory = game.settings.get(\"ddb-importer\", \"image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n      imagePath = await FileHelper.uploadRemoteImage(decorations.avatarUrl, uploadDirectory, filename);\n      this.result.character.img = imagePath;\n      if (decorations?.frameAvatarUrl && decorations.frameAvatarUrl !== \"\") {\n        const framePath = await FileHelper.uploadRemoteImage(decorations.frameAvatarUrl, uploadDirectory, `frame-${filename}`);\n        this.result.character.flags.ddbimporter[\"framePath\"] = framePath;\n      }\n    } else {\n      this.result.character.img = this.actor.img;\n    }\n\n    if (this.actorOriginal.prototypeToken.texture.src.includes(\"mystery-man\")) {\n      setProperty(this.result.character, \"prototypeToken.texture.src\", this.result.character.img);\n    } else if (hasProperty(this.actorOriginal, \"prototypeToken.texture.src\")) {\n      setProperty(this.result.character, \"prototypeToken.texture.src\", this.actorOriginal.prototypeToken.texture.src);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  async getData() {\n    // loads settings for actor\n    const importSettings = MuncherSettings.getCharacterImportSettings();\n\n    const characterId = this.actor.flags?.ddbimporter?.dndbeyond?.characterId;\n    const syncEnabled = characterId && importSettings.tiers.all;\n\n    const trustedUsersOnly = game.settings.get(\"ddb-importer\", \"restrict-to-trusted\");\n    const allowAllSync = game.settings.get(\"ddb-importer\", \"allow-all-sync\");\n    const syncOnly = trustedUsersOnly && allowAllSync && !game.user.isTrusted;\n\n    const localCobalt = isLocalCobalt(this.actor.id);\n    const cobaltCookie = getCobalt(this.actor.id);\n    const cobaltSet = localCobalt && cobaltCookie && cobaltCookie != \"\";\n    const itemCompendium = await CompendiumHelper.getCompendiumType(\"item\", false);\n\n    const dynamicSync = game.settings.get(\"ddb-importer\", \"dynamic-sync\");\n    const updateUser = game.settings.get(\"ddb-importer\", \"dynamic-sync-user\");\n    const gmSyncUser = game.user.isGM && game.user.id == updateUser;\n    const dynamicUpdateAllowed = dynamicSync && gmSyncUser && importSettings.tiers.experimentalMid;\n    const dynamicUpdateStatus = this.actor.flags?.ddbimporter?.activeUpdate;\n    const resourceSelection\n      = !hasProperty(this.actor, \"flags.ddbimporter.resources.ask\")\n      || getProperty(this.actor, \"flags.ddbimporter.resources.ask\") === true;\n\n    const itemsMunched = syncEnabled && itemCompendium ? (await itemCompendium.index.size) !== 0 : false;\n\n    const actorSettings = {\n      actor: this.actor,\n      localCobalt: localCobalt,\n      cobaltSet: cobaltSet,\n      syncEnabled: syncEnabled && itemsMunched,\n      importAllowed: !syncOnly,\n      itemsMunched: itemsMunched,\n      dynamicUpdateAllowed,\n      dynamicUpdateStatus,\n      resourceSelection,\n    };\n\n    return mergeObject(importSettings, actorSettings);\n  }\n\n  /* -------------------------------------------- */\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    // watch the change of the import-policy-selector checkboxes\n    $(html)\n      .find(\n        [\n          '.import-policy input[type=\"checkbox\"]',\n          '.advanced-import-config input[type=\"checkbox\"]',\n          '.effect-policy input[type=\"checkbox\"]',\n          '.effect-import-config input[type=\"checkbox\"]',\n          '.extras-import-config input[type=\"checkbox\"]',\n          '.import-config input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        this.html = html;\n        MuncherSettings.updateActorSettings(html, event);\n      });\n\n    $(html)\n      .find(\"#default-effects\")\n      .on(\"click\", async (event) => {\n        event.preventDefault();\n        MuncherSettings.setRecommendedCharacterActiveEffectSettings(html);\n      });\n\n    $(html)\n      .find(['.resource-selection input[type=\"checkbox\"]'].join(\",\"))\n      .on(\"change\", async (event) => {\n        const updateData = { flags: { ddbimporter: { resources: { ask: event.currentTarget.checked } } } };\n        await this.actor.update(updateData);\n      });\n\n    $(html)\n      .find('.sync-policy input[type=\"checkbox\"]')\n      .on(\"change\", (event) => {\n        game.settings.set(\n          \"ddb-importer\",\n          \"sync-policy-\" + event.currentTarget.dataset.section,\n          event.currentTarget.checked\n        );\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-dynamic-update\")\n      .on(\"change\", async (event) => {\n        const activeUpdateData = { flags: { ddbimporter: { activeUpdate: event.currentTarget.checked } } };\n        await this.actor.update(activeUpdateData);\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-import-start\")\n      .on(\"click\", async (event) => {\n        // retrieve the character data from the proxy\n        event.preventDefault();\n        this.html = html;\n\n        try {\n          $(html).find(\"#dndbeyond-character-import-start\").prop(\"disabled\", true);\n          this.showCurrentTask(\"Getting Character data\");\n          const characterId = this.actor.flags.ddbimporter.dndbeyond.characterId;\n          const ddbCharacterOptions = {\n            currentActor: this.actor,\n            characterId,\n            resourceSelection: true,\n            enableCompanions: true,\n          };\n          const getOptions = {\n            syncId: null,\n            localCobaltPostFix: this.actor.id,\n          };\n          this.ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n          await this.ddbCharacter.getCharacterData(getOptions);\n          logger.debug(\"import.js getCharacterData result\", this.ddbCharacter.source);\n          if (game.settings.get(\"ddb-importer\", \"debug-json\")) {\n            FileHelper.download(JSON.stringify(this.ddbCharacter.source), `${characterId}.json`, \"application/json\");\n          }\n          if (this.ddbCharacter.source?.success) {\n            // begin parsing the character data\n            await this.processCharacterData();\n            this.showCurrentTask(\"Loading Character data\", \"Done.\", false);\n            logger.debug(\"Character Load complete\", { ddbCharacter: this.ddbCharacter, result: this.result, actor: this.actor, actorOriginal: this.actorOriginal });\n            this.close();\n          } else {\n            this.showCurrentTask(this.ddbCharacter.source.message, null, true);\n            return false;\n          }\n        } catch (error) {\n          switch (error.message) {\n            case \"ImportFailure\":\n              logger.error(\"Failure\", { ddbCharacter: this.ddbCharacter, result: this.result });\n              break;\n            case \"Forbidden\":\n              this.showCurrentTask(\"Error retrieving Character: \" + error, error, true);\n              break;\n            default:\n              logger.error(error);\n              logger.error(error.stack);\n              this.showCurrentTask(\"Error processing Character: \" + error, error, true);\n              logger.error(\"Failure\", { ddbCharacter: this.ddbCharacter, result: this.result });\n              break;\n          }\n          return false;\n        }\n\n        $(html).find(\"#dndbeyond-character-import-start\").prop(\"disabled\", false);\n        return true;\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-update\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          $(html).find(\"#dndbeyond-character-update\").prop(\"disabled\", true);\n          await updateDDBCharacter(this.actor).then((result) => {\n            const updateNotes = result\n              .flat()\n              .filter((r) => r !== undefined)\n              .map((r) => r.message)\n              .join(\" \");\n            logger.debug(updateNotes);\n            this.showCurrentTask(\"Update complete\", updateNotes);\n            $(html).find(\"#dndbeyond-character-update\").prop(\"disabled\", false);\n          });\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error updating character\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#delete-local-cobalt\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          deleteLocalCobalt(this.actor.id);\n          $(html).find(\"#delete-local-cobalt\").prop(\"disabled\", true);\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error deleting local cookie\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#set-local-cobalt\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          new DDBCookie({}, this.actor, true).render(true);\n          $(html).find(\"#delete-local-cobalt\").prop(\"disabled\", false);\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error updating character\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-extras-start\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          $(html).find(\"#dndbeyond-character-extras-start\").prop(\"disabled\", true);\n          this.showCurrentTask(\"Fetching character data\");\n          const characterId = this.actor.flags.ddbimporter.dndbeyond.characterId;\n          const ddbCharacterOptions = {\n            currentActor: this.actor,\n            ddb: null,\n            characterId,\n            resourceSelection: false\n          };\n          const getOptions = {\n            syncId: null,\n            localCobaltPostFix: this.actor.id,\n          };\n          this.ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n          const characterData = await this.ddbCharacter.getCharacterData(getOptions);\n          logger.debug(\"import.js getCharacterData result\", characterData);\n          const debugJson = game.settings.get(\"ddb-importer\", \"debug-json\");\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(characterData), `${characterId}.json`, \"application/json\");\n          }\n          if (characterData.success) {\n            await generateCharacterExtras(html, this.ddbCharacter, this.actor);\n            this.showCurrentTask(\"Loading Extras\", \"Done.\", false);\n            $(html).find(\"#dndbeyond-character-extras-start\").prop(\"disabled\", true);\n            this.close();\n          } else {\n            this.showCurrentTask(characterData.message, null, true);\n            return false;\n          }\n        } catch (error) {\n          switch (error.message) {\n            case \"ImportFailure\":\n              logger.error(\"Failure\");\n              break;\n            case \"Forbidden\":\n              this.showCurrentTask(\"Error retrieving Character: \" + error, error, true);\n              break;\n            default:\n              logger.error(error);\n              logger.error(error.stack);\n              this.showCurrentTask(\"Error processing Character: \" + error, error, true);\n              break;\n          }\n          return false;\n        }\n        return true;\n      });\n\n    $(html)\n      .find(\"input[name=dndbeyond-url]\")\n      .on(\"input\", async (event) => {\n        this.html = html;\n        let URL = event.target.value;\n        const characterId = DDBCharacter.getCharacterId(URL);\n\n        if (characterId) {\n          $(html)\n            .find(\".dndbeyond-url-status i\")\n            .replaceWith('<i class=\"fas fa-check-circle\" style=\"color: green\"></i>');\n          $(html).find(\"span.dndbeyond-character-id\").text(characterId);\n          $(html).find(\"#dndbeyond-character-import-start\").prop(\"disabled\", false);\n          $(html).find(\"#open-dndbeyond-url\").prop(\"disabled\", false);\n\n          this.showCurrentTask(\"Saving reference\");\n          await this.actor.update({\n            \"flags.ddbimporter.dndbeyond\": {\n              url: URL,\n              characterId,\n            },\n          });\n          this.showCurrentTask(\"Status\");\n        } else {\n          this.showCurrentTask(\"URL format incorrect\", \"That seems not to be the URL we expected...\", true);\n          $(html)\n            .find(\".dndbeyond-url-status i\")\n            .replaceWith('<i class=\"fas fa-exclamation-triangle\" style=\"color:red\"></i>');\n        }\n      });\n\n    $(html)\n      .find(\"#open-dndbeyond-url\")\n      .on(\"click\", () => {\n        this.html = html;\n        try {\n          const characterUrl = this.actor.flags.ddbimporter.dndbeyond.url;\n          DDBCharacterManager.renderPopup(\"json\", characterUrl);\n        } catch (error) {\n          this.showCurrentTask(\"Error opening JSON URL\", error, true);\n        }\n      });\n  }\n\n  async enrichCharacterItems(items) {\n    const useInbuiltIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-inbuilt-icons\");\n    const useSRDCompendiumItems = game.settings.get(\"ddb-importer\", \"character-update-policy-use-srd\");\n    const useSRDCompendiumIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-srd-icons\");\n    const ddbSpellIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-spell-icons\");\n    const ddbItemIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-item-icons\");\n    const ddbGenericItemIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-generic-item-icons\");\n    const daeSRDInstalled = game.modules.get(\"Dynamic-Effects-SRD\")?.active;\n    const daeMidiInstalled = game.modules.get(\"midi-srd\")?.active;\n    const daeInstalled = game.modules.get(\"dae\")?.active;\n\n    // if we still have items to add, add them\n    if (items.length > 0) {\n      this.showCurrentTask(\"Copying existing data flags\");\n      await this.copySupportedCharacterItemFlags(items);\n\n      if (ddbItemIcons) {\n        this.showCurrentTask(\"Fetching DDB Inventory Images\");\n        items = await getDDBEquipmentIcons(items, true);\n      }\n\n      if (useInbuiltIcons) {\n        this.showCurrentTask(\"Adding SRD Icons\");\n        items = await copyInbuiltIcons(items);\n      }\n\n      if (useSRDCompendiumIcons && !useSRDCompendiumItems) {\n        this.showCurrentTask(\"Adding SRD Icons\");\n        items = await copySRDIcons(items);\n      }\n\n      if (ddbSpellIcons) {\n        this.showCurrentTask(\"Fetching DDB Spell School Images\");\n        items = await getDDBSpellSchoolIcons(items, true);\n      }\n\n      if (ddbGenericItemIcons) {\n        this.showCurrentTask(\"Fetching DDB Generic Item Images\");\n        items = await getDDBGenericItemIcons(items, true);\n      }\n\n      if (this.settings.activeEffectCopy) {\n        this.showCurrentTask(\"Copying Item Active Effects\");\n        items = await this.copyCharacterItemEffects(items);\n      }\n\n      if (this.settings.daeEffectCopy && daeInstalled && (daeSRDInstalled || daeMidiInstalled)) {\n        this.showCurrentTask(\"Importing DAE Effects\");\n        items = await addItemsDAESRD(items);\n      }\n\n      if (daeInstalled && (this.settings.addItemEffects || this.settings.addCharacterEffects)) {\n        items = await addItemEffectIcons(items);\n      }\n\n      items = await retainExistingIcons(items);\n    }\n\n    items = items.map((item) => {\n      if (!item.effects) item.effects = [];\n      return item;\n    });\n\n    return Promise.all(items);\n  }\n\n  async createCharacterItems(items, keepIds) {\n    const options = duplicate(SETTINGS.DISABLE_FOUNDRY_UPGRADE);\n    if (keepIds) options[\"keepId\"] = true;\n\n    // we have to break these out into class and non-class because of\n    // https://gitlab.com/foundrynet/foundryvtt/-/issues/5312\n    const klassItems = items.filter((item) => [\"class\", \"subclass\"].includes(item.type));\n    const nonKlassItems = items.filter((item) => ![\"class\", \"subclass\"].includes(item.type));\n\n    if (klassItems.length > 0) {\n      logger.debug(`Adding the following class items, keep Ids? ${keepIds}`, { options, items: duplicate(klassItems) });\n      await this.actor.createEmbeddedDocuments(\"Item\", klassItems, options);\n    }\n    if (nonKlassItems.length > 0) {\n      logger.debug(`Adding the following non-class items, keep Ids? ${keepIds}`, { options, items: duplicate(nonKlassItems) });\n      await this.actor.createEmbeddedDocuments(\"Item\", nonKlassItems, options);\n    }\n  }\n\n  async importCharacterItems(items, keepIds = false) {\n    if (items.length > 0) {\n      this.showCurrentTask(\"Adding items to character\");\n\n      const newItems = items.filter((i) => !i._id || i._id === null || i._id === undefined);\n      const updateItems = items.filter((i) => i._id && i._id !== null && i._id !== undefined);\n\n      await this.createCharacterItems(newItems, false);\n      await this.createCharacterItems(updateItems, keepIds);\n    }\n  }\n\n  async keepNonDDBItems(ddbItems) {\n    const lastImportId = getProperty(this.actorOriginal, \"flags.ddbimporter.importId\");\n    if (this.settings.ignoreNonDDBItems) {\n      const items = this.actor.getEmbeddedCollection(\"Item\");\n      await items.forEach((item) => {\n        const ddbMatchedItem = ddbItems.some((ddbItem) =>\n          item.name === ddbItem.name\n          && item.type === ddbItem.type\n          && item.flags?.ddbimporter?.id === ddbItem.flags?.ddbimporter?.id\n        );\n        if (!ddbMatchedItem) {\n          // if item not replaced by compendium swap or\n          if (item.flags?.ddbimporter?.importId !== lastImportId) {\n            this.nonMatchedItemIds.push(item.id);\n          }\n        }\n      });\n    }\n  }\n\n  // checks for existing items, and depending on options will keep or replace with imported item\n  async mergeExistingItems(items) {\n    if (this.actorOriginal.flags.ddbimporter) {\n      const ownedItems = this.actor.getEmbeddedCollection(\"Item\");\n\n      let nonMatchedItems = [];\n      let matchedItems = [];\n\n      await items.forEach((item) => {\n        let ddbMatchedItem = ownedItems.find((owned) => {\n          const simpleMatch\n            = item.name === owned.name\n            && item.type === owned.type\n            && item.flags?.ddbimporter?.id === owned.flags?.ddbimporter?.id;\n          const isChoice\n            = hasProperty(item, \"flags.ddbimporter.dndbeyond.choice.choiceId\")\n            && hasProperty(owned, \"flags.ddbimporter.dndbeyond.choice.choiceId\");\n          const choiceMatch = isChoice\n            ? item.flags.ddbimporter.dndbeyond.choice.choiceId\n              === owned.flags.ddbimporter.dndbeyond.choice.choiceId\n            : true;\n          const overrideDetails = getProperty(owned, \"flags.ddbimporter.overrideItem\");\n          const overrideMatch\n            = overrideDetails\n            && item.name === overrideDetails.name\n            && item.type === overrideDetails.type\n            && item.flags?.ddbimporter?.id === overrideDetails.ddbId;\n\n          return (simpleMatch && choiceMatch) || overrideMatch;\n        });\n\n        if (ddbMatchedItem) {\n          if (hasProperty(ddbMatchedItem, \"flags.ddbimporter.overrideId\")) {\n            setProperty(item, \"flags.ddbimporter.overrideId\", ddbMatchedItem.flags.ddbimporter.overrideId);\n            if ((hasProperty(ddbMatchedItem, \"flags.ddbimporter.overrideItem\"))) {\n              setProperty(item, \"flags.ddbimporter.overrideItem\", ddbMatchedItem.flags.ddbimporter.overrideItem);\n            }\n          }\n          if (!ddbMatchedItem.flags.ddbimporter?.ignoreItemImport) {\n            item[\"_id\"] = ddbMatchedItem[\"id\"];\n            if (ddbMatchedItem.flags.ddbimporter?.ignoreIcon) {\n              logger.debug(`Retaining icons for ${item.name}`);\n              item.flags.ddbimporter.matchedImg = ddbMatchedItem.img;\n              item.flags.ddbimporter.ignoreIcon = true;\n            }\n            if (getProperty(ddbMatchedItem, \"flags.ddbimporter.retainResourceConsumption\")) {\n              logger.debug(`Retaining resources for ${item.name}`);\n              item.system.consume = deepClone(ddbMatchedItem.system.consume);\n              item.flags.ddbimporter.retainResourceConsumption = true;\n              if (hasProperty(ddbMatchedItem, \"flags.link-item-resource-5e\")) {\n                setProperty(item, \"flags.link-item-resource-5e\", ddbMatchedItem.flags[\"link-item-resource-5e\"]);\n              }\n            }\n\n            matchedItems.push(item);\n          }\n        } else {\n          nonMatchedItems.push(item);\n        }\n      });\n\n      logger.debug(\"Finished retaining items\");\n      return nonMatchedItems.concat(matchedItems);\n    } else {\n      return items;\n    }\n  }\n\n  async fetchCharacterItems() {\n    const magicItemsInstalled = game.modules.get(\"magicitems\")?.active;\n    const itemsWithSpellsInstalled = game.modules.get(\"items-with-spells-5e\")?.active;\n    // items for actor\n    let items = [];\n\n    // process spells for magic items\n    if ((magicItemsInstalled || itemsWithSpellsInstalled) && Array.isArray(this.result.itemSpells)) {\n      this.showCurrentTask(\"Preparing magicitem spells\");\n      logger.debug(\"Preparing magicitem spells\");\n      await addMagicItemSpells(this.result);\n    }\n\n    logger.debug(\"Calculating items to create and update...\");\n    this.showCurrentTask(\"Calculating items to create and update...\");\n    items = this.filterItemsByUserSelection();\n\n    logger.debug(\"Checking existing items for details...\");\n    this.showCurrentTask(\"Checking existing items for details...\");\n\n    items = await this.mergeExistingItems(items);\n    await this.keepNonDDBItems(items);\n\n    logger.debug(\"Removing found items...\");\n    this.showCurrentTask(\"Clearing items for recreation...\");\n    await this.clearItemsByUserSelection();\n\n    // If there is no magicitems module fall back to importing the magic\n    // item spells as normal spells fo the character\n    if (!magicItemsInstalled && !itemsWithSpellsInstalled) {\n      logger.debug(\"No magic items module(s) found, adding spells to sheet.\");\n      items.push(\n        this.result.itemSpells.filter((item) => {\n          const active = item.flags.ddbimporter.dndbeyond && item.flags.ddbimporter.dndbeyond.active === true;\n          if (!active) logger.warn(`Missing active flag on item spell ${item.name}`);\n          return active;\n        })\n      );\n      items = items.flat();\n    }\n    logger.debug(\"Finished item fetch\");\n    return items;\n  }\n\n  async processCharacterItems(items) {\n    let compendiumItems = [];\n    let srdCompendiumItems = [];\n    let overrideCompendiumItems = [];\n    let individualCompendiumItems = [];\n\n    // First we do items that are individually marked as override\n    const individualOverrideItems = items.filter((item) => {\n      const overrideId = getProperty(item, \"flags.ddbimporter.overrideId\");\n      return overrideId !== undefined && overrideId !== \"NONE\";\n    });\n\n    if (individualOverrideItems.length > 0) {\n      const individualOverrideCompendiumItems = await getIndividualOverrideItems(individualOverrideItems);\n      individualCompendiumItems = individualOverrideCompendiumItems;\n      // remove existing items from those to be imported\n      logger.info(\"Removing matching Override compendium items\");\n      items = await DDBCharacterManager.removeItems(items, individualCompendiumItems);\n    }\n\n    /**\n     * First choice is override compendium\n     */\n    if (this.settings.useOverrideCompendiumItems) {\n      logger.info(\"Removing matching Override compendium items\");\n      const compendiumOverrideItems = await getCompendiumItems(items, \"custom\");\n      overrideCompendiumItems = compendiumOverrideItems;\n      // remove existing items from those to be imported\n      items = await DDBCharacterManager.removeItems(items, overrideCompendiumItems);\n    }\n\n    /**\n     * If SRD is selected, we prefer this\n     */\n    if (this.settings.useSRDCompendiumItems) {\n      logger.info(\"Removing compendium items\");\n      const compendiumFeatureItems = await getSRDCompendiumItems(items, \"features\");\n      const compendiumInventoryItems = await getSRDCompendiumItems(items, \"inventory\");\n      const compendiumSpellItems = await getSRDCompendiumItems(items, \"spells\");\n\n      srdCompendiumItems = compendiumItems.concat(\n        compendiumInventoryItems,\n        compendiumSpellItems,\n        compendiumFeatureItems\n      );\n      // remove existing items from those to be imported\n      items = await DDBCharacterManager.removeItems(items, srdCompendiumItems);\n    }\n\n    if (this.settings.useExistingCompendiumItems) {\n      logger.info(\"Removing compendium items\");\n      const compendiumFeatureItems = await getCompendiumItems(items, \"features\");\n      const compendiumInventoryItems = await getCompendiumItems(items, \"inventory\");\n      const compendiumSpellItems = await getCompendiumItems(items, \"spells\");\n      const compendiumClassItems = await getCompendiumItems(items, \"classes\");\n      const compendiumSubClassItems = await getCompendiumItems(items, \"subclasses\");\n      const compendiumRaceItems = await getCompendiumItems(items, \"races\");\n      const compendiumTraitsItems = await getCompendiumItems(items, \"traits\");\n      const compendiumBackgroundsItems = await getCompendiumItems(items, \"backgrounds\");\n\n      compendiumItems = compendiumItems.concat(\n        compendiumInventoryItems,\n        compendiumSpellItems,\n        compendiumFeatureItems,\n        compendiumClassItems,\n        compendiumSubClassItems,\n        compendiumRaceItems,\n        compendiumTraitsItems,\n        compendiumBackgroundsItems,\n      );\n      // remove existing items from those to be imported\n      items = await DDBCharacterManager.removeItems(items, compendiumItems);\n    }\n\n    // import remaining items to character\n    if (items.length > 0) {\n      this.showCurrentTask(\"Adding DDB generated items\");\n      logger.debug(`Adding DDB generated items...`, items);\n      items = await this.enrichCharacterItems(items);\n      await this.importCharacterItems(items, true);\n    }\n\n    // now import any compendium items that we matched\n    if (this.settings.useExistingCompendiumItems) {\n      this.showCurrentTask(\"Adding DDB compendium items\");\n      logger.info(\"Adding DDB compendium items:\", compendiumItems);\n      await this.createCharacterItems(compendiumItems, false);\n    }\n\n    if (this.settings.useSRDCompendiumItems) {\n      this.showCurrentTask(\"Adding SRD compendium items\");\n      logger.info(\"Adding SRD compendium items:\", srdCompendiumItems);\n      await this.createCharacterItems(srdCompendiumItems, false);\n    }\n\n    if (this.settings.useOverrideCompendiumItems) {\n      this.showCurrentTask(\"Adding Override compendium items\");\n      logger.info(\"Adding Override compendium items:\", overrideCompendiumItems);\n      await this.createCharacterItems(overrideCompendiumItems, false);\n    }\n\n    if (individualCompendiumItems.length > 0) {\n      this.showCurrentTask(\"Adding Individual Override compendium items\");\n      logger.info(\"Adding Individual Override compendium items:\", individualCompendiumItems);\n      await this.createCharacterItems(individualCompendiumItems, false);\n    }\n\n    logger.debug(\"Finished importing items\");\n  }\n\n  async preActiveEffects() {\n    this.effectBackup = duplicate(this.actor.effects);\n    for (const e of this.effectBackup) {\n      if (e.origin?.includes(\".Item.\")) {\n        // eslint-disable-next-line no-await-in-loop\n        const parent = await fromUuid(e.origin);\n        logger.debug(\"Effect Backup flags\", { e, parent });\n        if (parent) setProperty(e, \"flags.ddbimporter.type\", parent.type);\n      }\n    }\n    await this.actor.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n  }\n\n  async processActiveEffects() {\n    logger.debug(\"Removing active effects\");\n\n    // remove current active effects\n    const excludedItems = this.filterActorItemsByUserSelection(true);\n    const ignoredItemIds = this.actorOriginal.items\n      .filter((item) =>\n        item.effects\n        && item.effects.length > 0\n        && (item.flags.ddbimporter?.ignoreItemImport\n          || excludedItems.some((ei) => ei._id === item._id)\n          || this.nonMatchedItemIds.includes(item._id)\n        )\n      )\n      .map((item) => item._id);\n\n    const itemEffects = this.effectBackup.filter((ae) =>\n      ae.origin?.includes(\".Item.\")\n    );\n    const ignoredEffects = this.effectBackup.filter((ae) =>\n      ignoredItemIds.includes(ae.origin?.split(\".\").slice(-1)[0])\n    );\n    const coreStatusEffects = this.effectBackup.filter((ae) => {\n      const status = getProperty(ae, \"flags.core.statusId\");\n      const itemEffect = ae.origin?.includes(\".Item.\");\n      return status && String(status).trim() !== \"\" && !itemEffect;\n    });\n    // effects on the character that are not from items, or corestatuses\n    // nor added by ddb importer\n    const charEffects = this.effectBackup.filter((ae) =>\n      !ignoredItemIds.some((id) => ae._id === id)\n      && !ae.flags.ddbimporter?.characterEffect\n      && !ae.flags?.core?.statusId\n      && !ae.origin?.includes(\".Item.\")\n    );\n    // effects that are added by the ddb importer that are not item effects\n    const ddbGeneratedCharEffects = this.effectBackup.filter((ae) =>\n      !ae.origin?.includes(\".Item.\") && ae.flags.ddbimporter?.characterEffect\n    );\n\n    const spellEffects = [];\n    for (const e of itemEffects) {\n      const isOther = coreStatusEffects.some((ae) => ae._id === e._id)\n        || charEffects.some((ae) => ae._id === e._id)\n        || ddbGeneratedCharEffects.some((ae) => ae._id === e._id);\n      if (!isOther && getProperty(e, \"flags.ddbimporter.type\") === \"spell\") {\n        spellEffects.push(e);\n      }\n    }\n\n    const remainingEffects = this.effectBackup\n      .filter((e) =>\n        // remove existing active item effects\n        !itemEffects.map((ae) => ae._id).includes(e._id)\n        // clear down ddb generated character effects such as skill bonuses\n        && !ddbGeneratedCharEffects.map((ae) => ae._id).includes(e._id)\n        // ignored effects always remain\n        && !ignoredEffects.map((ae) => ae._id).includes(e._id)\n        // clear down char effects\n        && !charEffects.map((ae) => ae._id).includes(e._id)\n        // clear down status effects\n        && !coreStatusEffects.map((ae) => ae._id).includes(e._id)\n        // ignore spell effects\n        && !spellEffects.map((ae) => ae._id).includes(e._id)\n      );\n\n    logger.debug(\"Effect Removal Results\", {\n      ignoredItemIds, itemEffects, ignoredEffects, charEffects, coreStatusEffects, spellEffects,\n      ddbGeneratedCharEffects, remainingEffects, backupEffects: this.effectBackup,\n    });\n\n    // are we trying to retain existing effects?\n    if (this.settings.activeEffectCopy) {\n      // add retained character effects to result\n      const effects = ignoredEffects.concat(charEffects, coreStatusEffects, spellEffects, remainingEffects);\n      this.result.character.effects = this.result.character.effects.concat(effects);\n    } else {\n      this.result.character.effects = this.result.character.effects.concat(ignoredEffects);\n    }\n  }\n\n  fixUpCharacterEffects() {\n    let abilityOverrides = abilityOverrideEffects(this.result.character.flags.ddbimporter.dndbeyond.abilityOverrides);\n    if (abilityOverrides.changes.length > 0) {\n      this.result.character.effects = this.result.character.effects.concat(abilityOverrides);\n    }\n    this.result.character.effects = this.result.character.effects.filter((e) => e !== undefined);\n    this.result.character.effects.forEach((effect) => {\n      const origins = [\"Ability.Override\", \"AC\", `Actor.${this.actor.flags.ddbimporter.dndbeyond.characterId}`];\n      if (origins.includes(effect.origin)) {\n        effect.origin = `Actor.${this.actor.id}`;\n      }\n    });\n  }\n\n  async addImportIdToItems() {\n    const importId = this.importId;\n    function addImportId(items) {\n      return items.map((item) => {\n        setProperty(item, \"flags.ddbimporter.importId\", importId);\n        return item;\n      });\n    }\n    this.result.actions = addImportId(this.result.actions);\n    this.result.classes = addImportId(this.result.classes);\n    this.result.features = addImportId(this.result.features);\n    this.result.inventory = addImportId(this.result.inventory);\n    this.result.itemSpells = addImportId(this.result.itemSpells);\n    this.result.spells = addImportId(this.result.spells);\n  }\n\n  async resetActor() {\n    await this.actor.deleteEmbeddedDocuments(\"Item\", [], {\n      deleteAll: true,\n      itemsWithSpells5e: { alsoDeleteChildSpells: false },\n    });\n    await this.actor.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n    await this.actor.update(this.actorOriginal, { recursive: true, keepId: true });\n  }\n\n  getSettings() {\n    this.settings = {\n      updatePolicyHP: game.settings.get(\"ddb-importer\", \"character-update-policy-hp\"),\n      updatePolicyHitDie: game.settings.get(\"ddb-importer\", \"character-update-policy-hit-die\"),\n      updatePolicyCurrency: game.settings.get(\"ddb-importer\", \"character-update-policy-currency\"),\n      updatePolicyBio: game.settings.get(\"ddb-importer\", \"character-update-policy-bio\"),\n      updatePolicySpellUse: game.settings.get(\"ddb-importer\", \"character-update-policy-spell-use\"),\n      updatePolicyLanguages: game.settings.get(\"ddb-importer\", \"character-update-policy-languages\"),\n      updatePolicyImage: game.settings.get(\"ddb-importer\", \"character-update-policy-image\"),\n      activeEffectCopy: game.settings.get(\"ddb-importer\", \"character-update-policy-active-effect-copy\"),\n      daeEffectCopy: game.settings.get(\"ddb-importer\", \"character-update-policy-dae-effect-copy\"),\n      addItemEffects: game.settings.get(\"ddb-importer\", \"character-update-policy-add-item-effects\"),\n      addCharacterEffects: game.settings.get(\"ddb-importer\", \"character-update-policy-add-character-effects\"),\n      ignoreNonDDBItems: game.settings.get(\"ddb-importer\", \"character-update-policy-ignore-non-ddb-items\"),\n      useExistingCompendiumItems: game.settings.get(\"ddb-importer\", \"character-update-policy-use-existing\"),\n      useSRDCompendiumItems: game.settings.get(\"ddb-importer\", \"character-update-policy-use-srd\"),\n      useOverrideCompendiumItems: game.settings.get(\"ddb-importer\", \"character-update-policy-use-override\"),\n    };\n  }\n\n  async processCharacterData() {\n    this.getSettings();\n    this.result = duplicate(this.ddbCharacter.data);\n\n    // disable active sync\n    const activeUpdateState = this.ddbCharacter.getCurrentDynamicUpdateState();\n    await this.ddbCharacter.disableDynamicUpdates();\n\n    try {\n      await addContainerItemsToActor(this.ddbCharacter.source.ddb, this.actor);\n\n      this.importId = randomID();\n      setProperty(this.result.character, \"flags.ddbimporter.importId\", this.importId);\n      await this.addImportIdToItems();\n\n      // handle active effects\n      this.showCurrentTask(\"Calculating Active Effect Changes\");\n      this.fixUpCharacterEffects();\n      await this.preActiveEffects();\n      // we need to process the items first to find out if we are ignoring any effects\n      let items = await this.fetchCharacterItems();\n      await this.processActiveEffects();\n\n      // update image\n      await this.updateImage(this.ddbCharacter.source.ddb);\n\n      // manage updates of basic character data more intelligently\n      // revert some data if update not wanted\n      if (!this.settings.updatePolicyHP) {\n        this.result.character.system.attributes.hp = this.actorOriginal.system.attributes.hp;\n      }\n      if (!this.settings.updatePolicyHitDie) {\n        this.result.character.system.attributes.hd = this.actorOriginal.system.attributes.hd;\n        this.result.classes = this.result.classes.map((klass) => {\n          const originalKlass = this.actorOriginal.items.find(\n            (original) => original.name === klass.name && original.type === \"class\"\n          );\n          if (originalKlass) {\n            klass.system.hitDiceUsed = originalKlass.system.hitDiceUsed;\n          }\n          return klass;\n        });\n      }\n      if (!this.settings.updatePolicyCurrency) {\n        this.result.character.system.currency = this.actorOriginal.system.currency;\n      }\n      if (!this.settings.updatePolicyBio) {\n        const bioUpdates = [\"alignment\", \"appearance\", \"background\", \"biography\", \"bond\", \"flaw\", \"ideal\", \"trait\"];\n        bioUpdates.forEach((option) => {\n          this.result.character.system.details[option] = this.actorOriginal.system.details[option];\n        });\n      }\n      if (!this.settings.updatePolicySpellUse) {\n        this.result.character.system.spells = this.actorOriginal.system.spells;\n      }\n      if (!this.settings.updatePolicyLanguages) {\n        this.result.character.system.traits.languages = this.actorOriginal.system.traits.languages;\n      }\n      // if resource mode is in disable and not asking, then we use the previous resources\n      if (\n        hasProperty(this.result.character, \"flags.ddbimporter.resources.ask\")\n        && !this.result.character.flags.ddbimporter.resources.ask\n        && this.result.character.flags.ddbimporter.resources.type === \"disable\"\n      ) {\n        this.result.character.system.resources = this.actorOriginal.system.resources;\n      }\n\n      // flag as having items ids\n      this.result.character.flags.ddbimporter[\"syncItemReady\"] = true;\n      this.result.character.flags.ddbimporter[\"syncActionReady\"] = true;\n      this.result.character.flags.ddbimporter[\"activeUpdate\"] = false;\n      this.result.character.flags.ddbimporter[\"activeSyncSpells\"] = true;\n      // remove unneeded flags (used for character parsing)\n      this.result.character.flags.ddbimporter.dndbeyond[\"templateStrings\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"characterValues\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"proficiencies\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"proficienciesIncludingEffects\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"effectAbilities\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"abilityOverrides\"] = null;\n      setProperty(this.result.character.flags, \"ddb-importer.version\", CONFIG.DDBI.version);\n\n      if (this.actorOriginal.flags.dnd5e?.wildMagic === true) {\n        this.result.character.flags.dnd5e[\"wildMagic\"] = true;\n      }\n\n      // midi fixes\n      const actorOnUseMacroName = getProperty(this.result.character, \"flags.midi-qol.onUseMacroName\");\n      if (!actorOnUseMacroName || actorOnUseMacroName === \"\") {\n        setProperty(this.result.character, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]\");\n      }\n\n      // basic import\n      this.showCurrentTask(\"Updating core character information\");\n      logger.debug(\"Character data importing: \", this.result.character);\n      await this.actor.update(this.result.character);\n\n      // copy existing journal notes\n      this.copyExistingJournalNotes();\n\n      // items import\n      await this.processCharacterItems(items);\n\n      if (this.settings.activeEffectCopy) {\n        // find effects with a matching name that existed on previous actor\n        // and that have a different active state and activate them\n        const targetEffects = this.actor.effects.filter((ae) => {\n          const previousEffectDiff = this.actorOriginal.effects.find(\n            (oae) => oae.label === ae.label && oae.disabled !== ae.disabled\n          );\n          if (previousEffectDiff) return true;\n          return false;\n        });\n        const updatedEffects = targetEffects.map((ae) => {\n          return { _id: ae._id, disabled: !ae.disabled };\n        });\n        await this.actor.updateEmbeddedDocuments(\"ActiveEffect\", updatedEffects);\n      }\n\n      await this.ddbCharacter.autoLinkResources();\n      await setConditions(this.actor, this.ddbCharacter.source.ddb, this.settings.activeEffectCopy);\n      await addContainerItemsToContainers(this.ddbCharacter.source.ddb, this.actor);\n\n    } catch (error) {\n      logger.error(\"Error importing character: \", { error, ddbCharacter: this.ddbCharacter, result: this.result });\n      logger.error(error.stack);\n      this.showCurrentTask(\"Error importing character, attempting rolling back, see console (F12) for details.\", error, true);\n      await this.resetActor();\n      throw new Error(\"ImportFailure\");\n    } finally {\n      await this.ddbCharacter.updateDynamicUpdates(activeUpdateState);\n      this.actor.render();\n    }\n  }\n}\n\nexport async function importCharacter(actor, html) {\n  try {\n    const actorData = actor.toObject();\n    const characterId = actorData.flags.ddbimporter.dndbeyond.characterId;\n\n    const ddbCharacterOptions = {\n      currentActor: actor,\n      characterId,\n      resourceSelection: true\n    };\n    const getOptions = {\n      syncId: null,\n      localCobaltPostFix: actorData._id,\n    };\n    const ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n    await ddbCharacter.getCharacterData(getOptions);\n\n    logger.debug(\"import.js importCharacter getCharacterData result\", ddbCharacter.source);\n    if (game.settings.get(\"ddb-importer\", \"debug-json\")) {\n      FileHelper.download(JSON.stringify(ddbCharacter.source), `${characterId}.json`, \"application/json\");\n    }\n    if (ddbCharacter.source.success) {\n      // begin parsing the character data\n      const importer = new DDBCharacterManager(DDBCharacterManager.defaultOptions, actorData, ddbCharacter);\n      importer.html = html ? html : utils.htmlToDoc(\"\");\n      await importer.processCharacterData();\n      importer.showCurrentTask(\"Loading Character data\", \"Done.\", false);\n      logger.info(\"Loading Character data\");\n      return true;\n    } else {\n      logger.error(\"Error Loading Character data\", { message: ddbCharacter.source.message, ddbCharacter });\n      return false;\n    }\n  } catch (error) {\n    switch (error.message) {\n      case \"ImportFailure\":\n        logger.error(\"Failure\");\n        break;\n      case \"Forbidden\":\n        logger.error(\"Error retrieving Character: \", error);\n        break;\n      default:\n        logger.error(\"Error processing Character: \", error);\n        logger.error(error.stack);\n        break;\n    }\n    return false;\n  }\n}\n\nexport async function importCharacterById(characterId, html) {\n  const actor = await Actor.create({\n    name: \"New Actor\",\n    type: \"character\",\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          characterId: characterId,\n          url: `https://www.dndbeyond.com/characters/${characterId}`,\n        },\n      },\n    },\n  });\n\n  const result = await importCharacter(actor, html);\n  return result;\n}\n","\nimport logger from \"../../logger.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport { getCobalt } from \"../../lib/Secrets.js\";\nimport { getAvailableCampaigns } from \"../../lib/Settings.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBProxy from \"../../lib/DDBProxy.js\";\nimport DDBEncounterMunch from \"./DDBEncounterMunch.js\";\n\nexport default class DDBEncounters {\n\n  constructor() {\n    this.encounters = [];\n  }\n\n  static DIFFICULTY_LEVELS = [\n    { id: null, name: \"No challenge\", color: \"grey\" },\n    { id: 1, name: \"Easy\", color: \"green\" },\n    { id: 2, name: \"Medium\", color: \"brown\" },\n    { id: 3, name: \"Hard\", color: \"orange\" },\n    { id: 4, name: \"Deadly\", color: \"red\" },\n  ];\n\n  static async getEncounterData() {\n    const cobaltCookie = getCobalt();\n    const betaKey = game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    const parsingApi = DDBProxy.getProxy();\n    const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n    const body = {\n      cobalt: cobaltCookie,\n      betaKey: betaKey,\n    };\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/proxy/encounters`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            DDBEncounterMunch.munchNote(`API Failure: ${data.message}`);\n            reject(data.message);\n          }\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(data), `encounters-raw.json`, \"application/json\");\n          }\n          return data;\n        })\n        .then((data) => {\n          DDBEncounterMunch.munchNote(`Retrieved ${data.data.length} encounters, starting parse...`, true, false);\n          logger.info(`Retrieved ${data.data.length} encounters`);\n          resolve(data.data);\n        })\n        .catch((error) => reject(error));\n    });\n  }\n\n  async parseEncounters() {\n    this.encounters = await DDBEncounters.getEncounterData();\n    logger.debug(\"Fetched encounters\", this.encounters);\n    DDBEncounterMunch.munchNote(`Fetched Available DDB Encounters`);\n    DDBEncounterMunch.munchNote(\"\");\n    return this.encounters;\n  }\n\n  async filterEncounters(campaignId) {\n    const campaigns = await getAvailableCampaigns();\n    const campaignIds = campaigns.map((c) => c.id);\n    const allEncounters = this.encounters.length !== 0 ? this.encounters : await this.parseEncounters();\n\n    logger.debug(`${allEncounters.length} encounters`, allEncounters);\n    logger.debug(\"CampaignIds\", campaignIds);\n    if (!campaignId || campaignId === \"\" || !campaignIds.includes(parseInt(campaignId))) return allEncounters;\n    logger.debug(`CampaignId to find ${campaignId}`, { allEncounters, campaignId });\n    const filteredEncounters = allEncounters.filter((encounter) => encounter.campaign?.id == campaignId);\n    logger.debug(`${filteredEncounters.length} filtered encounters`, filteredEncounters);\n    return filteredEncounters;\n  }\n}\n","import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport MuncherSettings from \"../../muncher/MuncherSettings.js\";\nimport { getAvailableCampaigns } from \"../../lib/Settings.js\";\nimport AdventureMunchHelpers from \"../../muncher/adventure/AdventureMunchHelpers.js\";\nimport { importCharacterById } from \"../../lib/DDBCharacterManager.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBEncounters from \"./DDBEncounters.js\";\nimport DDBMonsterFactory from \"../../muncher/DDBMonsterFactory.js\";\n\nexport default class DDBEncounterMunch extends Application {\n\n  constructor(options = {}) {\n    super(options);\n    this.encounter = {};\n    this.img = \"\";\n    this.sceneId = \"\";\n    this.journal = undefined;\n    this.combat = undefined;\n    this.tokens = [];\n    this.folders = {};\n    this.ddbEncounters = new DDBEncounters();\n  }\n\n  static SCENE_IMG = [\n    { name: \"Bar\", img: \"modules/ddb-importer/img/encounters/bar.webp\" },\n    { name: \"Cobbles\", img: \"modules/ddb-importer/img/encounters/cobbles.webp\" },\n    { name: \"Dungeon\", img: \"modules/ddb-importer/img/encounters/dungeon.png\" },\n    { name: \"Grass\", img: \"modules/ddb-importer/img/encounters/grass.webp\" },\n    { name: \"Snow\", img: \"modules/ddb-importer/img/encounters/snow.webp\" },\n    { name: \"Stone\", img: \"modules/ddb-importer/img/encounters/stone.webp\" },\n    { name: \"Void\", img: \"modules/ddb-importer/img/encounters/void.webp\" },\n  ];\n\n  /**\n   * Display information when Munching\n   * @param {*} note\n   * @param {*} nameField\n   * @param {*} monsterNote\n   */\n  static munchNote(note, nameField = false, monsterNote = false) {\n    if (nameField) {\n      $(\"#munching-task-name\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else if (monsterNote) {\n      $(\"#munching-task-monster\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else {\n      $(\"#munching-task-notes\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    }\n  }\n\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.baseApplication = \"DDBEncounterMuncher\";\n    options.id = \"ddb-importer-encounters\";\n    options.template = \"modules/ddb-importer/handlebars/encounters.hbs\";\n    options.resizable = false;\n    options.height = \"auto\";\n    options.width = 800;\n    options.title = \"MrPrimate's DDB Encounter Muncher\";\n    options.classes = [\"ddb-muncher\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"div\", initial: \"settings\" }];\n    return options;\n  }\n\n  async parseEncounter(id) {\n    logger.debug(`Looking for Encounter \"${id}\"`);\n    if (this.ddbEncounters.encounters.length === 0) return this.encounter;\n    const monsterPack = CompendiumHelper.getCompendiumType(\"monster\", false);\n    await monsterPack.getIndex({ fields: [\"name\", \"flags.ddbimporter.id\"] });\n\n    const encounter = this.ddbEncounters.encounters.find((e) => e.id == id.trim());\n\n    let goodMonsterIds = [];\n    let missingMonsterIds = [];\n    logger.debug(\"Parsing encounter\", encounter);\n    encounter.monsters.forEach((monster) => {\n      const id = monster.id;\n      const monsterInPack = monsterPack.index.find((f) => f.flags?.ddbimporter?.id == id);\n      if (monsterInPack) {\n        goodMonsterIds.push({ ddbId: id, name: monsterInPack.name, id: monsterInPack._id, quantity: monster.quantity });\n      } else {\n        missingMonsterIds.push({ ddbId: id, quantity: monster.quantity });\n      }\n    });\n\n    let goodCharacterData = [];\n    let missingCharacterData = [];\n    encounter.players\n      .filter((character) => !character.hidden)\n      .forEach((character) => {\n        const characterInGame = game.actors.find(\n          (actor) =>\n            actor.flags?.ddbimporter?.dndbeyond?.characterId\n            && actor.flags.ddbimporter.dndbeyond.characterId == character.id\n        );\n        if (characterInGame) {\n          goodCharacterData.push({ id: characterInGame.id, name: characterInGame.name, ddbId: character.id });\n        } else {\n          missingCharacterData.push({ ddbId: character.id, name: character.name });\n        }\n      });\n\n    const difficulty = DDBEncounters.DIFFICULTY_LEVELS.find((level) => level.id == encounter.difficulty);\n\n    this.encounter = {\n      id,\n      name: encounter.name,\n      inProgress: encounter.inProgress,\n      turnNum: encounter.turnNum,\n      roundNum: encounter.roundNum,\n      difficulty,\n      description: encounter.description,\n      rewards: encounter.rewards,\n      summary: encounter.flavorText,\n      campaign: encounter.campaign,\n      monsters: encounter.monsters,\n      characters: encounter.players,\n      goodMonsterIds,\n      missingMonsterIds,\n      goodCharacterData,\n      missingCharacterData,\n      missingMonsters: missingMonsterIds.length !== 0,\n      missingCharacters: missingCharacterData.length !== 0,\n    };\n\n    this.folders = {};\n\n    logger.debug(\"Current encounter\", this.encounter);\n\n    return this.encounter;\n  }\n\n  resetEncounter(html) {\n    const nameHtml = html.find(\"#ddb-encounter-name\");\n    const summaryHtml = html.find(\"#ddb-encounter-summary\");\n    const charactersHtml = html.find(\"#ddb-encounter-characters\");\n    const monstersHtml = html.find(\"#ddb-encounter-monsters\");\n    const difficultyHtml = html.find(\"#ddb-encounter-difficulty\");\n    const rewardsHtml = html.find(\"#ddb-encounter-rewards\");\n    const progressHtml = html.find(\"#ddb-encounter-progress\");\n\n    nameHtml[0].innerHTML = `<p id=\"ddb-encounter-name\"><i class='fas fa-question'></i> <b>Encounter:</b></p>`;\n    summaryHtml[0].innerHTML = `<p id=\"ddb-encounter-summary\"><i class='fas fa-question'></i> <b>Summary:</b></p>`;\n    charactersHtml[0].innerHTML = `<p id=\"ddb-encounter-characters\"><i class='fas fa-question'></i> <b>Characters:</b></p>`;\n    monstersHtml[0].innerHTML = `<p id=\"ddb-encounter-monsters\"><i class='fas fa-question'></i> <b>Monsters:</b></p>`;\n    difficultyHtml[0].innerHTML = `<p id=\"ddb-encounter-difficulty\"><i class='fas fa-question'></i> <b>Difficulty:</b></p>`;\n    rewardsHtml[0].innerHTML = `<p id=\"ddb-encounter-rewards\"><i class='fas fa-question'></i> <b>Rewards:</b></p>`;\n    progressHtml[0].innerHTML = `<p id=\"ddb-encounter-progress\"><i class='fas fa-question'></i> <b>In Progress:</b></p>`;\n\n    $(\"#ddb-importer-encounters\").css(\"height\", \"auto\");\n    $(\"#encounter-button\").prop(\"disabled\", true);\n    $(\"#encounter-button\").prop(\"innerText\", \"Import Encounter\");\n    $(\"#encounter-import-policy-use-ddb-save\").prop(\"disabled\", true);\n    this.encounter = {};\n    this.journal = undefined;\n    this.combat = undefined;\n    this.tokens = [];\n  }\n\n  async importMonsters() {\n    const importMonsters = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-monsters\");\n\n    if (importMonsters && this.encounter.missingMonsters && this.encounter.missingMonsterIds.length > 0) {\n      logger.debug(\"Importing missing monsters from DDB\");\n      const monsterFactory = new DDBMonsterFactory({ munchNote: DDBEncounterMunch.munchNote });\n      await monsterFactory.processIntoCompendium(this.encounter.missingMonsterIds.map((monster) => monster.ddbId));\n      logger.debug(\"Finised Importing missing monsters from DDB\");\n    }\n\n    const monsterPack = CompendiumHelper.getCompendiumType(\"monster\", false);\n    await monsterPack.getIndex({ fields: [\"name\", \"flags.ddbimporter.id\"] });\n    const compendiumName = CompendiumHelper.getCompendiumLabel(\"monster\");\n\n    let monstersToAddToWorld = [];\n    this.encounter.monsterData = [];\n    this.encounter.worldMonsters = [];\n    let journalMonsterInfo = new Map();\n    this.encounter.monsters.forEach((monster) => {\n      const id = monster.id;\n      const monsterInPack = monsterPack.index.find((f) => f.flags?.ddbimporter?.id == id);\n      if (monsterInPack) {\n        let monsterData = {\n          ddbId: id,\n          name: monsterInPack.name,\n          id: monsterInPack._id,\n          quantity: monster.quantity,\n          journalLink: `@Compendium[${compendiumName}.${monsterInPack._id}]{${monsterInPack.name}}`,\n        };\n        if (journalMonsterInfo.has(monsterData.ddbId)) {\n          monsterData = journalMonsterInfo.get(monsterData.ddbId);\n          monsterData.quantity += monster.quantity;\n        }\n        journalMonsterInfo.set(monsterData.ddbId, monsterData);\n\n        for (let i = 0; i < monster.quantity; i++) {\n          let addData = deepClone(monsterData);\n          addData.quantity = 1;\n          addData.uniqueId = monster.uniqueId;\n          addData.initiative = monster.initiative;\n          addData.currentHitPoints = monster.currentHitPoints;\n          addData.maximumHitPoints = monster.maximumHitPoints;\n          addData.temporaryHitPoints = monster.temporaryHitPoints;\n          addData.ddbName = monster.name ? monster.name : monsterInPack.name;\n          monstersToAddToWorld.push(addData);\n        }\n      }\n    });\n    this.encounter.monsterData = Object.values(journalMonsterInfo);\n\n    const encounterMonsterFolder = await utils.getFolder(\n      \"npc\",\n      this.encounter.name,\n      \"D&D Beyond Encounters\",\n      \"#6f0006\",\n      \"#98020a\",\n      false\n    );\n\n    logger.debug(\"Trying to import monsters from compendium\", monstersToAddToWorld);\n    await AdventureMunchHelpers.asyncForEach(monstersToAddToWorld, async (actor) => {\n      let worldActor = game.actors.find(\n        (a) => a.folder?.id == encounterMonsterFolder.id && a.flags?.ddbimporter?.id == actor.ddbId\n      );\n      if (!worldActor) {\n        logger.info(\n          `Importing monster ${actor.name} with DDB ID ${actor.ddbId} from ${monsterPack.metadata.name} with id ${actor.id}`\n        );\n        try {\n          worldActor = await game.actors.importFromCompendium(monsterPack, actor.id, {\n            folder: encounterMonsterFolder.id,\n          });\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to import actor ${actor.name} with id ${actor.id} from DDB Compendium`);\n          logger.debug(\n            `Failed on: game.actors.importFromCompendium(monsterCompendium, \"${actor.id}\", { folder: \"${encounterMonsterFolder.id}\" });`\n          );\n        }\n      }\n      this.encounter.worldMonsters.push(mergeObject(actor, { id: worldActor.id }));\n    });\n\n    return new Promise((resolve) => {\n      resolve(this.encounter.worldMonsters);\n    });\n  }\n\n  async importCharacters(html) {\n    const importCharacters = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-characters\");\n    if (importCharacters && this.encounter.missingCharacters) {\n      await AdventureMunchHelpers.asyncForEach(this.encounter.missingCharacterData, async (character) => {\n        await importCharacterById(character.ddbId, html);\n      });\n    }\n  }\n\n  async createJournalEntry() {\n    logger.debug(`Creating journal entry`);\n    const journal = {\n      name: this.encounter.name,\n      flags: {\n        ddbimporter: {\n          encounterId: this.encounter.id,\n        },\n      },\n    };\n\n    const importJournal = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-journal\");\n    if (importJournal) {\n      const journalFolder = await utils.getFolder(\n        \"journal\",\n        this.encounter.name,\n        \"D&D Beyond Encounters\",\n        \"#6f0006\",\n        \"#98020a\",\n        false\n      );\n      journal.folder = journalFolder.id;\n      journal.content = `<h1>${this.encounter.name}</h1>`;\n      if (this.encounter.summary && this.encounter.summary != \"\") {\n        journal.content += `<h2>Summary</h2>${this.encounter.summary}`;\n      }\n      if (this.encounter.monsterData && this.encounter.monsterData.length > 0) {\n        journal.content += `<h2>Monsters</h2><ul>`;\n        this.encounter.monsterData.forEach((monster) => {\n          journal.content += `<li><p>${monster.journalLink} x${monster.quantity}</p></li>`;\n        });\n        journal.content += `</ul>`;\n      }\n      if (this.encounter.difficulty && this.encounter.difficulty != \"\") {\n        journal.content += `<h2>Difficulty: <span style=\"color: ${this.encounter.difficulty.color}\">${this.encounter.difficulty.name}</span></h3>`;\n      }\n      if (this.encounter.description && this.encounter.description != \"\") {\n        journal.content += `<h2>Description</h2>${this.encounter.description}`;\n      }\n      if (this.encounter.rewards && this.encounter.rewards != \"\") {\n        journal.content += `<h2>Rewards</h2>${this.encounter.rewards}`;\n      }\n\n      let worldJournal = game.journal.find(\n        (a) => a.folder == journalFolder.id && a.flags?.ddbimporter?.encounterId == this.encounter.id\n      );\n      if (!worldJournal) {\n        logger.info(`Importing journal ${journal.name}`);\n        try {\n          worldJournal = await JournalEntry.create(journal);\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to create journal ${journal.name}`);\n        }\n      } else {\n        logger.info(`Updating journal ${journal.name}`);\n        journal._id = worldJournal.id;\n        await worldJournal.update(journal);\n      }\n      this.journal = worldJournal;\n    }\n\n    return new Promise((resolve) => {\n      resolve(journal);\n    });\n  }\n\n\n  async createNewScene() {\n    this.folders[\"scene\"] = await utils.getFolder(\n      \"scene\",\n      this.encounter.name,\n      \"D&D Beyond Encounters\",\n      \"#6f0006\",\n      \"#98020a\",\n      false\n    );\n\n    let sceneData = {\n      name: this.encounter.name,\n      flags: {\n        ddbimporter: {\n          encounterId: this.encounter.id,\n          encounters: true,\n        },\n      },\n      width: 1000,\n      height: 1000,\n      grid: {\n        type: 1,\n        size: 100,\n        distance: 5,\n        units: \"ft\",\n      },\n      padding: 0.25,\n      initial: {\n        x: 500,\n        y: 500,\n        scale: 0.57,\n      },\n      img: this.img,\n      tokenVision: false,\n      fogExploration: false,\n      folder: this.folders[\"scene\"].id,\n    };\n\n    return sceneData;\n\n  }\n\n  async createScene() {\n    const importDDBIScene = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\");\n    const useExistingScene = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\");\n\n    if (!importDDBIScene && !useExistingScene) return undefined;\n\n    let sceneData;\n    let worldScene;\n\n    if (importDDBIScene) {\n      logger.debug(`Creating scene for encounter \"${this.encounter.name}\"\"`);\n      sceneData = await this.createNewScene();\n    } else if (useExistingScene) {\n      worldScene = game.scenes.find((s) => s.id == this.sceneId);\n      if (worldScene) {\n        sceneData = worldScene.toObject();\n        logger.debug(`Using existing scene \"${worldScene.name}\" for encounter \"${this.encounter.name}\"\"`, { worldScene, sceneData });\n      } else {\n        logger.warn(`Unable to find scene ${this.sceneId}, creating a new scene `);\n        throw new Error(`Unable to find scene ${this.sceneId}, creating a new scene `);\n      }\n      this.scene = worldScene;\n    }\n\n    if (sceneData) {\n      let tokenData = [];\n      const useDDBSave\n        = this.encounter.inProgress && game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-use-ddb-save\");\n      const xSquares = sceneData.width / sceneData.grid.size;\n      const ySquares = sceneData.height / sceneData.grid.size;\n      const midSquareOffset = sceneData.grid.size / 2;\n      const widthPaddingOffset = sceneData.width * sceneData.padding;\n      const heightPaddingOffset = sceneData.height * sceneData.padding;\n      const xPCOffset = sceneData.grid.size * (xSquares - 1);\n      const xStartPixelMonster = widthPaddingOffset + midSquareOffset;\n      const xStartPixelPC = xStartPixelMonster + xPCOffset;\n      const yStartPixel = heightPaddingOffset + midSquareOffset;\n      let characterCount = 0;\n      this.encounter.characters\n        .filter((character) => !character.hidden)\n        .forEach(async (character) => {\n          logger.info(`Generating token ${character.name} for ${this.encounter.name}`);\n          const characterInGame = game.actors.find(\n            (actor) =>\n              actor.flags?.ddbimporter?.dndbeyond?.characterId\n              && actor.flags.ddbimporter.dndbeyond.characterId == character.id\n          );\n          if (characterInGame) {\n            const onScene = useExistingScene && worldScene.tokens\n              .some((t) => t.actor.flags?.ddbimporter?.id == character.id && t.actor.type == \"character\");\n\n            if (!onScene) {\n              const linkedToken = duplicate(await characterInGame.getTokenDocument());\n              if (useDDBSave) {\n                setProperty(linkedToken, \"flags.ddbimporter.dndbeyond.initiative\", character.initiative);\n              }\n              setProperty(linkedToken, \"actorData.flags.ddbimporter.encounters\", true);\n              setProperty(linkedToken, \"actorData.flags.ddbimporter.encounterId\", this.encounter.id);\n              linkedToken.x = xStartPixelPC;\n              const yOffsetChange = characterCount * sceneData.grid.size;\n              linkedToken.y = yStartPixel + yOffsetChange;\n              tokenData.push(linkedToken);\n              characterCount++;\n            }\n          }\n        });\n\n      let monsterDepth = 0;\n      let monsterRows = 0;\n      let rowMonsterWidth = 1;\n      for (const worldMonster of this.encounter.worldMonsters) {\n        logger.info(`Generating token ${worldMonster.ddbName} (${worldMonster.name}) for ${this.encounter.name}`);\n        const monster = game.actors.get(worldMonster.id);\n        // eslint-disable-next-line no-await-in-loop\n        const linkedToken = duplicate(await monster.getTokenDocument());\n        if (monsterDepth + linkedToken.height > ySquares) {\n          monsterDepth = 0;\n          monsterRows += rowMonsterWidth;\n          rowMonsterWidth = 1;\n        }\n\n        setProperty(linkedToken, \"name\", worldMonster.ddbName);\n        setProperty(linkedToken, \"actorData.name\", worldMonster.ddbName);\n        setProperty(linkedToken, \"flags.ddbimporter.dndbeyond.uniqueId\", worldMonster.uniqueId);\n        setProperty(linkedToken, \"flags.ddbimporter.encounterId\", this.encounter.id);\n        setProperty(linkedToken, \"actorData.flags.ddbimporter.dndbeyond.uniqueId\", worldMonster.uniqueId);\n        setProperty(linkedToken, \"actorData.flags.ddbimporter.encounters\", true);\n        setProperty(linkedToken, \"actorData.flags.ddbimporter.encounterId\", this.encounter.id);\n        const xOffsetChange = sceneData.grid.size * monsterRows;\n        const yOffsetChange = monsterDepth * sceneData.grid.size;\n        linkedToken.x = xStartPixelMonster + xOffsetChange;\n        linkedToken.y = yStartPixel + yOffsetChange;\n        if (useDDBSave) {\n          setProperty(linkedToken, \"flags.ddbimporter.dndbeyond.initiative\", worldMonster.initiative);\n          // if no hp changes have been made on a monster on ddb it says 0 here\n          if (worldMonster.maximumHitPoints !== 0) {\n            setProperty(linkedToken, \"actorData.system.attributes.hp.max\", worldMonster.maximumHitPoints);\n            setProperty(\n              linkedToken,\n              \"actorData.system.attributes.hp.value\",\n              worldMonster.currentHitPoints + worldMonster.temporaryHitPoints\n            );\n          }\n        }\n\n        tokenData.push(linkedToken);\n        monsterDepth += linkedToken.height;\n        if (linkedToken.width > rowMonsterWidth) rowMonsterWidth = linkedToken.width;\n      }\n\n      if (this.journal?.id) sceneData.journal = this.journal.id;\n\n      if (importDDBIScene) {\n        worldScene = game.scenes.find(\n          (a) => a.folder == this.folders[\"scene\"].id\n          && a.flags?.ddbimporter?.encounterId == this.encounter.id\n        );\n      }\n\n      if (worldScene) {\n        logger.info(`Updating scene ${sceneData.name}`);\n        const existingCombats = game.combats.filter((c) =>\n          c.scene?.id == worldScene.id\n          && c.flags?.ddbimporter?.encounterId == this.encounter.id\n        );\n        await Combat.deleteDocuments(existingCombats.map((c) => c.id));\n        if (importDDBIScene) {\n          logger.info(`Updating DDBI scene ${sceneData.name}`);\n          sceneData._id = worldScene.id;\n          await worldScene.deleteEmbeddedDocuments(\"Token\", [], { deleteAll: true });\n          await worldScene.update(mergeObject(worldScene.toObject(), sceneData));\n        } else if (useExistingScene) {\n          logger.info(`Checking existing scene ${sceneData.name} for encounter monsters`);\n          const existingSceneMonsterIds = worldScene.tokens\n            .filter((t) => t.flags?.ddbimporter?.encounterId == this.encounter.id && t.actor.type == \"npc\")\n            .map((t) => t.id);\n          await worldScene.deleteEmbeddedDocuments(\"Token\", existingSceneMonsterIds);\n        }\n      } else if (importDDBIScene) {\n        logger.info(`Importing scene ${sceneData.name}`);\n        try {\n          // eslint-disable-next-line require-atomic-updates\n          worldScene = await Scene.create(sceneData);\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to create scene ${sceneData.name}`);\n        }\n      }\n\n      const thumbData = await worldScene.createThumbnail();\n      const thumbScene = worldScene.toObject();\n      thumbScene[\"thumb\"] = thumbData.thumb;\n\n      logger.debug(\"Creating tokenens on scene\", tokenData);\n      // eslint-disable-next-line require-atomic-updates\n      worldScene = await worldScene.update(thumbScene, { keepId: true });\n\n      await worldScene.createEmbeddedDocuments(\"Token\", tokenData);\n\n      this.scene = worldScene;\n    }\n    logger.debug(\"Scene created\", this.scene);\n\n    this.scene.render();\n\n    return this.scene;\n  }\n\n  async createCombatEncounter() {\n    const importCombat = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\")\n      || game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\");\n\n    if (!importCombat) return undefined;\n    logger.debug(`Creating combat for encounter ${this.encounter.name}`);\n\n    const useDDBSave\n      = this.encounter.inProgress && game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-use-ddb-save\");\n\n    await this.scene.view();\n    const flags = {\n      \"ddbimporter.encounterId\": this.encounter.id,\n    };\n    this.combat = await Combat.create({ scene: this.scene.id, flags: flags });\n    await this.combat.activate();\n\n    let toCreate = [];\n    const tokens = canvas.tokens.placeables\n      .filter((t) => t.document.flags?.ddbimporter?.encounterId == this.encounter.id || t.actor.type == \"character\");\n    if (tokens.length) {\n      tokens.forEach((t) => {\n        let combatant = { tokenId: t.id, actorId: t.document.actorId, hidden: t.document.hidden };\n        if (useDDBSave && t.document.flags.ddbimporter?.dndbeyond?.initiative)\n          combatant.initiative = t.document.flags.ddbimporter.dndbeyond.initiative;\n        if (!t.inCombat) toCreate.push(combatant);\n      });\n      const combatants = await this.combat.createEmbeddedDocuments(\"Combatant\", toCreate);\n\n      const rollMonsterInitiative = game.settings.get(\n        \"ddb-importer\",\n        \"encounter-import-policy-roll-monster-initiative\"\n      );\n      combatants\n        .filter((c) => rollMonsterInitiative && c.actor.type === \"npc\" && c.initiative === null)\n        .forEach(async (c) => {\n          if (c.initiative === null) await this.combat.rollInitiative(c.id);\n        });\n    }\n\n    return this.combat;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    $(html)\n      .find(\n        ['.munching-generic-config input[type=\"checkbox\"]', '.munching-monster-config input[type=\"checkbox\"]'].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        MuncherSettings.updateMuncherSettings(html, event);\n      });\n\n    $(html)\n      .find(\n        [\n          '.import-policy input[type=\"checkbox\"]',\n          '.advanced-import-config input[type=\"checkbox\"]',\n          '.effect-policy input[type=\"checkbox\"]',\n          '.effect-import-config input[type=\"checkbox\"]',\n          '.extras-import-config input[type=\"checkbox\"]',\n          '.import-config input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        MuncherSettings.updateActorSettings(html, event);\n      });\n\n    $(html)\n      .find(\"#default-effects\")\n      .on(\"click\", async (event) => {\n        event.preventDefault();\n        MuncherSettings.setRecommendedCharacterActiveEffectSettings(html);\n      });\n\n    $(html)\n      .find('.sync-policy input[type=\"checkbox\"]')\n      .on(\"change\", (event) => {\n        game.settings.set(\n          \"ddb-importer\",\n          \"sync-policy-\" + event.currentTarget.dataset.section,\n          event.currentTarget.checked\n        );\n      });\n\n    $(html)\n      .find('.encounter-config input[type=\"checkbox\"]')\n      .on(\"change\", (event) => {\n        switch (event.currentTarget.dataset.section) {\n          case \"create-scene\": {\n            game.settings.set(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\", false);\n            if (event.currentTarget.checked) $(\"#encounter-scene-select\").prop(\"disabled\", true);\n            $(\"#encounter-scene-img-select\").prop(\"disabled\", !event.currentTarget.checked);\n            $(\"#encounter-import-policy-existing-scene\").prop('checked', false);\n            break;\n          }\n          case \"existing-scene\": {\n            game.settings.set(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\", false);\n            if (event.currentTarget.checked) $(\"#encounter-scene-img-select\").prop(\"disabled\", true);\n            $(\"#encounter-scene-select\").prop(\"disabled\", !event.currentTarget.checked);\n            $(\"#encounter-import-policy-create-scene\").prop('checked', false);\n            break;\n          }\n          // no default\n        };\n        game.settings.set(\n          \"ddb-importer\",\n          \"encounter-import-policy-\" + event.currentTarget.dataset.section,\n          event.currentTarget.checked\n        );\n      });\n\n    // img change\n    html.find(\"#encounter-scene-img-select\").on(\"change\", async () => {\n      const imgSelect = html.find(\"#encounter-scene-img-select\");\n      this.img = imgSelect[0].selectedOptions[0] ? imgSelect[0].selectedOptions[0].value : \"\";\n    });\n\n    html.find(\"#encounter-scene-select\").on(\"change\", async () => {\n      const imgSelect = html.find(\"#encounter-scene-select\");\n      this.sceneId = imgSelect[0].selectedOptions[0] ? imgSelect[0].selectedOptions[0].value : \"\";\n    });\n\n    // filter campaigns\n    html.find(\"#encounter-campaign-select\").on(\"change\", async () => {\n      const campaignSelection = html.find(\"#encounter-campaign-select\");\n      // get selected campaign from html selection\n      const campaignId = campaignSelection[0].selectedOptions[0]\n        ? campaignSelection[0].selectedOptions[0].value\n        : undefined;\n      const encounters = await this.ddbEncounters.filterEncounters(campaignId);\n      const campaignSelected = campaignId && campaignId !== \"\";\n      let encounterList = `<option value=\"\">Select encounter:</option>`;\n      encounters.forEach((encounter) => {\n        encounterList += `<option value=\"${encounter.id}\">${encounter.name}${\n          campaignSelected || !encounter.campaign ? \"\" : ` (${encounter.campaign.name})`\n        }</option>\\n`;\n      });\n      const list = html.find(\"#encounter-select\");\n      list[0].innerHTML = encounterList;\n      this.resetEncounter(html);\n    });\n\n    // encounter change\n    html.find(\"#encounter-select\").on(\"change\", async () => {\n      this.resetEncounter(html);\n      const encounterSelection = html.find(\"#encounter-select\");\n      const encounterId = encounterSelection[0].selectedOptions[0]\n        ? encounterSelection[0].selectedOptions[0].value\n        : undefined;\n\n      const encounter = await this.parseEncounter(encounterId);\n      // console.warn(encounter);\n\n      const nameHtml = html.find(\"#ddb-encounter-name\");\n      const summaryHtml = html.find(\"#ddb-encounter-summary\");\n      const charactersHtml = html.find(\"#ddb-encounter-characters\");\n      const monstersHtml = html.find(\"#ddb-encounter-monsters\");\n      const difficultyHtml = html.find(\"#ddb-encounter-difficulty\");\n      const rewardsHtml = html.find(\"#ddb-encounter-rewards\");\n      const progressHtml = html.find(\"#ddb-encounter-progress\");\n\n      const missingCharacters = encounter.missingCharacters\n        ? `fa-times-circle' style='color: red`\n        : `fa-check-circle' style='color: green`;\n      const missingMonsters = encounter.missingMonsters\n        ? `fa-times-circle' style='color: red`\n        : `fa-check-circle' style='color: green`;\n\n      const goodCharacters = encounter.goodCharacterData.map((character) => `${character.name}`).join(\", \");\n      const goodMonsters = encounter.goodMonsterIds.map((monster) => `${monster.name}`).join(\", \");\n      const neededCharactersHTML = encounter.missingCharacters\n        ? ` <span style=\"color: red\"> Missing ${\n          encounter.missingCharacterData.length\n        }: ${encounter.missingCharacterData.map((character) => character.name).join(\", \")}</span>`\n        : \"\";\n      const neededMonstersHTML = encounter.missingMonsters\n        ? ` <span style=\"color: red\"> Missing ${\n          encounter.missingMonsterIds.length\n        }. DDB Id's: ${encounter.missingMonsterIds.map((monster) => monster.ddbId).join(\", \")}</span>`\n        : \"\";\n\n      nameHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Encounter:</b> ${encounter.name}`;\n      if (encounter.summary && encounter.summary.trim() !== \"\") {\n        summaryHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Summary:</b> ${encounter.summary}`;\n      }\n      if (encounter.goodCharacterData.length > 0 || encounter.missingCharacterData.length > 0) {\n        charactersHtml[0].innerHTML = `<i class='fas ${missingCharacters}'></i> <b>Characters:</b> ${goodCharacters}${neededCharactersHTML}`;\n      }\n      if (encounter.goodMonsterIds.length > 0 || encounter.missingMonsterIds.length > 0) {\n        monstersHtml[0].innerHTML = `<i class='fas ${missingMonsters}'></i> <b>Monsters:</b> ${goodMonsters}${neededMonstersHTML}`;\n      }\n      difficultyHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Difficulty:</b> <span style=\"color: ${encounter.difficulty.color}\">${encounter.difficulty.name}</span>`;\n      if (encounter.rewards && encounter.rewards.trim() !== \"\") {\n        rewardsHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Rewards:</b> ${encounter.rewards}`;\n      }\n\n      progressHtml[0].innerHTML = encounter.inProgress\n        ? `<i class='fas fa-times-circle' style='color: red'></i> <b>In Progress:</b> <span style=\"color: red\"> Encounter in progress on <a href=\"https://www.dndbeyond.com/combat-tracker/${this.encounter.id}\">D&D Beyond!</a></span>`\n        : `<i class='fas fa-check-circle' style='color: green'></i> <b>In Progress:</b> No`;\n\n      $(\"#encounter-import-policy-use-ddb-save\").prop(\"disabled\", !encounter.inProgress);\n      $(\"#ddb-importer-encounters\").css(\"height\", \"auto\");\n      $(\"#encounter-button\").prop(\"disabled\", false);\n    });\n\n    // import encounter\n    html.find(\"#encounter-button\").click(async (event) => {\n      event.preventDefault();\n      $(\"#encounter-button\").prop(\"disabled\", true);\n      $(\"#encounter-button\").prop(\"innerText\", \"Munching...\");\n\n      await this.importMonsters();\n      await this.importCharacters(html);\n      await this.createJournalEntry();\n      const scene = await this.createScene();\n      if (scene) {\n        logger.info(`Scene ${scene.id} created`);\n        await this.createCombatEncounter();\n      };\n\n      // to do:\n      // adjust monsters hp?\n      // add initiative if combat in progress?\n      // - extra import?\n      // - attempt to find magic items and add them to the world?\n\n      $(\"#encounter-button\").prop(\"innerText\", \"Encounter Munched\");\n      const campaignFluff\n        = this.encounter.campaign?.name && this.encounter.campaign.name.trim() !== \"\" ? ` of ${this.encounter.name}` : \"\";\n      ui.notifications.warn(`Prepare to battle heroes${campaignFluff}, your doom awaits in ${this.encounter.name}!`);\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getData() {\n    const tier = game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n    const tiers = PatreonHelper.getPatreonTiers(tier);\n    const availableCampaigns = await getAvailableCampaigns();\n    const availableEncounters = await this.ddbEncounters.filterEncounters();\n\n    const characterSettings = MuncherSettings.getCharacterImportSettings();\n    const muncherSettings = MuncherSettings.getMuncherSettings(false);\n\n    const importSettings = mergeObject(characterSettings, muncherSettings);\n\n    const encounterConfig = [\n      {\n        name: \"missing-characters\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-characters\"),\n        enabled: true,\n        description: \"Import missing characters?\",\n      },\n      {\n        name: \"missing-monsters\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-monsters\"),\n        enabled: true,\n        description: \"Import missing monsters?\",\n      },\n      {\n        name: \"create-journal\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-journal\"),\n        enabled: true,\n        description: \"Create encounter journal entry?\",\n      },\n      {\n        name: \"use-ddb-save\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-use-ddb-save\"),\n        enabled: false,\n        description: \"Use save information from Encounter (HP for monsters and initiative for all)?\",\n      },\n      {\n        name: \"create-scene\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\"),\n        enabled: true,\n        description: \"Create/update a scene to use, and add available characters and NPC's?\",\n      },\n      {\n        name: \"existing-scene\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\"),\n        enabled: true,\n        description: \"Use an existing scene?\",\n      },\n    ];\n\n    const scenes = game.scenes.filter((scene) => !scene.flags?.ddbimporter?.encounters)\n      .map((scene) => {\n        const folderName = scene.folder ? `[${scene.folder.name}] ` : \"\";\n        const s = {\n          name: `${folderName}${scene.name}`,\n          id: scene.id,\n        };\n        return s;\n      })\n      .sort((a, b) => a.name.localeCompare(b.name));\n\n    const encounterSettings = {\n      tiers,\n      availableCampaigns,\n      availableEncounters,\n      encounterConfig,\n      sceneImg: DDBEncounterMunch.SCENE_IMG,\n      scenes,\n      createSceneSelect: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\"),\n      existingSceneSelect: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\"),\n    };\n\n    const data = mergeObject(importSettings, encounterSettings);\n    logger.debug(\"Encounter muncher form data\", data);\n\n    return data;\n  }\n}\n","import logger from \"../logger.js\";\n\n/**\n * If a custom AA condition animation exists for the specified name, registers the appropriate hook with AA\n * to be able to replace the default condition animation by the custom one.\n *\n * @param {*} condition condition for which to replace its AA animation by a custom one (it must be a value from CONFIG.DND5E.conditionTypes).\n * @param {*} macroData the midi-qol macro data.\n * @param {*} originItemName the name of item used for AA customization of the condition.\n * @param {*} conditionItemUuid the UUID of the item applying the condition.\n */\nexport function configureCustomAAForCondition(condition, macroData, originItemName, conditionItemUuid) {\n  // Get default condition label\n  const statusName = CONFIG.DND5E.conditionTypes[condition];\n  const customStatusName = `${statusName} [${originItemName}]`;\n  if (AutomatedAnimations.AutorecManager.getAutorecEntries().aefx.find((a) => a.label === customStatusName)) {\n    const aaHookId = Hooks.on(\"AutomatedAnimations-WorkflowStart\", (data) => {\n      if (\n        data.item instanceof CONFIG.ActiveEffect.documentClass\n        && data.item.label === statusName\n        && data.item.origin === macroData.sourceItemUuid\n      ) {\n        data.recheckAnimation = true;\n        data.item.label = customStatusName;\n        Hooks.off(\"AutomatedAnimations-WorkflowStart\", aaHookId);\n      }\n    });\n    // Make sure that the hook is removed when the special spell effect is completed\n    Hooks.once(`midi-qol.RollComplete.${conditionItemUuid}`, () => {\n      Hooks.off(\"AutomatedAnimations-WorkflowStart\", aaHookId);\n    });\n  }\n}\n\n/**\n * Adds a save advantage effect for the next save on the specified target actor.\n *\n * @param {*} targetActor the target actor on which to add the effect.\n * @param {*} originItem the item that is the origin of the effect.\n * @param {*} ability the short ability name to use for save, e.g. str\n */\nexport async function addSaveAdvantageToTarget(targetActor, originItem, ability, additionLabel = \"\", icon = null) {\n  const effectData = {\n    _id: randomID(),\n    changes: [\n      {\n        key: `flags.midi-qol.advantage.ability.save.${ability}`,\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"1\",\n        priority: 20,\n      },\n    ],\n    origin: originItem.uuid,\n    disabled: false,\n    transfer: false,\n    icon,\n    label: `${originItem.name}${additionLabel}: Save Advantage Large Creature`,\n    duration: { turns: 1 },\n    flags: {\n      dae: {\n        specialDuration: [`isSave.${ability}`],\n      },\n    },\n  };\n  await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: targetActor.uuid, effects: [effectData] });\n}\n\n/**\n * Returns ids of tokens in template\n *\n * @param {*} templateDoc the templatedoc to check\n */\nexport function findContainedTokensInTemplate(templateDoc) {\n  const contained = new Set();\n  for (const tokenDoc of templateDoc.parent.tokens) {\n    const startX = tokenDoc.width >= 1 ? 0.5 : tokenDoc.width / 2;\n    const startY = tokenDoc.height >= 1 ? 0.5 : tokenDoc.height / 2;\n    for (let x = startX; x < tokenDoc.width; x++) {\n      for (let y = startY; y < tokenDoc.width; y++) {\n        const curr = {\n          x: tokenDoc.x + (x * templateDoc.parent.grid.size) - templateDoc.x,\n          y: tokenDoc.y + (y * templateDoc.parent.grid.size) - templateDoc.y,\n        };\n        const contains = templateDoc.object.shape.contains(curr.x, curr.y);\n        if (contains) contained.add(tokenDoc.id);\n      }\n    }\n  }\n  return [...contained];\n}\n\nexport async function checkTargetInRange({ sourceUuid, targetUuid, distance }) {\n  if (!game.modules.get(\"midi-qol\")?.active) {\n    ui.notifications.error(\"checkTargetInRange requires midiQoL, not checking\");\n    logger.error(\"checkTargetInRange requires midiQoL, not checking\");\n    return true;\n  }\n  const sourceToken = await fromUuid(sourceUuid);\n  if (!sourceToken) return false;\n  const targetsInRange = MidiQOL.findNearby(null, sourceUuid, distance);\n  const isInRange = targetsInRange.reduce((result, possible) => {\n    const collisionRay = new Ray(sourceToken, possible);\n    const collision = canvas.walls.checkCollision(collisionRay, { mode: \"any\", type: \"sight\" });\n    if (possible.uuid === targetUuid && !collision) result = true;\n    return result;\n  }, false);\n  return isInRange;\n}\n","// for exports\nimport DDBMonster from \"../../parser/DDBMonster.js\";\nimport DDBMonsterFactory from \"../../muncher/DDBMonsterFactory.js\";\nimport { parseSpells } from \"../../muncher/spells.js\";\nimport { parseItems } from \"../../muncher/items.js\";\nimport { parseTransports } from \"../../muncher/vehicles.js\";\nimport { updateWorldMonsters, resetCompendiumActorImages, parseCritters } from \"../../muncher/tools.js\";\nimport { migrateExistingCompendium, createCompendiumFolderStructure } from \"../../muncher/compendiumFolders.js\";\nimport DDBEncounterMunch from \"../../parser/encounters/DDBEncounterMunch.js\";\nimport DDBEncounters from \"../../parser/encounters/DDBEncounters.js\";\nimport { generateAdventureConfig } from \"../../muncher/adventure.js\";\nimport { updateDDBCharacter } from \"../../updater/character.js\";\nimport DDBCharacterManager, { importCharacter, importCharacterById } from \"../../lib/DDBCharacterManager.js\";\nimport { checkCobalt } from \"../../lib/Secrets.js\";\nimport { base64Check } from \"../../lib/base64Check.js\";\nimport { getFeats } from \"../../muncher/feats/feats.js\";\nimport { loadMacroFile, generateItemMacroFlag, createMacro, executeDDBMacro, MACROS } from \"../../effects/macros.js\";\nimport { iconPath } from \"../../icons/index.js\";\nimport { loadSRDRules, importCacheLoad } from \"../../lib/DDBTemplateStrings.js\";\nimport { getNPCImage } from \"../../muncher/importMonster.js\";\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport { DirectoryPicker } from \"../../lib/DirectoryPicker.js\";\nimport MuncherSettings from \"../../muncher/MuncherSettings.js\";\nimport { generateIcon } from \"../../lib/icons.js\";\nimport DDBProxy from \"../../lib/DDBProxy.js\";\nimport DDBCompanion from \"../../parser/companions/DDBCompanion.js\";\nimport DDBCompanionFactory from \"../../parser/companions/DDBCompanionFactory.js\";\nimport {\n  checkTargetInRange,\n  configureCustomAAForCondition,\n  addSaveAdvantageToTarget,\n  findContainedTokensInTemplate\n} from \"../../effects/helpers.js\";\nimport SETTINGS from \"../../settings.js\";\n\nfunction resetSecrets() {\n  game.settings.set(\"ddb-importer\", \"cobalt-cookie-local\", false);\n  game.settings.set(\"ddb-importer\", \"cobalt-cookie\", \"\");\n  game.settings.set(\"ddb-importer\", \"campaign-id\", \"\");\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction migrateAllCompendiums(value, key, map) {\n  if (!value.locked) game.dnd5e.migrations.migrateCompendium(value);\n}\n\nfunction migrateCompendiums() {\n  const compendiumNames = CompendiumHelper.getCompendiumNames();\n  game.packs\n    .filter((pack) => compendiumNames.includes(pack.collection))\n    .forEach(migrateAllCompendiums);\n}\n\nfunction debugStart() {\n  CONFIG.debug.ddbimporter.record = true;\n}\n\nfunction debugStop() {\n  CONFIG.debug.ddbimporter.download();\n}\n\nexport function registerApi() {\n  const API = {\n    base64Check: base64Check,\n    checkCobalt,\n    checkPatreon: PatreonHelper.checkPatreon,\n    createCompendiumFolderStructure,\n    createMacro,\n    executeDDBMacro,\n    generateAdventureConfig,\n    generateItemMacroFlag,\n    getPatreonTier: PatreonHelper.getPatreonTier,\n    getPatreonTiers: PatreonHelper.getPatreonTiers,\n    importCharacter,\n    importCharacterById,\n    loadMacroFile,\n    migrateCompendiums,\n    migrateExistingCompendiumToCompendiumFolders: migrateExistingCompendium,\n    parseCritters,\n    parseTransports,\n    parseFeats: getFeats,\n    parseItems,\n    DDBMonster,\n    DDBMonsterFactory,\n    parseSpells,\n    DDBCharacterManager,\n    DDBProxy,\n    DDBEncounters,\n    DDBEncounterMunch,\n    MuncherSettings,\n    resetProxy: DDBProxy.resetProxy,\n    resetSecrets,\n    setPatreonTier: PatreonHelper.setPatreonTier,\n    updateDDBCharacter,\n    updateWorldMonsters,\n    getIconPath: iconPath,\n    iconPath,\n    generateIcon,\n    loadSRDRules,\n    importCacheLoad,\n    macros: MACROS,\n    getNPCImage,\n    resetCompendiumActorImages,\n    CompendiumHelper,\n    FileHelper,\n    DirectoryPicker,\n    getCompendiumLabel: CompendiumHelper.getCompendiumLabel,\n    getCompendiumType: CompendiumHelper.getCompendiumType,\n    getCompendiumNames: CompendiumHelper.getCompendiumNames,\n    deleteDefaultCompendiums: CompendiumHelper.deleteDefaultCompendiums,\n    muncherSettings: MuncherSettings.getMuncherSettings,\n    characterSettings: MuncherSettings.getCharacterImportSettings,\n    DDBCompanion,\n    DDBCompanionFactory,\n    effects: {\n      addSaveAdvantageToTarget,\n      configureCustomAAForCondition,\n      findContainedTokensInTemplate,\n      checkTargetInRange,\n    },\n    debug: {\n      start: debugStart,\n      stop: debugStop,\n    }\n  };\n\n  window.DDBImporter = API;\n  game.modules.get(SETTINGS.MODULE_ID).api = API;\n}\n","\nexport function chatHooks() {\n  Hooks.on(\"renderChatMessage\", (message, html) => {\n    const chatImg = html.find(\"img.ddbimporter-chat-image\");\n    chatImg.click((event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      new ImagePopout($(chatImg).attr(\"src\"), { shareable: true }).render(true);\n    });\n  });\n}\n","import SETTINGS from \"../settings.js\";\n\n\nexport class DDBAdventureImporter extends AdventureImporter {\n\n  constructor(adventure, options) {\n    super(adventure, options);\n    this.options.classes.push(SETTINGS.ADVENTURE_CSS);\n    this.importOptions = {};\n  }\n\n  /** @inheritDoc */\n  async getData() {\n    return foundry.utils.mergeObject(await super.getData(), {\n      importOptions: this.importOptions || {}\n    });\n  }\n\n  /** @inheritDoc */\n  async _renderInner(data) {\n    const html = await super._renderInner(data);\n\n    let options = `<section class=\"import-form\"><h2>Importer Options</h2>`;\n    for (const [name, option] of Object.entries(this.importOptions)) {\n      options += `<div class=\"form-group\">\n        <label class=\"checkbox\">\n            <input type=\"checkbox\" name=\"${name}\" title=\"${option.label}\" ${option.default ? \"checked\" : \"\"}/>\n            ${option.label}\n        </label>\n    </div>`;\n    }\n    options += `</section>`;\n\n    html.find(\".adventure-contents\").append(options);\n    return html;\n  }\n\n  /** @inheritDoc */\n  async _importContent(toCreate, toUpdate, documentCount) {\n    const importResult = await super._importContent(toCreate, toUpdate, documentCount);\n    for (let [name, option] of Object.entries(this.importOptions || {})) {\n      if (option.handler) {\n        // eslint-disable-next-line no-await-in-loop\n        await option.handler(this.document, option, this.submitOptions[name]);\n      }\n    }\n    return importResult;\n  }\n\n}\n","import { DDBAdventureImporter } from \"../../lib/DDBAdventureImporter.js\";\nimport SETTINGS from \"../../settings.js\";\n\nexport default function () {\n  DocumentSheetConfig.registerSheet(Adventure, SETTINGS.MODULE_ID, DDBAdventureImporter, {\n    label: \"DDB Adventure Importer\"\n  });\n\n  // Hooks.on(\"renderJournalSheet\", (app, html) => {\n  //   const journal = app.document;\n  //   if (journal.getFlag(SETTINGS.FLAG_NAME, SETTINGS.ADVENTURE_FLAG)) html[0].classList.add(SETTINGS.ADVENTURE_CSS);\n  // });\n\n  // Hooks.on(\"renderJournalPageSheet\", (app, html) => {\n  //   const journal = app.document.parent;\n  //   if (journal.getFlag(SETTINGS.FLAG_NAME, SETTINGS.ADVENTURE_FLAG)) html[0].classList.add(SETTINGS.ADVENTURE_CSS);\n  // });\n\n}\n","import DICTIONARY from \"../dictionary.js\";\nimport logger from \"../logger.js\";\n\nexport class DDBAdventureFlags extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.title = \"DDB Adventure Imported Flags\";\n    options.template = \"modules/ddb-importer/handlebars/flag-details.hbs\";\n    options.classes = [\"ddb-importer-flags\", \"sheet\"];\n    options.width = 800;\n    return options;\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    // console.warn(this);\n    // console.warn(this.object);\n    const item = this.object;\n\n    let flags = {};\n\n    const flagGroups = [\"ddb\", \"ddbimporter\", \"monsterMunch\", \"ddb-importer\"];\n    const ignoredSubFlagGroups = [\"ddbimporter.acEffects\", \"ddbimporter.autoAC\"];\n\n    function generateFlagLookup(flagData, flagName, flagGroupName) {\n      logger.debug(`FlagName ${flagName}, flagGroupName ${flagGroupName}`, flagData);\n      for (const flagKey in flagData) {\n        logger.debug(\"flagkey\", flagKey);\n        const flagValue = (flagKey === \"userData\") ? flagData[flagKey][\"userDisplayName\"] : flagData[flagKey];\n        const flagGroupSubName = `${flagGroupName}.${flagKey}`;\n        if (typeof flagValue === \"object\" && !ignoredSubFlagGroups.includes(flagGroupName) && !Array.isArray(flagValue)) {\n          logger.info(`recursive generateFlag call for ${flagName}`);\n          generateFlagLookup(flagValue, flagKey, flagGroupSubName);\n        } else if (!ignoredSubFlagGroups.includes(flagGroupName) && !ignoredSubFlagGroups.includes(flagGroupSubName)) {\n          if (!flags[flagGroupName]) flags[flagGroupName] = [];\n          flags[flagGroupName].push({\n            key: flagKey,\n            value: Array.isArray(flagValue) ? JSON.stringify(flagValue) : flagValue,\n          });\n        }\n      }\n    };\n\n    flagGroups.forEach((flagGroup) => {\n      logger.debug(`Flag group ${flagGroup}`, item.flags);\n      generateFlagLookup(item.flags[flagGroup], flagGroup, flagGroup);\n    });\n\n    const result = {\n      name: item.name,\n      flags,\n      monster: {\n        isMonster: this.object.type == \"npc\",\n        flags: [\n          {\n            name: \"keepItems\",\n            description: \"Keep this monsters item configuration for Adventure Muncher\",\n            isChecked: item.flags?.ddbimporter?.keepItems ?? false,\n          },\n          {\n            name: \"keepToken\",\n            description: \"Keep token? (The image needs to be manually set in the export data)\",\n            isChecked: item.flags?.ddbimporter?.keepToken ?? false,\n          },\n          {\n            name: \"keepAvatar\",\n            description: \"Keep avatar?  (The image needs to be manually set in the export data)\",\n            isChecked: item.flags?.ddbimporter?.keepAvatar ?? false,\n          },\n        ]\n      },\n      item: {\n        isItem: DICTIONARY.types.monster.includes(this.object.type) || this.object.type === \"spell\",\n        flags: [\n          {\n            name: \"customItem\",\n            description: \"Keep this custom item\",\n            isChecked: item.flags?.ddbimporter?.customItem ?? false,\n          }\n        ]\n      },\n    };\n\n    if (item.link) result[\"link\"] = item.link;\n    if (flags.bookCode && flags.slug) result[\"ddbLink\"] = `https://www.dndbeyond.com/${flags.bookCode}/${flags.slug}`;\n\n    logger.debug(\"flags\", flags);\n    return result;\n  }\n\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    // watch the change of the import-policy-selector checkboxes\n    $(html)\n      .find(\n        [\n          '.flag-policy input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", async (event) => {\n        const selection = event.currentTarget.dataset.section;\n        const checked = event.currentTarget.checked;\n        logger.debug(`Updating flag-policy for ${this.object.name}, ${selection} to ${checked}`);\n\n        await this.object.update({\n          flags: {\n            \"ddbimporter\": {\n              [selection]: checked\n            }\n          }\n        });\n      });\n  }\n}\n","import DDBCharacterManager from \"../../lib/DDBCharacterManager.js\";\nimport logger from \"../../logger.js\";\nimport { DDBSetup, isSetupComplete } from \"../../lib/Settings.js\";\nimport { DDBAdventureFlags } from \"../../lib/DDBAdventureFlags.js\";\n\nconst API_ENDPOINT = \"https://character-service.dndbeyond.com/character/v5/character/\";\n// reference to the D&D Beyond popup\nconst POPUPS = {\n  json: null,\n  web: null,\n};\nconst renderPopup = (type, url) => {\n  if (POPUPS[type] && !POPUPS[type].close) {\n    POPUPS[type].focus();\n    POPUPS[type].location.href = url;\n  } else {\n    const ratio = window.innerWidth / window.innerHeight;\n    const width = Math.round(window.innerWidth * 0.5);\n    const height = Math.round(window.innerWidth * 0.5 * ratio);\n    POPUPS[type] = window.open(\n      url,\n      \"ddb_sheet_popup\",\n      `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n    );\n  }\n  return true;\n};\n\nexport default function () {\n  /**\n   * Character sheets\n   */\n  const pcSheetNames = Object.values(CONFIG.Actor.sheetClasses.character)\n    .map((sheetClass) => sheetClass.cls)\n    .map((sheet) => sheet.name);\n\n  const trustedUsersOnly = game.settings.get(\"ddb-importer\", \"restrict-to-trusted\");\n  const allowAllSync = game.settings.get(\"ddb-importer\", \"allow-all-sync\");\n  const characterLink = game.settings.get(\"ddb-importer\", \"character-link-title\");\n  const monsterLink = game.settings.get(\"ddb-importer\", \"monster-link-title\");\n  const whiteTitle = (game.settings.get(\"ddb-importer\", \"link-title-colour-white\")) ? \" white\" : \"\";\n\n  pcSheetNames.forEach((sheetName) => {\n    Hooks.on(\"render\" + sheetName, (app, html, data) => {\n      // only for GMs or the owner of this character\n      if (!data.owner || !data.actor || (!allowAllSync && trustedUsersOnly && !game.user.isTrusted)) return;\n\n      let url = null;\n      if (app.document.flags.ddbimporter?.dndbeyond?.url) {\n        url = app.document.flags.ddbimporter.dndbeyond.url;\n      }\n\n      let jsonURL = null;\n      if (app.document.flags.ddbimporter?.dndbeyond?.json) {\n        jsonURL = app.document.flags.ddbimporter.dndbeyond.json;\n      }\n\n      let button;\n\n      if (characterLink) {\n        button = $(`<a class=\"ddb-open-url\" title=\"DDB Importer\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`);\n      } else {\n        // don't add the button multiple times\n        if ($(html).find(\"#ddbImporterButton\").length > 0) return;\n        button = $('<button type=\"button\" id=\"ddbImporterButton\" class=\"inactive\"><i class=\"fab fa-d-and-d-beyond\"></button>');\n        if (app.document.flags.ddbimporter?.dndbeyond?.url) button.removeClass(\"inactive\");\n      }\n\n      button.click((event) => {\n        if (event.shiftKey && event.ctrlKey) {\n          new DDBAdventureFlags(app.document, {}).render(true);\n        } else if (event.shiftKey) {\n          event.preventDefault();\n          return renderPopup(\"web\", url);\n        } else if (event.altKey && jsonURL) {\n          event.preventDefault();\n          return renderPopup(\"json\", jsonURL);\n        } else if (event.altKey && !jsonURL) {\n          // get the character ID\n          const characterId = url.split(\"/\").pop();\n          if (characterId) {\n            event.preventDefault();\n            return renderPopup(\"json\", API_ENDPOINT + characterId);\n          }\n        } else if ((!event.shiftKey && !event.ctrlKey && !event.altKey) || url === null) {\n          const setupComplete = isSetupComplete(false);\n\n          if (setupComplete) {\n            const characterImport = new DDBCharacterManager(DDBCharacterManager.defaultOptions, data.actor);\n            characterImport.render(true);\n          } else {\n            new DDBSetup().render(true);\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n\n      if (characterLink) {\n        html.closest('.app').find('.ddb-open-url').remove();\n        let titleElement = html.closest('.app').find('.window-title');\n        if (!app._minimized) button.insertAfter(titleElement);\n      } else {\n        let wrap = $('<div class=\"ddbCharacterName\"></div>');\n        $(html).find(\"input[name='name']\").wrap(wrap);\n        $(html).find(\"input[name='name']\").parent().prepend(button);\n      }\n    });\n  });\n\n\n  /**\n   * NPC sheets\n   */\n  const npcSheetNames = Object.values(CONFIG.Actor.sheetClasses.npc)\n    .map((sheetClass) => sheetClass.cls)\n    .map((sheet) => sheet.name);\n\n  npcSheetNames.forEach((sheetName) => {\n    Hooks.on(\"render\" + sheetName, (app, html, data) => {\n      // only for GMs or the owner of this npc\n      if (!data.owner || !data.actor) return;\n      if (!app.document.flags?.monsterMunch?.url) return;\n      let url = app.document.flags.monsterMunch.url;\n\n      let button;\n\n      if (monsterLink) {\n        button = $(`<a class=\"ddb-open-url\" title=\"D&D Beyond\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`);\n      } else {\n        // don't add the button multiple times\n        if ($(html).find(\"#ddbImporterButton\").length > 0) return;\n        button = $('<button type=\"button\" id=\"ddbImporterButton\"><i class=\"fab fa-d-and-d-beyond\"></button>');\n      }\n\n      // eslint-disable-next-line no-unused-vars\n      button.click((event) => {\n        if (event.shiftKey && event.ctrlKey) {\n          new DDBAdventureFlags(app.document, {}).render(true);\n        } else {\n          logger.debug(`Clicked for url ${url}`);\n          renderPopup(\"web\", url);\n        }\n      });\n\n      if (monsterLink) {\n        html.closest('.app').find('.ddb-open-url').remove();\n        let titleElement = html.closest('.app').find('.window-title');\n        if (!app._minimized) button.insertAfter(titleElement);\n      } else {\n        let wrap = $('<div class=\"ddbCharacterName\"></div>');\n        $(html).find(\"input[name='name']\").wrap(wrap);\n        $(html).find(\"input[name='name']\").parent().prepend(button);\n      }\n    });\n  });\n}\n","import SETTINGS from '../../settings.js';\nimport CompendiumHelper from '../../lib/CompendiumHelper.js';\n\nexport default async function () {\n  if (game.settings.get(SETTINGS.MODULE_ID, \"auto-create-compendium\")) {\n    for (const compendium of SETTINGS.COMPENDIUMS) {\n      const compendiumName = game.settings.get(SETTINGS.MODULE_ID, compendium.setting);\n      const compendiumData = { id: compendiumName, type: compendium.type, label: `DDB ${compendium.title}` };\n      // eslint-disable-next-line no-await-in-loop\n      const result = await CompendiumHelper.createIfNotExists(compendiumData);\n\n      if (result.created) {\n        // eslint-disable-next-line no-await-in-loop\n        await game.settings.set(SETTINGS.MODULE_ID, compendium.setting, result.compendium.metadata.id);\n      }\n    };\n  }\n}\n","import SETTINGS from \"../settings.js\";\nimport DDBProxy from \"./DDBProxy.js\";\n\n\nexport class DDBProxySetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-proxy\";\n    options.template = \"modules/ddb-importer/handlebars/ddbProxySetup.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    return game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.AppTitle`);\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const useCustomProxy = DDBProxy.isCustom();\n    const defaultAddress = SETTINGS.URLS.PROXY;\n    const proxyAddress = game.settings.get(SETTINGS.MODULE_ID, \"api-endpoint\");\n\n    return {\n      useCustomProxy,\n      proxyAddress,\n      defaultAddress,\n    };\n  }\n\n  /** @override */\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n\n    const useCustomProxy = formData['custom-proxy'];\n    const proxyAddress = formData['api-endpoint'];\n\n    await game.settings.set(SETTINGS.MODULE_ID, \"custom-proxy\", useCustomProxy);\n    await game.settings.set(SETTINGS.MODULE_ID, \"api-endpoint\", proxyAddress);\n  }\n}\n","import { DDBProxySetup } from \"../../lib/DDBProxySetup.js\";\nimport { DirectoryPicker } from \"../../lib/DirectoryPicker.js\";\nimport { DDBSetup, DDBCompendiumSetup, DDBDynamicUpdateSetup, DDBLocationSetup } from \"../../lib/Settings.js\";\nimport SETTINGS from \"../../settings.js\";\n\nsetProperty(CONFIG, \"DDBI\", {\n  module: \"DDB Importer\",\n  schemaVersion: 4.2,\n  ADVENTURE: {},\n  MACROS: {\n    spell: {},\n    gm: {},\n    item: {},\n    feat: {},\n  },\n  KNOWN: {\n    CHECKED_DIRS: new Set(),\n    FILES: new Set(),\n    FORGE: {\n      TARGET_URL_PREFIX: {},\n      TARGETS: {},\n    },\n  },\n  ICONS: {},\n  TABLES: {},\n  SRD_LOAD: {\n    mapLoaded: false,\n    iconMap: {},\n    packsLoaded: {},\n    packs: {},\n  },\n  DEV: {\n    enabled: false,\n    clippy: {},\n    tableInUse: false,\n  },\n  EFFECT_CONFIG: {\n    MONSTERS: {\n      installedModules: null,\n      configured: false,\n    },\n    FEATS: {\n      installedModules: null,\n      configured: false,\n    },\n    SPELLS: {\n      installedModules: null,\n      configured: false,\n    },\n  },\n});\n\nasync function resetSettings() {\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS())) {\n    // eslint-disable-next-line no-await-in-loop\n    await game.settings.set(SETTINGS.MODULE_ID, name, data.default);\n  }\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS(true))) {\n    // eslint-disable-next-line no-await-in-loop\n    await game.settings.set(SETTINGS.MODULE_ID, name, data.default);\n  }\n  window.location.reload();\n}\n\nclass ResetSettingsDialog extends FormApplication {\n  constructor(...args) {\n    super(...args);\n    // eslint-disable-next-line no-constructor-return\n    return new Dialog({\n      title: game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Title`),\n      content: `<p class=\"${SETTINGS.MODULE_ID}-dialog-important\">${game.i18n.localize(\n        `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Content`\n      )}</p>`,\n      buttons: {\n        confirm: {\n          icon: '<i class=\"fas fa-check\"></i>',\n          label: game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Confirm`),\n          callback: () => {\n            resetSettings();\n          },\n        },\n        cancel: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Cancel`),\n        },\n      },\n      default: \"cancel\",\n    });\n  }\n}\n\nfunction createFolderPaths() {\n  if (game.user.isGM) {\n    const characterUploads = game.settings.get(SETTINGS.MODULE_ID, \"image-upload-directory\");\n    const otherUploads = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\");\n    if (characterUploads !== \"[data] ddb-images/characters\" && otherUploads === \"[data] ddb-images/other\") {\n      game.settings.set(SETTINGS.MODULE_ID, \"other-image-upload-directory\", characterUploads);\n    } else {\n      DirectoryPicker.verifyPath(DirectoryPicker.parse(otherUploads));\n    }\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(characterUploads));\n\n    const frameUploads = game.settings.get(SETTINGS.MODULE_ID, \"frame-image-upload-directory\");\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(frameUploads));\n\n    const adventureUploads = game.settings.get(SETTINGS.MODULE_ID, \"adventure-upload-path\");\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(adventureUploads));\n\n    const iconUploads = game.settings.get(SETTINGS.MODULE_ID, \"adventure-misc-path\");\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(iconUploads));\n  }\n}\n\nexport default function () {\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'setupMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBSetup,\n    restricted: true\n  });\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'compendiumMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.compendium-setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.compendium-setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.compendium-setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBCompendiumSetup,\n    restricted: true\n  });\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'folderMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.folder-setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.folder-setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.folder-setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBLocationSetup,\n    restricted: true\n  });\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'dynamicUpdateMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.dynamic-update-setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.dynamic-update-setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.dynamic-update-setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBDynamicUpdateSetup,\n    restricted: true,\n  });\n\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS())) {\n    game.settings.register(SETTINGS.MODULE_ID, name, data);\n  }\n\n  // SETTING TWEAKS AND MIGRATIONS\n  createFolderPaths();\n\n  if (game.user.isGM && game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\")\n    && game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie\") != \"\") {\n    game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", false);\n  }\n\n  if (game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-user\") === \"\" && game.user.isGM) {\n    game.settings.set(SETTINGS.MODULE_ID, \"dynamic-sync-user\", game.user.id);\n  }\n\n  // reset settings\n  game.settings.registerMenu(SETTINGS.MODULE_ID, \"resetToDefaults\", {\n    name: `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Title`,\n    label: `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Label`,\n    hint: `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Hint`,\n    icon: \"fas fa-refresh\",\n    type: ResetSettingsDialog,\n    restricted: true,\n  });\n\n  // reset settings\n  game.settings.registerMenu(SETTINGS.MODULE_ID, \"ddbProxy\", {\n    name: `${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.Title`,\n    label: `${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.Label`,\n    hint: `${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.Hint`,\n    icon: \"fas fa-ethernet\",\n    type: DDBProxySetup,\n    restricted: true,\n  });\n\n\n  if (game.settings.get(SETTINGS.MODULE_ID, \"developer-mode\")) {\n    CONFIG.DDBI.DEV.enabled = true;\n  }\n\n  // disable srd/midi srd copy as v10 does not work\n  game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", false);\n  game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-dae-copy\", false);\n  game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-use-dae-effects\", false);\n\n}\n","import CompendiumHelper from \"./CompendiumHelper.js\";\n\nexport class DDBItemConfig extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.title = \"DDB Owned Item Config\";\n    options.template = \"modules/ddb-importer/handlebars/item-config.hbs\";\n    options.classes = [\"ddbimporter\", \"sheet\"];\n    options.width = 500;\n    return options;\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    // console.warn(this);\n    // console.warn(this.object);\n    let item = this.object;\n\n    const icon = item.flags.ddbimporter?.ignoreIcon;\n    const itemImport = item.flags.ddbimporter?.ignoreItemImport;\n    const resource = item.flags.ddbimporter?.retainResourceConsumption;\n    // const itemSync = item.flags.ddbimporter?.ignoreItemSync;\n    const overrideId = item.flags.ddbimporter?.overrideId;\n\n    const settings = [\n      {\n        name: \"ignoreItemImport\",\n        isChecked: itemImport,\n        description: \"Ignore this item when importing the character (implies all other settings here).\",\n      },\n      {\n        name: \"ignoreIcon\",\n        isChecked: icon,\n        description: \"Ignore icon updates.\",\n      },\n      {\n        name: \"retainResourceConsumption\",\n        isChecked: resource,\n        description: \"Retain Resource Consumption linking.\",\n      },\n      // {\n      //   name: \"ignoreItemSync\",\n      //   isChecked: itemSync,\n      //   description: \"Ignore this item when when syncing the character\",\n      // },\n    ];\n\n    const overrides = {\n      \"NONE\": {\n        label: `None`,\n        selected: false\n      }\n    };\n\n    const label = CompendiumHelper.getCompendiumLabel(\"custom\");\n    const compendium = CompendiumHelper.getCompendium(label);\n    const index = await compendium.getIndex();\n\n    index.forEach((item) => {\n      overrides[item._id] = {\n        label: `${item.name} (${item.type})`,\n        selected: false,\n      };\n    });\n\n    const selectedOverrideId = overrideId || \"NONE\";\n    overrides[selectedOverrideId].selected = true;\n\n    const result = {\n      name: item.name,\n      img: item.img,\n      character: this.object.actor.name,\n      settings,\n      overrides,\n    };\n\n    return result;\n  }\n\n  get id() {\n    const actor = this.object;\n    let id = `ddb-actor-${actor.id}`;\n    return id;\n  }\n\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  async _updateObject(event, formData) {\n    event.preventDefault();\n\n    let item = {\n      _id: this.object._id,\n      flags: this.object.flags,\n    };\n\n    if (!item.flags.ddbimporter) item.flags.ddbimporter = {};\n    item.flags.ddbimporter['overrideId'] = formData['override'];\n    item.flags.ddbimporter['ignoreIcon'] = formData['ignoreIcon'];\n    item.flags.ddbimporter['ignoreItemImport'] = formData['ignoreItemImport'];\n    item.flags.ddbimporter['retainResourceConsumption'] = formData['retainResourceConsumption'];\n    // item.flags.ddbimporter['ignoreItemSync'] = formData['ignoreItemSync'];\n\n    this.object.actor.updateEmbeddedDocuments(\"Item\", [item]);\n\n  }\n}\n","import { DDBItemConfig } from \"../../lib/DDBItemConfig.js\";\nimport { DDBAdventureFlags } from \"../../lib/DDBAdventureFlags.js\";\n\nfunction initItemSheetHook(app, html) {\n  if (!app.document.isOwned) return;\n  // console.error(app.entity);\n  // console.log(data);\n  const title = `DDB Importer Item Config`;\n  const whiteTitle = (game.settings.get(\"ddb-importer\", \"link-title-colour-white\")) ? \" white\" : \"\";\n  let button = $(`<a class=\"open-item-ddb-importer\" title=\"${title}\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`);\n  button.click((event) => {\n    if (event.shiftKey && event.ctrlKey) {\n      new DDBAdventureFlags(app.document, {}).render(true);\n    } else {\n      new DDBItemConfig(app.document, {}).render(true);\n    }\n  });\n  html.closest('.app').find('.open-item-ddb-importer').remove();\n  let titleElement = html.closest('.app').find('.window-title');\n  button.insertAfter(titleElement);\n}\n\nexport function itemSheets() {\n  Hooks.on('renderItemSheet', initItemSheetHook);\n}\n\n","import utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\n\nconst MODULE_TITLE = \"DDB Importer\";\nconst MODULE_NAME = \"ddb-importer\";\nconst MODULE_AUTHOR = \"MrPrimate\";\nconst _GITHUB_API_LATEST = `https://api.github.com/repos/${MODULE_AUTHOR}/${MODULE_NAME}/releases/latest`;\nconst _GITHUB_MODULE_JSON_LATEST = `https://raw.githubusercontent.com/${MODULE_AUTHOR}/${MODULE_NAME}/master/module-template.json`;\nconst MINIMUM_5E_VERSION = \"2.0.1\";\n\n// eslint-disable-next-line consistent-return\nasync function getLatestModuleVersion() {\n  try {\n    const { tag_name: latestVersion, prerelease } = await $.getJSON(_GITHUB_API_LATEST);\n    return { latestVersion, prerelease };\n  } catch (error) {\n    logger.error(error);\n  }\n}\n\n// eslint-disable-next-line consistent-return\nasync function getLatestModuleMinimumCoreVersion() {\n  try {\n    const { minimumCoreVersion, compatibleCoreVersion } = await $.getJSON(_GITHUB_MODULE_JSON_LATEST);\n    return { minimumCoreVersion, compatibleCoreVersion };\n  } catch (error) {\n    logger.error(error);\n  }\n}\n\nexport default async () => {\n  const moduleInfo = game.modules.get(MODULE_NAME);\n  const installedVersion = moduleInfo.version;\n  setProperty(CONFIG, \"DDBI.version\", installedVersion);\n  try {\n    if (!game.user.isGM) return;\n    const { minimumCoreVersion, compatibleCoreVersion } = await getLatestModuleMinimumCoreVersion();\n    const compatibleMinimumSystem = utils.versionCompare(game.data.system.version, MINIMUM_5E_VERSION) >= 0;\n\n    if (!compatibleMinimumSystem) {\n      ui.notifications.error(`${MODULE_TITLE} strongly recommends 5e system v${MINIMUM_5E_VERSION} to run correctly. Please update your 5e version.`, { permanent: true });\n    }\n\n    // check version number only for GMs\n    const coreCheck = game.settings.get(\"ddb-importer\", \"update-check\");\n    if (!coreCheck) return;\n\n    const { latestVersion, prerelease: preRelease } = await getLatestModuleVersion();\n\n    const newModuleVersion = utils.versionCompare(latestVersion, installedVersion) === 1;\n    const compatibleCore = utils.versionCompare(game.version, compatibleCoreVersion) >= 0;\n    const compatibleMinimumCore = utils.versionCompare(game.version, minimumCoreVersion) >= 0;\n\n    const needToUpdate = newModuleVersion && compatibleCore && compatibleMinimumCore;\n\n    // console.log(utils.versionCompare(\"1.0.1\", \"1.0.1\")); // 0\n    // console.log(utils.versionCompare(\"1.0.0\", \"1.0.1\")); // -1\n    // console.log(utils.versionCompare(\"2.0.0\", \"1.0.1\")); // 1\n\n    if (preRelease) logger.debug(`Prerelease of ${MODULE_TITLE} detected`);\n\n    if (needToUpdate) {\n      let text = $(\n        `<h2>${MODULE_TITLE} Update!</h2><p>A new <b>${MODULE_NAME}</b> version is available. Please update to <b>v${latestVersion}</b> if you are experiencing issues and before reporting a bug.</p>`\n      );\n      game.modules.get(\"ddb-importer\").api?.notification.show(text, null);\n    }\n  } catch (error) {\n    logger.warn(error);\n    game.modules.get(\"ddb-importer\").api?.notification.show(`Could not retrieve latest ${MODULE_NAME} version`);\n  }\n};\n","export const fallbackDDBConfig = {\n  armor: [\n    {\n      id: 3,\n      entityTypeId: 701257905,\n      name: \"Studded Leather\",\n      categoryId: 1,\n    },\n    {\n      id: 6,\n      entityTypeId: 701257905,\n      name: \"Scale Mail\",\n      categoryId: 2,\n    },\n    {\n      id: 8,\n      entityTypeId: 701257905,\n      name: \"Shield\",\n      categoryId: 4,\n    },\n    {\n      id: 9,\n      entityTypeId: 701257905,\n      name: \"Padded\",\n      categoryId: 1,\n    },\n    {\n      id: 10,\n      entityTypeId: 701257905,\n      name: \"Leather\",\n      categoryId: 1,\n    },\n    {\n      id: 11,\n      entityTypeId: 701257905,\n      name: \"Hide\",\n      categoryId: 2,\n    },\n    {\n      id: 12,\n      entityTypeId: 701257905,\n      name: \"Chain Shirt\",\n      categoryId: 2,\n    },\n    {\n      id: 13,\n      entityTypeId: 701257905,\n      name: \"Breastplate\",\n      categoryId: 2,\n    },\n    {\n      id: 14,\n      entityTypeId: 701257905,\n      name: \"Half Plate\",\n      categoryId: 2,\n    },\n    {\n      id: 15,\n      entityTypeId: 701257905,\n      name: \"Ring Mail\",\n      categoryId: 3,\n    },\n    {\n      id: 16,\n      entityTypeId: 701257905,\n      name: \"Chain Mail\",\n      categoryId: 3,\n    },\n    {\n      id: 17,\n      entityTypeId: 701257905,\n      name: \"Splint\",\n      categoryId: 3,\n    },\n    {\n      id: 18,\n      entityTypeId: 701257905,\n      name: \"Plate\",\n      categoryId: 3,\n    },\n    {\n      id: 19,\n      entityTypeId: 701257905,\n      name: \"Spiked Armor\",\n      categoryId: 2,\n    },\n    {\n      id: 20,\n      entityTypeId: 701257905,\n      name: \"Pride Silk Outfit\",\n      categoryId: 1,\n    },\n  ],\n  tools: [\n    {\n      id: 102,\n      name: \"Alchemist's Supplies\",\n    },\n    {\n      id: 103,\n      name: \"Brewer's Supplies\",\n    },\n    {\n      id: 104,\n      name: \"Calligrapher's Supplies\",\n    },\n    {\n      id: 105,\n      name: \"Carpenter's Tools\",\n    },\n    {\n      id: 106,\n      name: \"Cartographer's Tools\",\n    },\n    {\n      id: 107,\n      name: \"Cobbler's Tools\",\n    },\n    {\n      id: 108,\n      name: \"Cook's Utensils\",\n    },\n    {\n      id: 109,\n      name: \"Glassblower's Tools\",\n    },\n    {\n      id: 110,\n      name: \"Jeweler's Tools\",\n    },\n    {\n      id: 111,\n      name: \"Leatherworker's Tools\",\n    },\n    {\n      id: 112,\n      name: \"Mason's Tools\",\n    },\n    {\n      id: 113,\n      name: \"Painter's Supplies\",\n    },\n    {\n      id: 114,\n      name: \"Potter's Tools\",\n    },\n    {\n      id: 115,\n      name: \"Smith's Tools\",\n    },\n    {\n      id: 116,\n      name: \"Tinker's Tools\",\n    },\n    {\n      id: 117,\n      name: \"Weaver's Tools\",\n    },\n    {\n      id: 118,\n      name: \"Woodcarver's Tools\",\n    },\n    {\n      id: 119,\n      name: \"Disguise Kit\",\n    },\n    {\n      id: 120,\n      name: \"Forgery Kit\",\n    },\n    {\n      id: 121,\n      name: \"Dice Set\",\n    },\n    {\n      id: 122,\n      name: \"Playing Card Set\",\n    },\n    {\n      id: 123,\n      name: \"Herbalism Kit\",\n    },\n    {\n      id: 124,\n      name: \"Navigator's Tools\",\n    },\n    {\n      id: 125,\n      name: \"Poisoner's Kit\",\n    },\n    {\n      id: 126,\n      name: \"Thieves' Tools\",\n    },\n    {\n      id: 127,\n      name: \"Bagpipes\",\n    },\n    {\n      id: 128,\n      name: \"Drum\",\n    },\n    {\n      id: 129,\n      name: \"Dulcimer\",\n    },\n    {\n      id: 130,\n      name: \"Flute\",\n    },\n    {\n      id: 131,\n      name: \"Lute\",\n    },\n    {\n      id: 132,\n      name: \"Horn\",\n    },\n    {\n      id: 133,\n      name: \"Pan Flute\",\n    },\n    {\n      id: 134,\n      name: \"Shawm\",\n    },\n    {\n      id: 135,\n      name: \"Lyre\",\n    },\n    {\n      id: 136,\n      name: \"Viol\",\n    },\n    {\n      id: 189,\n      name: \"Three-Dragon Ante Set\",\n    },\n    {\n      id: 190,\n      name: \"Dragonchess Set\",\n    },\n    {\n      id: 232,\n      name: \"Birdpipes\",\n    },\n    {\n      id: 233,\n      name: \"Glaur\",\n    },\n    {\n      id: 234,\n      name: \"Hand Drum\",\n    },\n    {\n      id: 235,\n      name: \"Longhorn\",\n    },\n    {\n      id: 236,\n      name: \"Songhorn\",\n    },\n    {\n      id: 237,\n      name: \"Tantan\",\n    },\n    {\n      id: 238,\n      name: \"Thelarr\",\n    },\n    {\n      id: 239,\n      name: \"Tocken\",\n    },\n    {\n      id: 240,\n      name: \"Wargong\",\n    },\n    {\n      id: 241,\n      name: \"Yarting\",\n    },\n    {\n      id: 242,\n      name: \"Zulkoon\",\n    },\n    {\n      id: 301,\n      name: \"Whistle-Stick\",\n    },\n  ],\n  weapons: [\n    {\n      id: 1,\n      entityTypeId: 1782728300,\n      name: \"Crossbow, Hand\",\n      categoryId: 2,\n    },\n    {\n      id: 2,\n      entityTypeId: 1782728300,\n      name: \"Glaive\",\n      categoryId: 2,\n    },\n    {\n      id: 3,\n      entityTypeId: 1782728300,\n      name: \"Dagger\",\n      categoryId: 1,\n    },\n    {\n      id: 4,\n      entityTypeId: 1782728300,\n      name: \"Longsword\",\n      categoryId: 2,\n    },\n    {\n      id: 5,\n      entityTypeId: 1782728300,\n      name: \"Club\",\n      categoryId: 1,\n    },\n    {\n      id: 6,\n      entityTypeId: 1782728300,\n      name: \"Greatclub\",\n      categoryId: 1,\n    },\n    {\n      id: 7,\n      entityTypeId: 1782728300,\n      name: \"Handaxe\",\n      categoryId: 1,\n    },\n    {\n      id: 8,\n      entityTypeId: 1782728300,\n      name: \"Javelin\",\n      categoryId: 1,\n    },\n    {\n      id: 10,\n      entityTypeId: 1782728300,\n      name: \"Light Hammer\",\n      categoryId: 1,\n    },\n    {\n      id: 11,\n      entityTypeId: 1782728300,\n      name: \"Mace\",\n      categoryId: 1,\n    },\n    {\n      id: 12,\n      entityTypeId: 1782728300,\n      name: \"Quarterstaff\",\n      categoryId: 1,\n    },\n    {\n      id: 13,\n      entityTypeId: 1782728300,\n      name: \"Sickle\",\n      categoryId: 1,\n    },\n    {\n      id: 14,\n      entityTypeId: 1782728300,\n      name: \"Spear\",\n      categoryId: 1,\n    },\n    {\n      id: 15,\n      entityTypeId: 1782728300,\n      name: \"Crossbow, Light\",\n      categoryId: 1,\n    },\n    {\n      id: 16,\n      entityTypeId: 1782728300,\n      name: \"Dart\",\n      categoryId: 1,\n    },\n    {\n      id: 17,\n      entityTypeId: 1782728300,\n      name: \"Shortbow\",\n      categoryId: 1,\n    },\n    {\n      id: 18,\n      entityTypeId: 1782728300,\n      name: \"Sling\",\n      categoryId: 1,\n    },\n    {\n      id: 19,\n      entityTypeId: 1782728300,\n      name: \"Battleaxe\",\n      categoryId: 2,\n    },\n    {\n      id: 20,\n      entityTypeId: 1782728300,\n      name: \"Flail\",\n      categoryId: 2,\n    },\n    {\n      id: 21,\n      entityTypeId: 1782728300,\n      name: \"Greataxe\",\n      categoryId: 2,\n    },\n    {\n      id: 22,\n      entityTypeId: 1782728300,\n      name: \"Greatsword\",\n      categoryId: 2,\n    },\n    {\n      id: 23,\n      entityTypeId: 1782728300,\n      name: \"Halberd\",\n      categoryId: 2,\n    },\n    {\n      id: 24,\n      entityTypeId: 1782728300,\n      name: \"Lance\",\n      categoryId: 2,\n    },\n    {\n      id: 25,\n      entityTypeId: 1782728300,\n      name: \"Maul\",\n      categoryId: 2,\n    },\n    {\n      id: 26,\n      entityTypeId: 1782728300,\n      name: \"Morningstar\",\n      categoryId: 2,\n    },\n    {\n      id: 27,\n      entityTypeId: 1782728300,\n      name: \"Pike\",\n      categoryId: 2,\n    },\n    {\n      id: 28,\n      entityTypeId: 1782728300,\n      name: \"Rapier\",\n      categoryId: 2,\n    },\n    {\n      id: 29,\n      entityTypeId: 1782728300,\n      name: \"Scimitar\",\n      categoryId: 2,\n    },\n    {\n      id: 30,\n      entityTypeId: 1782728300,\n      name: \"Shortsword\",\n      categoryId: 2,\n    },\n    {\n      id: 31,\n      entityTypeId: 1782728300,\n      name: \"Trident\",\n      categoryId: 2,\n    },\n    {\n      id: 32,\n      entityTypeId: 1782728300,\n      name: \"War Pick\",\n      categoryId: 2,\n    },\n    {\n      id: 33,\n      entityTypeId: 1782728300,\n      name: \"Warhammer\",\n      categoryId: 2,\n    },\n    {\n      id: 34,\n      entityTypeId: 1782728300,\n      name: \"Whip\",\n      categoryId: 2,\n    },\n    {\n      id: 35,\n      entityTypeId: 1782728300,\n      name: \"Blowgun\",\n      categoryId: 2,\n    },\n    {\n      id: 36,\n      entityTypeId: 1782728300,\n      name: \"Crossbow, Heavy\",\n      categoryId: 2,\n    },\n    {\n      id: 37,\n      entityTypeId: 1782728300,\n      name: \"Longbow\",\n      categoryId: 2,\n    },\n    {\n      id: 38,\n      entityTypeId: 1782728300,\n      name: \"Net\",\n      categoryId: 2,\n    },\n    {\n      id: 40,\n      entityTypeId: 1782728300,\n      name: \"Boomerang\",\n      categoryId: 1,\n    },\n    {\n      id: 41,\n      entityTypeId: 1782728300,\n      name: \"Yklwa\",\n      categoryId: 1,\n    },\n    {\n      id: 42,\n      entityTypeId: 1782728300,\n      name: \"Pistol\",\n      categoryId: 3,\n    },\n    {\n      id: 43,\n      entityTypeId: 1782728300,\n      name: \"Musket\",\n      categoryId: 3,\n    },\n    {\n      id: 44,\n      entityTypeId: 1782728300,\n      name: \"Pistol, Automatic\",\n      categoryId: 3,\n    },\n    {\n      id: 45,\n      entityTypeId: 1782728300,\n      name: \"Revolver\",\n      categoryId: 3,\n    },\n    {\n      id: 46,\n      entityTypeId: 1782728300,\n      name: \"Rifle, Hunting\",\n      categoryId: 3,\n    },\n    {\n      id: 47,\n      entityTypeId: 1782728300,\n      name: \"Rifle, Automatic\",\n      categoryId: 3,\n    },\n    {\n      id: 48,\n      entityTypeId: 1782728300,\n      name: \"Shotgun\",\n      categoryId: 3,\n    },\n    {\n      id: 49,\n      entityTypeId: 1782728300,\n      name: \"Laser Pistol\",\n      categoryId: 3,\n    },\n    {\n      id: 50,\n      entityTypeId: 1782728300,\n      name: \"Antimatter Rifle\",\n      categoryId: 3,\n    },\n    {\n      id: 51,\n      entityTypeId: 1782728300,\n      name: \"Laser Rifle\",\n      categoryId: 3,\n    },\n    {\n      id: 52,\n      entityTypeId: 1782728300,\n      name: \"Palm Pistol (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 53,\n      entityTypeId: 1782728300,\n      name: \"Pepperbox (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 54,\n      entityTypeId: 1782728300,\n      name: \"Pistol (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 55,\n      entityTypeId: 1782728300,\n      name: \"Blunderbuss (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 56,\n      entityTypeId: 1782728300,\n      name: \"Bad News (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 57,\n      entityTypeId: 1782728300,\n      name: \"Hand Mortar (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 58,\n      entityTypeId: 1782728300,\n      name: \"Musket (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 59,\n      entityTypeId: 1782728300,\n      name: \"Double-Bladed Scimitar\",\n      categoryId: 2,\n    },\n  ],\n  languages: [\n    { id: 1, name: \"Common\" },\n    { id: 2, name: \"Dwarvish\" },\n    { id: 3, name: \"Elvish\" },\n    { id: 4, name: \"Giant\" },\n    { id: 5, name: \"Gnomish\" },\n    { id: 6, name: \"Goblin\" },\n    { id: 7, name: \"Halfling\" },\n    { id: 8, name: \"Orc\" },\n    { id: 9, name: \"Abyssal\" },\n    { id: 10, name: \"Celestial\" },\n    { id: 11, name: \"Draconic\" },\n    { id: 12, name: \"Deep Speech\" },\n    { id: 13, name: \"Infernal\" },\n    { id: 14, name: \"Primordial\" },\n    { id: 15, name: \"Sylvan\" },\n    { id: 16, name: \"Undercommon\" },\n    { id: 18, name: \"Telepathy\" },\n    { id: 19, name: \"Aquan\" },\n    { id: 20, name: \"Auran\" },\n    { id: 21, name: \"Ignan\" },\n    { id: 22, name: \"Terran\" },\n    { id: 23, name: \"Druidic\" },\n    { id: 24, name: \"Giant Eagle\" },\n    { id: 25, name: \"Giant Elk\" },\n    { id: 26, name: \"Giant Owl\" },\n    { id: 27, name: \"Gnoll\" },\n    { id: 28, name: \"Otyugh\" },\n    { id: 29, name: \"Sahuagin\" },\n    { id: 30, name: \"Sphinx\" },\n    { id: 31, name: \"Winter Wolf\" },\n    { id: 32, name: \"Worg\" },\n    { id: 33, name: \"Blink Dog\" },\n    { id: 34, name: \"Yeti\" },\n    { id: 35, name: \"All\" },\n    { id: 36, name: \"Aarakocra\" },\n    { id: 37, name: \"Slaad\" },\n    { id: 38, name: \"Bullywug\" },\n    { id: 39, name: \"Gith\" },\n    { id: 40, name: \"Grell\" },\n    { id: 41, name: \"Hook Horror\" },\n    { id: 42, name: \"Modron\" },\n    { id: 43, name: \"Thri-kreen\" },\n    { id: 44, name: \"Troglodyte\" },\n    { id: 45, name: \"Umber Hulk\" },\n    { id: 46, name: \"Thieves' Cant\" },\n    { id: 47, name: \"Grung\" },\n    { id: 48, name: \"Tlincalli\" },\n    { id: 49, name: \"Vegepygmy\" },\n    { id: 50, name: \"Yikaria\" },\n    { id: 51, name: \"Bothii\" },\n    { id: 52, name: \"Ixitxachitl\" },\n    { id: 53, name: \"Thayan\" },\n    { id: 54, name: \"Netherese\" },\n    { id: 55, name: \"Ice Toad\" },\n    { id: 56, name: \"Olman\" },\n    { id: 57, name: \"Quori\" },\n    { id: 58, name: \"Minotaur\" },\n    { id: 59, name: \"Loxodon\" },\n    { id: 60, name: \"Kraul\" },\n    { id: 61, name: \"Vedalken\" },\n    { id: 62, name: \"Daelkyr\" },\n    { id: 64, name: \"Riedran\" },\n    { id: 66, name: \"Zemnian\" },\n    { id: 67, name: \"Marquesian\" },\n    { id: 68, name: \"Naush\" },\n    { id: 69, name: \"Leonin\" },\n    { id: 70, name: \"Grippli\" },\n    { id: 71, name: \"Skitterwidget\" },\n    { id: 72, name: \"Ziklight\" },\n    { id: 73, name: \"Kruthik\" },\n    { id: 74, name: \"Citlanés\" },\n    { id: 75, name: \"Djaynaian\" },\n    { id: 76, name: \"Godstongue\" },\n    { id: 77, name: \"Halri\" },\n    { id: 78, name: \"Maynah\" },\n    { id: 79, name: \"N’warian\" },\n    { id: 80, name: \"Quirapu\" },\n    { id: 81, name: \"Sensan\" },\n    { id: 82, name: \"Shankhi\" },\n    { id: 83, name: \"Tletlahtolli\" },\n    { id: 84, name: \"Xingyu\" },\n    { id: 85, name: \"Zabaani\" },\n    { id: 86, name: \"Dohwar\" },\n    { id: 87, name: \"Hadozee\" },\n    { id: 88, name: \"Aartuk\" },\n    { id: 89, name: \"Abanasinian\" },\n    { id: 90, name: \"Ergot\" },\n    { id: 91, name: \"Istarian\" },\n    { id: 92, name: \"Kenderspeak\" },\n    { id: 93, name: \"Kharolian\" },\n    { id: 94, name: \"Khur\" },\n    { id: 95, name: \"Kothian\" },\n    { id: 96, name: \"Nerakese\" },\n    { id: 97, name: \"Nordmaarian\" },\n    { id: 98, name: \"Ogre\" },\n    { id: 99, name: \"Solamnic\" },\n  ],\n  restoreTypes: [\n    { id: 1, name: \"Full\", description: \"Restore life with full HP\" },\n    { id: 2, name: \"OneHP\", description: \"Restore life with 1 HP\" },\n  ],\n  raceGroups: [\n    { id: 1, name: \"Human\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/819/636620994416798583.jpeg\" },\n    { id: 2, name: \"Half-Orc\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/817/636620994330373054.jpeg\" },\n    { id: 3, name: \"Elf\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/807/636620993866733375.jpeg\" },\n    { id: 4, name: \"Aarakocra\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/802/636620993394513358.jpeg\" },\n    { id: 5, name: \"Tiefling\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/825/636620994695575306.jpeg\" },\n    { id: 6, name: \"Dwarf\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/806/636620993762055484.jpeg\" },\n    { id: 7, name: \"Halfling\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/816/636620994265008086.jpeg\" },\n    { id: 8, name: \"Dragonborn\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/805/636620993696690483.jpeg\" },\n    { id: 9, name: \"Gnome\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/811/636620994035528201.jpeg\" },\n    { id: 10, name: \"Half-Elf\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/814/636620994184198696.jpeg\" },\n    { id: 11, name: \"Goliath\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/813/636620994135369890.jpeg\" },\n    { id: 12, name: \"Genasi\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/809/636620993978899042.jpeg\" },\n    { id: 13, name: \"Aasimar\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/803/636620993510579220.jpeg\" },\n    { id: 14, name: \"Firbolg\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/808/636620993924142291.jpeg\" },\n    { id: 15, name: \"Kenku\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/820/636620994458763373.jpeg\" },\n    { id: 16, name: \"Lizardfolk\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/822/636620994561880989.jpeg\" },\n    { id: 17, name: \"Tabaxi\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/824/636620994652518517.jpeg\" },\n    { id: 18, name: \"Triton\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/827/636620994792452860.jpeg\" },\n    { id: 19, name: \"Bugbear\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/804/636620993577660502.jpeg\" },\n    { id: 20, name: \"Goblin\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/812/636620994081080899.jpeg\" },\n    { id: 21, name: \"Hobgoblin\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/818/636620994370309752.jpeg\" },\n    { id: 22, name: \"Kobold\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/821/636620994500727959.jpeg\" },\n    { id: 23, name: \"Orc\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/823/636620994608993950.jpeg\" },\n    {\n      id: 24,\n      name: \"Yuan-ti Pureblood\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/316/828/636620994846117422.jpeg\",\n    },\n    { id: 25, name: \"Tortle\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/826/636620994747056231.jpeg\" },\n    { id: 27, name: \"Gith\", avatarUrl: \"https://www.dndbeyond.com/avatars/318/759/636621911421792248.jpeg\" },\n    { id: 28, name: \"Warforged\", avatarUrl: \"https://www.dndbeyond.com/avatars/2490/554/636680421772857650.jpeg\" },\n    { id: 29, name: \"Shifter\", avatarUrl: \"https://www.dndbeyond.com/avatars/2490/562/636680421866916694.jpeg\" },\n    { id: 30, name: \"Draconic Races\", avatarUrl: null },\n    { id: 31, name: \"Lineages\", avatarUrl: null },\n  ],\n  spellRangeTypes: [\n    { id: 1, name: \"Self\" },\n    { id: 2, name: \"Touch\" },\n    { id: 3, name: \"Ranged\" },\n    { id: 4, name: \"Sight\" },\n    { id: 9, name: \"Unlimited\" },\n  ],\n  adjustmentDataTypes: [\n    { id: 1, name: \"Integer\" },\n    { id: 2, name: \"Decimal\" },\n    { id: 3, name: \"String\" },\n    { id: 4, name: \"Boolean\" },\n  ],\n  coverTypes: [\n    { type: \"half\", name: \"Half\" },\n    { type: \"three-quarters\", name: \"Three-Quarters\" },\n    { type: \"full\", name: \"Full\" },\n  ],\n  spellConditionTypes: [\n    { id: 1, name: \"Apply\" },\n    { id: 2, name: \"Remove\" },\n    { id: 3, name: \"Suppress\" },\n  ],\n  rangeTypes: [\n    { id: 1, name: \"Melee\" },\n    { id: 2, name: \"Ranged\" },\n  ],\n  damageTypes: [\n    { id: 1, name: \"Bludgeoning\" },\n    { id: 2, name: \"Piercing\" },\n    { id: 3, name: \"Slashing\" },\n    { id: 4, name: \"Necrotic\" },\n    { id: 5, name: \"Acid\" },\n    { id: 6, name: \"Cold\" },\n    { id: 7, name: \"Fire\" },\n    { id: 8, name: \"Lightning\" },\n    { id: 9, name: \"Thunder\" },\n    { id: 10, name: \"Poison\" },\n    { id: 11, name: \"Psychic\" },\n    { id: 12, name: \"Radiant\" },\n    { id: 13, name: \"Force\" },\n  ],\n  privacyTypes: [\n    { id: 1, name: \"Private\" },\n    { id: 2, name: \"CampaignOnly\" },\n    { id: 3, name: \"Public\" },\n  ],\n  sharingTypes: [\n    { id: 1, name: \"Full\" },\n    { id: 2, name: \"Limited\" },\n    { id: 3, name: \"StatBlock\" },\n  ],\n  abilityScoreDisplayTypes: [\n    { id: 1, name: \"ScoresTop\" },\n    { id: 2, name: \"ModifiersTop\" },\n  ],\n  stealthCheckTypes: [\n    { id: 1, name: \"None\" },\n    { id: 2, name: \"Disadvantage\" },\n  ],\n  conditionTypes: [\n    { id: 1, name: \"Standard\" },\n    { id: 2, name: \"Special\" },\n  ],\n  operators: [\n    { id: 1, name: \"Addition\" },\n    { id: 2, name: \"Multiplication\" },\n  ],\n  monsterSubTypes: [\n    { id: 1, name: \"aarakocra\" },\n    { id: 2, name: \"gnome\" },\n    { id: 3, name: \"gnoll\" },\n    { id: 4, name: \"grimlock\" },\n    { id: 5, name: \"any race\" },\n    { id: 6, name: \"elf\" },\n    { id: 7, name: \"tortle\" },\n    { id: 8, name: \"yugoloth\" },\n    { id: 9, name: \"demon\" },\n    { id: 10, name: \"devil\" },\n    { id: 11, name: \"shapechanger\" },\n    { id: 12, name: \"nagpa\" },\n    { id: 13, name: \"meazel\" },\n    { id: 14, name: \"inevitable\" },\n    { id: 15, name: \"gith\" },\n    { id: 16, name: \"dwarf\" },\n    { id: 17, name: \"derro\" },\n    { id: 18, name: \"kuo-toa\" },\n    { id: 19, name: \"titan\" },\n    { id: 20, name: \"yuan-ti\" },\n    { id: 21, name: \"xvart\" },\n    { id: 22, name: \"orc\" },\n    { id: 23, name: \"goblinoid\" },\n    { id: 24, name: \"kobold\" },\n    { id: 25, name: \"grung\" },\n    { id: 26, name: \"kenku\" },\n    { id: 27, name: \"firenewt\" },\n    { id: 28, name: \"troglodyte\" },\n    { id: 29, name: \"thri-kreen\" },\n    { id: 30, name: \"sahuagin\" },\n    { id: 31, name: \"quaggoth\" },\n    { id: 32, name: \"merfolk\" },\n    { id: 33, name: \"human\" },\n    { id: 34, name: \"lizardfolk\" },\n    { id: 35, name: \"cloud giant\" },\n    { id: 36, name: \"fire giant\" },\n    { id: 37, name: \"frost giant\" },\n    { id: 38, name: \"hill giant\" },\n    { id: 39, name: \"stone giant\" },\n    { id: 40, name: \"storm giant\" },\n    { id: 41, name: \"bullywug\" },\n    { id: 42, name: \"saurial\" },\n    { id: 43, name: \"tabaxi\" },\n    { id: 44, name: \"half-elf\" },\n    { id: 45, name: \"half-dragon\" },\n    { id: 46, name: \"simic hybrid\" },\n    { id: 47, name: \"angel\" },\n    { id: 48, name: \"kraul\" },\n    { id: 49, name: \"tiefling\" },\n    { id: 50, name: \"half-orc\" },\n    { id: 51, name: \"halfling\" },\n    { id: 52, name: \"locathah\" },\n    { id: 53, name: \"triton\" },\n    { id: 54, name: \"dragonborn\" },\n    { id: 55, name: \"warforged\" },\n    { id: 56, name: \"water genasi\" },\n    { id: 57, name: \"fire genasi\" },\n    { id: 58, name: \"earth genasi\" },\n    { id: 59, name: \"air genasi\" },\n    { id: 60, name: \"changeling\" },\n    { id: 61, name: \"kalashtar\" },\n    { id: 62, name: \"shifter\" },\n    { id: 63, name: \"blindheim\" },\n    { id: 64, name: \"dire corby\" },\n    { id: 65, name: \"jermlaine\" },\n    { id: 66, name: \"goliath\" },\n    { id: 67, name: \"Giff\" },\n    { id: 68, name: \"Skulk\" },\n    { id: 69, name: \"Leonin\" },\n    { id: 70, name: \"grippli\" },\n    { id: 71, name: \"mongrelfolk\" },\n    { id: 72, name: \"Harengon\" },\n    { id: 73, name: \"Hag\" },\n    { id: 74, name: \"Wizard\" },\n    { id: 75, name: \"Sorcerer\" },\n    { id: 76, name: \"Warlock\" },\n    { id: 77, name: \"Cleric\" },\n    { id: 78, name: \"Shadar-Kai\" },\n    { id: 79, name: \"Paladin\" },\n    { id: 80, name: \"Gem\" },\n    { id: 81, name: \"Metallic\" },\n    { id: 82, name: \"Chromatic\" },\n    { id: 83, name: \"High-Elf\" },\n    { id: 84, name: \"half-black dragon\" },\n    { id: 85, name: \"Druid\" },\n    { id: 89, name: \"Bard\" },\n    { id: 90, name: \"shield dwarf\" },\n    { id: 91, name: \"Ranger\" },\n    { id: 92, name: \"Goblin\" },\n    { id: 93, name: \"Drow\" },\n    { id: 94, name: \"Ogre\" },\n    { id: 95, name: \"Monk\" },\n  ],\n  creatureGroupFlags: [\n    { id: 1, name: \"Armor Add Proficiency Bonus\", key: \"ACPB\", value: null, valueContextId: null },\n    { id: 2, name: \"Attack Rolls Add Proficiency Bonus\", key: \"ARPB\", value: null, valueContextId: null },\n    { id: 3, name: \"Damage Rolls Add Proficiency Bonus\", key: \"DRPB\", value: null, valueContextId: null },\n    { id: 4, name: \"Proficient Skills Add Proficiency Bonus\", key: \"PSPB\", value: null, valueContextId: null },\n    { id: 5, name: \"Proficient Saving Throws Add Proficiency Bonus\", key: \"STPB\", value: null, valueContextId: null },\n    { id: 6, name: \"Max Hit Points Level Multiplier Option\", key: \"HPLM\", value: 4, valueContextId: 5 },\n    { id: 7, name: \"Evaluate Owner Skill Proficiencies\", key: \"EOSKP\", value: null, valueContextId: null },\n    { id: 8, name: \"Evaluate Owner Save Proficiencies\", key: \"EOSVP\", value: null, valueContextId: null },\n    { id: 9, name: \"Cannot Be Swarm\", key: \"CBS\", value: null, valueContextId: null },\n    { id: 10, name: \"Cannot Use Legendary Actions\", key: \"CULGA\", value: null, valueContextId: null },\n    { id: 11, name: \"Cannot Use Lair Actions\", key: \"CULRA\", value: null, valueContextId: null },\n    { id: 12, name: \"Evaluate_Updated_Passive_Perception\", key: \"EUPP\", value: null, valueContextId: null },\n    { id: 13, name: \"Evaluate Owner Passive Perception\", key: \"EOPP\", value: null, valueContextId: null },\n    { id: 14, name: \"Artificer HP Multiplier\", key: \"AHM\", value: 5, valueContextId: 252717 },\n    { id: 15, name: \"Max Hit Points Add Int Modifier\", key: \"MHPAIM\", value: null, valueContextId: 4 },\n    { id: 16, name: \"Max Hit Points Add Monster CON Modifier\", key: \"MHPAMCM\", value: null, valueContextId: 3 },\n    { id: 17, name: \"Use Challenge Rating As Level\", key: \"UCRAL\", value: null, valueContextId: null },\n    { id: 18, name: \"Max Hit Points Base Artificer Level\", key: \"MHPBAL\", value: null, valueContextId: 252717 },\n  ],\n  monsterTypes: [\n    {\n      pluralizedName: \"aberrations\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/665/636747837392078487.jpeg\",\n      id: 1,\n      name: \"Aberration\",\n      description:\n        \"Aberrations are utterly alien beings. Many of them have innate magical abilities drawn from the creature's alien mind rather than the mystical forces of the world. The quintessential aberrations are aboleths, and slaadi. \",\n    },\n    {\n      pluralizedName: \"beasts\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/664/636747837303835953.jpeg\",\n      id: 2,\n      name: \"Beast\",\n      description:\n        \"Beasts are nonhumanoid creatures that are a natural part of the fantasy ecology. Some of them have magical powers, but most are unintelligent and lack any society or language. Beasts include all varieties of ordinary animals, dinosaurs, and giant versions of animals. \",\n    },\n    {\n      pluralizedName: \"celestials\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/666/636747837434463638.jpeg\",\n      id: 3,\n      name: \"Celestial\",\n      description:\n        \"Celestials are creatures native to the Upper Planes. Many of them are the servants of deities, employed as messengers or agents in the mortal realm and throughout the planes. Celestials are good by nature, so the exceptional celestial who strays from a good alignment is a horrifying rarity. \",\n    },\n    {\n      pluralizedName: \"constructs\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/667/636747837482013331.jpeg\",\n      id: 4,\n      name: \"Construct\",\n      description:\n        \"Constructs include angels, couatls, and pegasi. Constructs are made, not born. Some are programmed by their creators to follow a simple set of instructions, while others are imbued with sentience and capable of independent thought. Golems are the iconic constructs. Many creatures native to the outer plane of Mechanus, such as modrons, are constructs shaped from the raw material of the plane by the will of more powerful creatures. \",\n    },\n    {\n      pluralizedName: \"dragons\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/668/636747837521115242.jpeg\",\n      id: 6,\n      name: \"Dragon\",\n      description:\n        \"Dragons are large reptilian creatures of ancient origin and tremendous power. True dragons, including the good metallic dragons and the evil chromatic dragons, are highly intelligent and have innate magic. Also in this category are creatures distantly related to true dragons, but less powerful, less intelligent, and less magical, such as wyverns and pseudodragons. \",\n    },\n    {\n      pluralizedName: \"elementals\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/669/636747837569942785.jpeg\",\n      id: 7,\n      name: \"Elemental\",\n      description:\n        \"Elementals are creatures native to the elemental planes. Some creatures of this type are little more than animate masses of their respective elements, including the creatures simply called elementals. Others have biological forms infused with elemental energy. The races of genies, including djinn and efreet, form the most important civilizations on the elemental planes. Other elemental creatures include azers, invisible stalkers, and water weirds. \",\n    },\n    {\n      pluralizedName: \"fey\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/671/636747837638112910.jpeg\",\n      id: 8,\n      name: \"Fey\",\n      description:\n        \"Fey are magical creatures closely tied to the forces of nature. They dwell in twilight groves and misty forests. In some worlds, they are closely tied to the Feywild, also called the Plane of Faerie. Some are also found in the Outer Planes, particularly the planes of Arborea and the Beastlands. Fey include dryads, pixies, and satyrs. \",\n    },\n    {\n      pluralizedName: \"fiends\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/672/636747837699453839.jpeg\",\n      id: 9,\n      name: \"Fiend\",\n      description:\n        \"Fiends are creatures of wickedness that are native to the Lower Planes. A few are the servants of deities, but many more labor under the leadership of archdevils and demon princes. Evil priests and mages sometimes summon fiends to the material world to do their bidding. If an evil celestial is a rarity, a good fiend is almost inconceivable. Fiends include demons, devils, hell hounds, rakshasas, and yugoloths.\",\n    },\n    {\n      pluralizedName: \"giants\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/674/636747837751071918.jpeg\",\n      id: 10,\n      name: \"Giant\",\n      description:\n        \"Giants tower over humans and their kind. They are humanlike in shape, though some have multiple heads (ettins) or deformities (fomorians). The six varieties of true giant are hill giants, stone giants, frost giants, fire giants, cloud giants, and storm giants. Besides these, creatures such as ogres and trolls are giants. \",\n    },\n    {\n      pluralizedName: \"humanoids\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/675/636747837794884984.jpeg\",\n      id: 11,\n      name: \"Humanoid\",\n      description:\n        \"Humanoids are the main peoples of a fantasy gaming world, both civilized and savage, including humans and a tremendous variety of other species. They have language and culture, few if any innate magical abilities (though most humanoids can learn spellcasting), and a bipedal form. The most common humanoid races are the ones most suitable as player characters: humans, dwarves, elves, and halflings. Almost as numerous but far more savage and brutal, and almost uniformly evil, are the races of goblinoids (goblins, hobgoblins, and bugbears), orcs, gnolls, lizardfolk, and kobolds. \",\n    },\n    {\n      pluralizedName: \"monstrosities\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/676/636747837839875603.jpeg\",\n      id: 13,\n      name: \"Monstrosity\",\n      description:\n        \"Monstrosities are monsters in the strictest sense--frightening creatures that are not ordinary, not truly natural, and almost never benign. Some are the results of magical experimentation gone awry (such as owlbears), and others are the product of terrible curses (including minotaurs). They defy categorization, and in some sense serve as a catch-all category for creatures that don't fit into any other type.\",\n    },\n    {\n      pluralizedName: \"oozes\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/678/636747837893364274.jpeg\",\n      id: 14,\n      name: \"Ooze\",\n      description:\n        \"Oozes are gelatinous creatures that rarely have a fixed shape. They are mostly subterranean, dwelling in caves and dungeons and feeding on refuse, carrion, or creatures unlucky enough to get in their way. Black puddings and gelatinous cubes are among the most recognizable oozes. \",\n    },\n    {\n      pluralizedName: \"plants\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/679/636747837952193011.jpeg\",\n      id: 15,\n      name: \"Plant\",\n      description:\n        \"Plants in this context are vegetable creatures, not ordinary flora. Most of them are ambulatory, and some are carnivorous. The quintessential plants are the shambling mound and the treant. Fungal creatures such as the gas spore and the myconid also fall into this category. \",\n    },\n    {\n      pluralizedName: \"undead\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/680/636747837998336262.jpeg\",\n      id: 16,\n      name: \"Undead\",\n      description:\n        \"Undead are once-living creatures brought to a horrifying state of undeath through the practice of necromantic magic or some unholy curse. Undead include walking corpses, such as vampires and zombies, as well as bodiless spirits, such as ghosts and specters.\\n\\n\",\n    },\n  ],\n  challengeRatings: [\n    { id: 1, value: 0.0, proficiencyBonus: 2, xp: 10 },\n    { id: 2, value: 0.125, proficiencyBonus: 2, xp: 25 },\n    { id: 3, value: 0.25, proficiencyBonus: 2, xp: 50 },\n    { id: 4, value: 0.5, proficiencyBonus: 2, xp: 100 },\n    { id: 5, value: 1.0, proficiencyBonus: 2, xp: 200 },\n    { id: 6, value: 2.0, proficiencyBonus: 2, xp: 450 },\n    { id: 7, value: 3.0, proficiencyBonus: 2, xp: 700 },\n    { id: 8, value: 4.0, proficiencyBonus: 2, xp: 1100 },\n    { id: 9, value: 5.0, proficiencyBonus: 3, xp: 1800 },\n    { id: 10, value: 6.0, proficiencyBonus: 3, xp: 2300 },\n    { id: 11, value: 7.0, proficiencyBonus: 3, xp: 2900 },\n    { id: 12, value: 8.0, proficiencyBonus: 3, xp: 3900 },\n    { id: 13, value: 9.0, proficiencyBonus: 4, xp: 5000 },\n    { id: 14, value: 10.0, proficiencyBonus: 4, xp: 5900 },\n    { id: 15, value: 11.0, proficiencyBonus: 4, xp: 7200 },\n    { id: 16, value: 12.0, proficiencyBonus: 4, xp: 8400 },\n    { id: 17, value: 13.0, proficiencyBonus: 5, xp: 10000 },\n    { id: 18, value: 14.0, proficiencyBonus: 5, xp: 11500 },\n    { id: 19, value: 15.0, proficiencyBonus: 5, xp: 13000 },\n    { id: 20, value: 16.0, proficiencyBonus: 5, xp: 15000 },\n    { id: 21, value: 17.0, proficiencyBonus: 6, xp: 18000 },\n    { id: 22, value: 18.0, proficiencyBonus: 6, xp: 20000 },\n    { id: 23, value: 19.0, proficiencyBonus: 6, xp: 22000 },\n    { id: 24, value: 20.0, proficiencyBonus: 6, xp: 25000 },\n    { id: 25, value: 21.0, proficiencyBonus: 7, xp: 33000 },\n    { id: 26, value: 22.0, proficiencyBonus: 7, xp: 41000 },\n    { id: 27, value: 23.0, proficiencyBonus: 7, xp: 50000 },\n    { id: 29, value: 24.0, proficiencyBonus: 7, xp: 62000 },\n    { id: 30, value: 25.0, proficiencyBonus: 8, xp: 75000 },\n    { id: 31, value: 26.0, proficiencyBonus: 8, xp: 90000 },\n    { id: 32, value: 27.0, proficiencyBonus: 8, xp: 105000 },\n    { id: 33, value: 28.0, proficiencyBonus: 8, xp: 120000 },\n    { id: 34, value: 29.0, proficiencyBonus: 9, xp: 135000 },\n    { id: 35, value: 30.0, proficiencyBonus: 9, xp: 155000 },\n  ],\n  creatureGroups: [\n    {\n      id: 1,\n      name: \"Wild Shape\",\n      categoryId: 2,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: \"Wild Shape\",\n      specialQualityText:\n        \"You can stay in a beast shape for a number of hours equal to half your druid level (rounded down). You then revert to your normal form unless you expend another use of this feature. You can revert to your normal form earlier by using a bonus action on your turn. You automatically revert if you fall unconscious, drop to 0 hit points, or die.\",\n      flags: [\"EOSKP\", \"EOSVP\", \"CBS\", \"CULGA\", \"CULRA\", \"EUPP\", \"EOPP\"],\n      monsterTypes: [],\n      ownerStats: [4, 5, 6],\n      description:\n        \"<p>You can use your action to magically assume the shape of a beast (or sometimes another creature) that you have seen before.</p>\",\n      actionSnippet:\n        \"<p><strong><em>Revert Form.</em></strong> You can revert to your normal form by using a bonus action on your turn.</p>\",\n    },\n    {\n      id: 2,\n      name: \"Familiar\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: false,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: \"Familiar\",\n      specialQualityText:\n        \"In combat, a familiar rolls its own initiative and acts on its own turn. A familiar can't attack, but it can take other actions as normal. When a familiar drops to 0 hit points, it disappears, leaving behind no physical form.\",\n      flags: [],\n      monsterTypes: [3, 8, 9],\n      ownerStats: [],\n      description:\n        \"<p>You gain the service of a familiar, a spirit that takes an animal (or sometimes another creature) form you choose.</p>\",\n      actionSnippet:\n        \"<p><strong><em>Attack Restriction.</em></strong> A familiar can't attack, but it can take other actions as normal.</p>\",\n    },\n    {\n      id: 3,\n      name: \"Beast Companion\",\n      categoryId: 1,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: \"Ranger's Companion\",\n      specialQualityText:\n        \"The beast obeys your commands as best as it can. It takes its turn on your initiative. On your turn, you can verbally command the beast where to move (no action required by you). You can use your action to verbally command it to take the Attack, Dash, Disengage, or Help action. If you don't issue a command, the beast takes the Dodge action. Once you have the Extra Attack feature, you can make one weapon attack yourself when you command the beast to take the Attack action.\\n\\nIf you are incapacitated or absent, the beast acts on its own, focusing on protecting you and itself. The beast never requires your command to use its reaction, such as when making an opportunity attack.\",\n      flags: [\"ACPB\", \"ARPB\", \"DRPB\", \"PSPB\", \"STPB\", \"HPLM\", \"EUPP\"],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>You gain a beast companion that accompanies you on your adventures and is trained to fight alongside you.</p>\",\n      actionSnippet:\n        \"<p><strong><em>Beast Master Bonus.</em></strong> The companion gains an additional bonus to attack and damage rolls equal to the ranger's proficiency bonus (not included in the attack descriptions below).</p>\",\n    },\n    {\n      id: 4,\n      name: \"Mount\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>A good mount can help you move more quickly through the wilderness, but its primary purpose is to carry the gear that would otherwise slow you down.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 5,\n      name: \"Pet\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>Allows you to display a creature special to you, such as a <em>figurine of wondrous power</em>.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 6,\n      name: \"Summoned\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>Allows you to display stat block references to summoned creatures from spells such as <em>conjure woodland beings</em>.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 7,\n      name: \"Misc\",\n      categoryId: 3,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: true,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description: \"<p>Allows you to display any other type of monster or NPC stat block.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 10,\n      name: \"Battle Smith Defender\",\n      categoryId: 3,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [\"ARPB\", \"DRPB\", \"PSPB\", \"AHM\", \"MHPAIM\", \"MHPAMCM\"],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>The tinkering you have done in your free time has borne you a faithful companion, an iron defender.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 11,\n      name: \"Sidekick\",\n      categoryId: 3,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [\"UCRAL\"],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>On your adventures, the DM might reveal that you’ve befriended a special character called a sidekick, who joins your party.</p><p>The DM will either tell you which type of sidekick to use or let you choose one. It’s up to you and the DM to decide who controls the sidekick in play.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 12,\n      name: \"Infusion\",\n      categoryId: 3,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: true,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description: \"<p>You learn intricate methods for magically creating a creature that serves you.</p>\",\n      actionSnippet: null,\n    },\n  ],\n  creatureGroupCategories: [\n    { id: 1, name: \"Companion\" },\n    { id: 2, name: \"Shapechange\" },\n    { id: 3, name: \"Other\" },\n  ],\n  environments: [\n    { id: 1, name: \"Arctic\" },\n    { id: 2, name: \"Coastal\" },\n    { id: 3, name: \"Desert\" },\n    { id: 4, name: \"Forest\" },\n    { id: 5, name: \"Grassland\" },\n    { id: 6, name: \"Hill\" },\n    { id: 7, name: \"Mountain\" },\n    { id: 8, name: \"Swamp\" },\n    { id: 9, name: \"Underdark\" },\n    { id: 10, name: \"Underwater\" },\n    { id: 11, name: \"Urban\" },\n  ],\n  armorTypes: [\n    { id: 1, name: \"Light Armor\" },\n    { id: 2, name: \"Medium Armor\" },\n    { id: 3, name: \"Heavy Armor\" },\n    { id: 4, name: \"Shield\" },\n  ],\n  gearTypes: [\n    { id: 1, name: \"Adventuring Gear\" },\n    { id: 2, name: \"Armor\" },\n    { id: 3, name: \"Artifact\" },\n    { id: 4, name: \"Mount\" },\n    { id: 5, name: \"Poison\" },\n    { id: 6, name: \"Potion\" },\n    { id: 7, name: \"Ring\" },\n    { id: 8, name: \"Rod\" },\n    { id: 9, name: \"Scroll\" },\n    { id: 10, name: \"Staff\" },\n    { id: 11, name: \"Tool\" },\n    { id: 12, name: \"Vehicle (Land)\" },\n    { id: 13, name: \"Wand\" },\n    { id: 14, name: \"Weapon\" },\n    { id: 15, name: \"Wondrous Item\" },\n    { id: 16, name: \"Equipment Pack\" },\n    { id: 17, name: \"Vehicle (Water)\" },\n    { id: 18, name: \"Gemstone\" },\n  ],\n  naturalActions: [\n    {\n      id: 1,\n      entityTypeId: 1120657896,\n      limitedUse: null,\n      name: \"Unarmed Strike\",\n      description:\n        \"Instead of using a weapon to make a melee weapon attack, you can use an unarmed strike: a punch, kick, head-butt, or similar forceful blow (none of which count as weapons). On a hit, an unarmed strike deals bludgeoning damage equal to 1 + your Strength modifier. You are proficient with your unarmed strikes.\",\n      snippet:\n        \"You can punch, kick, head-butt, or use a similar forceful blow and deal bludgeoning damage equal to 1 + STR modifier\",\n      abilityModifierStatId: 1,\n      onMissDescription: null,\n      saveFailDescription: null,\n      saveSuccessDescription: null,\n      saveStatId: null,\n      fixedSaveDc: null,\n      attackTypeRange: 1,\n      actionType: 1,\n      attackSubtype: 3,\n      dice: null,\n      value: 1,\n      damageTypeId: 1,\n      isMartialArts: true,\n      isProficient: true,\n      spellRangeType: null,\n      displayAsAttack: null,\n      range: null,\n      activation: { activationTime: 1, activationType: 1 },\n      attackCustomData: {\n        name: null,\n        notes: null,\n        damageBonus: null,\n        toHitBonus: null,\n        toHit: null,\n        isOffhand: null,\n        isSilver: null,\n        isAdamantine: null,\n        isProficient: null,\n        saveDcBonus: null,\n        saveDc: null,\n        weight: null,\n        displayAsAttack: null,\n        cost: null,\n      },\n      componentId: 0,\n      componentTypeId: 0,\n    },\n  ],\n  adjustmentTypes: [\n    {\n      id: 2,\n      name: \"Additional Magic Bonus\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: -10 },\n        { id: 2, name: \"Maximum\", value: 10 },\n      ],\n    },\n    {\n      id: 3,\n      name: \"Additional Misc Bonus\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: -10 },\n        { id: 2, name: \"Maximum\", value: 10 },\n      ],\n    },\n    { id: 32, name: \"Armor Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 49, name: \"Capacity Override\", dataType: 3, constraints: [] },\n    { id: 50, name: \"Capacity Weight Override\", dataType: 2, constraints: [] },\n    { id: 19, name: \"Cost Override\", dataType: 2, constraints: [] },\n    {\n      id: 42,\n      name: \"Creature AC\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 1 },\n        { id: 2, name: \"Maximum\", value: 999 },\n      ],\n    },\n    { id: 45, name: \"Creature Alignment\", dataType: 1, constraints: [] },\n    {\n      id: 43,\n      name: \"Creature Hit Points\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 1 },\n        { id: 2, name: \"Maximum\", value: 999 },\n      ],\n    },\n    { id: 47, name: \"Creature Notes\", dataType: 3, constraints: [] },\n    { id: 46, name: \"Creature Size\", dataType: 1, constraints: [] },\n    { id: 44, name: \"Creature Type Override\", dataType: 1, constraints: [] },\n    { id: 31, name: \"Dice Count Override\", dataType: 1, constraints: [] },\n    { id: 30, name: \"Dice Type Override\", dataType: 1, constraints: [] },\n    { id: 16, name: \"Display As Attack\", dataType: 4, constraints: [] },\n    { id: 18, name: \"Dual Wield\", dataType: 4, constraints: [] },\n    { id: 10, name: \"Fixed Value Bonus\", dataType: 1, constraints: [] },\n    { id: 11, name: \"Fixed Value Override\", dataType: 1, constraints: [] },\n    { id: 21, name: \"Is Adamantine\", dataType: 4, constraints: [] },\n    { id: 48, name: \"Is Dedicated Weapon\", dataType: 4, constraints: [] },\n    { id: 29, name: \"Is Hexblade\", dataType: 4, constraints: [] },\n    { id: 28, name: \"Is Pact Weapon\", dataType: 4, constraints: [] },\n    { id: 17, name: \"Is Proficient\", dataType: 4, constraints: [] },\n    { id: 20, name: \"Is Silver\", dataType: 4, constraints: [] },\n    { id: 35, name: \"Language Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 37, name: \"Movement Override\", dataType: 1, constraints: [] },\n    { id: 8, name: \"Name Override\", dataType: 3, constraints: [] },\n    { id: 9, name: \"Notes\", dataType: 3, constraints: [] },\n    {\n      id: 1,\n      name: \"Override AC\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 4,\n      name: \"Override Base Armor + DEX\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 7,\n      name: \"Override Passive Insight\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 6,\n      name: \"Override Passive Investigation\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 5,\n      name: \"Override Passive Perception\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    { id: 14, name: \"Save DC Bonus\", dataType: 1, constraints: [] },\n    { id: 15, name: \"Save DC Override\", dataType: 1, constraints: [] },\n    { id: 40, name: \"Saving Throw Magic Bonus\", dataType: 1, constraints: [] },\n    { id: 39, name: \"Saving Throw Misc Bonus\", dataType: 1, constraints: [] },\n    { id: 38, name: \"Saving Throw Override\", dataType: 1, constraints: [] },\n    { id: 41, name: \"Saving Throw Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 36, name: \"Sense Override\", dataType: 1, constraints: [] },\n    { id: 25, name: \"Skill Magic Bonus\", dataType: 1, constraints: [] },\n    { id: 24, name: \"Skill Misc Bonus\", dataType: 1, constraints: [] },\n    { id: 23, name: \"Skill Override\", dataType: 1, constraints: [] },\n    { id: 26, name: \"Skill Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 27, name: \"Skill Stat Override\", dataType: 1, constraints: [] },\n    { id: 12, name: \"To Hit Bonus\", dataType: 1, constraints: [] },\n    { id: 13, name: \"To Hit Override\", dataType: 1, constraints: [] },\n    { id: 34, name: \"Tool Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 33, name: \"Weapon Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 22, name: \"Weight Override\", dataType: 2, constraints: [] },\n  ],\n  weaponCategories: [\n    { id: 1, entityTypeId: 660121713, name: \"Simple\" },\n    { id: 2, entityTypeId: 660121713, name: \"Martial\" },\n    { id: 3, entityTypeId: 660121713, name: \"Firearms\" },\n  ],\n  spellComponents: [\n    {\n      id: 1,\n      name: \"Verbal\",\n      shortName: \"V\",\n      description:\n        \"Most spells require the chanting of mystic words. The words themselves aren't the source of the spell's power; rather, the particular combination of sounds, with specific pitch and resonance, sets the threads of magic in motion. Thus, a character who is gagged or in an area of silence, such as one created by the silence spell, can't cast a spell with a verbal component.\\n\\n\",\n    },\n    {\n      id: 2,\n      name: \"Somatic\",\n      shortName: \"S\",\n      description:\n        \"Spellcasting gestures might include a forceful gesticulation or an intricate set of gestures. If a spell requires a somatic component, the caster must have free use of at least one hand to perform these gestures.\\n\\n\",\n    },\n    {\n      id: 3,\n      name: \"Material\",\n      shortName: \"M\",\n      description:\n        \"Casting some spells requires particular objects, specified in parentheses in the component entry. A character can use a component pouch or a spellcasting focus (found in “Equipment”) in place of the components specified for a spell. But if a cost is indicated for a component, a character must have that specific component before he or she can cast the spell. \\nIf a spell states that a material component is consumed by the spell, the caster must provide this component for each casting of the spell. A spellcaster must have a hand free to access a spell's material components--or to hold a spellcasting focus--but it can be the same hand that he or she uses to perform somatic components.\\n\\n\",\n    },\n    {\n      id: 4,\n      name: \"Royalty\",\n      shortName: \"R\",\n      description:\n        \"To cast a spell that employs a royalty component (including using a spell scroll or other magic item that stores such a spell), a caster must have sufficient funds on their person. The cost of the casting is set by the caster who creates the spell, but is typically 1 gp per spell slot level. When the spell is cast, the royalty is magically transported to a coffer or other object designated by the creating spellcaster. This payment is made whether the caster using the spell is aware of the royalty component or not. If the caster does not have sufficient funds, the spell is not lost but it cannot be cast.\\n\\nThough many casters have tried to circumvent the royalty component, none have ever fully succeeded. However, it is said that a character can attempt a DC 15 Intelligence (Arcana) check while casting a spell with a royalty component. With a successful check, the payment is taken from a random creature within 10 feet of the caster, without that creature’s knowledge.\",\n    },\n  ],\n  activationTypes: [\n    { id: 1, name: \"Action\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 2, name: \"No Action\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 3, name: \"Bonus Action\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 4, name: \"Reaction\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 6, name: \"Minute\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 7, name: \"Hour\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 8, name: \"Special\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  basicActions: [\n    {\n      id: 1,\n      name: \"Attack\",\n      description:\n        '<p>The most common action to take in combat is the Attack action, whether you are swinging a sword, firing an arrow from a bow, or brawling with your fists.</p>\\n<p>With this action, you make one melee or ranged attack. See the \"Making an Attack\" section for the rules that govern attacks.</p>\\n<p>Certain features, such as the Extra Attack feature of the fighter, allow you to make more than one attack with this action.</p>',\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 2,\n      name: \"Cast a Spell\",\n      description:\n        \"<p>Spellcasters such as wizards and clerics, as well as many monsters, have access to spells and can use them to great effect in combat. Each spell has a casting time, which specifies whether the caster must use an action, a reaction, minutes, or even hours to cast the spell. Casting a spell is, therefore, not necessarily an action. Most spells do have a casting time of 1 action, so a spellcaster often uses his or her action in combat to cast such a spell.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 4,\n      name: \"Dash\",\n      description:\n        \"<p>When you take the Dash action, you gain extra movement for the current turn. The increase equals your speed, after applying any modifiers. With a speed of 30 feet, for example, you can move up to 60 feet on your turn if you dash.</p>\\n<p>Any increase or decrease to your speed changes this additional movement by the same amount. If your speed of 30 feet is reduced to 15 feet, for instance, you can move up to 30 feet this turn if you dash.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 5,\n      name: \"Disengage\",\n      description:\n        \"<p>If you take the Disengage action, your movement doesn't provoke opportunity attacks for the rest of the turn.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 6,\n      name: \"Dodge\",\n      description:\n        \"<p>When you take the Dodge action, you focus entirely on avoiding attacks. Until the start of your next turn, any attack roll made against you has disadvantage if you can see the attacker, and you make Dexterity saving throws with advantage. You lose this benefit if you are incapacitated or if your speed drops to 0.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 7,\n      name: \"Help\",\n      description:\n        \"<p>You can lend your aid to another creature in the completion of a task. When you take the Help action, the creature you aid gains advantage on the next ability check it makes to perform the task you are helping with, provided that it makes the check before the start of your next turn.</p>\\n<p>Alternatively, you can aid a friendly creature in attacking a creature within 5 feet of you. You feint, distract the target, or in some other way team up to make your ally's attack more effective. If your ally attacks the target before your next turn, the first attack roll is made with advantage.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 8,\n      name: \"Hide\",\n      description:\n        '<p>When you take the Hide action, you make a Dexterity (Stealth) check in an attempt to hide, following the rules for hiding. If you succeed, you gain certain benefits, as described in the \"Unseen Attackers and Targets\" section later in this chapter.</p>',\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 9,\n      name: \"Ready\",\n      description:\n        '<p>Sometimes you want to get the jump on a foe or wait for a particular circumstance before you act. To do so, you can take the Ready action on your turn, which lets you act using your reaction before the start of your next turn.</p>\\n<p>First, you decide what perceivable circumstance will trigger your reaction. Then, you choose the action you will take in response to that trigger, or you choose to move up to your speed in response to it. Examples include \"If the cultist steps on the trapdoor, I\\'ll pull the lever that opens it,\" and \"If the goblin steps next to me, I move away.\"</p>\\n<p>When the trigger occurs, you can either take your reaction right after the trigger finishes or ignore the trigger. Remember that you can take only one reaction per round.</p>\\n<p>When you ready a spell, you cast it as normal but hold its energy, which you release with your reaction when the trigger occurs. To be readied, a spell must have a casting time of 1 action, and holding onto the spell\\'s magic requires concentration. If your concentration is broken, the spell dissipates without taking effect. For example, if you are concentrating on the <strong>web</strong> spell and ready <strong>magic missile</strong>, your <strong>web</strong> spell ends, and if you take damage before you release <strong>magic missile</strong> with your reaction, your concentration might be broken.</p>',\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 10,\n      name: \"Search\",\n      description:\n        \"<p>When you take the Search action, you devote your attention to finding something. Depending on the nature of your search, the GM might have you make a Wisdom (Perception) check or an Intelligence (Investigation) check.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 11,\n      name: \"Use an Object\",\n      description:\n        \"<p>You normally interact with an object while doing something else, such as when you draw a sword as part of an attack. When an object requires your action for its use, you take the Use an Object action. This action is also useful when you want to interact with more than one object on your turn.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1001,\n      name: \"Opportunity Attack\",\n      description:\n        \"<p>You can make an opportunity attack when a hostile creature that you can see moves out of your reach. To make the opportunity attack, you use your reaction to make one melee attack against the provoking creature. The attack occurs right before the creature leaves your reach</p><p></p>\",\n      activation: { activationTime: null, activationType: 4 },\n    },\n    {\n      id: 1002,\n      name: \"Grapple\",\n      description:\n        \"<p>When you want to grab a creature or wrestle with it, you can use the Attack action to make a special melee attack, a grapple. If you're able to make multiple attacks with the Attack action, this attack replaces one of them.</p>\\n<p>The target of your grapple must be no more than one size larger than you and must be within your reach. Using at least one free hand, you try to seize the target by making a grapple check instead of an attack roll: a Strength (Athletics) check contested by the target's Strength (Athletics) or Dexterity (Acrobatics) check (the target chooses the ability to use). If you succeed, you subject the target to the grappled condition. The condition specifies the things that end it, and you can release the target whenever you like (no action required).</p>\\n<p><strong>Escaping a Grapple.</strong> A grappled creature can use its action to escape. To do so, it must succeed on a Strength (Athletics) or Dexterity (Acrobatics) check contested by your Strength (Athletics) check.</p>\\n<p><strong>Moving a Grappled Creature.</strong> When you move, you can drag or carry the grappled creature with you, but your speed is halved, unless the creature is two or more sizes smaller than you.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1003,\n      name: \"Shove\",\n      description:\n        \"<p>Using the Attack action, you can make a special melee attack to shove a creature, either to knock it prone or push it away from you. If you're able to make multiple attacks with the Attack action, this attack replaces one of them.</p>\\n<p>The target must be no more than one size larger than you and must be within your reach. Instead of making an attack roll, you make a Strength (Athletics) check contested by the target's Strength (Athletics) or Dexterity (Acrobatics) check (the target chooses the ability to use). You succeed automatically if the target is incapacitated. If you succeed, you either knock the target prone or push it 5 feet away from you.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1004,\n      name: \"Improvise\",\n      description:\n        \"<p>Your character can do things not covered by the actions in this chapter, such as breaking down doors, intimidating enemies, sensing weaknesses in magical defenses, or calling for a parley with a foe. The only limits to the actions you can attempt are your imagination and your character's ability scores. See the descriptions of the ability scores in chapter 7 for inspiration as you improvise.</p>\\n<p>When you describe an action not detailed elsewhere in the rules, the DM tells you whether that action is possible and what kind of roll you need to make, if any, to determine success or failure.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1005,\n      name: \"Two-Weapon Fighting\",\n      description:\n        \"<p>When you take the Attack action and attack with a light melee weapon that you're holding in one hand, you can use a bonus action to attack with a different light melee weapon that you're holding in the other hand. You don't add your ability modifier to the damage of the bonus attack, unless that modifier is negative.</p>\\n<p>If either weapon has the thrown property, you can throw the weapon, instead of making a melee attack with it.</p>\",\n      activation: { activationTime: null, activationType: 3 },\n    },\n    {\n      id: 1006,\n      name: \"Interact with an Object\",\n      description:\n        \"<p>Here are a few examples of the sorts of thing you can do in tandem with your movement and action:</p>\\n<ul>\\n<li>draw or sheathe a sword</li>\\n<li>open or close a door</li>\\n<li>withdraw a potion from your backpack</li>\\n<li>pick up a dropped axe</li>\\n<li>take a bauble from a table</li>\\n<li>remove a ring from your finger</li>\\n<li>stuff some food into your mouth</li>\\n<li>plant a banner in the ground</li>\\n<li>fish a few coins from your belt pouch</li>\\n<li>drink all the ale in a flagon</li>\\n<li>throw a lever or a switch</li>\\n<li>pull a torch from a sconce</li>\\n<li>take a book from a shelf you can reach</li>\\n<li>extinguish a small flame</li>\\n<li>don a mask</li>\\n<li>pull the hood of your cloak up and over your head</li>\\n<li>put your ear to a door</li>\\n<li>kick a small stone</li>\\n<li>turn a key in a lock</li>\\n<li>tap the floor with a 10-foot pole</li>\\n<li>hand an item to another character</li>\\n</ul>\",\n      activation: { activationTime: null, activationType: 8 },\n    },\n  ],\n  rules: [\n    {\n      id: 34,\n      name: \"Race\",\n      description:\n        \"Your choice of race affects many different aspects of your character. It establishes fundamental qualities that exist throughout your character’s adventuring career. When making this decision, keep in mind the kind of character you want to play. For example, a halfling could be a good choice for a sneaky rogue, a dwarf makes a tough warrior, and an elf can be a master of arcane magic.\",\n    },\n    {\n      id: 35,\n      name: \"Class\",\n      description:\n        \"Class is the primary definition of what your character can do. It’s more than a profession; it’s your character’s calling. Class shapes the way you think about the world and interact with it and your relationship with other people and powers in the multiverse. A fighter, for example, might view the world in pragmatic terms of strategy and maneuvering, and see herself as just a pawn in a much larger game. A cleric, by contrast, might see himself as a willing servant in a god’s unfolding plan or a conflict brewing among various deities. While the fighter has contacts in a mercenary company or army, the cleric might know a number of priests, paladins, and devotees who share his faith.\",\n    },\n    {\n      id: 36,\n      name: \"Level\",\n      description:\n        \"Starting off at 1st level marks your character’s entry into the adventuring life. As your character goes on adventures and overcomes challenges, he or she gains experience, represented by experience points. A character who reaches a specified experience point total advances in capability. This advancement is called gaining a level.\",\n    },\n    {\n      id: 37,\n      name: \"Experience Points\",\n      description:\n        \"As your character goes on adventures and overcomes challenges, he or she gains experience, represented by experience points. A character who reaches a specified experience point total advances in capability. This advancement is called gaining a level.\",\n    },\n    {\n      id: 38,\n      name: \"Hit Points\",\n      description:\n        \"Hit points represent a combination of physical and mental durability, the will to live, and luck. Creatures with more hit points are more difficult to kill. Those with fewer hit points are more fragile. \\n\\nA creature's current hit points (usually just called hit points) can be any number from the creature's hit point maximum down to 0. This number changes frequently as a creature takes damage or receives healing. \\n\\nWhenever a creature takes damage, that damage is subtracted from its hit points. The loss of hit points has no effect on a creature's capabilities until the creature drops to 0 hit points.\",\n    },\n    {\n      id: 39,\n      name: \"Hit Dice\",\n      description:\n        \"Your hit points are determined by your Hit Dice (short for Hit Point Dice).\\n\\nAt 1st level, your character has 1 Hit Die, and the die type is determined by your class. You start with hit points equal to the highest roll of that die, as indicated in your class description. (You also add your Constitution modifier.)\",\n    },\n    {\n      id: 40,\n      name: \"Proficiency Bonus\",\n      description:\n        '<p>Characters have a proficiency bonus determined by level, as detailed in <a href=\"https://www.dndbeyond.com/compendium/rules/phb/step-by-step-characters\">chapter 1</a>. Monsters also have this bonus, which is incorporated in their stat blocks. The bonus is used in the rules on ability checks, saving throws, and attack rolls.</p>\\n<p>Your proficiency bonus can’t be added to a single die roll or other number more than once. For example, if two different rules say you can add your proficiency bonus to a Wisdom saving throw, you nevertheless add the bonus only once when you make the save.</p>\\n<p>Occasionally, your proficiency bonus might be multiplied or divided (doubled or halved, for example) before you apply it. For example, the rogue’s Expertise feature doubles the proficiency bonus for certain ability checks. If a circumstance suggests that your proficiency bonus applies more than once to the same roll, you still add it only once and multiply or divide it only once.</p>\\n<p>By the same token, if a feature or effect allows you to multiply your proficiency bonus when making an ability check that wouldn’t normally benefit from your proficiency bonus, you still don’t add the bonus to the check. For that check your proficiency bonus is 0, given the fact that multiplying 0 by any number is still 0. For instance, if you lack proficiency in the History skill, you gain no benefit from a feature that lets you double your proficiency bonus when you make Intelligence (History) checks.</p>\\n<p>In general, you don’t multiply your proficiency bonus for attack rolls or saving throws. If a feature or effect allows you to do so, these same rules apply.</p>',\n    },\n    {\n      id: 41,\n      name: \"Ability Scores\",\n      description:\n        \"Each of a creature's abilities has a score, a number that defines the magnitude of that ability. An ability score is not just a measure of innate capabilities, but also encompasses a creature's training and competence in activities related to that ability. \\n\\nA score of 10 or 11 is the normal human average, but adventurers and many monsters are a cut above average in most abilities. A score of 18 is the highest that a person usually reaches. Adventurers can have scores as high as 20, and monsters and divine beings can have scores as high as 30. \\n\\nEach ability also has a modifier, derived from the score and ranging from -5 (for an ability score of 1) to +10 (for a score of 30). The Ability Scores and Modifiers table notes the ability modifiers for the range of possible ability scores, from 1 to 30.\",\n    },\n    {\n      id: 42,\n      name: \"Alignment\",\n      description:\n        \"A typical creature in the game world has an alignment, which broadly describes its moral and personal attitudes. Alignment is a combination of two factors: one identifies morality (good, evil, or neutral), and the other describes attitudes toward society and order (lawful, chaotic, or neutral). Thus, nine distinct alignments define the possible combinations.\",\n    },\n    {\n      id: 43,\n      name: \"Lawful Good\",\n      description:\n        \"Lawful good (LG) creatures can be counted on to do the right thing as expected by society. Gold dragons, paladins, and most dwarves are lawful good.\",\n    },\n    {\n      id: 44,\n      name: \"Neutral Good\",\n      description:\n        \"Neutral good (NG) folk do the best they can to help others according to their needs. Many celestials, some cloud giants, and most gnomes are neutral good.\",\n    },\n    {\n      id: 45,\n      name: \"Chaotic Good\",\n      description:\n        \"Chaotic good (CG) creatures act as their conscience directs, with little regard for what others expect. Copper dragons, many elves, and unicorns are chaotic good.\",\n    },\n    {\n      id: 46,\n      name: \"Neutral\",\n      description:\n        \"Neutral (N) is the alignment of those who prefer to steer clear of moral questions and don’t take sides, doing what seems best at the time. Lizardfolk, most druids, and many humans are neutral.\",\n    },\n    {\n      id: 47,\n      name: \"Lawful Evil\",\n      description:\n        \"Lawful evil (LE) creatures methodically take what they want, within the limits of a code of tradition, loyalty, or order. Devils, blue dragons, and hobgoblins are lawful evil.\",\n    },\n    {\n      id: 48,\n      name: \"Neutral Evil\",\n      description:\n        \"Neutral evil (NE) is the alignment of those who do whatever they can get away with, without compassion or qualms. Many drow, some cloud giants, and goblins are neutral evil.\",\n    },\n    {\n      id: 49,\n      name: \"Chaotic Evil\",\n      description:\n        \"Chaotic evil (CE) creatures act with arbitrary violence, spurred by their greed, hatred, or bloodlust. Demons, red dragons, and orcs are chaotic evil.\",\n    },\n    {\n      id: 50,\n      name: \"Lawful Neutral\",\n      description:\n        \"Lawful neutral (LN) individuals act in accordance with law, tradition, or personal codes. Many monks and some wizards are lawful neutral.\",\n    },\n    {\n      id: 51,\n      name: \"Chaotic Neutral\",\n      description:\n        \"Chaotic neutral (CN) creatures follow their whims, holding their personal freedom above all else. Many barbarians and rogues, and some bards, are chaotic neutral.\",\n    },\n    {\n      id: 52,\n      name: \"Background\",\n      description:\n        \"Every story has a beginning. Your character’s background reveals where you came from, how you became an adventurer, and your place in the world. Your fighter might have been a courageous knight or a grizzled soldier. Your wizard could have been a sage or an artisan. Your rogue might have gotten by as a guild thief or commanded audiences as a jester.\",\n    },\n    {\n      id: 53,\n      name: \"Personality Traits\",\n      description:\n        \"Personality traits are small, simple ways to help you set your character apart from every other character. Your personality traits should tell you something interesting and fun about your character. They should be self-descriptions that are specific about what makes your character stand out.\\n\\nPersonality traits might describe the things your character likes, his or her past accomplishments, things your character dislikes or fears, your character’s self-attitude or mannerisms, or the influence of his or her ability scores.\",\n    },\n    {\n      id: 54,\n      name: \"Bonds\",\n      description:\n        \"Bonds represent a character’s connections to people, places, and events in the world. They tie you to things from your background. They might inspire you to heights of heroism, or lead you to act against your own best interests if they are threatened. They can work very much like ideals, driving a character’s motivations and goals. \\n\\nBonds might answer any of these questions: Whom do you care most about? To what place do you feel a special connection? What is your most treasured possession?\",\n    },\n    {\n      id: 55,\n      name: \"Ideals\",\n      description:\n        \"Your ideals are the things that you believe in most strongly, the fundamental moral and ethical principles that compel you to act as you do. Ideals encompass everything from your life goals to your core belief system. \\n\\nIdeals might answer any of these questions: What are the principles that you will never betray? What would prompt you to make sacrifices? What drives you to act and guides your goals and ambitions? What is the single most important thing you strive for?\",\n    },\n    {\n      id: 56,\n      name: \"Flaws\",\n      description:\n        \"Your character’s flaw represents some vice, compulsion, fear, or weakness—in particular, anything that someone else could exploit to bring you to ruin or cause you to act against your best interests. More significant than negative personality traits, a flaw might answer any of these questions: What enrages you? What’s the one person, concept, or event that you are terrified of? What are your vices?\",\n    },\n    {\n      id: 57,\n      name: \"Armor Class\",\n      description:\n        \"Your Armor Class (AC) represents how well your character avoids being wounded in battle. Things that contribute to your AC include the armor you wear, the shield you carry, and your Dexterity modifier. Not all characters wear armor or carry shields, however. \\n\\nWithout armor or a shield, your character’s AC equals 10 + his or her Dexterity modifier. If your character wears armor, carries a shield, or both, calculate your AC using the rules in the Equipment section. Record your AC on your character sheet.\",\n    },\n    {\n      id: 58,\n      name: \"Acid Damage\",\n      description:\n        \"The corrosive spray of an adult black dragon's breath and the dissolving enzymes secreted by a black pudding deal acid damage.\",\n    },\n    {\n      id: 59,\n      name: \"Bludgeoning Damage\",\n      description: \"Blunt force attacks--hammers, falling, constriction, and the like--deal bludgeoning damage.\",\n    },\n    {\n      id: 60,\n      name: \"Cold Damage\",\n      description:\n        \"The infernal chill radiating from an ice devil's spear and the frigid blast of a young white dragon's breath deal cold damage.\",\n    },\n    {\n      id: 61,\n      name: \"Fire Damage\",\n      description: \"Ancient red dragons breathe fire, and many spells conjure flames to deal fire damage.\",\n    },\n    {\n      id: 62,\n      name: \"Force Damage\",\n      description:\n        \"Force is pure magical energy focused into a damaging form. Most effects that deal force damage are spells, including magic missile and spiritual weapon.\",\n    },\n    {\n      id: 63,\n      name: \"Lightning Damage\",\n      description: \"A lightning bolt spell and a blue dragon wyrmling's breath deal lightning damage.\",\n    },\n    {\n      id: 64,\n      name: \"Necrotic Damage\",\n      description:\n        \"Necrotic damage, dealt by certain undead and a spell such as chill touch, withers matter and even the soul.\",\n    },\n    {\n      id: 65,\n      name: \"Piercing Damage\",\n      description: \"Puncturing and impaling attacks, including spears and monsters' bites, deal piercing damage.\",\n    },\n    {\n      id: 66,\n      name: \"Poison Damage\",\n      description: \"Venomous stings and the toxic gas of an adult green dragon's breath deal poison damage.\",\n    },\n    { id: 67, name: \"Psychic Damage\", description: \"Mental abilities such as a psionic blast deal psychic damage.\" },\n    {\n      id: 68,\n      name: \"Radiant Damage\",\n      description:\n        \"Radiant damage, dealt by a cleric's flame strike spell or an angel's smiting weapon, sears the flesh like fire and overloads the spirit with power.\",\n    },\n    { id: 69, name: \"Slashing Damage\", description: \"Swords, axes, and monsters' claws deal slashing damage.\" },\n    {\n      id: 70,\n      name: \"Thunder Damage\",\n      description: \"A concussive burst of sound, such as the effect of the thunderwave spell, deals thunder damage.\",\n    },\n    {\n      id: 71,\n      name: \"Critical Hits\",\n      description:\n        \"When you score a critical hit, you get to roll extra dice for the attack's damage against the target. Roll all of the attack's damage dice twice and add them together. Then add any relevant modifiers as normal. To speed up play, you can roll all the damage dice at once.\",\n    },\n    {\n      id: 72,\n      name: \"Damage Resistance\",\n      description:\n        \"Some creatures and objects are exceedingly difficult to hurt with certain types of damage.\\n\\nIf a creature or an object has resistance to a damage type, damage of that type is halved against it.\\n\\nResistance is applied after all other modifiers to damage. For example, a creature has resistance to bludgeoning damage and is hit by an attack that deals 25 bludgeoning damage. The creature is also within a magical aura that reduces all damage by 5. The 25 damage is first reduced by 5 and then halved, so the creature takes 10 damage.\\n\\nMultiple instances of resistance that affect the same damage type count as only one instance. For example, if a creature has resistance to fire damage as well as resistance to all nonmagical damage, the damage of a nonmagical fire is reduced by half against the creature, not reduced by three-quarters.\",\n    },\n    {\n      id: 73,\n      name: \"Damage Vulnerability\",\n      description:\n        \"Some creatures and objects are unusually easy to hurt with certain types of damage. \\n\\nIf a creature or an object has vulnerability to a damage type, damage of that type is doubled against it. \\n\\nMultiple instances of vulnerability that affect the same damage type count as only one instance.\",\n    },\n    {\n      id: 74,\n      name: \"Instant Death\",\n      description:\n        \"Massive damage can kill you instantly. When damage reduces you to 0 hit points and there is damage remaining, you die if the remaining damage equals or exceeds your hit point maximum. \\n\\nFor example, a cleric with a maximum of 12 hit points currently has 6 hit points. If she takes 18 damage from an attack, she is reduced to 0 hit points, but 12 damage remains. Because the remaining damage equals her hit point maximum, the cleric dies.\",\n    },\n    {\n      id: 75,\n      name: \"Death Saving Throws\",\n      description:\n        \"Whenever you start your turn with 0 hit points, you must make a special saving throw, called a death saving throw, to determine whether you creep closer to death or hang onto life. Unlike other saving throws, this one isn't tied to any ability score. You are in the hands of fate now, aided only by spells and features that improve your chances of succeeding on a saving throw. \\n\\nRoll a d20. If the roll is 10 or higher, you succeed. Otherwise, you fail. A success or failure has no effect by itself. On your third success, you become stable (see below). On your third failure, you die. The successes and failures don't need to be consecutive; keep track of both until you collect three of a kind. The number of both is reset to zero when you regain any hit points or become stable.\",\n    },\n    {\n      id: 76,\n      name: \"Temporary Hit Points\",\n      description:\n        \"Some spells and special abilities confer temporary hit points to a creature. Temporary hit points aren't actual hit points; they are a buffer against damage, a pool of hit points that protect you from injury. \\n\\nWhen you have temporary hit points and take damage, the temporary hit points are lost first, and any leftover damage carries over to your normal hit points. For example, if you have 5 temporary hit points and take 7 damage, you lose the temporary hit points and then take 2 damage. \\n\\nBecause temporary hit points are separate from your actual hit points, they can exceed your hit point maximum. A character can, therefore, be at full hit points and receive temporary hit points.\",\n    },\n    {\n      id: 77,\n      name: \"Saving Throws\",\n      description:\n        \"<p>A saving throw — also called a save — represents an attempt to resist a spell, a trap, a poison, a disease, or a similar threat. You don’t normally decide to make a saving throw; you are forced to make one because your character or monster is at risk of harm.</p>\\n<p>To make a saving throw, roll a d20 and add the appropriate ability modifier. For example, you use your Dexterity modifier for a Dexterity saving throw.</p>\\n<p>A saving throw can be modified by a situational bonus or penalty and can be affected by advantage and disadvantage, as determined by the DM.</p>\\n<p>Each class gives proficiency in at least two saving throws. The wizard, for example, is proficient in Intelligence saves. As with skill proficiencies, proficiency in a saving throw lets a character add his or her proficiency bonus to saving throws made using a particular ability score. Some monsters have saving throw proficiencies as well.</p>\\n<p>The Difficulty Class for a saving throw is determined by the effect that causes it. For example, the DC for a saving throw allowed by a spell is determined by the caster’s spellcasting ability and proficiency bonus.</p>\\n<p>The result of a successful or failed saving throw is also detailed in the effect that allows the save. Usually, a successful save means that a creature suffers no harm, or reduced harm, from an effect.</p>\",\n    },\n    {\n      id: 78,\n      name: \"Senses (Passive Checks)\",\n      description:\n        '<h3 id=\"PassiveChecks\">Passive Checks</h3>\\n<p>A passive check is a special kind of ability check that doesn\\'t involve any die rolls. Such a check can represent the average result for a task done repeatedly, such as searching for secret doors over and over again, or can be used when the DM wants to secretly determine whether the characters succeed at something without rolling dice, such as noticing a hidden monster.</p>\\n<p>Here\\'s how to determine a character\\'s total for a passive check:</p>\\n<p><strong>10 + all modifiers that normally apply to the check</strong></p>\\n<p>If the character has advantage on the check, add 5. For disadvantage, subtract 5. The game refers to a passive check total as a <strong>score</strong>.</p>\\n<p>For example, if a 1st-level character has a Wisdom of 15 and proficiency in Perception, he or she has a passive Wisdom (Perception) score of 14.</p>\\n<p>The rules on hiding in the “<a href=\"https://www.dndbeyond.com/compendium/rules/phb/using-ability-scores#Dexterity\">Dexterity</a>” section below rely on passive checks, as do the exploration rules in chapter 8, “<a href=\"https://www.dndbeyond.com/compendium/rules/phb/adventuring\">Adventuring</a><span class=\"No-Break\">.”</span></p>',\n    },\n    {\n      id: 79,\n      name: \"Initiative\",\n      description:\n        \"<p>Initiative determines the order of turns during combat. When combat starts, every participant makes a Dexterity check to determine their place in the initiative order. The DM makes one roll for an entire group of identical creatures, so each member of the group acts at the same time.</p>\\n<p>The DM ranks the combatants in order from the one with the highest Dexterity check total to the one with the lowest. This is the order (called the initiative order) in which they act during each round. The initiative order remains the same from round to round.</p>\\n<p>If a tie occurs, the DM decides the order among tied DM-controlled creatures, and the players decide the order among their tied characters. The DM can decide the order if the tie is between a monster and a player character. Optionally, the DM can have the tied characters and monsters each roll a d20 to determine the order, highest roll going first.</p>\",\n    },\n    {\n      id: 80,\n      name: \"Inspiration\",\n      description:\n        '<p>Inspiration is a rule the game master can use to reward you for playing your character in a way that’s true to his or her personality traits, ideal, bond, and flaw. By using inspiration, you can draw on your personality trait of compassion for the downtrodden to give you an edge in negotiating with the Beggar Prince. Or inspiration can let you call on your bond to the defense of your home village to push past the effect of a spell that has been laid on you.</p>\\n<h3 id=\"GainingInspiration\">Gaining Inspiration</h3>\\n<p>Your DM can choose to give you inspiration for a variety of reasons. Typically, DMs award it when you play out your personality traits, give in to the drawbacks presented by a flaw or bond, and otherwise portray your character in a compelling way. Your DM will tell you how you can earn inspiration in the game.</p>\\n<p>You either have inspiration or you don’t - you can’t stockpile multiple “inspirations” for later use.</p>\\n<h3 id=\"UsingInspiration\">Using Inspiration</h3>\\n<p>If you have inspiration, you can expend it when you make an attack roll, saving throw, or ability check. Spending your inspiration gives you advantage on that roll.</p>\\n<p>Additionally, if you have inspiration, you can reward another player for good roleplaying, clever thinking, or simply doing something exciting in the game. When another player character does something that really contributes to the story in a fun and interesting way, you can give up your inspiration to give that character inspiration.</p>',\n    },\n    {\n      id: 81,\n      name: \"Speed\",\n      description:\n        '<p>Every character has a speed, which is the distance in feet that the character can walk in 1 round. This number assumes short bursts of energetic movement in the midst of a life-threatening situation.</p>\\n<p>While climbing or swimming, each foot of movement costs 1 extra foot (2 extra feet in difficult terrain), unless a creature has a climbing or swimming speed. At the DM’s option, climbing a slippery vertical surface or one with few handholds requires a successful Strength (<span class=\"error\"></span>Athletics<span class=\"error\"></span>) check. Similarly, gaining any distance in rough water might require a successful Strength (<span class=\"error\"></span>Athletics<span class=\"error\"></span>) check.</p>\\n<p>Your Strength determines how far you can jump.</p>\\n<p><b>Long Jump.</b>&nbsp;When you make a long jump, you cover a number of feet up to your Strength score if you move at least 10 feet on foot immediately before the jump. When you make a standing long jump, you can leap only half that distance. Either way, each foot you clear on the jump costs a foot of movement.</p>\\n<p>This rule assumes that the height of your jump doesn\\'t matter, such as a jump across a stream or chasm. At your DM\\'s option, you must succeed on a DC 10 Strength (Athletics) check to clear a low obstacle (no taller than a quarter of the jump\\'s distance), such as a hedge or low wall. Otherwise, you hit it.</p>\\n<p>When you land in difficult terrain, you must succeed on a DC 10 Dexterity (Acrobatics) check to land on your feet. Otherwise, you land prone.</p>\\n<p><b>High Jump.</b>&nbsp;When you make a high jump, you leap into the air a number of feet equal to 3 + your Strength modifier (minimum of 0 feet) if you move at least 10 feet on foot immediately before the jump. When you make a standing high jump, you can jump only half that distance. Either way, each foot you clear on the jump costs a foot of movement. In some circumstances, your DM might allow you to make a Strength (Athletics) check to jump higher than you normally can.</p>\\n<p>You can extend your arms half your height above yourself during the jump. Thus, you can reach above you a distance equal to the height of the jump plus 1 1/2 times your height.</p>',\n    },\n    {\n      id: 82,\n      name: \"Senses\",\n      description:\n        \"<p><b>Passive Checks</b><br>A passive check is a special kind of ability check that doesn't involve any die rolls. Such a check can represent the average result for a task done repeatedly, such as searching for secret doors over and over again, or can be used when the DM wants to secretly determine whether the characters succeed at something without rolling dice, such as noticing a hidden monster.</p>\\n<p>Special senses are described below.</p>\\n<p><b>Blindsight</b><br>A monster with blindsight can perceive its surroundings without relying on sight, within a specific radius.</p>\\n<p>Creatures without eyes, such as grimlocks and gray oozes, typically have this special sense, as do creatures with echolocation or heightened senses, such as bats and true dragons.</p>\\n<p>If a monster is naturally blind, it has a parenthetical note to this effect, indicating that the radius of its blindsight defines the maximum range of its perception.</p>\\n<p><b>Darkvision</b><br>A monster with darkvision can see in the dark within a specific radius. The monster can see in dim light within the radius as if it were bright light, and in darkness as if it were dim light. The monster can't discern color in darkness, only shades of gray. Many creatures that live underground have this special sense.</p>\\n<p><b>Tremorsense</b><br>A monster with tremorsense can detect and pinpoint the origin of vibrations within a specific radius, provided that the monster and the source of the vibrations are in contact with the same ground or substance.</p>\\n<p>Tremorsense can't be used to detect flying or incorporeal creatures. Many burrowing creatures, such as ankhegs, have this special sense.</p>\\n<p><b>Truesight</b><br>A monster with truesight can, out to a specific range, see in normal and magical darkness, see invisible creatures and objects, automatically detect visual illusions and succeed on saving throws against them, and perceive the original form of a shapechanger or a creature that is transformed by magic. Furthermore, the monster can see into the Ethereal Plane within the same range.</p>\",\n    },\n    {\n      id: 83,\n      name: \"Half Cover\",\n      description:\n        \"A target with half cover has a +2 bonus to AC and Dexterity saving throws. A target has half cover if an obstacle blocks at least half of its body. The obstacle might be a low wall, a large piece of furniture, a narrow tree trunk, or a creature, whether that creature is an enemy or a friend.\",\n    },\n    {\n      id: 84,\n      name: \"Three-Quarters Cover\",\n      description:\n        \"A target with three-quarters cover has a +5 bonus to AC and Dexterity saving throws. A target has three-quarters cover if about three-quarters of it is covered by an obstacle. The obstacle might be a portcullis, an arrow slit, or a thick tree trunk.\",\n    },\n    {\n      id: 85,\n      name: \"Total Cover\",\n      description:\n        \"A target with total cover cannot be targeted directly by an attack or a spell, although some spells can reach such a target by including it in an area of effect. A target has total cover if it is completely concealed by an obstacle.\",\n    },\n    {\n      id: 86,\n      name: \"Difficult Terrain\",\n      description:\n        \"You move at half speed in difficult terrain--moving 1 foot in difficult terrain costs 2 feet of speed--so you can cover only half the normal distance in a minute, an hour, or a day.\",\n    },\n    {\n      id: 87,\n      name: \"Falling\",\n      description:\n        \"A fall from a great height is one of the most common hazards facing an adventurer. At the end of a fall, a creature takes 1d6 bludgeoning damage for every 10 feet it fell, to a maximum of 20d6. The creature lands prone, unless it avoids taking damage from the fall.\",\n    },\n    {\n      id: 88,\n      name: \"Suffocating\",\n      description:\n        \"A creature can hold its breath for a number of minutes equal to 1 + its Constitution modifier (minimum of 30 seconds). When a creature runs out of breath or is choking, it can survive for a number of rounds equal to its Constitution modifier (minimum of 1 round). At the start of its next turn, it drops to 0 hit points and is dying, and it cannot regain hit points or be stabilized until it can breathe again.\",\n    },\n    {\n      id: 89,\n      name: \"Lightly Obscured\",\n      description:\n        \"In a lightly obscured area, such as dim light, patchy fog, or moderate foliage, creatures have disadvantage on Wisdom (Perception) checks that rely on sight.\",\n    },\n    {\n      id: 90,\n      name: \"Heavily Obscured\",\n      description:\n        \"A heavily obscured area--such as darkness, opaque fog, or dense foliage--blocks vision entirely. A creature effectively suffers from the blinded condition when trying to see something in that area.\",\n    },\n    {\n      id: 91,\n      name: \"Climbing Swimming Crawling\",\n      description:\n        \"Each foot of movement costs 1 extra foot (2 extra feet in difficult terrain) when you’re climbing, swimming, or crawling. You ignore this extra cost if you have a climbing speed and use it to climb or a swimming speed and use it to swim. At the DM’s option, climbing a slippery vertical surface or one with few handholds requires a successful Strength (Athletics) check. Similarly, gaining any distance in rough water might require a successful Strength (Athletics) check.\",\n    },\n    {\n      id: 92,\n      name: \"Surprise\",\n      description:\n        \"If you are surprised, you cannot move or take an action on your first turn of the combat, and you cannot take a reaction until that turn ends. A member of a group can be surprised even if the other members are not.\",\n    },\n    {\n      id: 93,\n      name: \"Flying\",\n      description:\n        \"Flying creatures enjoy many benefits of mobility, but they must also deal with the danger of falling. If a flying creature is knocked prone, has its speed reduced to 0, or is otherwise deprived of the ability to move, the creature falls, unless it has the ability to hover or it is being held aloft by magic, such as by the fly spell.\",\n    },\n    {\n      id: 94,\n      name: \"Underwater\",\n      description:\n        \"When making a melee weapon attack, a creature that does not have a swimming speed (either natural or granted by magic) has disadvantage on the attack roll unless the weapon is a dagger, javelin, shortsword, spear, or trident. A ranged weapon attack automatically misses a target beyond the weapon's normal range. Even against a target within normal range, the attack roll has disadvantage unless the weapon is a crossbow, a net, or a weapon that is thrown like a javelin (including a spear, trident, or dart). Creatures and objects that are fully immersed in water have resistance to fire damage.\",\n    },\n    {\n      id: 96,\n      name: \"Advantage\",\n      description:\n        \"Sometimes a special ability or spell tells you that you have advantage or disadvantage on an ability check, a saving throw, or an attack roll. When that happens, you roll a second d20 when you make the roll. Use the higher of the two rolls if you have advantage.\",\n    },\n    {\n      id: 98,\n      name: \"Disadvantage\",\n      description:\n        \"Sometimes a special ability or spell tells you that you have advantage or disadvantage on an ability check, a saving throw, or an attack roll. When that happens, you roll a second d20 when you make the roll. Use the lower roll if you have disadvantage.\",\n    },\n  ],\n  additionalLevelTypes: [\n    { id: 1, name: \"Additional Targets\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 3, name: \"Extended Duration\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 9, name: \"Extended Area\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    {\n      id: 11,\n      name: \"Additional Creatures\",\n      prerequisite: null,\n      description: \"\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    { id: 12, name: \"Special\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 15, name: \"Additional Points\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 16, name: \"Additional Count\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 17, name: \"Extended Range\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  weaponProperties: [\n    {\n      id: 1,\n      name: \"Ammunition\",\n      prerequisite: null,\n      description:\n        'You can use a weapon that has the ammunition property to make a ranged attack only if you have ammunition to fire from the weapon. Each time you attack with the weapon, you expend one piece of ammunition. Drawing the ammunition from a quiver, case, or other container is part of the attack (you need a free hand to load a one-handed weapon). At the end of the battle, you can recover half your expended ammunition by taking a minute to search the battlefield. \\nIf you use a weapon that has the ammunition property to make a melee attack, you treat the weapon as an improvised weapon (see \"Improvised Weapons\" later in the section). A sling must be loaded to deal any damage when used in this way. ',\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 2,\n      name: \"Finesse\",\n      prerequisite: null,\n      description:\n        \"When making an attack with a finesse weapon, you use your choice of your Strength or Dexterity modifier for the attack and damage rolls. You must use the same modifier for both rolls. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 3,\n      name: \"Heavy\",\n      prerequisite: null,\n      description:\n        \"Creatures that are Small or Tiny have disadvantage on attack rolls with heavy weapons. A heavy weapon's size and bulk make it too large for a Small or Tiny creature to use effectively.\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 4,\n      name: \"Light\",\n      prerequisite: null,\n      description:\n        \"A light weapon is small and easy to handle, making it ideal for use when fighting with two weapons. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 5,\n      name: \"Loading\",\n      prerequisite: null,\n      description:\n        \"Because of the time required to load this weapon, you can fire only one piece of ammunition from it when you use an action, bonus action, or reaction to fire it, regardless of the number of attacks you can normally make. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 7,\n      name: \"Range\",\n      prerequisite: null,\n      description:\n        \"A weapon that can be used to make a ranged attack has a range in parentheses after the ammunition or thrown property. The range lists two numbers. The first is the weapon's normal range in feet, and the second indicates the weapon's long range. When attacking a target beyond normal range, you have disadvantage on the attack roll. You can't attack a target beyond the weapon's long range. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 8,\n      name: \"Reach\",\n      prerequisite: null,\n      description:\n        \"This weapon adds 5 feet to your reach when you attack with it, as well as when determining your reach for opportunity attacks with it. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 9,\n      name: \"Special\",\n      prerequisite: null,\n      description:\n        \"A weapon with the special property has unusual rules governing its use, explained in the weapon's description .\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 10,\n      name: \"Thrown\",\n      prerequisite: null,\n      description:\n        \"If a weapon has the thrown property, you can throw the weapon to make a ranged attack. If the weapon is a melee weapon, you use the same ability modifier for that attack roll and damage roll that you would use for a melee attack with the weapon. For example, if you throw a handaxe, you use your Strength, but if you throw a dagger, you can use either your Strength or your Dexterity, since the dagger has the finesse property. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 11,\n      name: \"Two-Handed\",\n      prerequisite: null,\n      description: \"This weapon requires two hands when you attack with it. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 12,\n      name: \"Versatile\",\n      prerequisite: null,\n      description:\n        \"This weapon can be used with one or two hands. A damage value in parentheses appears with the property--the damage when the weapon is used with two hands to make a melee attack.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 13,\n      name: \"Ammunition (Firearms)\",\n      prerequisite: null,\n      description:\n        \"The ammunition of a firearm is destroyed upon use. Renaissance and modern firearms use bullets. Futuristic firearms are powered by a special type of ammunition called energy cells. An energy cell contains enough power for all the shots its firearm can make.\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 14,\n      name: \"Burst Fire\",\n      prerequisite: null,\n      description:\n        \"A weapon that has the burst fire property can make a normal single-target attack, or it can spray a 10-foot-cube area within normal range with shots. Each creature in the area must succeed on a DC 15 Dexterity saving throw or take the weapon’s normal damage. This action uses ten pieces of ammunition.\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 15,\n      name: \"Reload\",\n      prerequisite: null,\n      description:\n        \"A limited number of shots can be made with a weapon that has the reload property. A character must then reload it using an action or a bonus action (the character’s choice).\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    { id: 16, name: \"Misfire\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 17, name: \"Explosive\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  aoeTypes: [\n    {\n      id: 1,\n      name: \"Cone\",\n      prerequisite: null,\n      description:\n        \"A cone extends in a direction you choose from its point of origin. A cone's width at a given point along its length is equal to that point's distance from the point of origin. A cone's area of effect specifies its maximum length. \\nA cone's point of origin is not included in the cone's area of effect, unless you decide otherwise.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 2,\n      name: \"Cube\",\n      prerequisite: null,\n      description:\n        \"You select a cube's point of origin, which lies anywhere on a face of the cubic effect. The cube's size is expressed as the length of each side. \\nA cube's point of origin is not included in the cube's area of effect, unless you decide otherwise.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 3,\n      name: \"Cylinder\",\n      prerequisite: null,\n      description:\n        \"A cylinder's point of origin is the center of a circle of a particular radius, as given in the spell description. The circle must either be on the ground or at the height of the spell effect. The energy in a cylinder expands in straight lines from the point of origin to the perimeter of the circle, forming the base of the cylinder. The spell's effect then shoots up from the base or down from the top, to a distance equal to the height of the cylinder. \\nA cylinder's point of origin is included in the cylinder's area of effect.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 4,\n      name: \"Line\",\n      prerequisite: null,\n      description:\n        \"A line extends from its point of origin in a straight path up to its length and covers an area defined by its width. \\nA line's point of origin is not included in the line's area of effect, unless you decide otherwise.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 5,\n      name: \"Sphere\",\n      prerequisite: null,\n      description:\n        \"You select a sphere's point of origin, and the sphere extends outward from that point. The sphere's size is expressed as a radius in feet that extends from the point. \\nA sphere's point of origin is included in the sphere's area of effect.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    { id: 9, name: \"Square\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 13, name: \"Square Feet\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  lifestyles: [\n    {\n      id: 1,\n      name: \"Wretched\",\n      description:\n        \"You live in inhumane conditions. With no place to call home, you shelter wherever you can, sneaking into barns, huddling in old crates, and relying on the good graces of people better off than you. A wretched lifestyle presents abundant dangers. Violence, disease, and hunger follow you wherever you go. Other wretched people covet your armor, weapons, and adventuring gear, which represent a fortune by their standards. You are beneath the notice of most people. \",\n      cost: \"-\",\n    },\n    {\n      id: 3,\n      name: \"Squalid\",\n      description:\n        \"You live in a leaky stable, a mud-floored hut just outside town, or a vermin-infested boarding house in the worst part of town. You have shelter from the elements, but you live in a desperate and often violent environment, in places rife with disease, hunger, and misfortune. You are beneath the notice of most people, and you have few legal protections. Most people at this lifestyle level have suffered some terrible setback. They might be disturbed, marked as exiles, or suffer from disease. \",\n      cost: \"1SP\",\n    },\n    {\n      id: 4,\n      name: \"Poor\",\n      description:\n        \"A poor lifestyle means going without the comforts available in a stable community. Simple food and lodgings, threadbare clothing, and unpredictable conditions result in a sufficient, though probably unpleasant, experience. Your accommodations might be a room in a flophouse or in the common room above a tavern. You benefit from some legal protections, but you still have to contend with violence, crime, and disease. People at this lifestyle level tend to be unskilled laborers, costermongers, peddlers, thieves, mercenaries, and other disreputable types. \",\n      cost: \"2SP\",\n    },\n    {\n      id: 5,\n      name: \"Modest\",\n      description:\n        \"A modest lifestyle keeps you out of the slums and ensures that you can maintain your equipment. You live in an older part of town, renting a room in a boarding house, inn, or temple. You don't go hungry or thirsty, and your living conditions are clean, if simple. Ordinary people living modest lifestyles include soldiers with families, laborers, students, priests, hedge wizards, and the like.\",\n      cost: \"1GP\",\n    },\n    {\n      id: 6,\n      name: \"Comfortable\",\n      description:\n        \"Choosing a comfortable lifestyle means that you can afford nicer clothing and can easily maintain your equipment. You live in a small cottage in a middle-class neighborhood or in a private room at a fine inn. You associate with merchants, skilled tradespeople, and military officers. \",\n      cost: \"2GP\",\n    },\n    {\n      id: 7,\n      name: \"Wealthy\",\n      description:\n        \"Choosing a wealthy lifestyle means living a life of luxury, though you might not have achieved the social status associated with the old money of nobility or royalty. You live a lifestyle comparable to that of a highly successful merchant, a favored servant of the royalty, or the owner of a few small businesses. You have respectable lodgings, usually a spacious home in a good part of town or a comfortable suite at a fine inn. You likely have a small staff of servants. \",\n      cost: \"4GP\",\n    },\n    {\n      id: 8,\n      name: \"Aristocratic\",\n      description:\n        \"You live a life of plenty and comfort. You move in circles populated by the most powerful people in the community. You have excellent lodgings, perhaps a townhouse in the nicest part of town or rooms in the finest inn. You dine at the best restaurants, retain the most skilled and fashionable tailor, and have servants attending to your every need. You receive invitations to the social gatherings of the rich and powerful, and spend evenings in the company of politicians, guild leaders, high priests, and nobility. You must also contend with the highest levels of deceit and treachery. The wealthier you are, the greater the chance you will be drawn into political intrigue as a pawn or participant.\\n\\n\",\n      cost: \"10GP minimum\",\n    },\n  ],\n  conditions: [\n    {\n      definition: {\n        id: 1,\n        entityTypeId: 1737492944,\n        name: \"Blinded\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A blinded creature can't see and automatically fails any ability check that requires sight.</li>\\n<li>Attack rolls against the creature have advantage, and the creature's attack rolls have disadvantage.</li>\\n</ul>\",\n        slug: \"blinded\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 2,\n        entityTypeId: 1737492944,\n        name: \"Charmed\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A charmed creature can't attack the charmer or target the charmer with harmful abilities or magical effects.</li>\\n<li>The charmer has advantage on any ability check to interact socially with the creature.</li>\\n</ul>\",\n        slug: \"charmed\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 3,\n        entityTypeId: 1737492944,\n        name: \"Deafened\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A deafened creature can't hear and automatically fails any ability check that requires hearing.</li>\\n</ul>\",\n        slug: \"deafened\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 4,\n        entityTypeId: 1737492944,\n        name: \"Exhaustion\",\n        type: 2,\n        description:\n          '<p>Some special abilities and environmental hazards, such as starvation and the long-term effects of freezing or scorching temperatures, can lead to a special condition called exhaustion. Exhaustion is measured in six levels. An effect can give a creature one or more levels of exhaustion, as specified in the effect\\'s description.</p>\\n<table class=\"exhaustion-levels\">\\n<thead>\\n<tr>\\n<th class=\"exhaustionlevel\">Level</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td style=\"text-align: left\">Disadvantage on ability checks</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td style=\"text-align: left\">Speed halved</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td style=\"text-align: left\">Disadvantage on attack rolls and saving throws</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td style=\"text-align: left\">Hit point maximum halved</td>\\n</tr>\\n<tr>\\n<td>5</td>\\n<td style=\"text-align: left\">Speed reduced to 0</td>\\n</tr>\\n<tr>\\n<td>6</td>\\n<td style=\"text-align: left\">Death</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If an already exhausted creature suffers another effect that causes exhaustion, its current level of exhaustion increases by the amount specified in the effect\\'s description.</p>\\n<p>A creature suffers the effect of its current level of exhaustion as well as all lower levels. For example, a creature suffering level 2 exhaustion has its speed halved and has disadvantage on ability checks.</p>\\n<p>An effect that removes exhaustion reduces its level as specified in the effect\\'s description, with all exhaustion effects ending if a creature\\'s exhaustion level is reduced below 1. <br> Finishing a long rest reduces a creature\\'s exhaustion level by 1, provided that the creature has also ingested some food and drink.</p>',\n        slug: \"exhaustion\",\n        levels: [\n          { definition: { id: 1, entityTypeId: 2064013312, level: 1, effect: \"Disadvantage on ability checks\" } },\n          { definition: { id: 2, entityTypeId: 2064013312, level: 2, effect: \"Speed halved\" } },\n          {\n            definition: {\n              id: 3,\n              entityTypeId: 2064013312,\n              level: 3,\n              effect: \"Disadvantage on attack rolls and saving throws\",\n            },\n          },\n          { definition: { id: 4, entityTypeId: 2064013312, level: 4, effect: \"Hit point maximum halved\" } },\n          { definition: { id: 5, entityTypeId: 2064013312, level: 5, effect: \"Speed reduced to 0\" } },\n          { definition: { id: 6, entityTypeId: 2064013312, level: 6, effect: \"Death\" } },\n        ],\n      },\n    },\n    {\n      definition: {\n        id: 5,\n        entityTypeId: 1737492944,\n        name: \"Frightened\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight.</li>\\n<li>The creature can't willingly move closer to the source of its fear.</li>\\n</ul>\",\n        slug: \"frightened\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 6,\n        entityTypeId: 1737492944,\n        name: \"Grappled\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A grappled creature's speed becomes 0, and it can't benefit from any bonus to its speed.</li>\\n<li>The condition ends if the grappler is incapacitated (see the condition).</li>\\n<li>The condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect, such as when a creature is hurled away by the <strong>thunder-wave</strong> spell.</li>\\n</ul>\",\n        slug: \"grappled\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 7,\n        entityTypeId: 1737492944,\n        name: \"Incapacitated\",\n        type: 1,\n        description: \"<ul>\\n<li>An incapacitated creature can't take actions or reactions.</li>\\n</ul>\",\n        slug: \"incapacitated\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 8,\n        entityTypeId: 1737492944,\n        name: \"Invisible\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>An invisible creature is impossible to see without the aid of magic or a special sense. For the purpose of hiding, the creature is heavily obscured. The creature's location can be detected by any noise it makes or any tracks it leaves.</li>\\n<li>Attack rolls against the creature have disadvantage, and the creature's attack rolls have advantage.</li>\\n</ul>\",\n        slug: \"invisible\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 9,\n        entityTypeId: 1737492944,\n        name: \"Paralyzed\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A paralyzed creature is incapacitated (see the condition) and can't move or speak.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws. Attack rolls against the creature have advantage.</li>\\n<li>Any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature.</li>\\n</ul>\",\n        slug: \"paralyzed\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 10,\n        entityTypeId: 1737492944,\n        name: \"Petrified\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A petrified creature is transformed, along with any nonmagical object it is wearing or carrying, into a solid inanimate substance (usually stone). Its weight increases by a factor of ten, and it ceases aging.</li>\\n<li>The creature is incapacitated (see the condition), can't move or speak, and is unaware of its surroundings.</li>\\n<li>Attack rolls against the creature have advantage.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws.</li>\\n<li>The creature has resistance to all damage.</li>\\n<li>The creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized.</li>\\n</ul>\",\n        slug: \"petrified\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 11,\n        entityTypeId: 1737492944,\n        name: \"Poisoned\",\n        type: 1,\n        description: \"<ul>\\n<li>A poisoned creature has disadvantage on attack rolls and ability checks.</li>\\n</ul>\",\n        slug: \"poisoned\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 12,\n        entityTypeId: 1737492944,\n        name: \"Prone\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A prone creature's only movement option is to crawl, unless it stands up and thereby ends the condition.</li>\\n<li>The creature has disadvantage on attack rolls.</li>\\n<li>An attack roll against the creature has advantage if the attacker is within 5 feet of the creature. Otherwise, the attack roll has disadvantage.</li>\\n</ul>\",\n        slug: \"prone\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 13,\n        entityTypeId: 1737492944,\n        name: \"Restrained\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A restrained creature's speed becomes 0, and it can't benefit from any bonus to its speed.</li>\\n<li>Attack rolls against the creature have advantage, and the creature's attack rolls have disadvantage.</li>\\n<li>The creature has disadvantage on Dexterity saving throws.</li>\\n</ul>\",\n        slug: \"restrained\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 14,\n        entityTypeId: 1737492944,\n        name: \"Stunned\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A stunned creature is incapacitated (see the condition), can't move, and can speak only falteringly.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws.</li>\\n<li>Attack rolls against the creature have advantage.</li>\\n</ul>\",\n        slug: \"stunned\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 15,\n        entityTypeId: 1737492944,\n        name: \"Unconscious\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>An unconscious creature is incapacitated (see the condition), can't move or speak, and is unaware of its surroundings</li>\\n<li>The creature drops whatever it's holding and falls prone.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws.</li>\\n<li>Attack rolls against the creature have advantage.</li>\\n<li>Any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature.</li>\\n</ul>\",\n        slug: \"unconscious\",\n        levels: [],\n      },\n    },\n  ],\n  damageAdjustments: [\n    { id: 1, name: \"Bludgeoning\", type: 1, slug: \"bludgeoning\", isMulti: false, displayOrder: 2 },\n    { id: 2, name: \"Piercing\", type: 1, slug: \"piercing\", isMulti: false, displayOrder: 8 },\n    { id: 3, name: \"Slashing\", type: 1, slug: \"slashing\", isMulti: false, displayOrder: 12 },\n    { id: 4, name: \"Lightning\", type: 1, slug: \"lightning\", isMulti: false, displayOrder: 6 },\n    { id: 5, name: \"Thunder\", type: 1, slug: \"thunder\", isMulti: false, displayOrder: 13 },\n    { id: 6, name: \"Poison\", type: 1, slug: \"poison\", isMulti: false, displayOrder: 9 },\n    { id: 7, name: \"Cold\", type: 1, slug: \"cold\", isMulti: false, displayOrder: 3 },\n    { id: 8, name: \"Radiant\", type: 1, slug: \"radiant\", isMulti: false, displayOrder: 11 },\n    { id: 9, name: \"Fire\", type: 1, slug: \"fire\", isMulti: false, displayOrder: 4 },\n    { id: 10, name: \"Necrotic\", type: 1, slug: \"necrotic\", isMulti: false, displayOrder: 7 },\n    { id: 11, name: \"Acid\", type: 1, slug: \"acid\", isMulti: false, displayOrder: 1 },\n    { id: 12, name: \"Psychic\", type: 1, slug: \"psychic\", isMulti: false, displayOrder: 10 },\n    {\n      id: 13,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks\",\n      isMulti: true,\n      displayOrder: 14,\n    },\n    {\n      id: 14,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Silvered\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-silvered\",\n      isMulti: true,\n      displayOrder: 15,\n    },\n    {\n      id: 15,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\",\n      isMulti: true,\n      displayOrder: 16,\n    },\n    {\n      id: 16,\n      name: \"Piercing and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 1,\n      slug: \"piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\",\n      isMulti: true,\n      displayOrder: 17,\n    },\n    { id: 17, name: \"Bludgeoning\", type: 2, slug: \"bludgeoning\", isMulti: false, displayOrder: 2 },\n    { id: 18, name: \"Piercing\", type: 2, slug: \"piercing\", isMulti: false, displayOrder: 8 },\n    { id: 19, name: \"Slashing\", type: 2, slug: \"slashing\", isMulti: false, displayOrder: 12 },\n    { id: 20, name: \"Lightning\", type: 2, slug: \"lightning\", isMulti: false, displayOrder: 6 },\n    { id: 21, name: \"Thunder\", type: 2, slug: \"thunder\", isMulti: false, displayOrder: 13 },\n    { id: 22, name: \"Poison\", type: 2, slug: \"poison\", isMulti: false, displayOrder: 9 },\n    { id: 23, name: \"Cold\", type: 2, slug: \"cold\", isMulti: false, displayOrder: 3 },\n    { id: 24, name: \"Radiant\", type: 2, slug: \"radiant\", isMulti: false, displayOrder: 11 },\n    { id: 25, name: \"Fire\", type: 2, slug: \"fire\", isMulti: false, displayOrder: 4 },\n    { id: 26, name: \"Necrotic\", type: 2, slug: \"necrotic\", isMulti: false, displayOrder: 7 },\n    { id: 27, name: \"Acid\", type: 2, slug: \"acid\", isMulti: false, displayOrder: 1 },\n    { id: 28, name: \"Psychic\", type: 2, slug: \"psychic\", isMulti: false, displayOrder: 10 },\n    {\n      id: 29,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks\",\n      isMulti: true,\n      displayOrder: 14,\n    },\n    {\n      id: 30,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Silvered\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical\",\n      isMulti: true,\n      displayOrder: 16,\n    },\n    {\n      id: 31,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical\",\n      isMulti: true,\n      displayOrder: 15,\n    },\n    {\n      id: 32,\n      name: \"Piercing and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 2,\n      slug: \"piercing-and-slashing-from-nonmagical-attacks-that\",\n      isMulti: true,\n      displayOrder: 17,\n    },\n    { id: 33, name: \"Bludgeoning\", type: 3, slug: \"bludgeoning\", isMulti: false, displayOrder: 2 },\n    { id: 34, name: \"Piercing\", type: 3, slug: \"piercing\", isMulti: false, displayOrder: 8 },\n    { id: 35, name: \"Slashing\", type: 3, slug: \"slashing\", isMulti: false, displayOrder: 12 },\n    { id: 36, name: \"Lightning\", type: 3, slug: \"lightning\", isMulti: false, displayOrder: 6 },\n    { id: 37, name: \"Thunder\", type: 3, slug: \"thunder\", isMulti: false, displayOrder: 13 },\n    { id: 38, name: \"Poison\", type: 3, slug: \"poison\", isMulti: false, displayOrder: 9 },\n    { id: 39, name: \"Cold\", type: 3, slug: \"cold\", isMulti: false, displayOrder: 3 },\n    { id: 40, name: \"Radiant\", type: 3, slug: \"radiant\", isMulti: false, displayOrder: 11 },\n    { id: 41, name: \"Fire\", type: 3, slug: \"fire\", isMulti: false, displayOrder: 4 },\n    { id: 42, name: \"Necrotic\", type: 3, slug: \"necrotic\", isMulti: false, displayOrder: 7 },\n    { id: 43, name: \"Acid\", type: 3, slug: \"acid\", isMulti: false, displayOrder: 1 },\n    { id: 44, name: \"Psychic\", type: 3, slug: \"psychic\", isMulti: false, displayOrder: 10 },\n    {\n      id: 45,\n      name: \"Piercing from Magic Weapons Wielded by Good Creatures\",\n      type: 3,\n      slug: \"piercing-from-magic-weapons-wielded-by-good\",\n      isMulti: true,\n      displayOrder: 14,\n    },\n    {\n      id: 46,\n      name: \"Bludgeoning, Piercing, and Slashing from Magic Weapons\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-magic-weapons\",\n      isMulti: true,\n      displayOrder: 18,\n    },\n    { id: 47, name: \"Force\", type: 1, slug: \"force\", isMulti: false, displayOrder: 5 },\n    { id: 48, name: \"Force\", type: 2, slug: \"force\", isMulti: false, displayOrder: 5 },\n    { id: 49, name: \"Force\", type: 3, slug: \"force\", isMulti: false, displayOrder: 5 },\n    {\n      id: 50,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks while in Dim Light or Darkness\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-while-in-dim-light-or-darkness\",\n      isMulti: true,\n      displayOrder: 19,\n    },\n    { id: 51, name: \"Ranged Attacks\", type: 1, slug: \"ranged-attacks\", isMulti: false, displayOrder: 20 },\n    { id: 52, name: \"Damage Dealt By Traps\", type: 1, slug: \"damage-dealt-by-traps\", isMulti: false, displayOrder: 21 },\n    { id: 53, name: \"All\", type: 1, slug: \"all\", isMulti: true, displayOrder: 22 },\n    {\n      id: 54,\n      name: \"Bludgeoning from non magical attacks\",\n      type: 1,\n      slug: \"bludgeoning-from-non-magical-attacks\",\n      isMulti: false,\n      displayOrder: 23,\n    },\n    {\n      id: 55,\n      name: \"Bludgeoning, Piercing, and Slashing from Metal Weapons\",\n      type: 2,\n      slug: \"slashing-from-metal-weapons\",\n      isMulti: true,\n      displayOrder: 18,\n    },\n    {\n      id: 56,\n      name: \"Bludgeoning, Piercing, and Slashing while in Dim Light or Darkness\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-while-in-dim-or-light-darkness\",\n      isMulti: true,\n      displayOrder: 24,\n    },\n    { id: 57, name: \"Damage from Spells\", type: 1, slug: \"damage-from-spells\", isMulti: false, displayOrder: 25 },\n    {\n      id: 60,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine or Silvered\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine-or-silvered\",\n      isMulti: true,\n      displayOrder: 19,\n    },\n    {\n      id: 61,\n      name: \"Nonmagical Bludgeoning, Piercing, and Slashing (from Stoneskin)\",\n      type: 1,\n      slug: \"nonmagical-bludgeoning-piercing-and-slashing-from-stoneskin\",\n      isMulti: true,\n      displayOrder: 27,\n    },\n    {\n      id: 62,\n      name: \"All damage but Force, Radiant, and Psychic\",\n      type: 1,\n      slug: \"all-damage-but-force-radiant-and-psychic\",\n      isMulti: true,\n      displayOrder: 29,\n    },\n    {\n      id: 63,\n      name: \"Petrified (Aberrant Armor Only)\",\n      type: 2,\n      slug: \"petrified-aberrant-armor-only\",\n      isMulti: false,\n      displayOrder: 28,\n    },\n    {\n      id: 64,\n      name: \"Slashing from a Vorpal Sword\",\n      type: 3,\n      slug: \"slashing-from-a-vorpal-sword\",\n      isMulti: false,\n      displayOrder: 30,\n    },\n    {\n      id: 65,\n      name: \"Damage of the type matching the animated breath's form (acid, cold, fire, lightning, or poison)\",\n      type: 1,\n      slug: \"damage-of-the-type-matching-the-animated-breaths-form-acid-cold-fire-lightning-or-poison\",\n      isMulti: false,\n      displayOrder: 31,\n    },\n    {\n      id: 66,\n      name: \"Psychic (granted by Ruidium Armor)\",\n      type: 1,\n      slug: \"psychic-granted-by-ruidium-armor\",\n      isMulti: false,\n      displayOrder: 32,\n    },\n  ],\n  statModifiers: [\n    { value: 1, modifier: -5 },\n    { value: 2, modifier: -4 },\n    { value: 3, modifier: -4 },\n    { value: 4, modifier: -3 },\n    { value: 5, modifier: -3 },\n    { value: 6, modifier: -2 },\n    { value: 7, modifier: -2 },\n    { value: 8, modifier: -1 },\n    { value: 9, modifier: -1 },\n    { value: 10, modifier: 0 },\n    { value: 11, modifier: 0 },\n    { value: 12, modifier: 1 },\n    { value: 13, modifier: 1 },\n    { value: 14, modifier: 2 },\n    { value: 15, modifier: 2 },\n    { value: 16, modifier: 3 },\n    { value: 17, modifier: 3 },\n    { value: 18, modifier: 4 },\n    { value: 19, modifier: 4 },\n    { value: 20, modifier: 5 },\n    { value: 21, modifier: 5 },\n    { value: 22, modifier: 6 },\n    { value: 23, modifier: 6 },\n    { value: 24, modifier: 7 },\n    { value: 25, modifier: 7 },\n    { value: 26, modifier: 8 },\n    { value: 27, modifier: 8 },\n    { value: 28, modifier: 9 },\n    { value: 29, modifier: 9 },\n    { value: 30, modifier: 10 },\n  ],\n  alignments: [\n    {\n      id: 1,\n      name: \"Lawful Good\",\n      description:\n        \"Lawful good (LG) creatures can be counted on to do the right thing as expected by society. Gold dragons, paladins, and most dwarves are lawful good.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 2,\n      name: \"Neutral Good\",\n      description:\n        \"Neutral good (NG) folk do the best they can to help others according to their needs. Many celestials, some cloud giants, and most gnomes are neutral good.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 3,\n      name: \"Chaotic Good\",\n      description:\n        \"Chaotic good (CG) creatures act as their conscience directs, with little regard for what others expect. Copper dragons, many elves, and unicorns are chaotic good.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 4,\n      name: \"Lawful Neutral\",\n      description:\n        \"Lawful neutral (LN) individuals act in accordance with law, tradition, or personal codes. Many monks and some wizards are lawful neutral.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 5,\n      name: \"Neutral\",\n      description:\n        \"Neutral (N) is the alignment of those who prefer to steer clear of moral questions and don't take sides, doing what seems best at the time. Lizardfolk, most druids, and many humans are neutral.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 6,\n      name: \"Chaotic Neutral\",\n      description:\n        \"Chaotic neutral (CN) creatures follow their whims, holding their personal freedom above all else. Many barbarians and rogues, and some bards, are chaotic neutral.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 7,\n      name: \"Lawful Evil\",\n      description:\n        \"Lawful evil (LE) creatures methodically take what they want, within the limits of a code of tradition, loyalty, or order. Devils, blue dragons, and hobgoblins are lawful evil.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 8,\n      name: \"Neutral Evil\",\n      description:\n        \"Neutral evil (NE) is the alignment of those who do whatever they can get away with, without compassion or qualms. Many drow, some cloud giants, and goblins are neutral evil.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 9,\n      name: \"Chaotic Evil\",\n      description:\n        \"Chaotic evil (CE) creatures act with arbitrary violence, spurred by their greed, hatred, or bloodlust. Demons, red dragons, and orcs are chaotic evil.\",\n      availableToCharacter: true,\n    },\n    { id: 10, name: \"Unaligned\", description: null, availableToCharacter: false },\n    { id: 11, name: \"Any Alignment\", description: \"Any Alignment\", availableToCharacter: false },\n    { id: 13, name: \"Any Evil Alignment\", description: \"Any Evil Alignment\", availableToCharacter: false },\n    { id: 14, name: \"Any Good Alignment\", description: \"Any Good Alignment\", availableToCharacter: false },\n    { id: 15, name: \"Any Chaotic Alignment\", description: \"Any Chaotic Alignment\", availableToCharacter: false },\n    { id: 16, name: \"Any Lawful Alignment\", description: \"Any Lawful Alignment\", availableToCharacter: false },\n    { id: 18, name: \"Any Non-Good Alignment\", description: \"Any Non-Good Alignment\", availableToCharacter: false },\n    { id: 19, name: \"Any Non-Lawful Alignment\", description: \"Any Non-Lawful Alignment\", availableToCharacter: false },\n    {\n      id: 20,\n      name: \"Typically Chaotic Neutral\",\n      description: \"Typically Chaotic Neutral\",\n      availableToCharacter: false,\n    },\n    { id: 21, name: \"Typically Neutral Good\", description: \"Typically Neutral Good\", availableToCharacter: false },\n    { id: 22, name: \"Typically Lawful Good\", description: \"Typically Lawful Good\", availableToCharacter: false },\n    { id: 23, name: \"Typically Chaotic Evil\", description: \"Typically Chaotic Evil\", availableToCharacter: false },\n    { id: 24, name: \"Typically Neutral Evil\", description: \"Typically Neutral Evil\", availableToCharacter: false },\n    { id: 25, name: \"Typically Chaotic Good\", description: \"Typically Chaotic Good\", availableToCharacter: false },\n    { id: 26, name: \"Typically Neutral\", description: \"Typically Neutral\", availableToCharacter: false },\n    { id: 27, name: \"Typically Lawful Evil\", description: \"Typically Lawful Evil\", availableToCharacter: false },\n    { id: 28, name: \"Typically Lawful Neutral\", description: \"Typically Lawful Neutral\", availableToCharacter: false },\n  ],\n  sources: [\n    {\n      id: 1,\n      name: \"BR\",\n      description: \"Basic Rules\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/136/637248073409717512.jpeg\",\n      sourceURL: \"sources/basic-rules\",\n    },\n    {\n      id: 2,\n      name: \"PHB\",\n      description: \"Player's Handbook\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/389/637248131811862290.jpeg\",\n      sourceURL: \"sources/phb\",\n    },\n    {\n      id: 3,\n      name: \"DMG\",\n      description: \"Dungeon Master's Guide\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10367/593/637245347063211867.jpeg\",\n      sourceURL: \"sources/dmg\",\n    },\n    {\n      id: 4,\n      name: \"EE\",\n      description: \"Elemental Evil Player's Companion\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/\",\n      sourceURL: \"\",\n    },\n    {\n      id: 5,\n      name: \"MM\",\n      description: \"Monster Manual\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/816/637248105832999293.jpeg\",\n      sourceURL: \"sources/mm\",\n    },\n    {\n      id: 6,\n      name: \"CoS\",\n      description: \"Curse of Strahd\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10349/296/637244603965977140.jpeg\",\n      sourceURL: \"sources/cos\",\n    },\n    {\n      id: 7,\n      name: \"HotDQ\",\n      description: \"Hoard of the Dragon Queen\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10432/68/637247937818392417.jpeg\",\n      sourceURL: \"sources/hotdq\",\n    },\n    {\n      id: 8,\n      name: \"LMoP\",\n      description: \"Lost Mine of Phandelver\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/616/637248096401764265.jpeg\",\n      sourceURL: \"sources/lmop\",\n    },\n    {\n      id: 9,\n      name: \"OotA\",\n      description: \"Out of the Abyss\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/19/735/636383500945700817.jpeg\",\n      sourceURL: \"sources/oota\",\n    },\n    {\n      id: 10,\n      name: \"PotA\",\n      description: \"Princes of the Apocalypse\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/524/637248137744435932.jpeg\",\n      sourceURL: \"sources/pota\",\n    },\n    {\n      id: 11,\n      name: \"RoT\",\n      description: \"Rise of Tiamat\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/605/637248141604547323.jpeg\",\n      sourceURL: \"sources/rot\",\n    },\n    {\n      id: 12,\n      name: \"SKT\",\n      description: \"Storm King's Thunder\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/19/740/636383501361665378.jpeg\",\n      sourceURL: \"sources/skt\",\n    },\n    {\n      id: 13,\n      name: \"SCAG\",\n      description: \"Sword Coast Adventurer's Guide\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/793/637248149475504723.jpeg\",\n      sourceURL: \"sources/scag\",\n    },\n    {\n      id: 14,\n      name: \"TftYP\",\n      description: \"Tales from the Yawning Portal\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/177/637248652153094716.jpeg\",\n      sourceURL: \"sources/tftyp\",\n    },\n    {\n      id: 15,\n      name: \"VGtM\",\n      description: \"Volo's Guide to Monsters\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/464/637248679743732719.jpeg\",\n      sourceURL: \"sources/vgtm\",\n    },\n    {\n      id: 16,\n      name: \"TSC\",\n      description: \"The Sunless Citadel\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/402/637248674372576676.jpeg\",\n      sourceURL: \"sources/tftyp/a1\",\n    },\n    {\n      id: 17,\n      name: \"TFoF\",\n      description: \"The Forge of Fury\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10436/4/637248156999902689.jpeg\",\n      sourceURL: \"sources/tftyp/a2\",\n    },\n    {\n      id: 18,\n      name: \"THSoT\",\n      description: \"The Hidden Shrine of Tamoachan\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/236/637248657347161458.jpeg\",\n      sourceURL: \"sources/tftyp/a3\",\n    },\n    {\n      id: 19,\n      name: \"WPM\",\n      description: \"White Plume Mountain\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/751/637248705560259195.jpeg\",\n      sourceURL: \"sources/tftyp/a4\",\n    },\n    {\n      id: 20,\n      name: \"DiT\",\n      description: \"Dead in Thay\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/246/637248079254127234.jpeg\",\n      sourceURL: \"sources/tftyp/a5\",\n    },\n    {\n      id: 21,\n      name: \"AtG\",\n      description: \"Against the Giants\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10433/315/637248029897296032.jpeg\",\n      sourceURL: \"sources/tftyp/a6\",\n    },\n    {\n      id: 22,\n      name: \"ToH\",\n      description: \"Tomb of Horrors\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/371/637248671854035769.jpeg\",\n      sourceURL: \"sources/tftyp/a7\",\n    },\n    {\n      id: 25,\n      name: \"ToA\",\n      description: \"Tomb of Annihilation\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/339/637248669136195626.jpeg\",\n      sourceURL: \"sources/toa\",\n    },\n    {\n      id: 26,\n      name: \"CoSCO\",\n      description: \"Curse of Strahd: Character Options\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10349/289/637244603748885696.jpeg\",\n      sourceURL: \"\",\n    },\n    {\n      id: 27,\n      name: \"XGtE\",\n      description: \"Xanathar's Guide to Everything\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/803/637248709455777906.jpeg\",\n      sourceURL: \"sources/xgte\",\n    },\n    {\n      id: 28,\n      name: \"TTP\",\n      description: \"The Tortle Package\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/39/300/636411199124473334.png\",\n      sourceURL: \"sources/ttp\",\n    },\n    {\n      id: 29,\n      name: \"UA\",\n      description: \"Unearthed Arcana\",\n      sourceCategoryId: 3,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/100/464/636506973225556542.png\",\n      sourceURL: \"\",\n    },\n    {\n      id: 31,\n      name: \"CR\",\n      description: \"Critical Role\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/\",\n      sourceURL: \"\",\n    },\n    {\n      id: 33,\n      name: \"MToF\",\n      description: \"Mordenkainen’s Tome of Foes\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/949/637248111148617766.jpeg\",\n      sourceURL: \"sources/mtof\",\n    },\n    {\n      id: 34,\n      name: \"DDIA-MORD\",\n      description: \"Rrakkma\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/319/345/636622116959280867.jpeg\",\n      sourceURL: \"sources/ddia-mord\",\n    },\n    {\n      id: 35,\n      name: \"WDH\",\n      description: \"Waterdeep: Dragon Heist\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/343/499/636632335939805190.jpeg\",\n      sourceURL: \"sources/wdh\",\n    },\n    {\n      id: 36,\n      name: \"WDotMM\",\n      description: \"Waterdeep: Dungeon of the Mad Mage\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/493/637248684031810278.jpeg\",\n      sourceURL: \"sources/wdotmm\",\n    },\n    {\n      id: 37,\n      name: \"WGtE\",\n      description: \"Wayfinder's Guide to Eberron\",\n      sourceCategoryId: 8,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/715/637248702538222765.jpeg\",\n      sourceURL: \"sources/wgte\",\n    },\n    {\n      id: 38,\n      name: \"GGtR\",\n      description: \"Guildmasters' Guide to Ravnica\",\n      sourceCategoryId: 7,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10369/823/637245482341163840.jpeg\",\n      sourceURL: \"sources/ggtr\",\n    },\n    {\n      id: 40,\n      name: \"LLoK\",\n      description: \"Lost Laboratory of Kwalish\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/498/637248091075319276.jpeg\",\n      sourceURL: \"sources/llok\",\n    },\n    {\n      id: 41,\n      name: \"DoIP\",\n      description: \"Dragon of Icespire Peak\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/957/637244676648122088.jpeg\",\n      sourceURL: \"sources/doip\",\n    },\n    {\n      id: 42,\n      name: \"TMR\",\n      description: \"Tactical Maps Reincarnated\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/5336/630/636850745475942698.jpeg\",\n      sourceURL: \"\",\n    },\n    {\n      id: 43,\n      name: \"GoS\",\n      description: \"Ghosts of Saltmarsh\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10370/66/637245493047936420.jpeg\",\n      sourceURL: \"sources/gos\",\n    },\n    {\n      id: 44,\n      name: \"AI\",\n      description: \"Acquisitions Incorporated\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/905/637244674570907870.jpeg\",\n      sourceURL: \"sources/ai\",\n    },\n    {\n      id: 47,\n      name: \"HftT\",\n      description: \"Hunt for the Thessalhydra\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10432/12/637247932786703735.jpeg\",\n      sourceURL: \"sources/hftt\",\n    },\n    {\n      id: 48,\n      name: \"BGDiA\",\n      description: \"Baldur's Gate: Descent into Avernus\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/927/637244675832719441.jpeg\",\n      sourceURL: \"sources/bgdia\",\n    },\n    {\n      id: 49,\n      name: \"ERftLW\",\n      description: \"Eberron: Rising from the Last War\",\n      sourceCategoryId: 8,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10368/6/637245381196842264.jpeg\",\n      sourceURL: \"sources/erftlw\",\n    },\n    {\n      id: 50,\n      name: \"SLW\",\n      description: \"Storm Lord’s Wrath\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/964/637244676927254855.jpeg\",\n      sourceURL: \"sources/slw\",\n    },\n    {\n      id: 51,\n      name: \"SDW\",\n      description: \"Sleeping Dragon’s Wake\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/959/637244676820916158.jpeg\",\n      sourceURL: \"sources/sdw\",\n    },\n    {\n      id: 52,\n      name: \"DC\",\n      description: \"Divine Contention\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/951/637244676535367295.jpeg\",\n      sourceURL: \"sources/dc\",\n    },\n    {\n      id: 53,\n      name: \"SAC\",\n      description: \"Sage Advice Compendium\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/702/637248145947271474.jpeg\",\n      sourceURL: \"sources/sac\",\n    },\n    {\n      id: 54,\n      name: \"DDvRaM\",\n      description: \"Dungeons &amp; Dragons vs. Rick and Morty\",\n      sourceCategoryId: 10,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10367/229/637245316031917098.jpeg\",\n      sourceURL: \"sources/ddvram\",\n    },\n    {\n      id: 55,\n      name: \"LR\",\n      description: \"Locathah Rising\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/650/637248098360957592.jpeg\",\n      sourceURL: \"sources/lr\",\n    },\n    {\n      id: 56,\n      name: \"IMR\",\n      description: \"Infernal Machine Rebuild\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/395/637248086063224834.jpeg\",\n      sourceURL: \"sources/imr\",\n    },\n    {\n      id: 57,\n      name: \"MFFV1\",\n      description: \"Mordenkainen's Fiendish Folio Volume 1\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/743/637248102793792401.jpeg\",\n      sourceURL: \"sources/mffv1\",\n    },\n    {\n      id: 58,\n      name: \"SD\",\n      description: \"Sapphire Dragon\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/899/637248153278056972.jpeg\",\n      sourceURL: \"\",\n    },\n    {\n      id: 59,\n      name: \"EGtW\",\n      description: \"Explorer's Guide to Wildemount\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10367/769/637245363413951140.jpeg\",\n      sourceURL: \"sources/egtw\",\n    },\n    {\n      id: 60,\n      name: \"OGA\",\n      description: \"One Grung Above\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/68/637248116464990081.jpeg\",\n      sourceURL: \"sources/oga\",\n    },\n    {\n      id: 61,\n      name: \"MOoT\",\n      description: \"Mythic Odysseys of Theros\",\n      sourceCategoryId: 7,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/885/637248108609488365.jpeg\",\n      sourceURL: \"sources/moot\",\n    },\n    {\n      id: 62,\n      name: \"WA\",\n      description: \"Frozen Sick\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/9193/755/637200909525723425.jpeg\",\n      sourceURL: \"sources/wa\",\n    },\n    {\n      id: 66,\n      name: \"IDRotF\",\n      description: \"Icewind Dale: Rime of the Frostmaiden\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/11095/550/637278965847502335.jpeg\",\n      sourceURL: \"sources/idrotf\",\n    },\n    {\n      id: 67,\n      name: \"TCoE\",\n      description: \"Tasha’s Cauldron of Everything\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/13665/613/637400361423035085.jpeg\",\n      sourceURL: \"sources/tcoe\",\n    },\n    {\n      id: 68,\n      name: \"CM\",\n      description: \"Candlekeep Mysteries\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/14917/783/637456355214291364.jpeg\",\n      sourceURL: \"sources/cm\",\n    },\n    {\n      id: 69,\n      name: \"VRGtR\",\n      description: \"Van Richten’s Guide to Ravenloft\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/15973/81/637496917952314322.jpeg\",\n      sourceURL: \"sources/vrgtr\",\n    },\n    {\n      id: 79,\n      name: \"TWBtW\",\n      description: \"The Wild Beyond the Witchlight\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/18223/997/637587419509160992.jpeg\",\n      sourceURL: \"sources/twbtw\",\n    },\n    {\n      id: 80,\n      name: \"SACoC\",\n      description: \"Strixhaven: A Curriculum of Chaos\",\n      sourceCategoryId: 7,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/18228/52/637587668398315568.jpeg\",\n      sourceURL: \"sources/sacoc\",\n    },\n    {\n      id: 81,\n      name: \"FToD\",\n      description: \"Fizban's Treasury of Dragons\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/19075/983/637620380256293999.jpeg\",\n      sourceURL: \"sources/ftod\",\n    },\n    {\n      id: 83,\n      name: \"CotN\",\n      description: \"Critical Role: Call of the Netherdeep\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/20906/943/637695655261542821.jpeg\",\n      sourceURL: \"sources/cotn\",\n    },\n    {\n      id: 85,\n      name: \"MotM\",\n      description: \"Mordenkainen Presents: Monsters of the Multiverse\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/22937/354/637776964748720726.jpeg\",\n      sourceURL: \"sources/motm\",\n    },\n    {\n      id: 87,\n      name: \"JttRC\",\n      description: \"Journeys through the Radiant Citadel\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/24454/511/637830510509865265.jpeg\",\n      sourceURL: \"sources/jttrc\",\n    },\n    {\n      id: 89,\n      name: \"MCv1\",\n      description: \"Monstrous Compendium Volume One: Spelljammer Creatures\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/25098/972/637854763136224645.jpeg\",\n      sourceURL: \"sources/mcv1\",\n    },\n    {\n      id: 90,\n      name: \"SAiS\",\n      description: \"Spelljammer: Adventures in Space\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/25228/876/637859890823057854.jpeg\",\n      sourceURL: \"sources/sais\",\n    },\n    {\n      id: 91,\n      name: \"TVD\",\n      description: \"The Vecna Dossier\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26305/340/637901114717317528.jpeg\",\n      sourceURL: \"sources/tvd\",\n    },\n    {\n      id: 92,\n      name: \"TRC\",\n      description: \"The Radiant Citadel\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26479/568/637907273106559243.jpeg\",\n      sourceURL: \"sources/trc\",\n    },\n    {\n      id: 93,\n      name: \"SJA\",\n      description: \"Spelljammer Academy\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26848/192/637920417931102595.jpeg\",\n      sourceURL: \"sources/sja\",\n    },\n    {\n      id: 94,\n      name: \"DoSI\",\n      description: \"Dragons of Stormwreck Isle\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26865/226/637921086362458107.jpeg\",\n      sourceURL: \"sources/dosi\",\n    },\n    {\n      id: 95,\n      name: \"SotDQ\",\n      description: \"Dragonlance: Shadow of the Dragon Queen\",\n      sourceCategoryId: 14,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/27777/666/637951679601337771.jpeg\",\n      sourceURL: \"sources/sotdq\",\n    },\n    {\n      id: 101,\n      name: \"MCv2\",\n      description: \"Monstrous Compendium Volume Two: Dragonlance Creatures\",\n      sourceCategoryId: 14,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/30591/814/638054153540284547.jpeg\",\n      sourceURL: \"sources/mcv2\",\n    },\n    {\n      id: 102,\n      name: \"ToD\",\n      description: \"Tyranny of Dragons\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/31000/357/638070661674299942.jpeg\",\n      sourceURL: \"sources/tod\",\n    },\n    {\n      id: 103,\n      name: \"KftGV\",\n      description: \"Keys from the Golden Vault\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/31000/595/638070671792143197.jpeg\",\n      sourceURL: \"sources/kftgv\",\n    },\n    {\n      id: 105,\n      name: \"P13\",\n      description: \"Prisoner 13\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/31678/948/638097617627683009.jpeg\",\n      sourceURL: \"sources/p13\",\n    },\n  ],\n  levelProficiencyBonuses: [\n    { level: 1, bonus: 2 },\n    { level: 2, bonus: 2 },\n    { level: 3, bonus: 2 },\n    { level: 4, bonus: 2 },\n    { level: 5, bonus: 3 },\n    { level: 6, bonus: 3 },\n    { level: 7, bonus: 3 },\n    { level: 8, bonus: 3 },\n    { level: 9, bonus: 4 },\n    { level: 10, bonus: 4 },\n    { level: 11, bonus: 4 },\n    { level: 12, bonus: 4 },\n    { level: 13, bonus: 5 },\n    { level: 14, bonus: 5 },\n    { level: 15, bonus: 5 },\n    { level: 16, bonus: 5 },\n    { level: 17, bonus: 6 },\n    { level: 18, bonus: 6 },\n    { level: 19, bonus: 6 },\n    { level: 20, bonus: 6 },\n  ],\n  levelExperiencePoints: [\n    0, 300, 900, 2700, 6500, 14000, 23000, 34000, 48000, 64000, 85000, 100000, 120000, 140000, 165000, 195000, 225000,\n    265000, 305000, 355000,\n  ],\n  diceValues: [4, 6, 8, 10, 12, 20],\n  stats: [\n    {\n      id: 1,\n      entityTypeId: 1472902489,\n      key: \"STR\",\n      name: \"Strength\",\n      compendiumText:\n        '<p>Strength measures bodily power, athletic training, and the extent to which you can exert raw physical force.</p>\\n<h4 id=\"StrengthChecks\">Strength Checks</h4>\\n<p>A Strength check can model any attempt to lift, push, pull, or break something, to force your body through a space, or to otherwise apply brute force to a situation. The Athletics skill reflects aptitude in certain kinds of Strength checks.</p>\\n<h5 id=\"Athletics\">Athletics</h5>\\n<p>Your Strength (Athletics) check covers difficult situations you encounter while climbing, jumping, or swimming. Examples include the following activities:</p>\\n<ul>\\n<li>You attempt to climb a sheer or slippery cliff, avoid hazards while scaling a wall, or cling to a surface while something is trying to knock you off.</li>\\n<li>You try to jump an unusually long distance or pull off a stunt midjump.</li>\\n<li>You struggle to swim or stay afloat in treacherous currents, storm-tossed waves, or areas of thick seaweed. Or another creature tries to push or pull you underwater or otherwise interfere with your swimming.</li>\\n</ul>\\n<h5 id=\"OtherStrengthChecks\">Other Strength Checks</h5>\\n<p>The DM might also call for a Strength check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Force open a stuck, locked, or barred door</li>\\n<li>Break free of bonds</li>\\n<li>Push through a tunnel that is too small</li>\\n<li>Hang on to a wagon while being dragged behind it</li>\\n<li>Tip over a statue</li>\\n<li>Keep a boulder from rolling</li>\\n</ul>\\n<h4 id=\"AttackRollsandDamage\">Attack Rolls and Damage</h4>\\n<p>You add your Strength modifier to your attack roll and your damage roll when attacking with a melee weapon such as a mace, a battleaxe, or a javelin. You use melee weapons to make melee attacks in hand-to-hand combat, and some of them can be thrown to make a ranged attack.</p>\\n<h4 id=\"LiftingandCarrying\">Lifting and Carrying</h4>\\n<p>Your Strength score determines the amount of weight you can bear. The following terms define what you can lift or carry.</p>\\n<p><strong>Carrying Capacity.</strong> Your carrying capacity is your Strength score multiplied by 15. This is the weight (in pounds) that you can carry, which is high enough that most characters don\\'t usually have to worry about it.</p>\\n<p><strong>Push, Drag, or Lift.</strong> You can push, drag, or lift a weight in pounds up to twice your carrying capacity (or 30 times your Strength score). While pushing or dragging weight in excess of your carrying capacity, your speed drops to 5 feet.</p>\\n<p><strong>Size and Strength.</strong> Larger creatures can bear more weight, whereas Tiny creatures can carry less. For each size category above Medium, double the creature\\'s carrying capacity and the amount it can push, drag, or lift. For a Tiny creature, halve these weights.</p>\\n<h4 id=\"VariantEncumbrance\">Variant: Encumbrance</h4>\\n<p>The rules for lifting and carrying are intentionally simple. Here is a variant if you are looking for more detailed rules for determining how a character is hindered by the weight of equipment. When you use this variant, ignore the Strength column of the Armor table in <a href=\"https://www.dndbeyond.com/compendium/rules/phb/equipment#ArmorandShields\">chapter 5</a>.</p>\\n<p>If you carry weight in excess of 5 times your Strength score, you are <strong>encumbered</strong>, which means your speed drops by 10 feet.</p>\\n<p>If you carry weight in excess of 10 times your Strength score, up to your maximum carrying capacity, you are instead <strong>heavily encumbered</strong>, which means your speed drops by 20 feet and you have disadvantage on ability checks, attack rolls, and saving throws that use Strength, Dexterity, or Constitution.</p>',\n    },\n    {\n      id: 2,\n      entityTypeId: 1472902489,\n      key: \"DEX\",\n      name: \"Dexterity\",\n      compendiumText:\n        '<p>Dexterity measures agility, reflexes, and balance.</p>\\n<h4 id=\"DexterityChecks\">Dexterity Checks</h4>\\n<p>A Dexterity check can model any attempt to move nimbly, quickly, or quietly, or to keep from falling on tricky footing. The Acrobatics, Sleight of Hand, and Stealth skills reflect aptitude in certain kinds of Dexterity checks.</p>\\n<h5 id=\"Acrobatics\">Acrobatics</h5>\\n<p>Your Dexterity (Acrobatics) check covers your attempt to stay on your feet in a tricky situation, such as when you\\'re trying to run across a sheet of ice, balance on a tightrope, or stay upright on a rocking ship\\'s deck. The DM might also call for a Dexterity (Acrobatics) check to see if you can perform acrobatic stunts, including dives, rolls, somersaults, and flips.</p>\\n<h5 id=\"SleightofHand\">Sleight of Hand</h5>\\n<p>Whenever you attempt an act of legerdemain or manual trickery, such as planting something on someone else or concealing an object on your person, make a Dexterity (Sleight of Hand) check. The DM might also call for a Dexterity (Sleight of Hand) check to determine whether you can lift a coin purse off another person or slip something out of another person\\'s pocket.</p>\\n<h5 id=\"Stealth\">Stealth</h5>\\n<p>Make a Dexterity (Stealth) check when you attempt to conceal yourself from enemies, slink past guards, slip away without being noticed, or sneak up on someone without being seen or heard.</p>\\n<h5 id=\"OtherDexterityChecks\">Other Dexterity Checks</h5>\\n<p>The DM might call for a Dexterity check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Control a heavily laden cart on a steep descent</li>\\n<li>Steer a chariot around a tight turn</li>\\n<li>Pick a lock</li>\\n<li>Disable a trap</li>\\n<li>Securely tie up a prisoner</li>\\n<li>Wriggle free of bonds</li>\\n<li>Play a stringed instrument</li>\\n<li>Craft a small or detailed object</li>\\n</ul>\\n<h4 id=\"AttackRollsandDamage\">Attack Rolls and Damage</h4>\\n<p>You add your Dexterity modifier to your attack roll and your damage roll when attacking with a ranged weapon, such as a sling or a longbow. You can also add your Dexterity modifier to your attack roll and your damage roll when attacking with a melee weapon that has the finesse property, such as a dagger or a rapier.</p>\\n<h4 id=\"ArmorClass\">Armor Class</h4>\\n<p>Depending on the armor you wear, you might add some or all of your Dexterity modifier to your Armor Class, as described in chapter 5, \"<a href=\"https://www.dndbeyond.com/compendium/rules/phb/equipment#ArmorandShields\">Equipment</a>.\"</p>\\n<h4 id=\"Initiative\">Initiative</h4>\\n<p>At the beginning of every combat, you roll initiative by making a Dexterity check. Initiative determines the order of creatures\\' turns in combat, as described in chapter 9, \"<a href=\"https://www.dndbeyond.com/compendium/rules/phb/combat#Initiative\">Combat</a>.\"</p>\\n<blockquote>\\n<p><strong>HIDING</strong></p>\\n<p>The DM decides when circumstances are appropriate for hiding. When you try to hide, make a Dexterity (Stealth) check. Until you are discovered or you stop hiding, that check\\'s total is contested by the Wisdom (Perception) check of any creature that actively searches for signs of your presence.</p>\\n<p>You can\\'t hide from a creature that can see you clearly, and you give away your position if you make noise, such as shouting a warning or knocking over a vase. An invisible creature can always try to hide. Signs of its passage might still be noticed, and it does have to stay quiet.</p>\\n<p>In combat, most creatures stay alert for signs of danger all around, so if you come out of hiding and approach a creature, it usually sees you. However, under certain circumstances, the DM might allow you to stay hidden as you approach a creature that is distracted, allowing you to gain advantage on an attack roll before you are seen.</p>\\n<p><strong>Passive Perception.</strong> When you hide, there\\'s a chance someone will notice you even if they aren\\'t searching. To determine whether such a creature notices you, the DM compares your Dexterity (Stealth) check with that creature\\'s passive Wisdom (Perception) score, which equals 10 + the creature\\'s Wisdom modifier, as well as any other bonuses or penalties. If the creature has advantage, add 5. For disadvantage, subtract 5.</p>\\n<p>For example, if a 1st-level character (with a proficiency bonus of +2) has a Wisdom of 15 (a +2 modifier) and proficiency in Perception, he or she has a passive Wisdom (Perception) of 14.</p>\\n<p><strong>What Can You See?</strong> One of the main factors in determining whether you can find a hidden creature or object is how well you can see in an area, which might be <strong>lightly</strong> or <strong>heavily obscured&nbsp;</strong>as explained in chapter 8, “<a href=\"https://www.dndbeyond.com/compendium/rules/phb/adventuring#VisionandLight\">Adventuring</a>.”</p>\\n</blockquote>',\n    },\n    {\n      id: 3,\n      entityTypeId: 1472902489,\n      key: \"CON\",\n      name: \"Constitution\",\n      compendiumText:\n        '<p>Constitution measures health, stamina, and vital force.</p>\\n<h4 id=\"ConstitutionChecks\">Constitution Checks</h4>\\n<p>Constitution checks are uncommon, and no skills apply to Constitution checks, because the endurance this ability represents is largely passive rather than involving a specific effort on the part of a character or monster. A Constitution check can model your attempt to push beyond normal limits, however.</p>\\n<p>The DM might call for a Constitution check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Hold your breath</li>\\n<li>March or labor for hours without rest</li>\\n<li>Go without sleep</li>\\n<li>Survive without food or water</li>\\n<li>Quaff an entire stein of ale in one go</li>\\n</ul>\\n<h4 id=\"HitPoints\">Hit Points</h4>\\n<p>Your Constitution modifier contributes to your hit points. Typically, you add your Constitution modifier to each Hit Die you roll for your hit points.</p>\\n<p>If your Constitution modifier changes, your hit point maximum changes as well, as though you had the new modifier from 1st level. For example, if you raise your Constitution score when you reach 4th level and your Constitution modifier increases from +1 to +2, you adjust your hit point maximum as though the modifier had always been +2. So you add 3 hit points for your first three levels, and then roll your hit points for 4th level using your new modifier. Or if you\\'re 7th level and some effect lowers your Constitution score so as to reduce your Constitution modifier by 1, your hit point maximum is reduced by 7.</p>',\n    },\n    {\n      id: 4,\n      entityTypeId: 1472902489,\n      key: \"INT\",\n      name: \"Intelligence\",\n      compendiumText:\n        '<p>Intelligence measures mental acuity, accuracy of recall, and the ability to reason.</p>\\n<h4 id=\"IntelligenceChecks\">Intelligence Checks</h4>\\n<p>An Intelligence check comes into play when you need to draw on logic, education, memory, or deductive reasoning. The Arcana, History, Investigation, Nature, and Religion skills reflect aptitude in certain kinds of Intelligence checks.</p>\\n<h5 id=\"Arcana\">Arcana</h5>\\n<p>Your Intelligence (Arcana) check measures your ability to recall lore about spells, magic items, eldritch symbols, magical traditions, the planes of existence, and the inhabitants of those planes.</p>\\n<h5 id=\"History\">History</h5>\\n<p>Your Intelligence (History) check measures your ability to recall lore about historical events, legendary people, ancient kingdoms, past disputes, recent wars, and lost civilizations.</p>\\n<h5 id=\"Investigation\">Investigation</h5>\\n<p>When you look around for clues and make deductions based on those clues, you make an Intelligence (Investigation) check. You might deduce the location of a hidden object, discern from the appearance of a wound what kind of weapon dealt it, or determine the weakest point in a tunnel that could cause it to collapse. Poring through ancient scrolls in search of a hidden fragment of knowledge might also call for an Intelligence (Investigation) check.</p>\\n<h5 id=\"Nature\">Nature</h5>\\n<p>Your Intelligence (Nature) check measures your ability to recall lore about terrain, plants and animals, the weather, and natural cycles.</p>\\n<h5 id=\"Religion\">Religion</h5>\\n<p>Your Intelligence (Religion) check measures your ability to recall lore about deities, rites and prayers, religious hierarchies, holy symbols, and the practices of secret cults.</p>\\n<h5 id=\"OtherIntelligenceChecks\">Other Intelligence Checks</h5>\\n<p>The DM might call for an Intelligence check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Communicate with a creature without using words</li>\\n<li>Estimate the value of a precious item</li>\\n<li>Pull together a disguise to pass as a city guard</li>\\n<li>Forge a document</li>\\n<li>Recall lore about a craft or trade</li>\\n<li>Win a game of skill</li>\\n</ul>\\n<h4 id=\"SpellcastingAbility\">Spellcasting Ability</h4>\\n<p>Wizards use Intelligence as their spellcasting ability, which helps determine the saving throw DCs of spells they cast.</p>',\n    },\n    {\n      id: 5,\n      entityTypeId: 1472902489,\n      key: \"WIS\",\n      name: \"Wisdom\",\n      compendiumText:\n        '<p>Wisdom reflects how attuned you are to the world around you and represents perceptiveness and intuition.</p>\\n<h4 id=\"WisdomChecks\">Wisdom Checks</h4>\\n<p>A Wisdom check might reflect an effort to read body language, understand someone’s feelings, notice things about the environment, or care for an injured person. The Animal Handling, Insight, Medicine, Perception, and Survival skills reflect aptitude in certain kinds of Wisdom checks.</p>\\n<h5 id=\"AnimalHandling\">Animal Handling</h5>\\n<p>When there is any question whether you can calm down a domesticated animal, keep a mount from getting spooked, or intuit an animal’s intentions, the DM might call for a Wisdom (Animal Handling) check. You also make a Wisdom (Animal Handling) check to control your mount when you attempt a risky maneuver.</p>\\n<h5 id=\"Insight\">Insight</h5>\\n<p>Your Wisdom (Insight) check decides whether you can determine the true intentions of a creature, such as when searching out a lie or predicting someone’s next move. Doing so involves gleaning clues from body language, speech habits, and changes in mannerisms.</p>\\n<h5 id=\"Medicine\">Medicine</h5>\\n<p>A Wisdom (Medicine) check lets you try to stabilize a dying companion or diagnose an illness.</p>\\n<h5 id=\"Perception\">Perception</h5>\\n<p>Your Wisdom (Perception) check lets you spot, hear, or otherwise detect the presence of something. It measures your general awareness of your surroundings and the keenness of your senses. For example, you might try to hear a conversation through a closed door, eavesdrop under an open window, or hear monsters moving stealthily in the forest. Or you might try to spot things that are obscured or easy to miss, whether they are orcs lying in ambush on a road, thugs hiding in the shadows of an alley, or candlelight under a closed secret door.</p>\\n<aside>\\n<blockquote>\\n<p id=\"finding-a-hidden-object\"><strong>FINDING A HIDDEN OBJECT</strong></p>\\n<p>When your character searches for a hidden object such as a secret door or a trap, the DM typically asks you to make a Wisdom (Perception) check. Such a check can be used to find hidden details or other information and clues that you might otherwise overlook.</p>\\n<p>In most cases, you need to describe where you are looking in order for the DM to determine your chance of success. For example, a key is hidden beneath a set of folded clothes in the top drawer of a bureau. If you tell the DM that you pace around the room, looking at the walls and furniture for clues, you have no chance of finding the key, regardless of your Wisdom (Perception) check result. You would have to specify that you were opening the drawers or searching the bureau in order to have any chance of success.</p>\\n</blockquote>\\n</aside>\\n<h5 id=\"Survival\">Survival</h5>\\n<p>The DM might ask you to make a Wisdom (Survival) check to follow tracks, hunt wild game, guide your group through frozen wastelands, identify signs that owlbears live nearby, predict the weather, or avoid quicksand and other natural hazards.</p>\\n<h5 id=\"OtherWisdomChecks\">Other Wisdom Checks</h5>\\n<p>The DM might call for a Wisdom check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Get a gut feeling about what course of action to follow</li>\\n<li>Discern whether a seemingly dead or living creature is undead</li>\\n</ul>\\n<h4 id=\"SpellcastingAbility\">Spellcasting Ability</h4>\\n<p>Clerics, druids, and rangers use Wisdom as their spellcasting ability, which helps determine the saving throw DCs of spells they cast.</p>',\n    },\n    {\n      id: 6,\n      entityTypeId: 1472902489,\n      key: \"CHA\",\n      name: \"Charisma\",\n      compendiumText:\n        '<p>Charisma measures your ability to interact effectively with others. It includes such factors as confidence and eloquence, and it can represent a charming or commanding personality.</p>\\n<h4 id=\"CharismaChecks\">Charisma Checks</h4>\\n<p>A Charisma check might arise when you try to influence or entertain others, when you try to make an impression or tell a convincing lie, or when you are navigating a tricky social situation. The Deception, Intimidation, Performance, and Persuasion skills reflect aptitude in certain kinds of Charisma checks.</p>\\n<h5 id=\"Deception\">Deception</h5>\\n<p>Your Charisma (Deception) check determines whether you can convincingly hide the truth, either verbally or through your actions. This deception can encompass everything from misleading others through ambiguity to telling outright lies. Typical situations include trying to fast-talk a guard, con a merchant, earn money through gambling, pass yourself off in a disguise, dull someone\\'s suspicions with false assurances, or maintain a straight face while telling a blatant lie.</p>\\n<h5 id=\"Intimidation\">Intimidation</h5>\\n<p>When you attempt to influence someone through overt threats, hostile actions, and physical violence, the DM might ask you to make a Charisma (Intimidation) check. Examples include trying to pry information out of a prisoner, convincing street thugs to back down from a confrontation, or using the edge of a broken bottle to convince a sneering vizier to reconsider a decision.</p>\\n<h5 id=\"Performance\">Performance</h5>\\n<p>Your Charisma (Performance) check determines how well you can delight an audience with music, dance, acting, storytelling, or some other form of entertainment.</p>\\n<h5 id=\"Persuasion\">Persuasion</h5>\\n<p>When you attempt to influence someone or a group of people with tact, social graces, or good nature, the DM might ask you to make a Charisma (Persuasion) check. Typically, you use persuasion when acting in good faith, to foster friendships, make cordial requests, or exhibit proper etiquette. Examples of persuading others include convincing a chamberlain to let your party see the king, negotiating peace between warring tribes, or inspiring a crowd of townsfolk.</p>\\n<h5 id=\"OtherCharismaChecks\">Other Charisma Checks</h5>\\n<p>The DM might call for a Charisma check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Find the best person to talk to for news, rumors, and gossip</li>\\n<li>Blend into a crowd to get the sense of key topics of conversation</li>\\n</ul>\\n<h4 id=\"SpellcastingAbility\">Spellcasting Ability</h4>\\n<p>Bards, paladins, sorcerers, and warlocks use Charisma as their spellcasting ability, which helps determine the saving throw DCs of spells they cast.</p>',\n    },\n  ],\n  currencyData: [\n    { id: 1, name: \"PP\", conversionFromGp: 10.0, weight: 0.02 },\n    { id: 2, name: \"GP\", conversionFromGp: 1.0, weight: 0.02 },\n    { id: 3, name: \"EP\", conversionFromGp: 0.5, weight: 0.02 },\n    { id: 4, name: \"SP\", conversionFromGp: 0.1, weight: 0.02 },\n    { id: 5, name: \"CP\", conversionFromGp: 0.01, weight: 0.02 },\n  ],\n  classConfigurations: [\n    {\n      id: 357975,\n      name: \"Blood Hunter\",\n      primaryAbilities: [],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 146776,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 117,\n      name: \"Blood Hunter (archived)\",\n      primaryAbilities: [],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [],\n    },\n    {\n      id: 1,\n      name: \"Bard\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 15, 16, 18, 19, 19, 20, 22, 22, 22],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10356,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 2,\n      name: \"Cleric\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10357,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 3,\n      name: \"Druid\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10358,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 4,\n      name: \"Paladin\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Strength 13 and Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10359,\n              entityId: 1,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"strength\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Strength\",\n            },\n            {\n              id: 10360,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 5,\n      name: \"Ranger\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        levelSpellKnownMaxes: [0, 0, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Dexterity 13 and Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10361,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n            {\n              id: 10362,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 6,\n      name: \"Sorcerer\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n        levelSpellKnownMaxes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10363,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 7,\n      name: \"Warlock\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 2, 0, 0, 0, 0],\n          [0, 0, 0, 0, 2, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10364,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 8,\n      name: \"Wizard\",\n      primaryAbilities: [4],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 10365,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 9,\n      name: \"Barbarian\",\n      primaryAbilities: [1],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Strength 13\",\n          prerequisiteMappings: [\n            {\n              id: 10366,\n              entityId: 1,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"strength\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Strength\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 10,\n      name: \"Fighter\",\n      primaryAbilities: [1, 2],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Strength 13\",\n          prerequisiteMappings: [\n            {\n              id: 10367,\n              entityId: 1,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"strength\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Strength\",\n            },\n          ],\n        },\n        {\n          description: \"or Dexterity 13\",\n          prerequisiteMappings: [\n            {\n              id: 10368,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 11,\n      name: \"Monk\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Dexterity 13 and Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10369,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n            {\n              id: 10370,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 12,\n      name: \"Rogue\",\n      primaryAbilities: [2],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Dexterity 13\",\n          prerequisiteMappings: [\n            {\n              id: 10371,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 124727,\n      name: \"Artificer (UA)\",\n      primaryAbilities: [4],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 2,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 32395,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 252717,\n      name: \"Artificer\",\n      primaryAbilities: [4],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 2,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 74766,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  abilitySkills: [\n    {\n      id: 2,\n      entityTypeId: 1958004211,\n      stat: 1,\n      name: \"Athletics\",\n      description:\n        \"<p>Your Strength (Athletics) check covers difficult situations you encounter while climbing, jumping, or swimming. Examples include the following activities:</p>\\n<ul>\\n<li>You attempt to climb a sheer or slippery cliff, avoid hazards while scaling a wall, or cling to a surface while something is trying to knock you off.</li>\\n<li>You try to jump an unusually long distance or pull off a stunt midjump.</li>\\n<li>You struggle to swim or stay afloat in treacherous currents, storm-tossed waves, or areas of thick seaweed. Or another creature tries to push or pull you underwater or otherwise interfere with your swimming.</li>\\n</ul>\",\n    },\n    {\n      id: 3,\n      entityTypeId: 1958004211,\n      stat: 2,\n      name: \"Acrobatics\",\n      description:\n        \"<p>Your Dexterity (Acrobatics) check covers your attempt to stay on your feet in a tricky situation, such as when you're trying to run across a sheet of ice, balance on a tightrope, or stay upright on a rocking ship's deck. The GM might also call for a Dexterity (Acrobatics) check to see if you can perform acrobatic stunts, including dives, rolls, somersaults, and flips.</p>\",\n    },\n    {\n      id: 4,\n      entityTypeId: 1958004211,\n      stat: 2,\n      name: \"Sleight of Hand\",\n      description:\n        \"<p>Whenever you attempt an act of legerdemain or manual trickery, such as planting something on someone else or concealing an object on your person, make a Dexterity (Sleight of Hand) check. The GM might also call for a Dexterity (Sleight of Hand) check to determine whether you can lift a coin purse off another person or slip something out of another person's pocket.</p>\\n\",\n    },\n    {\n      id: 5,\n      entityTypeId: 1958004211,\n      stat: 2,\n      name: \"Stealth\",\n      description:\n        \"<p>Make a Dexterity (Stealth) check when you attempt to conceal yourself from enemies, slink past guards, slip away without being noticed, or sneak up on someone without being seen or heard.</p>\",\n    },\n    {\n      id: 6,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Arcana\",\n      description:\n        \"<p>Your Intelligence (Arcana) check measures your ability to recall lore about spells, magic items, eldritch symbols, magical traditions, the planes of existence, and the inhabitants of those planes.</p>\",\n    },\n    {\n      id: 7,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"History\",\n      description:\n        \"<p>Your Intelligence (History) check measures your ability to recall lore about historical events, legendary people, ancient kingdoms, past disputes, recent wars, and lost civilizations.</p>\",\n    },\n    {\n      id: 8,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Investigation\",\n      description:\n        \"<p>When you look around for clues and make deductions based on those clues, you make an Intelligence (Investigation) check. You might deduce the location of a hidden object, discern from the appearance of a wound what kind of weapon dealt it, or determine the weakest point in a tunnel that could cause it to collapse. Poring through ancient scrolls in search of a hidden fragment of knowledge might also call for an Intelligence (Investigation) check.</p>\\n\",\n    },\n    {\n      id: 9,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Nature\",\n      description:\n        \"<p>Your Intelligence (Nature) check measures your ability to recall lore about terrain, plants and animals, the weather, and natural cycles.</p>\",\n    },\n    {\n      id: 10,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Religion\",\n      description:\n        \"<p>Your Intelligence (Religion) check measures your ability to recall lore about deities, rites and prayers, religious hierarchies, holy symbols, and the practices of secret cults.</p>\",\n    },\n    {\n      id: 11,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Animal Handling\",\n      description:\n        \"<p>When there is any question whether you can calm down a domesticated animal, keep a mount from getting spooked, or intuit an animal’s intentions, the GM might call for a Wisdom (Animal Handling) check. You also make a Wisdom (Animal Handling) check to control your mount when you attempt a risky maneuver.</p>\",\n    },\n    {\n      id: 12,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Insight\",\n      description:\n        \"<p>Your Wisdom (Insight) check decides whether you can determine the true intentions of a creature, such as when searching out a lie or predicting someone’s next move. Doing so involves gleaning clues from body language, speech habits, and changes in mannerisms.</p>\\n\",\n    },\n    {\n      id: 13,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Medicine\",\n      description:\n        \"<p>A Wisdom (Medicine) check lets you try to stabilize a dying companion or diagnose an illness.</p>\",\n    },\n    {\n      id: 14,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Perception\",\n      description:\n        \"<p>Your Wisdom (Perception) check lets you spot, hear, or otherwise detect the presence of something. It measures your general awareness of your surroundings and the keenness of your senses. For example, you might try to hear a conversation through a closed door, eavesdrop under an open window, or hear monsters moving stealthily in the forest. Or you might try to spot things that are obscured or easy to miss, whether they are orcs lying in ambush on a road, thugs hiding in the shadows of an alley, or candlelight under a closed secret door.</p>\\n\",\n    },\n    {\n      id: 15,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Survival\",\n      description:\n        \"<p>The GM might ask you to make a Wisdom (Survival) check to follow tracks, hunt wild game, guide your group through frozen wastelands, identify signs that owlbears live nearby, predict the weather, or avoid quicksand and other natural hazards.</p>\",\n    },\n    {\n      id: 16,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Deception\",\n      description:\n        \"<p>Your Charisma (Deception) check determines whether you can convincingly hide the truth, either verbally or through your actions. This deception can encompass everything from misleading others through ambiguity to telling outright lies. Typical situations include trying to fast-talk a guard, con a merchant, earn money through gambling, pass yourself off in a disguise, dull someone's suspicions with false assurances, or maintain a straight face while telling a blatant lie.</p>\\n\",\n    },\n    {\n      id: 17,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Intimidation\",\n      description:\n        \"<p>When you attempt to influence someone through overt threats, hostile actions, and physical violence, the GM might ask you to make a Charisma (Intimidation) check. Examples include trying to pry information out of a prisoner, convincing street thugs to back down from a confrontation, or using the edge of a broken bottle to convince a sneering vizier to reconsider a decision.</p>\\n\",\n    },\n    {\n      id: 18,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Performance\",\n      description:\n        \"<p>Your Charisma (Performance) check determines how well you can delight an audience with music, dance, acting, storytelling, or some other form of entertainment.</p>\",\n    },\n    {\n      id: 19,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Persuasion\",\n      description:\n        \"<p>When you attempt to influence someone or a group of people with tact, social graces, or good nature, the GM might ask you to make a Charisma (Persuasion) check. Typically, you use persuasion when acting in good faith, to foster friendships, make cordial requests, or exhibit proper etiquette. Examples of persuading others include convincing a chamberlain to let your party see the king, negotiating peace between warring tribes, or inspiring a crowd of townsfolk.</p>\\n\",\n    },\n  ],\n  senses: [\n    { id: 1, entityTypeId: 668550506, name: \"Blindsight\" },\n    { id: 2, entityTypeId: 668550506, name: \"Darkvision\" },\n    { id: 3, entityTypeId: 668550506, name: \"Tremorsense\" },\n    { id: 4, entityTypeId: 668550506, name: \"Truesight\" },\n    { id: 5, entityTypeId: 668550506, name: \"Unknown\" },\n  ],\n  creatureSizes: [\n    { id: 2, entityTypeId: 127108918, name: \"Tiny\", weightType: 1 },\n    { id: 3, entityTypeId: 127108918, name: \"Small\", weightType: 2 },\n    { id: 4, entityTypeId: 127108918, name: \"Medium\", weightType: 2 },\n    { id: 5, entityTypeId: 127108918, name: \"Large\", weightType: 3 },\n    { id: 6, entityTypeId: 127108918, name: \"Huge\", weightType: 3 },\n    { id: 7, entityTypeId: 127108918, name: \"Gargantuan\", weightType: 3 },\n    { id: 10, entityTypeId: 127108918, name: \"Medium or Small\", weightType: 2 },\n  ],\n  limitedUseResetTypes: [\n    { id: 1, name: \"Short Rest\" },\n    { id: 2, name: \"Long Rest\" },\n    { id: 3, name: \"Dawn\" },\n    { id: 4, name: \"Other\" },\n  ],\n  sourceCategories: [\n    {\n      id: 1,\n      name: \"Core D&amp;D\",\n      description: null,\n      isHideable: false,\n      isEnabledByDefault: true,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n    {\n      id: 2,\n      name: \"Critical Role\",\n      description: null,\n      isHideable: true,\n      isEnabledByDefault: false,\n      isToggleable: true,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/105/174/636512853628516966.png\",\n    },\n    {\n      id: 3,\n      name: \"Playtest\",\n      description:\n        '<p><span style=\"color: rgba(255, 0, 0, 1)\"><strong>THIS IS UNOFFICIAL MATERIAL</strong></span></p>\\n<p>The material here is presented for playtesting and to spark your imagination. These game mechanics are in draft form, usable in your campaign but not refined by&nbsp;full game design and editing. They aren’t officially part of the game and aren’t permitted in D&amp;D Adventurers League events.</p>\\n<p>If this material is made official, it will be refined based on your feedback, and then it will appear in a D&amp;D product that you can unlock on DDB.</p>\\n<p>If this material is not made official, it will be removed from D&amp;D Beyond following the playtest period and you will need to replace it with another option.</p>',\n      isHideable: true,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/110/171/636516074887091041.png\",\n    },\n    {\n      id: 6,\n      name: \"D&amp;D Beyond\",\n      description: \"<p>D&amp;D Beyond</p>\",\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n    {\n      id: 7,\n      name: \"Magic: The Gathering\",\n      description: \"<p>Magic: The Gathering content for fifth edition Dungeons &amp; Dragons</p>\",\n      isHideable: false,\n      isEnabledByDefault: true,\n      isToggleable: true,\n      avatarUrl: \"\",\n    },\n    {\n      id: 8,\n      name: \"Eberron\",\n      description: \"<p>The Eberron campaign setting for&nbsp;fifth edition Dungeons &amp; Dragons</p>\",\n      isHideable: false,\n      isEnabledByDefault: true,\n      isToggleable: true,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/2588/861/636681435608150525.png\",\n    },\n    {\n      id: 9,\n      name: \"Archived\",\n      description: \"<p>The Graveyard</p>\",\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n    {\n      id: 10,\n      name: \"Rick and Morty\",\n      description: \"<p>Source category for Rick and Morty products.</p>\",\n      isHideable: true,\n      isEnabledByDefault: false,\n      isToggleable: true,\n      avatarUrl: \"\",\n    },\n    {\n      id: 11,\n      name: \"Runeterra\",\n      description:\n        '<p><span style=\"color: rgba(255, 0, 0, 1)\"><strong>THIS IS UNOFFICIAL MATERIAL</strong></span></p>\\n<p>These game mechanics are usable in your campaign if your DM allows them but not refined by final game design and editing. They aren’t officially part of the Dungeons &amp; Dragons game and aren’t permitted in D&amp;D Adventurers League events unless otherwise stated.</p>',\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/11008/904/637274855809570341.png\",\n    },\n    {\n      id: 12,\n      name: \"Noncore D&amp;D\",\n      description:\n        '<p><span style=\"color: rgba(255, 0, 0, 1)\"><strong>THIS IS NONCORE D&amp;D MATERIAL</strong></span></p>\\n<p>These game mechanics are usable in your campaign if your DM allows them but not refined by final game design and editing.</p>',\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: true,\n      avatarUrl: \"\",\n    },\n    {\n      id: 13,\n      name: \"Adventurers League\",\n      description: \"<p>Adventurers League content for fifth edition Dungeons &amp; Dragons</p>\",\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n  ],\n  movements: [\n    { id: 1, name: \"Walk\", description: \"Walking\" },\n    { id: 2, name: \"Burrow\", description: \"Burrowing\" },\n    { id: 3, name: \"Climb\", description: \"Climbing\" },\n    { id: 4, name: \"Fly\", description: \"Flying\" },\n    { id: 5, name: \"Swim\", description: \"Swimming\" },\n  ],\n  multiClassSpellSlots: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [2, 0, 0, 0, 0, 0, 0, 0, 0],\n    [3, 0, 0, 0, 0, 0, 0, 0, 0],\n    [4, 2, 0, 0, 0, 0, 0, 0, 0],\n    [4, 3, 0, 0, 0, 0, 0, 0, 0],\n    [4, 3, 2, 0, 0, 0, 0, 0, 0],\n    [4, 3, 3, 0, 0, 0, 0, 0, 0],\n    [4, 3, 3, 1, 0, 0, 0, 0, 0],\n    [4, 3, 3, 2, 0, 0, 0, 0, 0],\n    [4, 3, 3, 3, 1, 0, 0, 0, 0],\n    [4, 3, 3, 3, 2, 0, 0, 0, 0],\n    [4, 3, 3, 3, 2, 1, 0, 0, 0],\n    [4, 3, 3, 3, 2, 1, 0, 0, 0],\n    [4, 3, 3, 3, 2, 1, 1, 0, 0],\n    [4, 3, 3, 3, 2, 1, 1, 0, 0],\n    [4, 3, 3, 3, 2, 1, 1, 1, 0],\n    [4, 3, 3, 3, 2, 1, 1, 1, 0],\n    [4, 3, 3, 3, 2, 1, 1, 1, 1],\n    [4, 3, 3, 3, 3, 1, 1, 1, 1],\n    [4, 3, 3, 3, 3, 2, 1, 1, 1],\n    [4, 3, 3, 3, 3, 2, 2, 1, 1],\n  ],\n  pactMagicMultiClassSpellSlots: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [2, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 2, 0, 0, 0, 0, 0, 0],\n    [0, 0, 2, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 2, 0, 0, 0, 0, 0],\n    [0, 0, 0, 2, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n  ],\n  proficiencyGroups: [\n    { label: \"Armor\", customProficiencyGroup: 4, customAdjustments: [32], entityTypeIds: [701257905, 174869515] },\n    { label: \"Weapons\", customProficiencyGroup: 5, customAdjustments: [33], entityTypeIds: [1782728300, 660121713] },\n    { label: \"Tools\", customProficiencyGroup: 2, customAdjustments: [34], entityTypeIds: [2103445194, 1452973421] },\n    { label: \"Languages\", customProficiencyGroup: 3, customAdjustments: [35], entityTypeIds: [906033267] },\n  ],\n  vehicleConfiguration: null,\n};\n","import logger from \"../../logger.js\";\nimport { fallbackDDBConfig } from \"./fallbackConfig.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBProxy from \"../../lib/DDBProxy.js\";\n\nfunction directConfig() {\n  $.getJSON(\"https://www.dndbeyond.com/api/config/json\")\n    .then((config) => {\n      if (config && config.sources) {\n        setProperty(CONFIG, \"DDB\", config);\n        logger.info(\"Loaded DDB live config\");\n      }\n      return config;\n    })\n    .catch((err) => {\n      logger.warn(\"Failed to load DDB config, caught error using fallback.\", err);\n      return err;\n    })\n    .always(() => {\n      if (!CONFIG.DDB?.sources) {\n        setProperty(CONFIG, \"DDB\", fallbackDDBConfig);\n        logger.warn(\"Failed to load DDB config, using fallback.\");\n      } else {\n        logger.info(\"A DDB config was loaded\");\n      }\n      logger.debug(\"DDB_CONFIG\", CONFIG.DDB);\n    });\n}\n\nfunction proxyConfig() {\n  const parsingApi = DDBProxy.getProxy();\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  const url = `${parsingApi}/proxy/api/config/json`;\n  return new Promise((resolve, reject) => {\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data.success) {\n          logger.error(`API Failure: ${data.message}`);\n          setProperty(CONFIG, \"DDB\", fallbackDDBConfig);\n          reject(data.message);\n        }\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `config-raw.json`, \"application/json\");\n        }\n        return data;\n      })\n      .then((data) => {\n        if (data.success) {\n          logger.info(`Retrieved DDB CONFIG DATA via proxy`);\n          setProperty(CONFIG, \"DDB\", data.data);\n        }\n        logger.debug(\"DDB_CONFIG\", CONFIG.DDB);\n        resolve(data.data);\n      })\n      .catch((error) => reject(error));\n  });\n}\n\nexport function loadDDBConfig() {\n  if (!hasProperty(CONFIG, \"DDB\")) {\n    setProperty(CONFIG, \"DDB\", fallbackDDBConfig);\n    if (getProperty(CONFIG, \"DEBUG.DDBI.DIRECT_CONFIG\")) {\n      if ((/electron/i).test(navigator.userAgent)) {\n        logger.info(\"Electron detected using DDB Config stub\");\n        logger.debug(\"DDB_CONFIG\", CONFIG.DDB);\n      } else {\n        logger.info(\"Loaded default DDB config, checking for live config access.\");\n        directConfig();\n      }\n    } else {\n      proxyConfig();\n    }\n  }\n}\n","import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\n\nfunction addSlugField(element, slug) {\n  const titleInput = element.querySelector(\"input[name='text']\");\n  const slugHTML = `<div class=\"form-group\">\n  <label>Jump to HTML Slug</label>\n  <div class=\"form-fields\">\n      <input type=\"text\" name=\"slug\" value=\"${slug}\" placeholder=\"\">\n  </div>\n</div>`;\n\n  const div = utils.htmlToElement(slugHTML);\n  titleInput.parentNode.parentNode.parentNode.insertBefore(div, titleInput.parentNode.parentNode.nextSibling.nextSibling);\n}\n\nfunction updateSlugField(element, slug) {\n  const slugInput = element.querySelector(\"input[name='slug']\");\n  slugInput.setAttribute('value', slug);\n}\n\nasync function saveSlug(note, slug) {\n  await note.scene.updateEmbeddedDocuments(\"Note\", [\n    {\n      _id: note.id,\n      flags: {\n        \"anchor.slug\": slug,\n        \"ddb.slugLink\": slug,\n        \"ddb.labelName\": note.label,\n      },\n    },\n  ]);\n}\n\nexport function anchorInjection() {\n  Hooks.on(\"activateNote\", (note, options) => {\n    if (note.document?.flags?.ddb?.slugLink) {\n      logger.debug(\"Injecting note anchor\", note.document.flags.ddb.slugLink);\n      options[\"anchor\"] = note.document.flags.ddb.slugLink;\n    } else if (note.document.flags.anchor?.slug) {\n      logger.debug(\"Injecting note anchor\", note.document.flags.anchor.slug);\n      options[\"anchor\"] = note.document.flags.anchor.slug;\n    } else if (note.document?.flags?.anchor) {\n      logger.debug(\"Injecting note anchor\", note.document.flags.anchor);\n      options[\"anchor\"] = note.document.flags.anchor;\n    }\n  });\n\n  // when we render a note we add the\n  Hooks.on(\"renderNoteConfig\", (noteConfig) => {\n    const slug = noteConfig.document.flags.ddb?.slugLink\n      ?? noteConfig.document.flags.anchor?.slug\n      ?? \"\";\n    addSlugField(noteConfig.element[0], slug);\n    noteConfig.element[0].style.height = \"auto\";\n\n    // capture notes that are now refreshed after this point\n    const closeRefreshId = Hooks.on(\"refreshNote\", async (note) => {\n      if (noteConfig.document.id !== note.document.id && noteConfig.document.id !== null) return;\n      // capture note config close hooks and trigger a check on that\n      const closeNoteId = Hooks.on(\"closeNoteConfig\", async (closeNoteConfig) => {\n        if (noteConfig.id == closeNoteConfig.id) {\n          Hooks.off(\"closeNoteConfig\", closeNoteId);\n          Hooks.off(\"refreshNote\", closeRefreshId);\n          const slugInput = closeNoteConfig.element[0].querySelector(\"input[name='slug']\");\n          const slug = slugInput.value;\n          if (slug && slug.trim() !== \"\" && slug !== closeNoteConfig.document.flags.ddb?.slugLink) {\n            logger.debug(\"Saving anchor slug\", {\n              slug,\n              note: note,\n              noteId: note._id,\n            });\n            await saveSlug(note, slugInput.value);\n          }\n        }\n      });\n    });\n  });\n\n  Hooks.on(\"dropCanvasData\", (_, dropData) => {\n    if (dropData.type !== \"JournalEntryPage\" && !dropData.anchor?.slug) return;\n\n    // when we create from the side bar we fill in the input label name to match\n    // the anchor name and set the slug value to the anchor slug\n    Hooks.once(\"renderNoteConfig\", (noteConfig) => {\n      const titleInput = noteConfig.element[0].querySelector(\"input[name='text']\");\n      titleInput.setAttribute('value', dropData.anchor.name);\n      if (dropData.anchor.slug) updateSlugField(noteConfig.element[0], dropData.anchor.slug);\n    });\n  });\n}\n","import SETTINGS from \"../../settings.js\";\n\nexport function earlySettings() {\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS(true))) {\n    game.settings.register(SETTINGS.MODULE_ID, name, data);\n  }\n}\n","import DDBMuncher from \"../../muncher/DDBMuncher.js\";\nimport { DDBSetup, DDBCookie, isSetupComplete, isValidKey } from \"../../lib/Settings.js\";\nimport { checkCobalt } from \"../../lib/Secrets.js\";\n\nexport function addMuncher(app, html) {\n  if (app.options.id == \"compendium\" && game.user.isGM) {\n    let button = $(\"<div class='header-actions action-buttons flexrow'><button class='ddb-muncher'><i class='fas fa-pastafarianism'></i> DDB Muncher</button></div>\");\n\n    button.click(async () => {\n      ui.notifications.info(\"Checking your DDB details - this might take a few seconds!\");\n      const setupComplete = isSetupComplete();\n\n      if (setupComplete) {\n        const cobaltStatus = await checkCobalt();\n        if (cobaltStatus.success) {\n          let validKey = await isValidKey();\n          if (validKey) {\n            new DDBMuncher().render(true);\n          }\n        } else {\n          new DDBCookie().render(true);\n        }\n      } else {\n        game.settings.set(\"ddb-importer\", \"settings-call-muncher\", true);\n        new DDBSetup().render(true);\n      }\n    });\n\n    const top = game.settings.get(\"ddb-importer\", \"show-munch-top\");\n    if (top) {\n      $(html).find(\".directory-header\").append(button);\n    } else {\n      $(html).find(\".directory-footer\").append(button);\n    }\n  }\n}\n","import DDBEncounterMunch from \"../../parser/encounters/DDBEncounterMunch.js\";\nimport { DDBSetup, DDBCookie, isSetupComplete, isValidKey } from \"../../lib/Settings.js\";\nimport { checkCobalt } from \"../../lib/Secrets.js\";\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport logger from \"../../logger.js\";\n\n\nexport function addEncounterMuncher (app, html) {\n  const tier = game.settings.get(\"ddb-importer\", \"patreon-tier\");\n  const tiers = PatreonHelper.getPatreonTiers(tier);\n  const enabled = game.settings.get(\"ddb-importer\", \"encounter-muncher-enabled\");\n\n  if (enabled && app.options.id == \"scenes\" && game.user.isGM && tiers.supporter) {\n    let button = $(\"<div class='header-actions action-buttons flexrow'><button class='ddb-muncher' id='ddb-encounter-munch-open'><i class='fas fa-dungeon'></i> DDB Encounter Muncher</button></div>\");\n\n    const actualButton = button.find('#ddb-encounter-munch-open');\n    actualButton.click(async () => {\n      actualButton.prop('disabled', true);\n      ui.notifications.info(\"Fetching your DDB Encounter Information, this might take a few seconds!\");\n      try {\n        const setupComplete = isSetupComplete();\n\n        if (setupComplete) {\n          const cobaltStatus = await checkCobalt();\n          if (cobaltStatus.success) {\n            let validKey = await isValidKey();\n            if (validKey) {\n              new DDBEncounterMunch().render(true);\n            }\n          } else {\n            actualButton.prop('disabled', false);\n            new DDBCookie().render(true);\n          }\n        } else {\n          actualButton.prop('disabled', false);\n          new DDBSetup().render(true);\n        }\n      } catch (e) {\n        logger.error(e);\n        actualButton.prop('disabled', false);\n      }\n    });\n\n    const top = game.settings.get(\"ddb-importer\", \"show-munch-top\");\n    if (top) {\n      $(html).find(\".directory-header\").prepend(button);\n    } else {\n      $(html).find(\".directory-footer\").append(button);\n    }\n\n    Hooks.on(\"closeApplication\", (app) => {\n      if (app instanceof DDBEncounterMunch) {\n        actualButton.prop('disabled', false);\n      }\n    });\n\n  }\n}\n","import logger from \"../../logger.js\";\n\nexport function onSocketMessage (sender, data) {\n  switch (data.action) {\n    case \"showImage\": {\n      logger.warn(\"showImage handler has been removed, use ImagePopout instead\");\n    }\n    // no default\n  }\n}\n","export function linkTables(type, html) {\n\n  // if journal\n  let content;\n  let findString;\n  switch (type) {\n    case \"journal\":\n      content = $(html).find(`div[data-edit=\"content\"]`);\n      findString = \"a.content-link[data-entity='RollTable']\";\n      break;\n    case \"item\": {\n      const tableCompendium = game.settings.get(\"ddb-importer\", \"entity-table-compendium\");\n      content = $(html).find(`div[data-edit=\"data.description.value\"]`);\n      findString = `a.content-link[data-pack='${tableCompendium}']`;\n      break;\n    }\n    // no default\n  }\n\n\n  // Add a direct roll button into DDB-imported rolltables\n  $(content)\n    .find(findString)\n    .each(async (_, link) => {\n      const data = $(link).data();\n      const pack = game.packs.get(data.pack);\n\n      const table = pack\n        ? await pack.getDocument(data.id)\n        : game.tables.get(data.id);\n\n      if (table?.flags?.ddb?.contentChunkId || pack) {\n        const button = $(\n          `<a title=\"Click: Roll | Shift-Click: Self Roll\" class=\"ddbimporter roll\"><i class=\"fas fa-dice-d20\"></i>  Roll!</a>`\n        );\n\n        $(link).after(button);\n        $(button).on(\"click\", async (event) => {\n          event.preventDefault();\n          const rollMode = event.shiftKey ? \"selfroll\" : \"roll\";\n\n          // fix: Table description is undefined\n          if (!table.description) table.description = table.name;\n\n          const draw = await table.roll();\n\n          draw.results = draw.results.map((result) => {\n            if (!result.img)\n              result.img = \"icons/svg/d20-highlight.svg\";\n            return result;\n          });\n\n          await table.toMessage(draw.results, {\n            roll: draw.roll,\n            messageOptions: {\n              speaker: game.user.name,\n              rollMode: rollMode,\n            },\n          });\n\n        });\n      }\n    });\n}\n","import utils from \"../../lib/utils.js\";\n\nfunction getBookName(bookId) {\n  const book = CONFIG.DDB.sources.find((source) => source.name.toLowerCase() == bookId.toLowerCase());\n  if (book) {\n    return book.description;\n  } else {\n    return \"\";\n  }\n}\n\nexport function imageToChat(src) {\n  const content = `<img class=\"ddbimporter-chat-image\" data-src=\"${src}\" src=\"${src}\">`;\n\n  ChatMessage.create({\n    content,\n  });\n}\n\nasync function getJournal(bookCode) {\n  const folder = await utils.getFolder(\"journal\", \"\", \"Player Handouts\", \"#515fc8\", \"#515fc8\", false);\n  const journalName = bookCode\n    ? getBookName(bookCode)\n    : \"Handout Pages\";\n  const existingJournal = game.journal.find((journal) =>\n    journal.name === journalName && journal.folder.id === folder.id\n  );\n  if (existingJournal) {\n    return existingJournal;\n  } else {\n    const journal = await JournalEntry.create(\n      {\n        name: journalName,\n        folder: folder.id,\n        ownership: {\n          default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n        },\n        flags: {\n          ddb: {\n            bookCode,\n          },\n        },\n      },\n      {\n        displaySheet: false,\n      }\n    );\n    return journal;\n  }\n}\n\nasync function createPage(journal, name, type, content) {\n  const page = {\n    _id: randomID(),\n    name,\n    type,\n    text: {},\n    title: {\n      show: true,\n    },\n    ownership: {\n      default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n    }\n  };\n  switch (type) {\n    case \"image\": {\n      page.title.show = true;\n      page.src = content;\n      break;\n    }\n    case \"text\":\n    default: {\n      page.text.content = content;\n    }\n  }\n\n  await JournalEntryPage.create(page, { parent: journal, keepId: true, displaySheet: false });\n  return journal.pages.find((jp) => page._id === jp._id);\n}\n\nexport async function createAndShowPlayerHandout(name, content, type, bookCode) {\n\n  const journal = await getJournal(bookCode);\n\n  const existingPage = journal.pages.find((page) => {\n    const nameCheck = page.name === name;\n    const typeCheck = type === \"image\"\n      ? page.src === content\n      : type === \"text\"\n        ? page.text?.content === content\n        : true;\n    return nameCheck && typeCheck;\n  });\n\n  const page = existingPage\n    ? existingPage\n    : await createPage(journal, name, type, content);\n\n  Journal.showDialog(page);\n}\n","import utils from \"../../lib/utils.js\";\nimport { createAndShowPlayerHandout, imageToChat } from \"./shared.js\";\n\nexport function linkImages(html, data) {\n  if (!game.user.isGM) return;\n  const displayImages = game.settings.get(\"ddb-importer\", \"show-image-to-players\");\n  // does this functionality exist from anther module?\n  const funcExists = !displayImages\n    || game.modules.get(\"vtta-dndbeyond\")?.active\n    || game.modules.get(\"vtta-ddb\")?.active\n    || game.modules.get(\"token-hud-art-button\")?.active;\n\n  if (funcExists) return;\n\n  // mark all images\n  $(html)\n    .find('img')\n    .each((index, element) => {\n      const showPlayersButton = $(\"<a class='ddbimporter-show-image'><i class='fas fa-eye'></i>&nbsp;Show Players Image</a>\");\n      const toChatButton = $(\"<a class='ddbimporter-to-chat'><i class='fas fa-comment'></i>&nbsp;To Chat</a>\");\n\n      $(element).wrap(\"<div class='ddbimporter-image-container'></div>\");\n      // show the button on mouseenter of the image\n      $(element)\n        .parent()\n        .mouseenter(function addHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(showPlayersButton);\n          $(showPlayersButton).click((event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            const src = $(element).attr(\"src\");\n            Dialog.confirm({\n              title: \"Would you like to create a handout for the image?\",\n              content: \"<p>Create a player viewable handout? (No will show the image only)</p>\",\n              yes: async () => {\n                const name = await utils.namePrompt(\"What would you like to call the Handout?\");\n                if (name && name !== \"\") {\n                  const bookCode = data.flags?.ddb?.bookCode;\n                  createAndShowPlayerHandout(name, src, \"image\", bookCode);\n                }\n              },\n              no: () => {\n                const popOut = new ImagePopout(src, { shareable: true });\n                popOut.shareImage();\n              },\n              defaultYes: true\n            });\n          });\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(toChatButton);\n          $(toChatButton).click((event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            imageToChat($(element).attr(\"src\"));\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function removeHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).find(\"a.ddbimporter-show-image, a.ddbimporter-to-chat\").remove();\n        });\n    });\n}\n","import logger from \"../../logger.js\";\n\nfunction copyToClipboard(text) {\n  logger.debug(\"Copy block\", text);\n  let dummy = document.createElement(\"textarea\");\n  document.body.appendChild(dummy);\n  dummy.value = text;\n  dummy.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(dummy);\n}\n\nfunction getNoteButton(name, type) {\n  return $(\n    `<a id='ddb-note-${name}' class='ddb-button'><i class='fas fa-clipboard-check'></i>&nbsp;Copy ${type} ${name} </a>`\n  );\n}\n\nfunction getTableButton() {\n  return $(\n    `<a id='ddb-table-name' class='ddb-button'><i class='fas fa-clipboard-check'></i>&nbsp;Copy table details </a>`\n  );\n}\n\nfunction buildNotes(html, data) {\n  if (!game.user.isGM) return;\n  const allow = game.settings.get(\"ddb-importer\", \"allow-note-generation\");\n  if (!allow) return;\n\n  // mark all headers\n  $(html)\n    .find(\"h1, h2, h3, h4, h5, figure, p\")\n    .each((index, element) => {\n      $(element).wrap(\"<div class='ddbimporter-note-container'></div>\");\n      // show the button on mouseenter\n      $(element)\n        .parent()\n        .mouseenter(function Hovering() {\n          if (CONFIG.DDBI.DEV.tableInUse) return;\n          const tagName = $(element).prop(\"tagName\");\n          const showStartButton = $(this).append(getNoteButton(\"start\", tagName));\n          const showEndButton = $(this).append(getNoteButton(\"end\", tagName));\n          $(showStartButton).click((e) => {\n            if (e.target.id === \"ddb-note-start\") {\n              CONFIG.DDBI.DEV.clippy = {\n                ddbId: data.document.flags.ddb.ddbId,\n                cobaltId: data.document.flags.ddb.cobaltId,\n                parentId: data.document.flags.ddb.parentId,\n                splitTag: tagName.toLowerCase(),\n                slug: data.document.flags.ddb.slug,\n                tagIdFirst: $(element).prop(\"id\"),\n                contentChunkIdStart: $(element).attr(\"data-content-chunk-id\"),\n                tagIdLast: \"\",\n                contentChunkIdStop: \"EOF\",\n                sceneName: data.document.name,\n              };\n              copyToClipboard(JSON.stringify(CONFIG.DDBI.DEV.clippy, null, 2));\n            }\n          });\n          $(showEndButton).click((e) => {\n            if (e.target.id === \"ddb-note-end\") {\n              CONFIG.DDBI.DEV.clippy.tagIdLast = $(element).prop(\"id\");\n              CONFIG.DDBI.DEV.clippy.contentChunkIdStop = $(element).attr(\"data-content-chunk-id\");\n              copyToClipboard(JSON.stringify(CONFIG.DDBI.DEV.clippy, null, 2));\n            }\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function Unhovering() {\n          $(this).find(\"#ddb-note-start\").remove();\n          $(this).find(\"#ddb-note-end\").remove();\n        });\n    });\n\n  // mark all headers\n  $(html)\n    .find(\"table\")\n    .each((index, element) => {\n      $(element).wrap(\"<div class='ddbimporter-table-container'></div>\");\n      // show the button on mouseenter\n      $(element)\n        .parent()\n        .mouseenter(function Hovering() {\n          CONFIG.DDBI.DEV.tableInUse = true;\n          const showButton = $(this).append(getTableButton());\n          $(showButton).click((e) => {\n            if (e.target.id === \"ddb-table-name\") {\n              CONFIG.DDBI.DEV.clippy = {\n                ddbId: data.flags.ddb.ddbId,\n                cobaltId: data.flags.ddb.cobaltId,\n                parentId: data.flags.ddb.parentId,\n                slug: data.flags.ddb.slug,\n                tagIdFirst: $(element).prop(\"id\"),\n                contentChunkId: $(element).attr(\"data-content-chunk-id\"),\n                sceneName: data.name,\n                tableName: \"\",\n              };\n              copyToClipboard(JSON.stringify(CONFIG.DDBI.DEV.clippy, null, 2));\n            }\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function Unhovering() {\n          $(this).find(\"#ddb-table-name\").remove();\n          CONFIG.DDBI.DEV.tableInUse = false;\n        });\n    });\n}\n\nexport default buildNotes;\n","import { DDBAdventureFlags } from \"../../lib/DDBAdventureFlags.js\";\nimport buildNotes from \"./buildNotes.js\";\n\nconst POPUPS = {\n  json: null,\n  web: null,\n};\nconst renderPopup = (type, url) => {\n  if (POPUPS[type] && !POPUPS[type].close) {\n    POPUPS[type].focus();\n    POPUPS[type].location.href = url;\n  } else {\n    const ratio = window.innerWidth / window.innerHeight;\n    const width = Math.round(window.innerWidth * 0.5);\n    const height = Math.round(window.innerWidth * 0.5 * ratio);\n    POPUPS[type] = window.open(\n      url,\n      \"ddb_sheet_popup\",\n      `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n    );\n  }\n  return true;\n};\n\nfunction adventureFlags(app, html, data) {\n  if (!game.user.isGM || !app.document.flags.ddb) return;\n  const existingLink = html.closest('.app').find('.open-adventure-ddb-importer');\n  if (existingLink.length > 0) return;\n\n  const title = `Go to DDB`;\n  const whiteTitle = (game.settings.get(\"ddb-importer\", \"link-title-colour-white\")) ? \" white\" : \"\";\n  let button = $(`<a class=\"open-adventure-ddb-importer\" title=\"${title}\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`);\n  button.click((event) => {\n    if (event.shiftKey && event.ctrlKey) {\n      new DDBAdventureFlags(app.document, {}).render(true);\n    } else {\n      event.preventDefault();\n      const flags = app.document.flags.ddb;\n      const bookSource = CONFIG.DDB.sources.find((book) => flags.bookCode.toLowerCase() === book.name.toLowerCase());\n      return renderPopup(\"web\", `https://www.dndbeyond.com/${bookSource.sourceURL}/${flags.slug}`);\n    }\n    return true;\n  });\n\n  let titleElement = html.closest('.app').find('.window-title');\n  button.insertAfter(titleElement);\n  buildNotes(html, data);\n}\n\n\nexport default adventureFlags;\n","import utils from \"../../lib/utils.js\";\nimport { createAndShowPlayerHandout } from \"./shared.js\";\n\nexport function showReadAlouds(html, data) {\n  if (!game.user.isGM) return;\n  const displayImages = game.settings.get(\"ddb-importer\", \"show-read-alouds-button\");\n  if (!displayImages) return;\n\n  // mark all read alouds\n  $(html)\n    .find(\"aside, blockquote, .read-aloud-text, .read-aloud, .adventure-read-aloud-text, .ddb-blockquote\")\n    .each((index, element) => {\n      const showPlayersJournalButton = $(\"<a class='ddbimporter-show-image'><i class='fas fa-book-open'></i>&nbsp;Create and Show Handout</a>\");\n      const toChatButton = $(\"<a class='ddbimporter-to-chat'><i class='fas fa-comment '></i>&nbsp;To Chat</a>\");\n\n      $(element).wrap(\"<div class='ddbimporter-image-container'></div>\");\n      // show the button on mouseenter of the image\n      $(element)\n        .parent()\n        .mouseenter(function addHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(showPlayersJournalButton);\n          $(showPlayersJournalButton).click(async (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            const name = await utils.namePrompt(\"What would you like to call the Handout?\");\n            if (name && name !== \"\") {\n              const bookCode = data.data?.flags?.ddb?.bookCode;\n              createAndShowPlayerHandout(name, element.outerHTML, \"text\", bookCode);\n            }\n          });\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(toChatButton);\n          $(toChatButton).click((event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            ChatMessage.create({ content: element.outerHTML });\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function removeHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).find(\"a.ddbimporter-show-image, a.ddbimporter-to-chat\").remove();\n        });\n    });\n}\n","/**\n * Shows notifcations and hints to the user\n */\nconst MARGIN = 10;\n\nconst registerNotifications = () => {\n  // register the notification global object\n\n  if ($(\"#ddbimporter-notifications\").length === 0) {\n    $(\"body\").append(`<div id=\"ddbimporter-notifications\"></div>`);\n  }\n  if ($(\"#ddbimporter-hints\").length === 0) {\n    $(\"body\").append(`<div id=\"ddbimporter-hints\"></div>`);\n  }\n\n  game.modules.get(\"ddb-importer\").api.notification = {\n    clear: () => {\n      $(\"#ddbimporter-notifications div\").fadeOut(200, () => {\n        $(\"#ddbimporter-notifications\").empty();\n      });\n    },\n    show: (message, timeout = 4000) => {\n      $(\"#ddbimporter-notifications\").css(\"left\", $(\"#players\").css(\"left\"));\n      // prettier-ignore\n      $(\"#ddbimporter-notifications\").css(\"bottom\", $(\"#players\").height() + (2 * MARGIN));\n\n      let note = $(`<div style=\"display: none\"></div>`).append(message);\n      $(\"#ddbimporter-notifications\").append(note);\n      $(note).fadeIn(200);\n\n      if (timeout)\n        setTimeout(() => {\n          $(note).fadeOut(200, () => {\n            $(note).remove();\n          });\n        }, timeout);\n      else\n        $(note).append('<p style=\"text-align: center; color: #7e7e7e; margin: 0px;\"><small>Click to close</small>');\n\n      $(note).on(\"click\", () => {\n        $(note).fadeOut(200, () => {\n          $(note).remove();\n        });\n      });\n    },\n  };\n  game.modules.get(\"ddb-importer\").api.hint = {\n    clear: () => {\n      $(\"#ddbimporter-hints div\").hide(200, () => {\n        $(\"#ddbimporter-hints\").empty();\n      });\n    },\n    show: (message, options = {}) => {\n      return new Promise((resolve) => {\n        $(\"#ddbimporter-hints\").css(\"width\", options.width ? options.width : 300);\n\n        // construct the note\n        let note = $(`<div style=\"display: none\"></div>`);\n        $(note).append(message);\n        $(note).append('<div class=\"buttons\"></div>');\n        $(\"#ddbimporter-hints\").append(note);\n        $(note).fadeIn(200);\n\n        if (!options.align) options.align = options.element ? \"RIGHT\" : \"CENTER\";\n\n        let anchor = {\n          width: 0,\n          height: 0,\n          top: Math.round(window.innerHeight / 2),\n          left: Math.round(window.innerWidth / 2),\n        };\n\n        if (options.element) {\n          anchor = Object.assign(\n            { width: $(options.element).width(), height: $(options.element).height() },\n            $(options.element).offset()\n          );\n        }\n        const noteInfo = Object.assign(\n          { width: $(\"#ddbimporter-hints\").width(), height: $(\"#ddbimporter-hints\").height() },\n          $(\"#ddbimporter-hints\").position()\n        );\n\n        switch (options.align) {\n          case \"RIGHT\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left + anchor.width + MARGIN);\n            break;\n          case \"LEFT\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left - noteInfo.width - MARGIN);\n            break;\n          case \"TOP\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top - noteInfo.height - MARGIN);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left);\n            break;\n          case \"BOTTOM\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top + anchor.height + MARGIN);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left);\n            break;\n\n          default:\n            // eslint-disable-next-line no-mixed-operators\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top - Math.round(noteInfo.height / 2));\n            // eslint-disable-next-line no-mixed-operators\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left - Math.round(noteInfo.width / 2));\n        }\n\n        if (options.buttons) {\n          for (let name of options.buttons) {\n            let btn = $(\"<button>\" + name + \"</button>\");\n            $(\"div.buttons\", note).append(btn);\n            $(btn).on(\"click\", () => {\n              $(note).fadeOut(100, () => {\n                $(note).remove();\n                resolve(name);\n              });\n            });\n          }\n        }\n        if (options.hide) {\n          $(options.hide.selector).on(options.hide.event, () => {\n            $(note).fadeOut(100, () => {\n              $(note).remove();\n              resolve(true);\n            });\n          });\n        }\n      });\n    },\n  };\n};\n\nexport default registerNotifications;\n","import \"./hooks/init/extendClasses.js\";\nimport logger from \"./logger.js\";\n\n// init hooks\nimport setupLogging from \"./hooks/init/setupLogging.js\";\nimport { registerApi } from \"./hooks/init/api.js\";\nimport { chatHooks } from \"./hooks/init/chatHooks.js\";\nimport adventureImporter from \"./hooks/init/adventureImporter.js\";\n\n// ready hooks\nimport registerSheets from \"./hooks/ready/registerSheets.js\";\nimport checkCompendiums from \"./hooks/ready/checkCompendiums.js\";\nimport registerGameSettings from \"./hooks/ready/registerGameSettings.js\";\nimport { itemSheets } from \"./hooks/ready/items.js\";\nimport checkVersion from \"./hooks/ready/checkVersion.js\";\nimport { loadDDBConfig } from \"./hooks/ready/ddbConfig.js\";\nimport { anchorInjection } from \"./hooks/ready/anchorInjection.js\";\n\n// monster muncher\nimport { earlySettings } from \"./hooks/renderMuncher/earlySettings.js\";\nimport { addMuncher } from \"./hooks/renderMuncher/addMuncher.js\";\nimport { addEncounterMuncher } from \"./hooks/renderMuncher/addEncounterMuncher.js\";\n\n// socket messaging\nimport { onSocketMessage } from \"./hooks/socket/onSocketMessage.js\";\n\n// image hooks\nimport { linkTables } from \"./hooks/renderJournalSheet/linkTables.js\";\nimport { linkImages } from \"./hooks/renderJournalSheet/linkImages.js\";\nimport adventureFlags from \"./hooks/renderJournalSheet/adventure.js\";\nimport { showReadAlouds } from \"./hooks/renderJournalSheet/linkReadAlouds.js\";\n\nimport registerNotifications from \"./lib/Notification.js\";\n\nimport { activateUpdateHooks } from \"./updater/character.js\";\n\n\n// foundry is initializing\nexport function init() {\n  earlySettings();\n  setupLogging();\n  registerApi();\n  chatHooks();\n  adventureImporter();\n  logger.info(\"Init complete\");\n}\n\n// foundry is ready\nexport function onceReady() {\n  // register the game settings\n  registerGameSettings();\n\n  // check for valid compendiums\n  checkCompendiums();\n\n  // notificaitons\n  registerNotifications();\n\n  // delay the startup just a tiny little bit\n  setTimeout(() => {\n    // register the D&DBeyond Button on the character sheets\n    registerSheets();\n    itemSheets();\n    checkVersion();\n    loadDDBConfig();\n    activateUpdateHooks();\n\n  }, 500);\n\n  anchorInjection();\n  logger.info(\"OnceReady complete\");\n}\n\nexport function onReady() {\n  game.socket.on(\"module.ddb-importer\", (data) => {\n    if (data.sender === game.user.data._id) {\n      return;\n    }\n\n    const sender = game.users.get(data.sender);\n    delete data.sender;\n    onSocketMessage(sender, data);\n  });\n}\n\nexport function renderSidebarTab(app, html) {\n  addEncounterMuncher(app, html);\n  addMuncher(app, html);\n}\n\nexport function renderItemSheet(sheet, html) {\n  linkTables(\"item\", html);\n  // link images disabled un v10\n  // linkImages(html);\n}\n\nexport function renderJournalSheet(sheet, html, data) {\n  if (data.cssClass !== \"editable\") {\n    linkTables(\"journal\", html);\n    linkImages(html, data);\n    showReadAlouds(html, data);\n  }\n  adventureFlags(sheet, html, data);\n}\n","import DDBSources from \"../lib/DDBSources.js\";\nimport logger from \"../logger.js\";\nimport FileHelper from \"./FileHelper.js\";\n\n/**\n   * Extracts all notes that have been placed by ddb-importer\n   * Creates the expected data structure for the database by\n   * getting the real label from the appropriate Journal Entry\n   * @param {Scene} scene The scene to extract the notes from\n  */\nfunction getNotes(scene, bookCode) {\n  // get all notes in the Journal related to this scene\n  const relatedJournalEntries = game.journal.filter((journal) =>\n    journal.flags.ddb?.bookCode && journal.flags.ddb.bookCode === bookCode\n  );\n\n  // get all notes placed on the map\n  const journalNotes = scene.notes\n    // the user might have placed a note, unless it is based on an imported Journal Entry, we will not carry\n    // that one over\n    .filter((note) => relatedJournalEntries.some((journal) => journal.id === note.entryId))\n    .map((note) => {\n      const journal = relatedJournalEntries.find((journal) => journal.id === note.entryId);\n      const page = note.pageId\n        ? journal.pages.find((page) => page._id === note.pageId)\n        : journal;\n      const index = parseInt(journal.flags.ddb.ddbId);\n      // removed un-needed userdata\n      const pageFlags = page.flags.ddb;\n      const noteFlags = note.flags.ddb;\n      const flags = duplicate(pageFlags);\n      mergeObject(flags, noteFlags, { overwrite: true, insertKeys: true, insertValues: true });\n      if (flags?.userData) delete flags.userData;\n      const label = flags?.labelName && flags.labelName.trim() !== \"\"\n        ? flags.labelName\n        : noteFlags?.slugLink && noteFlags.slugLink.trim() !== \"\"\n          ? note.text\n          : page.name;\n\n      logger.warn(\"note details\", {\n        note,\n        page,\n        icon: note.texture.src,\n        journal,\n        flags,\n        pageFlags,\n        noteFlags,\n        label,\n      });\n\n      return {\n        index,\n        pageId: page._id,\n        texture: note.texture,\n        label,\n        flags: {\n          ddb: flags,\n        },\n        iconSize: note.iconSize,\n        iconTint: note.iconTint,\n        textColor: note.textColor,\n        textAnchor: note.textAnchor,\n        x: note.x,\n        y: note.y,\n      };\n    })\n    .reduce((notes, note) => {\n      const idx = notes.find((n) => n.index === note.index && n.pageId === note.pageId && note.label === n.label);\n      if (idx) {\n        idx.positions.push({ x: note.x, y: note.y });\n      } else {\n        const n = {\n          label: note.label,\n          texture: note.texture,\n          flags: note.flags,\n          index: note.index,\n          iconSize: note.iconSize,\n          iconTint: note.iconTint,\n          textColor: note.textColor,\n          textAnchor: note.textAnchor,\n          positions: [{ x: note.x, y: note.y }]\n        };\n        notes.push(n);\n      }\n      return notes;\n    }, [])\n    .sort((a, b) => {\n      return a.index - b.index;\n    });\n\n  const unLinkedNotes = scene.notes\n    .filter((note) => !note.entryId)\n    .map((note) => ({\n      label: note.text,\n      texture: note.texture,\n      flags: { ddb: {\n        noLink: true,\n      } },\n      iconSize: note.iconSize,\n      iconTint: note.iconTint,\n      textColor: note.textColor,\n      textAnchor: note.textAnchor,\n      positions: [{ x: note.x, y: note.y }]\n    }));\n\n  const notes = journalNotes.concat(unLinkedNotes)\n    .map((note) => ({\n      label: note.label,\n      flags: note.flags,\n      texture: note.texture,\n      positions: note.positions,\n      iconSize: note.iconSize,\n      iconTint: note.iconTint,\n      textColor: note.textColor,\n      textAnchor: note.textAnchor,\n    }));\n\n  return notes;\n}\n\n/**\n * Prepares the scene data for download\n * @param {Scene} scene\n */\nexport function collectSceneData(scene, bookCode) {\n  const notes = getNotes(scene, bookCode);\n\n  const data = {\n    flags: scene.flags,\n    background: deepClone(scene.background),\n    name: scene.name,\n    navName: scene.navName,\n    // dimensions\n    width: scene.width,\n    height: scene.height,\n    // grid\n    grid: scene.grid,\n    padding: scene.padding,\n    // initial\n    initial: scene.initial,\n    // customization\n    backgroundColor: scene.backgroundColor,\n    walls: scene.walls.map((wall) => {\n      const w = wall.toObject();\n      delete w._id;\n      return w;\n    }),\n    //\n    drawings: scene.drawings,\n    weather: scene.weather,\n    // lights\n    darkness: scene.darkness,\n    tokenVision: scene.tokenVision,\n    globalLight: scene.globalLight,\n    globalLightThreshold: scene.globalLightThreshold,\n    lights: scene.lights.map((light) => {\n      const l = light.toObject();\n      delete l._id;\n      return l;\n    }),\n  };\n\n  delete data.background.src;\n\n  if (!data.flags.ddb) data.flags.ddb = {};\n  data.flags.ddb.foundryVersion = game.version;\n\n  if (data.flags.ddb.tokens) delete data.flags.ddb.tokens;\n  data.flags.ddb.tokens = scene.tokens\n    .filter((token) => !token.actorLink)\n    .map((token) => {\n      let result = {\n        _id: token._id,\n        name: token.name,\n        width: token.width,\n        height: token.height,\n        scale: token.scale,\n        x: token.x,\n        y: token.y,\n        disposition: token.disposition,\n        flags: token.flags,\n        actorLink: false,\n        bar1: { attribute: \"attributes.hp\" },\n        effects: [],\n        elevation: token.elevation,\n        hidden: token.hidden,\n        tint: token.tint,\n        actorData: token.actorData,\n        light: token.light,\n      };\n\n      // the token actor flags here help us match up actors using the DDB ID\n      if (token.actor) {\n        if (token.actor.flags.ddbimporter) {\n          result.flags.ddbActorFlags = token.actor.flags.ddbimporter;\n          result.flags.ddbActorFlags.name = token.actor.prototypeToken?.name ? token.actor.prototypeToken.name : token.actor.name;\n        }\n      }\n\n      return result;\n    });\n\n\n  // removed un-needed userdata\n  if (data.flags.ddb?.userData) delete data.flags.ddb.userData;\n\n  data.flags.ddb.notes = notes;\n  data.flags.ddb.img = `assets/${scene.background.src.split(\"assets/\").pop()}`;\n\n  if (!data.flags.ddbimporter) data.flags.ddbimporter = {};\n  data.flags.ddbimporter['version'] = game.modules.get(\"ddb-importer\").version;\n\n  return data;\n}\n\nfunction getCompendiumScenes(compendiumCollection, selectedId = null, selectedName = null) {\n  let scenes = [];\n  const compendium = game.packs.find((pack) => pack.collection === compendiumCollection);\n  if (compendium) {\n    compendium.index.forEach((scene) => {\n      const option = {\n        _id: scene._id,\n        name: scene.name,\n        selected: (selectedId && selectedId == scene._id) || (selectedName && selectedName.trim().includes(scene.name)),\n      };\n      scenes.push(option);\n    });\n  }\n\n  return scenes;\n}\n\nconst ddbFlags = [\"ddb\", \"ddbimporter\"];\nconst allowedFlags = [\"stairways\", \"perfect-vision\", \"dynamic-illumination\"];\n\nexport class SceneEnhancerExport extends Application {\n\n  // eslint-disable-next-line complexity\n  constructor(scene) {\n    super();\n    this.sceneSet = false;\n    this.compendiumBookSet = false;\n    this.downloadBookSet = false;\n\n    this.scene = scene;\n    const sceneExportFlags = this.scene.flags.ddbimporter?.export;\n    const lastCompendium = localStorage.getItem(\"ddb-last-compendium\");\n    const lastBook = localStorage.getItem(\"ddb-last-book\");\n\n    this.description = sceneExportFlags?.description || \"\";\n    this.url = sceneExportFlags?.url || \"\";\n    this.compendium = sceneExportFlags?.compendium ?? lastCompendium;\n    this.compendiumSceneId = sceneExportFlags?.scene;\n    this.bookCode = this.scene.flags?.ddb?.bookCode.toLowerCase() ?? lastBook;\n    this.compendiumScenes = this.compendium ? getCompendiumScenes(this.compendium, this.compendiumSceneId, this.scene.name) : [];\n\n    if (this.compendiumScenes && this.compendiumScenes.some((s) => s.selected === true)) this.sceneSet = true;\n\n    this.compendiums = game.packs\n      .filter((pack) => pack.metadata?.type === \"Scene\")\n      .map((pack) => {\n        if (this.compendium && this.compendium === pack.collection) pack.selected = true;\n        else pack.selected = false;\n        return pack;\n      })\n      .sort((a, b) => a.metadata.label.localeCompare(b.metadata.label));\n\n    const selectedBooks = this.bookCode\n      ? CONFIG.DDB.sources.filter((s) => s.name.toLowerCase() === this.bookCode).map((s) => s.id)\n      : [];\n    this.books = DDBSources.getSourcesLookups(selectedBooks).map((b) => {\n      if (b.selected) {\n        this.compendiumBookSet = true;\n        this.downloadBookSet = true;\n      }\n      return {\n        code: b.acronym.toLowerCase(),\n        name: b.label,\n        selected: b.selected,\n      };\n    }).sort((a, b) => a.name.localeCompare(b.name));\n\n    this.exportOptionsCompendium = {\n      actors: sceneExportFlags?.actors !== undefined ? sceneExportFlags.actors : true,\n      notes: sceneExportFlags?.notes !== undefined ? sceneExportFlags.notes : true,\n      lights: sceneExportFlags?.lights !== undefined ? sceneExportFlags.lights : false,\n      walls: sceneExportFlags?.walls !== undefined ? sceneExportFlags.walls : false,\n      drawings: sceneExportFlags?.drawings !== undefined ? sceneExportFlags.drawings : false,\n      config: sceneExportFlags?.config !== undefined ? sceneExportFlags.config : false,\n    };\n    this.exportOptionsDownload = {\n      actors: sceneExportFlags?.actors !== undefined ? sceneExportFlags.actors : true,\n      notes: sceneExportFlags?.notes !== undefined ? sceneExportFlags.notes : true,\n      lights: sceneExportFlags?.lights !== undefined ? sceneExportFlags.lights : true,\n      walls: sceneExportFlags?.walls !== undefined ? sceneExportFlags.walls : true,\n      drawings: sceneExportFlags?.drawings !== undefined ? sceneExportFlags.drawings : true,\n      config: sceneExportFlags?.config !== undefined ? sceneExportFlags.config : true,\n    };\n    this.compendiumDisabled = !this.sceneSet || !this.compendiumBookSet;\n    this.downloadDisabled = !this.downloadBookSet || this.url === \"\" || !this.url.startsWith(\"http\");\n  }\n\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.baseApplication = \"SceneEnhancerExport\";\n    options.id = \"ddb-importer-scene-enhancer\";\n    options.template = \"modules/ddb-importer/handlebars/enhance-export.hbs\";\n    options.width = 500;\n    options.resizable = false;\n    options.height = \"auto\";\n    options.classes = [\"ddb-muncher\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"div\", initial: \"compendium\" }];\n    return options;\n  }\n\n  get title() {\n    return `DDB Importer Scene Enhancer Exporter: ${this.scene.name}`;\n  }\n\n  /** @override */\n  getData() {\n    let templateData = {\n      sceneName: this.scene.name,\n      compendiums: this.compendiums,\n      compendiumScenes: this.compendiumScenes,\n      description: this.description,\n      books: this.books,\n      url: this.url,\n      exportOptionsCompendium: this.exportOptionsCompendium,\n      exportOptionsDownload: this.exportOptionsDownload,\n      compendiumDisabled: this.compendiumDisabled,\n      downloadDisabled: this.downloadDisabled,\n    };\n\n    return templateData;\n  }\n\n  checkState() {\n    if (this.sceneSet && this.compendiumBookSet) {\n      this.compendiumDisabled = false;\n      $(\"#compendium-button\").prop(\"disabled\", false);\n    } else {\n      $(\"#compendium-button\").prop(\"disabled\", true);\n    }\n    if (this.downloadBookSet && this.url !== \"\" && this.url.startsWith(\"http\")) {\n      this.downloadDisabled = false;\n      $(\"#download-button\").prop(\"disabled\", false);\n    } else {\n      $(\"#download-button\").prop(\"disabled\", true);\n    }\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    $(\"#ddb-importer-scene-enhancer\").css(\"height\", \"auto\");\n\n    html.find('#compendium-form').submit(async (event) => {\n      const form = document.querySelector('#compendium-form');\n      const data = Object.fromEntries(new FormData(form).entries());\n      this.buttonClick(event, data);\n    });\n\n    html.find('#download-form').submit(async (event) => {\n      const form = document.querySelector('#download-form');\n      const data = Object.fromEntries(new FormData(form).entries());\n      this.buttonClick(event, data);\n    });\n\n    html.find(\"#select-compendium\").on(\"change\", async () => {\n      const compendiumSelection = html.find(\"#select-compendium\");\n\n      // get selected campaign from html selection\n      const compendiumCollection = compendiumSelection[0].selectedOptions[0]\n        ? compendiumSelection[0].selectedOptions[0].value\n        : undefined;\n\n      let sceneList = \"\";\n\n      if (compendiumCollection && compendiumCollection !== \"\") {\n        const scenes = getCompendiumScenes(compendiumCollection);\n        sceneList = `<option value=\"\">Select...</option>`;\n        scenes.forEach((scene) => {\n          const selected = scene.selected ? \" selected\" : \"\";\n          sceneList += `<option value=\"${scene._id}\"${selected}>${scene.name}</option>`;\n        });\n      }\n      const sceneSelection = html.find(\"#select-scene\");\n      sceneSelection[0].innerHTML = sceneList;\n    });\n\n    html.find(\"#select-scene\").on(\"change\", async () => {\n      const sceneSelection = html.find(\"#select-scene\");\n      const scene = sceneSelection[0].selectedOptions[0]\n        ? sceneSelection[0].selectedOptions[0].value\n        : undefined;\n      this.sceneSet = scene && scene !== \"\";\n      this.checkState();\n    });\n\n    html.find(\"#select-book-compendium\").on(\"change\", async () => {\n      const bookSelection = html.find(\"#select-book-compendium\");\n      const book = bookSelection[0].selectedOptions[0]\n        ? bookSelection[0].selectedOptions[0].value\n        : undefined;\n      this.compendiumBookSet = book && book !== \"\";\n      this.checkState();\n    });\n\n    html.find(\"#select-book-download\").on(\"change\", async () => {\n      const bookSelection = html.find(\"#select-book-download\");\n      const book = bookSelection[0].selectedOptions[0]\n        ? bookSelection[0].selectedOptions[0].value\n        : undefined;\n      this.downloadBookSet = book && book !== \"\";\n      this.checkState();\n    });\n\n    html.find(\"#download-url\").on(\"change\", async () => {\n      const bookSelection = html.find(\"#download-url\");\n      const url = bookSelection[0].value;\n      if (url && url !== \"\" && url.startsWith(\"http\")) {\n        this.url = url;\n      }\n      this.checkState();\n    });\n\n  }\n\n\n  async buttonClick(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n\n    let sceneFlags = duplicate(this.scene.flags);\n\n    if (!sceneFlags.ddb) sceneFlags.ddb = {};\n    if (!sceneFlags.ddbimporter) sceneFlags.ddbimporter = {};\n    if (!sceneFlags.ddbimporter.export) sceneFlags.ddbimporter.export = {};\n\n    sceneFlags.ddb[\"bookCode\"] = formData[\"select-book\"];\n    localStorage.setItem(\"ddb-last-book\", formData[\"select-book\"]);\n    sceneFlags.ddbimporter.export['description'] = formData[\"description\"];\n    sceneFlags.ddbimporter.export['actors'] = formData[\"export-actors\"] == \"on\";\n    sceneFlags.ddbimporter.export['notes'] = formData[\"export-notes\"] == \"on\";\n    sceneFlags.ddbimporter.export['lights'] = formData[\"export-lights\"] == \"on\";\n    sceneFlags.ddbimporter.export['walls'] = formData[\"export-walls\"] == \"on\";\n    sceneFlags.ddbimporter.export['drawings'] = formData[\"export-drawings\"] == \"on\";\n    sceneFlags.ddbimporter.export['config'] = formData[\"export-config\"] == \"on\";\n\n    if (formData[\"download-url\"]) {\n      sceneFlags.ddbimporter.export['url'] = formData[\"download-url\"];\n    } else {\n      sceneFlags.ddbimporter.export['compendium'] = formData[\"select-compendium\"];\n      localStorage.setItem(\"ddb-last-compendium\", formData[\"select-compendium\"]);\n      sceneFlags.ddbimporter.export['scene'] = formData[\"select-scene\"];\n    }\n\n    await this.scene.update({ flags: sceneFlags });\n\n    let sceneData = collectSceneData(this.scene, formData[\"select-book\"]);\n\n    Object.keys(sceneData.flags).forEach((flag) => {\n      if (!allowedFlags.includes(flag) && !ddbFlags.includes(flag)) delete sceneData.flags[flag];\n    });\n\n    if (formData[\"export-actors\"] !== \"on\") delete sceneData.flags.ddb.tokens;\n    if (formData[\"export-notes\"] !== \"on\") delete sceneData.flags.ddb.notes;\n    if (formData[\"export-lights\"] !== \"on\") delete sceneData.lights;\n    if (formData[\"export-walls\"] !== \"on\") delete sceneData.walls;\n    if (formData[\"export-drawings\"] !== \"on\") delete sceneData.drawings;\n    if (formData[\"export-config\"] !== \"on\") {\n      delete sceneData.navName;\n      delete sceneData.width;\n      delete sceneData.height;\n      delete sceneData.grid;\n      delete sceneData.gridDistance;\n      delete sceneData.gridType;\n      delete sceneData.gridUnits;\n      delete sceneData.shiftX;\n      delete sceneData.shiftY;\n      delete sceneData.padding;\n      delete sceneData.weather;\n      delete sceneData.darkness;\n      delete sceneData.tokenVision;\n      delete sceneData.globalLight;\n      delete sceneData.globalLightThreshold;\n      delete sceneData.backgroundColor;\n      delete sceneData.initial;\n      Object.keys(sceneData.flags).forEach((flag) => {\n        if (!ddbFlags.includes(flag)) delete sceneData.flags[flag];\n      });\n    }\n\n    logger.debug(sceneData);\n    const name = sceneData.name.replace(/[^a-z0-9_-]/gi, '').toLowerCase();\n    const sceneRef = `ddb-enhanced-scene-${name}`;\n    FileHelper.download(JSON.stringify(sceneData, null, 4), `${sceneRef}.json`, \"application/json\");\n\n    this.close();\n  }\n}\n\n","// import utils from \"../../lib/utils.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport { collectSceneData, SceneEnhancerExport } from \"../../lib/SceneEnhancerExport.js\";\n\nfunction getSceneId(li) {\n  return $(li).attr(\"data-document-id\")\n    ? $(li).attr(\"data-document-id\")\n    : $(li).attr(\"data-scene-id\")\n      ? $(li).attr(\"data-scene-id\")\n      : $(li).attr(\"data-entity-id\");\n}\n\nexport default function (html, contextOptions) {\n  contextOptions.push({\n    name: \"ddb-importer.scenes.download\",\n    callback: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      const data = collectSceneData(scene, scene.flags.ddb.bookCode);\n      const bookCode = `${scene.flags.ddb.bookCode}-${scene.flags.ddb.ddbId}`;\n      const cobaltId = scene.flags.ddb?.cobaltId ? `-${scene.flags.ddb.cobaltId}` : \"\";\n      const parentId = scene.flags.ddb?.parentId ? `-${scene.flags.ddb.parentId}` : \"\";\n      const contentChunkId = scene.flags.ddb?.contentChunkId ? `-${scene.flags.ddb.contentChunkId}` : \"\";\n      const name = scene.name.replace(/[^a-z0-9_-]/gi, '').toLowerCase();\n      const sceneRef = `${bookCode}${cobaltId}${parentId}${contentChunkId}-${name}`;\n      return FileHelper.download(JSON.stringify(data, null, 4), `${sceneRef}-scene.json`, \"application/json\");\n    },\n    condition: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      const sceneDownload = game.settings.get(\"ddb-importer\", \"allow-scene-download\");\n      const allowDownload = game.user.isGM && sceneDownload && scene.flags.ddb?.ddbId;\n      return allowDownload;\n    },\n    icon: '<i class=\"fas fa-share-alt\"></i>',\n  });\n\n  contextOptions.push({\n    name: \"ddb-importer.scenes.third-party-download\",\n    callback: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      new SceneEnhancerExport(scene).render(true);\n    },\n    condition: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      const sceneDownload = game.settings.get(\"ddb-importer\", \"allow-third-party-scene-download\");\n      const allowDownload = game.user.isGM && sceneDownload && !scene.flags.ddb?.ddbId;\n      return allowDownload;\n    },\n    icon: '<i class=\"fas fa-share-alt\"></i>',\n  });\n}\n","import {\n  init,\n  onReady,\n  onceReady,\n  renderSidebarTab,\n  renderItemSheet,\n  renderJournalSheet,\n} from \"./hooks.js\";\nimport extendSceneNavigationContext from \"./hooks/navigationContext/extendSceneNavigationContext.js\";\n\n// register hooks\nHooks.once(\"init\", init);\nHooks.once(\"ready\", onceReady);\nHooks.on(\"ready\", onReady);\nHooks.on(\"renderSidebarTab\", renderSidebarTab);\nHooks.on(\"renderJournalPageSheet\", renderJournalSheet);\nHooks.on(\"renderItemSheet\", renderItemSheet);\nHooks.on(\"getSceneNavigationContext\", extendSceneNavigationContext);\nHooks.on(\"getSceneDirectoryEntryContext\", extendSceneNavigationContext);\n\n// console.warn(\"SILENT MODE FOR DEBUG\");\n// const includeRgx = new RegExp(\"/module/ddb-importer/\");\n// CONFIG.compatibility.includePatterns.push(includeRgx);\n"],"names":[],"sourceRoot":""}